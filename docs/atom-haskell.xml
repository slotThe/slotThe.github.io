<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Tony Zorman · Blog</title>
    <link href="https://tony-zorman.com/atom-haskell.xml" rel="self" />
    <link href="https://tony-zorman.com" />
    <id>https://tony-zorman.com/atom-haskell.xml</id>
    <author>
        <name>Tony Zorman</name>
        
        <email>tonyzorman@mailbox.org</email>
        
    </author>
    <updated>2024-07-20T00:00:00Z</updated>
    <entry>
    <title>Integrating KaTeX Into Hakyll</title>
    <link href="https://tony-zorman.com/posts/katex-with-hakyll.html" />
    <id>https://tony-zorman.com/posts/katex-with-hakyll.html</id>
    <published>2024-07-20T00:00:00Z</published>
    <updated>2024-07-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2024-07-20
      
      
        &thinsp;·&thinsp; last modified: 2025-02-01
      
      
        &thinsp;·&thinsp; <span title="1208 words">5 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'haskell'." href="/tags/haskell.html" rel="tag">haskell</a>, <a title="All pages tagged 'hakyll'." href="/tags/hakyll.html" rel="tag">hakyll</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>
</p>
<p>Being quite into mathematics,
I sometimes blog about it.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>
There are very capable solutions for rendering LaTeX in HTML documents out there,
which in particular solve the problem of properly aligning the fragments with the rest of the text.
One of them is KaTeX,
advertising itself to be easily executed on the server-side,
avoiding the use of extraneous client-side JavaScript.
Integrating it with Hakyll turned out to be relatively straightforward,
yet I haven’t seen an actual implementation anywhere;
this post is supposed to fill that gap.</p>
<!--more-->
<h2 id="my-dark-mathjax-past">My dark MathJax past</h2>
<p>One of my quite strongly held opinions is that,
for static websites such as this one,
client-side LaTeX rendering is completely unnecessary,
and actually just a waste of resources.
As a result, I’ve been using MathJax
to insert LaTeX fragments into the HTML after it’s compiled from Markdown.
This setup<!--
-->—stolen essentially verbatim from <a href="https://github.com/gwern/gwern.net/blob/c3d90bf1d6248d5e80dc030304c72b3f4a234455/build/sync.sh#L421">Gwern</a>—<!--
-->uses the now deprecated <a href="https://github.com/pkra/mathjax-node-page">mathjax-node-page</a>
to crawl through the already rendered HTML pages, and, upon recognising a math fragment,
replaces that text with the rendered formula.
The call to <code>mathjax-node-page</code> is trivial to parallelise on a per-file level with something like <a href="https://www.gnu.org/software/parallel/">GNU parallel</a>,
and so the whole thing actually works quite well.</p>
<p>However, the fact that this is “external” to Pandoc’s pipeline
and requires a separate <code>build.sh</code> file to be created has always felt a bit awkward to me.<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>
Plus, Hakyll is already capable of using GHC’s parallel runtime<!--
-->—why outsource a part of that to an external tool?
At some point, the annoyance I felt at this became stronger than the inertia my old setup had, so here we are.</p>
<h2 id="a-brighter-future-with-katex">A brighter future with KaTeX</h2>
<p>Naturally, when you change something you <em>really</em> want to change something<!--
-->—at least I do—<!--
-->so instead of using MathJax v3’s native support for these kinds of things,
why not try something new?
An often cited alternative to MathJax is <a href="https://katex.org/">KaTeX</a>,
yet another JavaScript library that promises decent maths rendering on the web.
This one is pretty good, though;
it’s supposed to be faster than MathJax,
and has “server side rendering” as a big bullet point on its landing page.
Sounds exactly like what I’m looking for.</p>
<p>KaTeX has a CLI of the same name,
but booting up the node runtime for every single maths fragment sounds perfectly dreadful to me,
so let’s not do that.
As such, one probably can’t avoid writing at least a little bit of JavaScript.
Thankfully, integrating KaTeX into Pandoc itself seems to be a well-trodden path,
so other people have already done this for me.
For example,
<a href="https://github.com/jgm/pandoc/issues/6651">pandoc#6651</a>
has a tiny script—essentially just calling <code>katex.​render​To​String</code>—that
is fed maths on stdin,
and then produces HTML on stdout.
Slightly adjusted to support inline and display maths, it looks like this:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> { readLines } <span class="im">from</span> <span class="st">&quot;https://deno.land/std@0.224.0/io/mod.ts&quot;</span><span class="op">;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> katex <span class="im">from</span> <span class="st">&quot;https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/katex.mjs&quot;</span><span class="op">;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> <span class="cf">await</span> (<span class="kw">const</span> line <span class="kw">of</span> <span class="fu">readLines</span>(Deno<span class="op">.</span><span class="at">stdin</span>)) {</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>  <span class="cf">try</span> {</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> DISPLAY    <span class="op">=</span> <span class="st">&quot;:DISPLAY &quot;</span><span class="op">;</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> useDisplay <span class="op">=</span> line<span class="op">.</span><span class="fu">startsWith</span>(DISPLAY)<span class="op">;</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> cleanLine  <span class="op">=</span> useDisplay <span class="op">?</span> line<span class="op">.</span><span class="fu">substring</span>(DISPLAY<span class="op">.</span><span class="at">length</span>) <span class="op">:</span> line<span class="op">;</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    <span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(katex<span class="op">.</span><span class="fu">renderToString</span>(cleanLine<span class="op">,</span> {</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>      displayMode<span class="op">:</span> useDisplay<span class="op">,</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>      strict<span class="op">:</span> <span class="st">&quot;error&quot;</span><span class="op">,</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>      throwOnError<span class="op">:</span> <span class="kw">true</span><span class="op">,</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>    }))<span class="op">;</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>  } <span class="cf">catch</span> (error) {</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>    <span class="cf">throw</span> <span class="kw">new</span> <span class="bu">Error</span>(<span class="vs">`Input: </span><span class="sc">${</span>line<span class="sc">}\n\n</span><span class="vs">Error: </span><span class="sc">${</span>error<span class="sc">}</span><span class="vs">`</span>)<span class="op">;</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Having this in place,
all that’s left is to crawl through Pandoc’s AST,
and feed each maths fragment to KaTeX.
Transforming its AST is something that Pandoc does
<a href="./pygmentising-hakyll.html">very</a> <a href="./hakyll-and-bibtex.html">well</a>,
so the code is usually swiftly written.
Indeed, both the <a href="https://hackage.haskell.org/package/pandoc-types/docs/Text-Pandoc-Definition.html#t:Block">Block</a> and <a href="https://hackage.haskell.org/package/pandoc-types/docs/Text-Pandoc-Definition.html#t:Inline">Inline</a> types
have a <code>Math</code> constructor which we can match on.<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a></p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Text</span>    <span class="kw">qualified</span> <span class="kw">as</span> <span class="dt">T</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Text.IO</span> <span class="kw">qualified</span> <span class="kw">as</span> <span class="dt">T</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">GHC.IO.Handle</span> (<span class="dt">BufferMode</span> (<span class="dt">NoBuffering</span>), <span class="dt">Handle</span>, hSetBuffering)</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Hakyll</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">System.Process</span> (runInteractiveCommand)</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Text.Pandoc.Definition</span> (<span class="dt">Block</span> (..), <span class="dt">Inline</span> (..), <span class="dt">MathType</span> (..), <span class="dt">Pandoc</span>)</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Text.Pandoc.Walk</span> (walk, walkM)</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="ot">hlKaTeX ::</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> <span class="dt">Pandoc</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>hlKaTeX pandoc <span class="ot">=</span> recompilingUnsafeCompiler <span class="kw">do</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>  (hin, hout, _, _) <span class="ot">&lt;-</span> runInteractiveCommand <span class="st">&quot;deno run scripts/math.ts&quot;</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>  hSetBuffering hin  <span class="dt">NoBuffering</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>  hSetBuffering hout <span class="dt">NoBuffering</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>  (<span class="ot">`walkM`</span> pandoc) \<span class="kw">case</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Math</span> mathType (T.unwords <span class="op">.</span> T.lines <span class="op">.</span> T.strip <span class="ot">-&gt;</span> text) <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>      <span class="kw">let</span><span class="ot"> math ::</span> <span class="dt">Text</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>            <span class="ot">=</span> foldl' (\str (repl, with) <span class="ot">-&gt;</span> T.replace repl with str)</span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>                     <span class="kw">case</span> mathType <span class="kw">of</span></span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>                       <span class="dt">DisplayMath</span><span class="co">{-s-}</span> <span class="ot">-&gt;</span> <span class="st">&quot;:DISPLAY &quot;</span> <span class="op">&lt;&gt;</span> text</span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>                       <span class="dt">InlineMath</span><span class="co">{-s-}</span>  <span class="ot">-&gt;</span>                text</span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>                     macros</span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a>      T.hPutStrLn hin math</span>
<span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a>      <span class="dt">RawInline</span> <span class="st">&quot;html&quot;</span> <span class="op">&lt;$&gt;</span> getResponse hout</span>
<span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a>    block <span class="ot">-&gt;</span> <span class="fu">pure</span> block</span>
<span id="cb2-26"><a href="#cb2-26" aria-hidden="true" tabindex="-1"></a> <span class="kw">where</span></span>
<span id="cb2-27"><a href="#cb2-27" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- KaTeX might sent the input back as multiple lines if it involves a</span></span>
<span id="cb2-28"><a href="#cb2-28" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- matrix of coordinates. The big assumption here is that it does so only</span></span>
<span id="cb2-29"><a href="#cb2-29" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- when matrices—or other such constructs—are involved, and not when it</span></span>
<span id="cb2-30"><a href="#cb2-30" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- sends back &quot;normal&quot; HTML.</span></span>
<span id="cb2-31"><a href="#cb2-31" aria-hidden="true" tabindex="-1"></a><span class="ot">  getResponse ::</span> <span class="dt">Handle</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Text</span></span>
<span id="cb2-32"><a href="#cb2-32" aria-hidden="true" tabindex="-1"></a>  getResponse handle <span class="ot">=</span> go <span class="st">&quot;&quot;</span></span>
<span id="cb2-33"><a href="#cb2-33" aria-hidden="true" tabindex="-1"></a>   <span class="kw">where</span></span>
<span id="cb2-34"><a href="#cb2-34" aria-hidden="true" tabindex="-1"></a><span class="ot">    go ::</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Text</span></span>
<span id="cb2-35"><a href="#cb2-35" aria-hidden="true" tabindex="-1"></a>    go <span class="op">!</span>str <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb2-36"><a href="#cb2-36" aria-hidden="true" tabindex="-1"></a>      more <span class="ot">&lt;-</span> (str <span class="op">&lt;&gt;</span>) <span class="op">&lt;$&gt;</span> T.hGetLine handle</span>
<span id="cb2-37"><a href="#cb2-37" aria-hidden="true" tabindex="-1"></a>      <span class="kw">if</span> <span class="st">&quot;&gt;&quot;</span> <span class="ot">`T.isSuffixOf`</span> more  <span class="co">-- end of HTML snippet</span></span>
<span id="cb2-38"><a href="#cb2-38" aria-hidden="true" tabindex="-1"></a>      <span class="kw">then</span> <span class="fu">pure</span> more</span>
<span id="cb2-39"><a href="#cb2-39" aria-hidden="true" tabindex="-1"></a>      <span class="kw">else</span> go   more</span>
<span id="cb2-40"><a href="#cb2-40" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-41"><a href="#cb2-41" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- I know that one could supply macros to KaTeX directly, but where is the</span></span>
<span id="cb2-42"><a href="#cb2-42" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- fun in that‽</span></span>
<span id="cb2-43"><a href="#cb2-43" aria-hidden="true" tabindex="-1"></a><span class="ot">  macros ::</span> [(<span class="dt">Text</span>, <span class="dt">Text</span>)]</span>
<span id="cb2-44"><a href="#cb2-44" aria-hidden="true" tabindex="-1"></a>  macros <span class="ot">=</span></span>
<span id="cb2-45"><a href="#cb2-45" aria-hidden="true" tabindex="-1"></a>    [ (<span class="st">&quot;≔&quot;</span>       , <span class="st">&quot;\\mathrel{\\vcenter{:}}=&quot;</span>)</span>
<span id="cb2-46"><a href="#cb2-46" aria-hidden="true" tabindex="-1"></a>    , (<span class="st">&quot;\\defeq&quot;</span> , <span class="st">&quot;\\mathrel{\\vcenter{:}}=&quot;</span>)</span>
<span id="cb2-47"><a href="#cb2-47" aria-hidden="true" tabindex="-1"></a>    , (<span class="st">&quot;\\to&quot;</span>    , <span class="st">&quot;\\longrightarrow&quot;</span>)</span>
<span id="cb2-48"><a href="#cb2-48" aria-hidden="true" tabindex="-1"></a>    , (<span class="st">&quot;\\mapsto&quot;</span>, <span class="st">&quot;\\longmapsto&quot;</span>)</span>
<span id="cb2-49"><a href="#cb2-49" aria-hidden="true" tabindex="-1"></a>    , (<span class="st">&quot;\\cat&quot;</span>   , <span class="st">&quot;\\mathcal&quot;</span>)</span>
<span id="cb2-50"><a href="#cb2-50" aria-hidden="true" tabindex="-1"></a>    , (<span class="st">&quot;\\kVect&quot;</span> , <span class="st">&quot;\\mathsf{Vect}_{\\mathtt{k}}&quot;</span>)</span>
<span id="cb2-51"><a href="#cb2-51" aria-hidden="true" tabindex="-1"></a>    ]</span></code></pre></div>
<p>The <code>(T.unwords . T.lines . T.strip -&gt; text)</code>
<a href="https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/view_patterns.html">view pattern</a>
is because KaTeX <em>really</em> does not seem to like it when there is a line break<!--
-->—even a semantically irrelevant one—<!--
-->in a formula.
Perhaps this is a setting I’ve overlooked.
Other than that the code should be reasonably self-explanatory;
there are a few macro definitions that are copied from the now deleted
<a href="https://github.com/slotThe/slotThe.github.io/blob/6cd02aab18e63a42a4b889e3cf4bba951277cad4/build.sh#L15">build.sh</a>
and some fiddling to make the stdout handle actually output the full response.<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a></p>
<p>The <code>hlKaTeX</code> function,
having a <code>Pandoc -&gt; Compiler Pandoc</code> signature,
can be given to <a href="https://hackage.haskell.org/package/hakyll/docs/Hakyll-Web-Pandoc.html#v:pandocCompilerWithTransformM">pandocCompilerWithTransformM</a> like any other function:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">myPandocCompiler ::</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>myPandocCompiler <span class="ot">=</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  pandocCompilerWithTransformM</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    defaultHakyllReaderOptions</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    defaultHakyllWriterOptions</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    hlKaTeX</span></code></pre></div>
<p>And that’s pretty much it!</p>
<h3 id="adding-css">Adding CSS</h3>
<p>All that’s left is to include the custom CSS and special fonts that KaTeX relies upon.
The former can be downloaded from <a href="https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css">their CDN</a>,
and the latter are easily obtained from
<a href="https://github.com/KaTeX/KaTeX/releases/">the latest release</a>
by copying the <code>fonts</code> directory.
The fonts are both reasonably small and loaded on demand,
such that the website does not blow up in size with this switch.</p>
<h2 id="conclusion">Conclusion</h2>
<p>The whole affair was much easier than I<!--
-->—not knowing any JavaScript—<!--
-->expected it to be, and actually turned out to be quite fun.
Of course, nothing at all has changed on the user-side of things,
which is to say that the new KaTeX fragments look pretty much exactly the same as the old MathJax maths.
Still, the warm feeling I had when deleting that <code>build.sh</code> shell script tells me that this was not solely an exercise in futility.
Or perhaps I’ve fully embraced rolling the boulder up the hill by now.</p>
<p>If you’re interested,
the commit adding it to my setup can be found
<a href="https://github.com/slotThe/slotThe.github.io/commit/6114e0e2a568122c01236dee38e2bf772efbf1e5">here</a>.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>Not as much as I should,
I guess,
but nowadays when I write maths it feels like a waste to not have it go into either
<a href="/posts/anki-latex.html">Anki</a>, <a href="/posts/my-phd-workflow.html#digital-notes">Org Roam</a>, or a paper,
and these notes are not necessarily written/ready for public consumption.
Oh well.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>Especially because, unlike in Gwern’s case, this site is not super complex to build;
there aren’t any other moving parts that would require me to leave Haskell.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>{-} 󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>Mind the <code>BlockArguments</code>—and the “s”.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>Seemingly as always when subprocesses are involved,
the hardest thing is to actually get all of the incantations right
such that buffering does not deadlock your program indefinitely.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Fixing Lsp-Mode's Hover Signatures</title>
    <link href="https://tony-zorman.com/posts/fixing-lsp-mode.html" />
    <id>https://tony-zorman.com/posts/fixing-lsp-mode.html</id>
    <published>2023-10-22T00:00:00Z</published>
    <updated>2023-10-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2023-10-22
      
      
        &thinsp;·&thinsp; last modified: 2023-10-27
      
      
        &thinsp;·&thinsp; <span title="1148 words">5 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>, <a title="All pages tagged 'haskell'." href="/tags/haskell.html" rel="tag">haskell</a>, <a title="All pages tagged 'rust'." href="/tags/rust.html" rel="tag">rust</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>By now,
LSP servers have become the norm for editor-agnostic language support.
As expected, Emacs features at least two packages that implement the protocol:
the built-in <code>eglot</code>,
and the third-party <code>lsp-mode</code>.
I will focus on the latter in this post.</p>
<p>L<span class="small-caps">sp</span> clients have the option of showing useful things on hover.
In most languages, there is an obvious candidate for this:
the type signature of the thing at point.
Sadly—for some languages—the implementation of the feature is… not great.
Buggy even, one might say.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>
Taking this as an excuse to talk about Emacs’s infinite customisability,
there is of course a way to fix this within the bounds of our configuration.
Let’s do that!</p>
<!--more-->
<h2 id="the-problem">The problem</h2>
<p>Take any Haskell function with a long enough type signature, like the
following:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">iAmTooLong ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>iAmTooLong <span class="ot">=</span> <span class="fu">undefined</span></span></code></pre></div>
<p>By default, lsp-mode<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> will display the following type signature
in the echo-area
when hovering over the function name:</p>
<p><img class="pure-img" style="padding-left: 1em;" src="../images/fixing-lsp-mode/lsp-mode-default.png" alt="By default, lsp-mode only shows `iamTooLong :: Stirng`"></p>
<p>That’s… not correct.
Executing <code>lsp-describe-thing-at-point</code> immediately reveals the problem;
the request we get back looks like this:</p>
<pre><code>``` haskell
iAmTooLong :: String
-&gt; String
-&gt; String
-&gt; String
-&gt; String
-&gt; String
-&gt; String
-&gt; String
```

Defined at »PATH«</code></pre>
<p>The type signature is so long that the server breaks it into several lines.
Lsp-mode uses <code>lsp-clients-extract-signature-on-hover</code> to extract a signature on hover—by default, it looks like this:</p>
<pre class="emacs-lisp"><code>(cl-defgeneric lsp-clients-extract-signature-on-hover (contents _server-id)
  &quot;Extract a representative line from CONTENTS, to show in the echo area.&quot;
  (car (s-lines (s-trim (lsp--render-element contents)))))</code></pre>
<p>It just takes the first line of the first markdown code block.
While this works for simple type signatures,
it obviously falls flat in more complicated scenarios.
However, this being a generic function,
there’s the possibility to overload it depending on the major mode.</p>
<h2 id="fixing-haskell-type-signatures">Fixing Haskell type signatures</h2>
<p>The strategy seems pretty clear:
extract the whole block instead of only the first line.
This is swiftly done:<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a></p>
<pre class="emacs-lisp"><code>(defun slot/lsp-get-type-signature (lang str)
  &quot;Get LANGs type signature in STR.
Original implementation from https://github.com/emacs-lsp/lsp-mode/pull/1740.&quot;
  (let* ((start (concat &quot;```&quot; lang))
         (groups (--filter (s-equals? start (car it))
                           (-partition-by #'s-blank? (s-lines (s-trim str)))))
         (name-at-point (symbol-name (symbol-at-point)))
         (type-sig-group (car
                          (--filter (s-contains? name-at-point (cadr it))
                                    groups))))
    (-&gt;&gt; (or type-sig-group (car groups))
         (-drop 1)                    ; ``` LANG
         (-drop-last 1)               ; ```
         (-map #'s-trim)
         (s-join &quot; &quot;))))</code></pre>
<p>We can now override the method with our own implementation:</p>
<pre class="emacs-lisp"><code>(cl-defmethod lsp-clients-extract-signature-on-hover
  (contents (_server-id (eql lsp-haskell))) ; Only for Haskell.
  &quot;Display the type signature of the function at point.&quot;
  (slot/lsp-get-type-signature &quot;haskell&quot; (plist-get contents :value)))</code></pre>
<p>This already looks <em>fine</em>, but something is still amiss.</p>
<p><img class="pure-img" style="padding-left: 1em;" src="../images/fixing-lsp-mode/lsp-mode-no-syntax-highlighting.png" alt="Correctly shows the whole type signature, but there is no syntax highlighting"></p>
<p>There is no syntax highlighting!
Thankfully, this is not very difficult to fix;
the idea is to paste the string into a temporary buffer,
activate <code>haskell-mode</code>,
and grab the propertised string from that.
The only thing to take care of is that we dont want to run <code>lsp-mode</code> and friends <em>again</em> in the temporary buffer.</p>
<pre class="emacs-lisp"><code>(defun slot/syntax-highlight-string (str mode)
  &quot;Syntax highlight STR in MODE.&quot;
  (with-temp-buffer
    (insert str)
    ;; We definitely don't want to call certain modes, so delay the mode's
    ;; hooks until we have removed them.
    (delay-mode-hooks (funcall mode))
    (-map #'funcall
          (--remove (-contains? '(lsp-mode lsp-deferred) it)
                    (-mapcat #'symbol-value delayed-mode-hooks)))
    ;; Now we can propertise the string.
    (font-lock-ensure)
    (buffer-string)))</code></pre>
<p>Lsp-mode also provides a function for this, <code>lsp--render-string</code>,
but that one does not try to load all of the “safe” hooks for the major mode.
However, I have some <code>pretify-symbols-mode</code> configuration for Haskell
which I would very much like to take effect.</p>
<p>All in all, we have<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a></p>
<pre class="emacs-lisp"><code>;; Fixes https://github.com/emacs-lsp/lsp-haskell/issues/151
(cl-defmethod lsp-clients-extract-signature-on-hover
  (contents (_server-id (eql lsp-haskell)))
  &quot;Display the type signature of the function at point.&quot;
  (slot/syntax-highlight-string
   (slot/lsp-get-type-signature &quot;haskell&quot; (plist-get contents :value))
   'haskell-mode))</code></pre>
<p>This works quite nicely:</p>
<p><img class="pure-img" style="padding-left: 1em;" src="../images/fixing-lsp-mode/lsp-mode-fixed.png" alt="Properly syntax highlighted type signature"></p>
<h2 id="fixing-rust-hovers">Fixing Rust hovers</h2>
<p>One of the above code snippets already mentions <a href="https://github.com/emacs-lsp/lsp-mode/pull/1740">lsp-mode#1740</a>,
which is not about Haskell, but Rust,
a language that I also occasionally dabble in.
The basic issue here goes like this:
by default, <code>lsp-mode</code> shows the following hover information.</p>
<p><img class="pure-img" style="padding-left: 1em;" src="../images/fixing-lsp-mode/lsp-rust-default-hover.png" alt="By default, the hover shows the module that the identifier is imported from"></p>
<p>Much like the user who opened the mentioned pull-request,
I really don’t care about this.
Instead, I’d much rather see</p>
<p><img class="pure-img" style="padding-left: 1em;" src="../images/fixing-lsp-mode/lsp-rust-improved-hover.png" alt="Instead of the module, show the type singature"></p>
<p>which looks much more useful to me.</p>
<p>Luckily, this is exactly the same situation as in the Haskell case,
which we already fixed.
Writing</p>
<pre class="emacs-lisp"><code>(cl-defmethod lsp-clients-extract-signature-on-hover
  (contents (_server-id (eql rust-analyzer))) ; Only for Rust.
  &quot;Display the type signature of the function at point.&quot;
  (slot/syntax-highlight-string
   (slot/lsp-get-type-signature &quot;rust&quot; (plist-get contents :value))
   'rustic-mode))</code></pre>
<p>works out of the box.
Nice.</p>
<h2 id="bonus-adding-type-signatures">Bonus: adding type signatures</h2>
<p>Here’s another problem that we’ve solved <em>en passant</em>:
lsp-mode has code-lens support<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a>,
which enables one to add type signatures by clicking on the relevant button:</p>
<p><img class="pure-img" style="padding-left: 1em;" src="../images/fixing-lsp-mode/add-type-signature-mouse.gif" alt="Clicking on the relevant code lens adds a type signature"></p>
<p>However, this ostensibly requires me to use the mouse,<a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a>
and—more importantly—the above GIF also shows that local functions do not have such a code lens attached to them.
I quite like type signatures for local definitions,
so that’s a bit of a shame.</p>
<p>Fixing this is not terribly difficult either;
the hardest thing is having to look through lsp-mode’s codebase so one actually knows which functions to call.
When defining the overrides for <code>lsp-clients-extract-signature-on-hover</code>, the LSP response was free,
whereas now we want to create a request for the thing at point.</p>
<pre class="emacs-lisp"><code>(defun slot/lsp-get-type-signature-at-point (&amp;optional lang)
  &quot;Get LANGs type signature at point.
LANG is not given, get it from `lsp--buffer-language'.&quot;
  (interactive)
  (-some-&gt;&gt; (lsp--text-document-position-params)
    (lsp--make-request &quot;textDocument/hover&quot;)
    lsp--send-request
    lsp:hover-contents
    (funcall (-flip #'plist-get) :value)
    (slot/lsp-get-type-signature (or lang lsp--buffer-language))))</code></pre>
<p>Once we have the type signature at point,
all that’s left is to insert it into the buffer.<a href="#fn7" class="footnote-ref" id="fnref7" role="doc-noteref"><sup>7</sup></a></p>
<pre class="emacs-lisp"><code>(defun slot/lsp-haskell-type-signature ()
  &quot;Add a type signature for the thing at point.
This is very convenient, for example, when dealing with local
functions, since those—as opposed to top-level expressions—don't
have a code lens for \&quot;add type signature here\&quot; associated with
them.&quot;
  (interactive)
  (let* ((value (slot/lsp-get-type-signature-at-point &quot;haskell&quot;)))
    (slot/back-to-indentation)
    (insert value)
    (haskell-indentation-newline-and-indent)))</code></pre>
<p>Bind that to a key and you’re good to go!</p>
<p><img class="pure-img" style="padding-left: 1em;" src="../images/fixing-lsp-mode/add-type-signature-keybinding.gif" alt="Clicking on the relevant code lens adds a type signature"></p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>I have reported this as a bug <a href="https://github.com/emacs-lsp/lsp-haskell/issues/151">here</a>,
but that issue seems to have stalled,
so here we are.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>And also eglot, judging from a cursory test.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>Even more so because smart people have already written this for me;
see the docstring.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>{-} 󠀠</p>
<p>󠀠</p>
<p>This code assumes that lsp-mode uses
<a href="https://emacs-lsp.github.io/lsp-mode/page/performance/#use-plists-for-deserialization">plists instead of hash tables for deserialisation</a>.
If you don’t have the <code>lsp-use-plists</code> variable set<!--
  -->—and have recompiled lsp-mode afterwards—<!--
  -->then just replace <code>(plist-get contents :value)</code> with <code>(gethash "value" contents)</code>.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>Incidentally, this is the only reason that I use lsp-mode over eglot.
There is a
<a href="https://github.com/joaotavora/eglot/pull/71">stalled PR</a>
from five years ago,
but that never led anywhere.
<em>Someone</em> should pick this back up, I suppose.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6"><p>Lsp-mode also provides <code>lsp-avy-lens</code>,
so this is not really an actual problem.<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn7"><p>{-} For when hovering inexplicably breaks again,
this also enables for a quick definition of “show the type signature of the thing at point”:</p>
<pre class="emacs-lisp"><code>(defun slot/lsp-show-type-signature ()
  &quot;Show the type signature for the thing at
point.  This is essentially what
`lsp-clients-extract-signature-on-hover'
does, just as an extra function.&quot;
  (interactive)
  (message
   (slot/syntax-highlight-string
    (slot/lsp-get-type-signature-at-point)
    major-mode)))</code></pre>
<p>This can, again, be bound to a key for convenient access.<a href="#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Incorporating BibTeX into Hakyll</title>
    <link href="https://tony-zorman.com/posts/hakyll-and-bibtex.html" />
    <id>https://tony-zorman.com/posts/hakyll-and-bibtex.html</id>
    <published>2023-06-20T00:00:00Z</published>
    <updated>2023-06-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2023-06-20
      
      
        &thinsp;·&thinsp; last modified: 2025-02-01
      
      
        &thinsp;·&thinsp; <span title="2980 words">12 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'haskell'." href="/tags/haskell.html" rel="tag">haskell</a>, <a title="All pages tagged 'hakyll'." href="/tags/hakyll.html" rel="tag">hakyll</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>When writing a blog post that feels academic—or pretentious—enough to invoke the need for citations,
having them automatically generated feels like a mandatory requirement.
I can only shudder to imagine the alternatives.</p>
<p>The good news is that LaTeX has solved this problem long ago;
we now have BibTeX as a file format,
and any number of programs,
like <code>biblatex</code> or <code>natbib</code>,
to generate good-looking citations from that.
Further, everyone’s favourite document format converter<!--
-->—pandoc—<!--
-->has excellent support for leveraging this functionality.
All that’s left is to integrate this into Hakyll;
and to play around with it, of course!</p>
<!--more-->
<h2 id="introduction">Introduction</h2>
<p>Pandoc—using the <a href="https://github.com/jgm/citeproc">citeproc</a> library—can
make use of <a href="https://citationstyles.org/">CSL</a>,
which is an XML-based formatting specification,<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>
in order to decide how the generated citations will be displayed.
There are <em>a lot</em> of styles to choose from;
the <a href="https://www.zotero.org/styles">Zotero Style Repository</a> alone sports around 10’000 different ones!
I settled on one that closely resembles <code>biblatex</code>’s “alphabetic” style.</p>
<p>To not keep anyone in suspense, the final result looks like this:</p>
<div class="highlight">
<p>
This is a line citing
<span>[<a href="#ref-benabou67:bicats-intro" role="doc-biblioref">Béna67</a>]</span>
and
<span>[<a href="ref-day07:lax-intro" role="doc-biblioref">DaPaSt07</a>]</span>.
</p>
<h2>
References
</h2>
<div id="refs-intro" class="references csl-bib-body" role="doc-bibliography">
<table>
<tr>
<div id="ref-benabou67:bicats-intro">
<td style="vertical-align: top">
<div class="csl-left-margin">
[Béna67]
</div>
</td>
<td>
</td>
<td>
<div class="csl-right-inline">
J. Bénabou, <span>“<a href="https://doi.org/10.1007/BFb0074299">Introduction to bicategories</a>.”</span> B<span>é</span>nabou, <span>Jean</span> et al., <span>Reports</span> of the <span>Midwest</span> <span>Category</span> <span>Seminar</span>. <span>Lect</span>. <span>Notes</span> <span>Math</span>. 47, 1–77, 1967.
</div>
</td>
</div>
</tr>
<tr>
<div id="ref-day07:lax-intro" class="csl-entry" role="doc-biblioentry">
<td style="vertical-align: top">
<div class="csl-left-margin">
[DaPaSt07]
</div>
</td>
<td>
</td>
<td>
<div class="csl-right-inline">
B. Day, E. Panchadcharam, and R. Street, <span>“Lax braidings and the lax centre,”</span> in <em>Hopf algebras and generalizations. AMS special session on hopf algebras at the crossroads of algebra, category theory, and topology, evanston, IL, USA, october 23–24, 2004.</em>, Providence, RI: American Mathematical Society (AMS), 2007, pp. 1–17.
</div>
</td>
</div>
</tr>
</table>
</div>
</div>
<p>The rest of the post will be a step by step explanation of how I arrived at this result,
hopefully in a generic enough way such that the ideas presented here
may translate to other problems that can be solved with pandoc filters.
If you just want the code, however, the relevant commits are
<a href="https://github.com/slotThe/slotThe.github.io/commit/62c6072243ee06d8df39813b7e35a6fd0ea1fe9d">here</a>,
<a href="https://github.com/slotThe/slotThe.github.io/commit/c23b03522fcddca779f2a1e593a32b2e51284958">here</a>,
and <a href="https://github.com/slotThe/slotThe.github.io/commit/f39352fd825ed6efad918de11b002734fdff03c4">here</a>.<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a></p>
<h2 id="simple-setup">Simple setup</h2>
<p>On the command line,
the incantation one needs to write is quite simple:</p>
<pre class="shell"><code>$ pandoc --from=markdown --to=html                               \
         --citeproc --biblatex                                   \
         --csl=bib/style.csl --bibliography=bib/bibliography.bib \
         FILE.md</code></pre>
<p>Integrating this into a basic Hakyll setup is not much more complicated,
as some kind soul has given us
<a href="https://hackage.haskell.org/package/hakyll-4.16.0.0/docs/Hakyll-Web-Pandoc-Biblio.html#v:pandocBiblioCompiler">Hakyll.Web.Pandoc.Biblio</a>—<!--
-->a library specifically written to make use of pandoc’s bibliography handling.</p>
<p>In fact, <a href="https://jaspervdj.be/">Jasper Van der Jeugt</a> himself created a <a href="https://github.com/jaspervdj/hakyll-citeproc-example">tutorial</a> for this.
Slightly abbreviated, it goes a bit like the following.
First, we compile the CSL and BibTeX files in our main function:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> hakyll <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- …</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>  match <span class="st">&quot;bib/style.csl&quot;</span>        <span class="op">$</span> compile cslCompiler</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>  match <span class="st">&quot;bib/bibliography.bib&quot;</span> <span class="op">$</span> compile biblioCompiler</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- …</span></span></code></pre></div>
<p>Next, we create a compiler
with the help of the <code>readPandocBiblio</code> function:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">myPandocBiblioCompiler ::</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>myPandocBiblioCompiler <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  csl <span class="ot">&lt;-</span> load <span class="st">&quot;bib/style.csl&quot;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  bib <span class="ot">&lt;-</span> load <span class="st">&quot;bib/bibliography.bib&quot;</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>  getResourceBody</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">&gt;&gt;=</span> readPandocBiblio defaultHakyllReaderOptions csl bib</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">&gt;&gt;=</span> <span class="fu">pure</span> <span class="op">.</span> writePandoc</span></code></pre></div>
<p>Since this kind of setup is so common,
it is already packaged up in <code>pandoc​Biblio​Compiler</code>:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ot">myPandocBiblioCompiler ::</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>myPandocBiblioCompiler <span class="ot">=</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  pandocBiblioCompiler <span class="st">&quot;bib/style.csl&quot;</span> <span class="st">&quot;bib/bibliography.bib&quot;</span></span></code></pre></div>
<p>With all these pieces in place,
this compiler can now be used in place of the default <code>pandocCompiler</code>;
for example, instead of</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- somewhere in main</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  compile <span class="op">$</span> pandocCompiler</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>        <span class="op">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;default.html&quot;</span> defaultContext</span></code></pre></div>
<p>one would write</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- somewhere in main</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>  compile <span class="op">$</span> myPandocBiblioCompiler</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>        <span class="op">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;default.html&quot;</span> defaultContext</span></code></pre></div>
<p>And that’s all there is to it!
Citations should now work out of the box using the <code>[@citation-name]</code> syntax.
They appear like this:</p>
<div id="ref-first-try" class="highlight">
<p>
This is a line citing <span>[Béna67]</span>, and <span>[DaPaSt07]</span>.
</p>
<div>
<div>
<div>
[Béna67]
</div>
<div>
J. Bénabou, <span>“<a href="https://doi.org/10.1007/BFb0074299">Introduction to bicategories</a>.”</span> B<span>é</span>nabou, <span>Jean</span> et al., <span>Reports</span> of the <span>Midwest</span> <span>Category</span> <span>Seminar</span>. <span>Lect</span>. <span>Notes</span> <span>Math</span>. 47, 1–77, 1967.
</div>
</div>
<div>
<div>
[DaPaSt07]
</div>
<div>
B. Day, E. Panchadcharam, and R. Street, <span>“Lax braidings and the lax centre,”</span> in <em>Hopf algebras and generalizations. AMS special session on hopf algebras at the crossroads of algebra, category theory, and topology, evanston, IL, USA, october 23–24, 2004.</em>, Providence, RI: American Mathematical Society (AMS), 2007, pp. 1–17.
</div>
</div>
</div>
</div>
<p>While the basic setup really is this easy,
incorporating citations into a real-world Hakyll code base
proves to be slightly more difficult<!--
-->—not to mention addressing all of my neuroses.
Let’s get straight into it.</p>
<h2 id="integration-into-my-hakyll-setup">Integration into my Hakyll setup</h2>
<p>The most important bit is that,
instead of a separate compiler,
I would really rather have a <a href="https://pandoc.org/filters.html">pandoc filter</a> for this feature.
Briefly, filters are transformations of
pandoc’s internal representation of a document’s structure.<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>
This internal representation is encapsulated in the <code>Pandoc</code> type</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Pandoc</span> <span class="ot">=</span> <span class="dt">Pandoc</span> <span class="dt">Meta</span> [<span class="dt">Block</span>]</span></code></pre></div>
<p>which represents a full document plus some metadata.
The <a href="https://hackage.haskell.org/package/pandoc-types/docs/Text-Pandoc-Definition.html#t:Block">Block</a> and <a href="https://hackage.haskell.org/package/pandoc-types/docs/Text-Pandoc-Definition.html#t:Inline">Inline</a> types then
contain more fine-grained stylistic information,
like the presence of lists, tables, bold text, and so on.
Writing a filter is further simplified by the <a href="https://hackage.haskell.org/package/pandoc-types/docs/Text-Pandoc-Walk.html#t:Walkable">Walkable</a>
type class,
with which it becomes trivial to promote an <code>Inline -&gt; Inline</code> function
to a full <code>Pandoc -&gt; Pandoc</code> transformation.</p>
<p>Luckily, <code>Hakyll.​Web.​Pandoc.​Biblio</code> exposes a function for this kind of use-case:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>processPandocBiblio</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> <span class="dt">Item</span> <span class="dt">CSL</span> <span class="ot">-&gt;</span> <span class="dt">Item</span> <span class="dt">Biblio</span>               <span class="co">-- Formatting boiler plate</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">Item</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">Pandoc</span>) <span class="co">-- The actual transformation</span></span></code></pre></div>
<p>A basic filter materialises:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ot">processBib ::</span> <span class="dt">Item</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">Pandoc</span>)</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>processBib pandoc <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>  csl <span class="ot">&lt;-</span> load <span class="st">&quot;bib/style.csl&quot;</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>  bib <span class="ot">&lt;-</span> load <span class="st">&quot;bib/bibliography.bib&quot;</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>  processPandocBiblio csl bib pandoc</span></code></pre></div>
<p>Notice that the type of this function transforms an <code>Item Pandoc</code>!
An <a href="https://hackage.haskell.org/package/hakyll/docs/Hakyll-Core-Item.html#t:Item">Item</a> is a type internal to Hakyll,
which associates a unique identifier to some contents.
In the best case,
one would like to treat this as an implementation detail and not think about it at all.
However, most of Hakyll’s other pandoc functions that let you do AST
transformations—like <code>pandoc​Compiler​With​TransformM</code>—have a bit of a different API,
accepting only a <code>Pandoc -&gt; Compiler Pandoc</code> argument.
This means that some care is needed to get everything to type check.</p>
<p>To start, my personal pandoc compiler looks a little bit like this:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="ot">myPandocCompiler ::</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>myPandocCompiler <span class="ot">=</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>  pandocCompilerWithTransformM</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>    myReader</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>    myWriter</span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>    myTransformations   <span class="co">-- Pandoc -&gt; Compiler Pandoc</span></span></code></pre></div>
<p>The easiest way I found to incorporate a <code>process​Pandoc​Biblio</code>-like transformation into this was to
write a function that’s like <code>pandoc​Compiler​With​TransformM</code>,
but accepts a wider input range.
Looking at its definition
already gives some idea as to what needs to be done:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a>pandocCompilerWithTransformM</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> <span class="dt">ReaderOptions</span> <span class="ot">-&gt;</span> <span class="dt">WriterOptions</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> (<span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> <span class="dt">Pandoc</span>)</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>pandocCompilerWithTransformM ropt wopt f <span class="ot">=</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>  getResourceBody <span class="op">&gt;&gt;=</span> renderPandocWithTransformM ropt wopt f</span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a>renderPandocWithTransformM</span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> <span class="dt">ReaderOptions</span> <span class="ot">-&gt;</span> <span class="dt">WriterOptions</span></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> (<span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> <span class="dt">Pandoc</span>)</span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">Item</span> <span class="dt">String</span></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a>renderPandocWithTransformM ropt wopt f i <span class="ot">=</span></span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a>  writePandocWith wopt <span class="op">&lt;$&gt;</span> (<span class="fu">traverse</span> f <span class="op">=&lt;&lt;</span> readPandocWith ropt i)</span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a><span class="co">-- readPandocWith :: ReaderOptions -&gt; Item String -&gt; Compiler (Item Pandoc)</span></span></code></pre></div>
<p>So <code>pandoc​Compiler​With​TransformM</code> is defined in terms of <code>render​Pandoc​With​TransformM</code>,
which in turn has quite a simple implementation.
Notice in particular the <code>traverse f =&lt;&lt; readPandocWith ropt i</code> bit;
<code>readPandocWith</code> returns a <code>Compiler (Item Pandoc)</code>,
so the <code>traverse</code> above exactly transform our <code>f</code> into a function that works at the <code>Item</code> level.
Omitting this yields the desired functions:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a>myRenderPandocWithTransformM</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> <span class="dt">ReaderOptions</span> <span class="ot">-&gt;</span> <span class="dt">WriterOptions</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> (<span class="dt">Item</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">Pandoc</span>))  <span class="co">-- this changed!</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">Item</span> <span class="dt">String</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>myRenderPandocWithTransformM ropt wopt f i <span class="ot">=</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a>  writePandocWith wopt <span class="op">&lt;$&gt;</span> (f <span class="op">=&lt;&lt;</span> readPandocWith ropt i)</span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>myPandocCompilerWithTransformM</span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> <span class="dt">ReaderOptions</span> <span class="ot">-&gt;</span> <span class="dt">WriterOptions</span></span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> (<span class="dt">Item</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">Pandoc</span>))  <span class="co">-- this changed!</span></span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span>
<span id="cb12-13"><a href="#cb12-13" aria-hidden="true" tabindex="-1"></a>myPandocCompilerWithTransformM ropt wopt f <span class="ot">=</span></span>
<span id="cb12-14"><a href="#cb12-14" aria-hidden="true" tabindex="-1"></a>  getResourceBody <span class="op">&gt;&gt;=</span> myRenderPandocWithTransformM ropt wopt f</span></code></pre></div>
<p>We can now easily incorporate the <code>processBib</code> function defined above into our existing framework,
adding a <code>traverse</code> where the old code was:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="ot">myPandocCompiler ::</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>myPandocCompiler <span class="ot">=</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>  myPandocCompilerWithTransformM</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>    myReader</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>    myWriter</span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>    (    <span class="fu">traverse</span> myTransformations  <span class="co">-- Item Pandoc -&gt; Compiler (Item Pandoc)</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>     <span class="op">&lt;=&lt;</span> processBib                  <span class="co">-- composed with the new stuff</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a>    )</span></code></pre></div>
<p>And that’s it!
Citations can now be added using the <code>[@citation-name]</code> syntax mentioned above,
and they look exactly the same as in <a href="#ref-first-try">the simple example</a>.</p>
<p>Now, that particular formatting looks <em>fine</em>,
but I’m sure you can already discern a few not-so-nice bits.
Let’s address the most glaring ones,
at least in my opinion.</p>
<h2 id="changing-the-look">Changing the look</h2>
<h3 id="adding-a-header-for-the-references">Adding a header for the references</h3>
<p>As it stands now,
the references are just dumped at the bottom of the page,
without any additional heading.
This looks subjectively ugly,
so automatically adding one
whenever at least one citation is present would be nice.</p>
<p>There is another small complication because of my idiosyncratic Hakyll setup:
in order to easily control the style of the headings in the table of contents,
I pre-generate the TOC before the actual compilation of the site.
This means that in addition to the <code>processBib</code> function,
we need to change the code in one other place.</p>
<p>The generation looks a little bit like this:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="ot">getTocCtx ::</span> <span class="dt">Context</span> a <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Context</span> a)</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>getTocCtx ctx <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>  writerOpts <span class="ot">&lt;-</span> mkTocWriter</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>  toc        <span class="ot">&lt;-</span> renderPandocWith</span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>                  defaultHakyllReaderOptions</span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>                  writerOpts</span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>                  <span class="op">=&lt;&lt;</span> getResourceBody</span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a>  <span class="fu">pure</span> <span class="op">$</span> <span class="fu">mconcat</span> [ ctx</span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>                 , constField <span class="st">&quot;toc&quot;</span> <span class="op">$</span> doStuffWithTheToc toc</span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>                 ]</span></code></pre></div>
<p>When the TOC is saved in the <code>toc</code> variable,
it’s already rendered into a string,
which means that it’s time for some good old string manipulations.
The (simplified) HTML for a typical table of contents looks like this:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;</span><span class="kw">div</span><span class="dt">&gt;</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&lt;</span><span class="kw">p</span><span class="dt">&gt;</span>Contents<span class="dt">&lt;/</span><span class="kw">p</span><span class="dt">&gt;</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&lt;</span><span class="kw">ul</span><span class="dt">&gt;</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;</span><span class="kw">li</span><span class="dt">&gt;</span></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>      High level structure</span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&lt;</span><span class="kw">ul</span><span class="dt">&gt;</span></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a>        <span class="dt">&lt;</span><span class="kw">li</span><span class="dt">&gt;</span>Topics<span class="dt">&lt;/</span><span class="kw">li</span><span class="dt">&gt;</span></span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a>        <span class="dt">&lt;</span><span class="kw">li</span><span class="dt">&gt;</span>Files<span class="dt">&lt;/</span><span class="kw">li</span><span class="dt">&gt;</span></span>
<span id="cb15-9"><a href="#cb15-9" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&lt;/</span><span class="kw">ul</span><span class="dt">&gt;</span></span>
<span id="cb15-10"><a href="#cb15-10" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;/</span><span class="kw">li</span><span class="dt">&gt;</span></span>
<span id="cb15-11"><a href="#cb15-11" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&lt;/</span><span class="kw">ul</span><span class="dt">&gt;</span></span>
<span id="cb15-12"><a href="#cb15-12" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;/</span><span class="kw">div</span><span class="dt">&gt;</span></span></code></pre></div>
<p>The last <code>&lt;/ul&gt;</code> block seems to be an appropriate target to attack.
The function to add a <code>References</code> heading in its place is swiftly written:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="ot">addBibHeading ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>addBibHeading s <span class="ot">=</span> T.unpack <span class="op">.</span> <span class="fu">mconcat</span> <span class="op">$</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>  [ T.dropEnd <span class="dv">5</span> before</span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>  , <span class="st">&quot;&lt;li&gt;&lt;a href=\&quot;#references\&quot;&gt;References&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&quot;</span></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a>  , after</span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>  ]</span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a> <span class="kw">where</span></span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a>  (before, after) <span class="ot">=</span> T.breakOnEnd <span class="st">&quot;&lt;/ul&gt;&quot;</span> (T.pack s)</span></code></pre></div>
<p>This can now be incorporated into <code>getTocCtx</code> in a straightforward manner:<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a></p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="ot">getTocCtx ::</span> <span class="dt">Context</span> a <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Context</span> a)</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>getTocCtx ctx <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>  writerOpts <span class="ot">&lt;-</span> mkTocWriter</span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>  toc        <span class="ot">&lt;-</span> renderPandocWith</span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a>                  defaultHakyllReaderOptions</span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a>                  writerOpts</span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a>                  <span class="op">=&lt;&lt;</span> getResourceBody</span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a>  <span class="fu">pure</span> <span class="op">$</span> <span class="fu">mconcat</span> [ ctx</span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true" tabindex="-1"></a>                 , constField <span class="st">&quot;toc&quot;</span> <span class="op">$</span> addBibHeading (doStuffWithTheToc toc)</span>
<span id="cb17-10"><a href="#cb17-10" aria-hidden="true" tabindex="-1"></a>                                   <span class="co">-- ^^^^^^^^^^^^^</span></span>
<span id="cb17-11"><a href="#cb17-11" aria-hidden="true" tabindex="-1"></a>                 ]</span></code></pre></div>
<p>All we need to do now is to actually create that header.
Again inspecting the HTML, one can spy a line along the lines of</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;</span><span class="kw">div</span><span class="ot"> id</span><span class="op">=</span><span class="st">&quot;refs&quot;</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;references csl-bib-body&quot;</span><span class="ot"> role</span><span class="op">=</span><span class="st">&quot;doc-bibliography&quot;</span><span class="dt">&gt;</span></span></code></pre></div>
<p>when the references start.
Inserting a heading above that sounds like a plan.
This can again be done using filters,
this time inside our <code>processBib</code> function:<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a></p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="ot">processBib ::</span> <span class="dt">Item</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">Pandoc</span>)</span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a>processBib pandoc <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a>  csl <span class="ot">&lt;-</span> load <span class="st">&quot;bib/style.csl&quot;</span></span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a>  bib <span class="ot">&lt;-</span> load <span class="st">&quot;bib/bibliography.bib&quot;</span></span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true" tabindex="-1"></a>  <span class="fu">fmap</span> insertRefHeading <span class="op">&lt;$&gt;</span> processPandocBiblio csl bib pandoc</span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true" tabindex="-1"></a>  <span class="co">--   ^^^^^^^^^^^^^^^^</span></span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true" tabindex="-1"></a> <span class="kw">where</span></span>
<span id="cb20-8"><a href="#cb20-8" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Insert a heading for the citations.</span></span>
<span id="cb20-9"><a href="#cb20-9" aria-hidden="true" tabindex="-1"></a><span class="ot">  insertRefHeading ::</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Pandoc</span></span>
<span id="cb20-10"><a href="#cb20-10" aria-hidden="true" tabindex="-1"></a>  insertRefHeading <span class="ot">=</span> walk <span class="op">$</span> <span class="fu">concatMap</span> \<span class="kw">case</span></span>
<span id="cb20-11"><a href="#cb20-11" aria-hidden="true" tabindex="-1"></a>    d<span class="op">@</span>(<span class="dt">Div</span> (<span class="st">&quot;refs&quot;</span>, _, _) _) <span class="ot">-&gt;</span></span>
<span id="cb20-12"><a href="#cb20-12" aria-hidden="true" tabindex="-1"></a>      [<span class="dt">Header</span> <span class="dv">1</span> (<span class="st">&quot;references&quot;</span>, [], []) [<span class="dt">Str</span> <span class="st">&quot;References&quot;</span>], d]</span>
<span id="cb20-13"><a href="#cb20-13" aria-hidden="true" tabindex="-1"></a>    block <span class="ot">-&gt;</span> [block]</span></code></pre></div>
<p>The citations now look like this:</p>
<div class="highlight">
<p>
This is a line citing <span>[Béna67]</span>, and <span>[DaPaSt07]</span>.
</p>
<h2>
References
</h2>
<div>
<div>
<div>
[Béna67]
</div>
<div>
J. Bénabou, <span>“<a href="https://doi.org/10.1007/BFb0074299">Introduction to bicategories</a>.”</span> B<span>é</span>nabou, <span>Jean</span> et al., <span>Reports</span> of the <span>Midwest</span> <span>Category</span> <span>Seminar</span>. <span>Lect</span>. <span>Notes</span> <span>Math</span>. 47, 1–77, 1967.
</div>
</div>
<div>
<div>
[DaPaSt07]
</div>
<div>
B. Day, E. Panchadcharam, and R. Street, <span>“Lax braidings and the lax centre,”</span> in <em>Hopf algebras and generalizations. AMS special session on hopf algebras at the crossroads of algebra, category theory, and topology, evanston, IL, USA, october 23–24, 2004.</em>, Providence, RI: American Mathematical Society (AMS), 2007, pp. 1–17.
</div>
</div>
</div>
</div>
<h3 id="prettifying-the-generated-references">Prettifying the generated references</h3>
<p>What immediately irks me in the above output is
that a single citation is broken up into two lines.
Thankfully, this is easily fixed by a tiny bit of CSS.</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* Don't split up a citation over multiple lines. */</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a>div<span class="fu">.csl-left-margin</span> {</span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">display</span><span class="ch">:</span> <span class="dv">inline</span><span class="op">;</span></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a>div<span class="fu">.csl-right-inline</span> {</span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">display</span><span class="ch">:</span> <span class="dv">inline</span><span class="op">;</span></span>
<span id="cb21-7"><a href="#cb21-7" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Much better:</p>
<div class="highlight">
<p>
This is a line citing <span>[Béna67]</span> and <span>[DaPaSt07]</span>.
</p>
<h2>
References
</h2>
<div>
<div>
<div class="csl-left-margin">
[Béna67]
</div>
<div class="csl-right-inline">
J. Bénabou, <span>“<a href="https://doi.org/10.1007/BFb0074299">Introduction to bicategories</a>.”</span> B<span>é</span>nabou, <span>Jean</span> et al., <span>Reports</span> of the <span>Midwest</span> <span>Category</span> <span>Seminar</span>. <span>Lect</span>. <span>Notes</span> <span>Math</span>. 47, 1–77, 1967.
</div>
</div>
<div>
<div class="csl-left-margin">
[DaPaSt07]
</div>
<div class="csl-right-inline">
B. Day, E. Panchadcharam, and R. Street, <span>“Lax braidings and the lax centre,”</span> in <em>Hopf algebras and generalizations. AMS special session on hopf algebras at the crossroads of algebra, category theory, and topology, evanston, IL, USA, october 23–24, 2004.</em>, Providence, RI: American Mathematical Society (AMS), 2007, pp. 1–17.
</div>
</div>
</div>
</div>
<p>Next, notice that there is no link from the label in the text
to the actual citation at the end.
This seems pretty inconvenient,
as at least I often jump to citations whose label is
unfamiliar—just to get an idea what kind of article it is.</p>
<p>Pandoc does accept a <code>link-citations</code> option that controls this behaviour,
which works fine for my purposes.
Setting this can be done directly
by modifying the <a href="https://hackage.haskell.org/package/pandoc-types-1.23/docs/Text-Pandoc-Definition.html#t:Meta">Meta</a> field of the <code>Pandoc</code> type:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="ot">processBib ::</span> <span class="dt">Item</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">Pandoc</span>)</span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a>processBib pandoc <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a>  csl <span class="ot">&lt;-</span> load <span class="st">&quot;bib/style.csl&quot;</span></span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a>  bib <span class="ot">&lt;-</span> load <span class="st">&quot;bib/bibliography.bib&quot;</span></span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- We do want to link citations.</span></span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true" tabindex="-1"></a>  p <span class="ot">&lt;-</span> withItemBody</span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true" tabindex="-1"></a>         (\(<span class="dt">Pandoc</span> (<span class="dt">Meta</span> meta) bs) <span class="ot">-&gt;</span> <span class="fu">pure</span> <span class="op">$</span></span>
<span id="cb22-8"><a href="#cb22-8" aria-hidden="true" tabindex="-1"></a>           <span class="dt">Pandoc</span> (<span class="dt">Meta</span> <span class="op">$</span> Map.insert <span class="st">&quot;link-citations&quot;</span> (<span class="dt">MetaBool</span> <span class="dt">True</span>) meta)</span>
<span id="cb22-9"><a href="#cb22-9" aria-hidden="true" tabindex="-1"></a>                  bs)</span>
<span id="cb22-10"><a href="#cb22-10" aria-hidden="true" tabindex="-1"></a>         pandoc</span>
<span id="cb22-11"><a href="#cb22-11" aria-hidden="true" tabindex="-1"></a>  <span class="fu">fmap</span> insertRefHeading <span class="op">&lt;$&gt;</span> processPandocBiblio csl bib pandoc</span></code></pre></div>
<p>One could also introduce a Hakyll metadata field
if this is to be done conditionally,
but I see no reason to not link citations,
so I didn’t.</p>
<p>Everything works as expected:</p>
<div class="highlight">
<p>
This is a line citing
<span>[<a href="#ref-benabou67:bicats-1" role="doc-biblioref">Béna67</a>]</span>
and
<span>[<a href="ref-day07:lax-1" role="doc-biblioref">DaPaSt07</a>]</span>.
</p>
<h2>
References
</h2>
<div id="refs1" class="references csl-bib-body" role="doc-bibliography">
<div id="ref-benabou67:bicats-a">
<div class="csl-left-margin">
[Béna67]
</div>
<div class="csl-right-inline">
J. Bénabou, <span>“<a href="https://doi.org/10.1007/BFb0074299">Introduction to bicategories</a>.”</span> B<span>é</span>nabou, <span>Jean</span> et al., <span>Reports</span> of the <span>Midwest</span> <span>Category</span> <span>Seminar</span>. <span>Lect</span>. <span>Notes</span> <span>Math</span>. 47, 1–77, 1967.
</div>
</div>
<div id="ref-day07:lax-1" class="csl-entry" role="doc-biblioentry">
<div class="csl-left-margin">
[DaPaSt07]
</div>
<div class="csl-right-inline">
B. Day, E. Panchadcharam, and R. Street, <span>“Lax braidings and the lax centre,”</span> in <em>Hopf algebras and generalizations. AMS special session on hopf algebras at the crossroads of algebra, category theory, and topology, evanston, IL, USA, october 23–24, 2004.</em>, Providence, RI: American Mathematical Society (AMS), 2007, pp. 1–17.
</div>
</div>
</div>
</div>
<p>Lastly,
and this is perhaps the most important modification,
I think that not having a table-like
look—aligning labels and not letting the citation information run under its label—looks
a bit awkward.
As so many times before, pandoc filters come to the rescue here.
There is a <code>Table</code> constructor of the <code>Block</code> type which we will use:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="dt">Table</span><span class="ot"> ::</span> <span class="dt">Attr</span> <span class="ot">-&gt;</span> <span class="dt">Caption</span> <span class="ot">-&gt;</span> [<span class="dt">ColSpec</span>] <span class="ot">-&gt;</span> <span class="dt">TableHead</span> <span class="ot">-&gt;</span> [<span class="dt">TableBody</span>] <span class="ot">-&gt;</span> <span class="dt">TableFoot</span></span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a>      <span class="ot">-&gt;</span> <span class="dt">Block</span></span></code></pre></div>
<p>This may look kind of scary,
but for our simple use-case there is the aptly named <code>simpleTable</code> function:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="ot">simpleTable ::</span> [<span class="dt">Blocks</span>]   <span class="co">-- ^ Headers</span></span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a>            <span class="ot">-&gt;</span> [[<span class="dt">Blocks</span>]] <span class="co">-- ^ Rows</span></span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a>            <span class="ot">-&gt;</span> <span class="dt">Blocks</span></span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- where</span></span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Blocks</span>    <span class="ot">=</span> <span class="dt">Many</span> <span class="dt">Block</span></span>
<span id="cb24-7"><a href="#cb24-7" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">Many</span> a <span class="ot">=</span> <span class="dt">Many</span> (<span class="dt">Seq</span> a)</span></code></pre></div>
<p>Basically, any particular cell is composed of a number of <code>Blocks</code>,
a single row is a bunch (list) of those,
and all rows taken together then form a <code>[[Blocks]]</code>.
Equipped with this knowledge,
we can just search for an instance of a citation,
which will be two <code>Div</code>s inside of one <code>Para</code> inside of one <code>Div</code>,
and replace accordingly:</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- | Align all citations in a table.</span></span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a><span class="ot">tableiseBib ::</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Pandoc</span></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a>tableiseBib <span class="ot">=</span> walk \<span class="kw">case</span></span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Citations start with a &lt;div id=&quot;refs&quot; …&gt;</span></span>
<span id="cb25-5"><a href="#cb25-5" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Div</span> a<span class="op">@</span>(<span class="st">&quot;refs&quot;</span>, _, _) body <span class="ot">-&gt;</span></span>
<span id="cb25-6"><a href="#cb25-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- No header needed, we just want to fill in the body contents.</span></span>
<span id="cb25-7"><a href="#cb25-7" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Div</span> a (Many.toList (simpleTable [] (<span class="fu">map</span> citToRow body)))</span>
<span id="cb25-8"><a href="#cb25-8" aria-hidden="true" tabindex="-1"></a>  body <span class="ot">-&gt;</span> body</span>
<span id="cb25-9"><a href="#cb25-9" aria-hidden="true" tabindex="-1"></a> <span class="kw">where</span></span>
<span id="cb25-10"><a href="#cb25-10" aria-hidden="true" tabindex="-1"></a><span class="ot">  citToRow ::</span> <span class="dt">Block</span> <span class="ot">-&gt;</span> [<span class="dt">Many</span> <span class="dt">Block</span>]</span>
<span id="cb25-11"><a href="#cb25-11" aria-hidden="true" tabindex="-1"></a>  citToRow <span class="ot">=</span> <span class="fu">map</span> Many.singleton <span class="op">.</span> \<span class="kw">case</span></span>
<span id="cb25-12"><a href="#cb25-12" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Div</span> attr [<span class="dt">Para</span> [s1, s2]] <span class="ot">-&gt;</span></span>
<span id="cb25-13"><a href="#cb25-13" aria-hidden="true" tabindex="-1"></a>      [<span class="dt">Div</span> attr [<span class="dt">Plain</span> [s1]], <span class="dt">Plain</span> [<span class="dt">Space</span>], <span class="dt">Plain</span> [s2]]</span>
<span id="cb25-14"><a href="#cb25-14" aria-hidden="true" tabindex="-1"></a>    _ <span class="ot">-&gt;</span> <span class="fu">error</span> <span class="st">&quot;citToRow: unexpected citation format.&quot;</span></span></code></pre></div>
<p>Just signaling an <code>error</code> here
in case of an unexpected format
was nice for debugging the code<!--
-->—I missed the <code>Para</code> at first—<!--
-->and at this point I see no reason to change it.
Perhaps it is better to fail fast in theses kinds of situations,
instead of trying to desperately produce something based off garbage input.</p>
<p>The <code>tableiseBib</code> function can
be incorporated into <code>processBib</code>
in a straightforward fashion:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="ot">processBib ::</span> <span class="dt">Item</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">Pandoc</span>)</span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a>processBib pandoc <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- …</span></span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a>  <span class="fu">fmap</span> (tableiseBib <span class="op">.</span> insertRefHeading) <span class="op">&lt;$&gt;</span> processPandocBiblio csl bib p</span></code></pre></div>
<p>All that’s left is to nicely align everything:
the right side of the table will,
in general,
span multiple lines—in stark contrast to the label.
This is again just a few lines of CSS:</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* Align citations to the top. */</span></span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true" tabindex="-1"></a>div<span class="pp">#refs</span> td {</span>
<span id="cb27-3"><a href="#cb27-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">vertical-align</span><span class="ch">:</span> <span class="dv">top</span><span class="op">;</span></span>
<span id="cb27-4"><a href="#cb27-4" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>We get the expected result already showcased in the introduction.
For completeness, here it is again:</p>
<div class="highlight">
<p>
This is a line citing
<span>[<a href="#ref-benabou67:bicats" role="doc-biblioref">Béna67</a>]</span>
and
<span>[<a href="ref-day07:lax" role="doc-biblioref">DaPaSt07</a>]</span>.
</p>
<h2>
References
</h2>
<div id="refs-final" class="references csl-bib-body" role="doc-bibliography">
<table>
<tr>
<div id="ref-benabou67:bicats">
<td style="vertical-align: top">
<div class="csl-left-margin">
[Béna67]
</div>
</td>
<td>
</td>
<td>
<div class="csl-right-inline">
J. Bénabou, <span>“<a href="https://doi.org/10.1007/BFb0074299">Introduction to bicategories</a>.”</span> B<span>é</span>nabou, <span>Jean</span> et al., <span>Reports</span> of the <span>Midwest</span> <span>Category</span> <span>Seminar</span>. <span>Lect</span>. <span>Notes</span> <span>Math</span>. 47, 1–77, 1967.
</div>
</td>
</div>
</tr>
<tr>
<div id="ref-day07:lax" class="csl-entry" role="doc-biblioentry">
<td style="vertical-align: top">
<div class="csl-left-margin">
[DaPaSt07]
</div>
</td>
<td>
</td>
<td>
<div class="csl-right-inline">
B. Day, E. Panchadcharam, and R. Street, <span>“Lax braidings and the lax centre,”</span> in <em>Hopf algebras and generalizations. AMS special session on hopf algebras at the crossroads of algebra, category theory, and topology, evanston, IL, USA, october 23–24, 2004.</em>, Providence, RI: American Mathematical Society (AMS), 2007, pp. 1–17.
</div>
</td>
</div>
</tr>
</table>
</div>
</div>
<p>Neat.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Since smart people had already written all the hard parts,
this was surprisingly easy to add for such a useful feature!
Plus, playing around with pandoc filters is always fun.</p>
<p>Especially the <code>my​{render​Pandoc,Pandoc​Compiler}​With​TransformM</code> functions
could—with different names, of course—perhaps be contributed to upstream Hakyll.
A variant of any of the <code>*PandocBiblio</code> functions
that explicitly accepts a list of additional arguments
to give to <code>citeproc</code> might also be useful;
there are quite a few <a href="https://pandoc.org/MANUAL.html#citations">metadata fields</a> one can specify,
after all.
Finally, I think a format along the lines of <code>tableiseBib</code> would be quite nice to have with label-style citations.
However, the current implementation is much too specific to justify living anywhere but a personal configuration.
Some day, maybe.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>If you want some more information,
the format describes itself as</p>
<blockquote>
<p>an XML-based format to describe the formatting of citations,
notes and bibliographies, offering:</p>
<ul>
<li>An open format</li>
<li>Compact and robust styles</li>
<li>Extensive support for style requirements</li>
<li>Automatic style localization</li>
<li>Infrastructure for style distribution and updating</li>
<li>Thousands of freely available styles (Creative Commons BY-SA licensed)</li>
</ul>
</blockquote>
<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></li>
<li id="fn2"><p>While this style is good enough for now,
it’s still not quite perfect;
suggestions for other styles would be most welcome!<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>As one can imagine, the use-cases for filters are manifold.
From changing Hakyll’s default <a href="./pygmentising-hakyll.html">syntax highlighting</a>,
to swapping out footnotes and producing this very <a href="./block-sidenotes.html">sidenote</a>,
almost anything one can imagine is possible.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>{-} 󠀠</p>
<p>󠀠</p>
<p>In the actual code,
I also check for a <code>bib</code> boolean field,
in order to decide whether this transformation should actually be applied.
If you are interested in that, see the relevant <a href="https://github.com/slotThe/slotThe.github.io/commit/62c6072243ee06d8df39813b7e35a6fd0ea1fe9d">commit</a>.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>{-} 󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>This example also nicely showcases the power of the <code>Walkable</code> type class.
Via the</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="dt">Walkable</span> <span class="dt">Block</span> <span class="dt">Pandoc</span></span></code></pre></div>
<p>instance,
I seamlessly walk over all <code>Block</code>s in the AST
and pick out the ones I’d like to change.
Pretty neat if you ask me.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>XMonad Module Showcase: X.A.Search</title>
    <link href="https://tony-zorman.com/posts/x.a.search.html" />
    <id>https://tony-zorman.com/posts/x.a.search.html</id>
    <published>2023-03-19T00:00:00Z</published>
    <updated>2023-03-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2023-03-19
      
      
        &thinsp;·&thinsp; last modified: 2023-11-09
      
      
        &thinsp;·&thinsp; <span title="1313 words">6 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'haskell'." href="/tags/haskell.html" rel="tag">haskell</a>, <a title="All pages tagged 'xmonad'." href="/tags/xmonad.html" rel="tag">xmonad</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>I’d like to highlight another XMonad module that has become quite
essential to me: <a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Actions-Search.html">XMonad.Actions.Search</a>. Its premise is simple: you
enter some text into the XMonad prompt, and it queries a search engine
of your choice with this input—straightforward, and yet very effective.</p>
<!--more-->
<p>In fact, this sounds so simple that one might immediately ask: what’s
the point? The problem with regular searching is that it’s <em>slow</em>; who
has the time to open their browser, navigate to the relevant website,
and only then enter their search? In today’s world, where many things
now have their own dedicated search engines<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>, searching efficiently
becomes increasingly important. Plus, the lower barrier to entry means
that looking something up—always a good idea, with all of humanities
collected knowledge at one’s fingertips—may well become instinctive,
instead of feeling like a chore.</p>
<h2 id="functionality">Functionality</h2>
<p>The basic workflow suggested by the module simply consists of picking a
search engine, and binding it to a key via <code>promptSearch</code>—that’s it.
Additionally, there is also <code>selectSearch</code> to look up the current
(primary) selection. For example, suppose we had bound<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a></p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">searchKeys ::</span> [(<span class="dt">String</span>, <span class="dt">X</span> ())]</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>searchKeys <span class="ot">=</span>              <span class="co">-- def is an optional prompt config</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  [ (<span class="st">&quot;M-s&quot;</span>    , promptSearch def wikipedia)</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  , (<span class="st">&quot;M-u M-s&quot;</span>, selectSearch     wikipedia)</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>  ]</span></code></pre></div>
<p>This would enable us to search through Wikipedia normally by pressing
<code>M-s</code>, and directly look up the currently selected text with <code>M-u M-s</code>.<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a> The whole things looks like this:</p>
<p>
<video width="100%" controls>
<source src="../images/search-showcase/search-simple.webm" type="video/webm">
Searching for “Alexander Grothendieck” once manually,
and then highlighting that phrase and using the selection search.
</video>
</p>
<p>Further, there is a third workflow that is quite convenient: by default,
pressing <code>C-y</code> in the prompt inserts the current selection, ready for
further editing.</p>
<p>
<video width="100%" controls>
<source src="../images/search-showcase/search-simple-alt.webm" type="video/webm">
Showcasing the functionality described in the last paragraph.
</video>
</p>
<h3 id="adding-new-engines">Adding new engines</h3>
<p>There are quite a few search engines built-in: at the time of writing,
X.A.Search sports about 40 different ones. Thankfully, adding new
engines is easy, even in one’s own configuration; e.g., to look up
something on <a href="https://hoogle.haskell.org/">Hoogle</a>, one would simply
define</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">hoogle ::</span> <span class="dt">SearchEngine</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>hoogle <span class="ot">=</span> searchEngine <span class="st">&quot;hoogle&quot;</span> <span class="st">&quot;https://hoogle.haskell.org/?hoogle=&quot;</span></span></code></pre></div>
<p>This means that even if the module does not have a search engine you
want, it’s trivial to define it yourself—and don’t forget to upstream it
afterwards!</p>
<p>There also is the <code>searchEngineF</code> function, which instead of just a
string takes a function to also modify that string.<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a> With this, one
can build more complicated search engines; for example, the following
constitutes a very basic URL entry function, which may also work as a
sort of lightweight bookmarking system:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ot">url ::</span> <span class="dt">SearchEngine</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>url <span class="ot">=</span> searchEngineF <span class="st">&quot;url&quot;</span> \s <span class="ot">-&gt;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> url <span class="ot">=</span> <span class="st">&quot;https://&quot;</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>   <span class="kw">in</span> <span class="kw">if</span> url <span class="ot">`isPrefixOf`</span> s <span class="kw">then</span> s <span class="kw">else</span> url <span class="op">&lt;&gt;</span> s</span></code></pre></div>
<p>The whole API is quite flexible. In my personal configuration I have
defined a <code>git</code> search engine to quickly jump to certain projects on
several different forges:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ot">git ::</span> <span class="dt">SearchEngine</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>git <span class="ot">=</span> searchEngineF <span class="st">&quot;repo&quot;</span> \s <span class="ot">-&gt;</span> <span class="kw">if</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> s <span class="ot">`elem`</span> [<span class="st">&quot;change-env&quot;</span>, <span class="st">&quot;irc-bot&quot;</span>]</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    <span class="ot">-&gt;</span> <span class="st">&quot;https://gitlab.com/slotThe/&quot;</span> <span class="op">&lt;&gt;</span> s</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> s <span class="ot">`elem`</span> [<span class="st">&quot;kbd-mode&quot;</span>, <span class="st">&quot;kmonad&quot;</span>]</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>    <span class="ot">-&gt;</span> <span class="st">&quot;https://github.com/kmonad/&quot;</span> <span class="op">&lt;&gt;</span> s</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> s <span class="ot">`elem`</span> [ <span class="st">&quot;x11&quot;</span>, <span class="st">&quot;x11-xft&quot;</span>, <span class="st">&quot;xmonad&quot;</span>, <span class="st">&quot;xmonad-contrib&quot;</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>             , <span class="st">&quot;xmonad-docs&quot;</span>, <span class="st">&quot;xmonad-web&quot;</span> ]</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>    <span class="ot">-&gt;</span> <span class="st">&quot;https://github.com/xmonad/&quot;</span> <span class="op">&lt;&gt;</span> s</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> s <span class="ot">`elem`</span> [ <span class="st">&quot;vc-use-package&quot;</span>, <span class="st">&quot;arXiv-citation&quot;</span>, <span class="st">&quot;hmenu&quot;</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>             , <span class="st">&quot;slotThe.github.io&quot;</span>, <span class="st">&quot;query-replace-many&quot;</span> ]</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>    <span class="ot">-&gt;</span> <span class="st">&quot;https://github.com/slotThe/&quot;</span> <span class="op">&lt;&gt;</span> s</span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> s <span class="op">==</span> <span class="st">&quot;slotThe&quot;</span>    <span class="ot">-&gt;</span> <span class="st">&quot;https://github.com/slotThe/&quot;</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> s <span class="op">==</span> <span class="st">&quot;void-linux&quot;</span> <span class="ot">-&gt;</span> <span class="st">&quot;https://github.com/void-linux/void-packages&quot;</span></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> s <span class="op">==</span> <span class="st">&quot;xmobar&quot;</span>     <span class="ot">-&gt;</span> <span class="st">&quot;https://codeberg.org/xmobar/xmobar&quot;</span></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="fu">otherwise</span>         <span class="ot">-&gt;</span> <span class="st">&quot;&quot;</span></span></code></pre></div>
<p>It works as expected—so much so that I can enable the prompt’s
auto-complete feature, which automatically completes a query if there is
only a single candidate left.<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a></p>
<p>
<video width="100%" controls>
<source src="../images/search-showcase/search-git.webm" type="video/webm">
&lt;img class=“pure-img”
Showcasing the git search engine defined above
</video>
</p>
<h3 id="further-tweaks">Further tweaks</h3>
<p>As I said, the module is pretty flexible with how exactly one can use
it, and so here are a few more personal tweaks that I figure might also
be of interest to others. First, my setup is integrated with
<a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Actions-Prefix.html">XMonad.​Actions.​Prefix</a>—I use the prefix argument to decide whether I
want “normal” searches, or ones using the primary selection.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- | Search commands; integration with X.A.Prefix.</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="ot">searchKeys ::</span> <span class="dt">Keybindings</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>searchKeys <span class="ot">=</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>  [ (<span class="st">&quot;M-s&quot;</span>, withPrefixArgument <span class="op">$</span> submap <span class="op">.</span> searchEngineMap <span class="op">.</span> \<span class="kw">case</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>      <span class="dt">Raw</span> _ <span class="ot">-&gt;</span> <span class="co">-- normal searches</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>        selectSearchBrowser</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>      _     <span class="ot">-&gt;</span> <span class="co">-- use the primary selection</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>        \br se <span class="ot">-&gt;</span> promptSearchBrowser' (decidePrompt se) br se)</span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>  ]</span></code></pre></div>
<p>This is nice because <code>searchKeys</code> is now the only two place where this
distinction has to be made; others functions, like <code>search​Engine​Map</code>, do
not need to differentiate between a select search and a prompt search.
What I do separately match on is (i) the type of browser that I want to
open the searches in, and (ii) the type of prompt I would like to use.
This is very dependent on the engine itself; some, like <code>git</code> as defined
above, greatly benefit from keeping a history, while in others this is
more of a hinderance than anything else. The browser situation is
similar. An except of the totality of <code>searchKeys</code> looks like the
following.<a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a></p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ot">searchKeys ::</span> <span class="dt">Keybindings</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>searchKeys <span class="ot">=</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>  [ (<span class="st">&quot;M-s&quot;</span>, withPrefixArgument <span class="op">$</span> submap <span class="op">.</span> searchEngineMap <span class="op">.</span> \<span class="kw">case</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>      <span class="dt">Raw</span> _ <span class="ot">-&gt;</span> selectSearchBrowser</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>      _     <span class="ot">-&gt;</span> \br se <span class="ot">-&gt;</span> promptSearchBrowser' (decidePrompt se) br se)</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>  ]</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a> <span class="kw">where</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- | Match on the prompt type; this needs an orphan 'Eq' instance</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- for 'SearchEngine'.  @prompt@ is my prompt config.</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a><span class="ot">  decidePrompt ::</span> <span class="dt">SearchEngine</span> <span class="ot">-&gt;</span> <span class="dt">XPConfig</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>  decidePrompt se</span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> se <span class="ot">`elem`</span> [arXiv, wikipedia, github] <span class="ot">=</span> promptNoHist<span class="co">-- no history</span></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> se <span class="ot">`elem`</span> [git] <span class="ot">=</span> prompt{ autoComplete <span class="ot">=</span> (<span class="dv">5</span> <span class="ot">`ms`</span>) }</span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> <span class="fu">otherwise</span> <span class="ot">=</span> prompt</span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- | Open searches, possibly in a new window.</span></span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a><span class="ot">  searchEngineMap ::</span> (<span class="dt">Browser</span> <span class="ot">-&gt;</span> <span class="dt">SearchEngine</span> <span class="ot">-&gt;</span> <span class="dt">X</span> ())</span>
<span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a>                  <span class="ot">-&gt;</span> <span class="dt">Map</span> (<span class="dt">KeyMask</span>, <span class="dt">KeySym</span>) (<span class="dt">X</span> ())</span>
<span id="cb9-19"><a href="#cb9-19" aria-hidden="true" tabindex="-1"></a>  searchEngineMap searchIn <span class="ot">=</span> basicSubmapFromList</span>
<span id="cb9-20"><a href="#cb9-20" aria-hidden="true" tabindex="-1"></a>    [ (xK_a, sw arXiv    )</span>
<span id="cb9-21"><a href="#cb9-21" aria-hidden="true" tabindex="-1"></a>    , (xK_w, nw wikipedia)</span>
<span id="cb9-22"><a href="#cb9-22" aria-hidden="true" tabindex="-1"></a>    , (xK_g, submap <span class="op">$</span> basicSubmapFromList  <span class="co">-- submaps in submaps</span></span>
<span id="cb9-23"><a href="#cb9-23" aria-hidden="true" tabindex="-1"></a>              [ (xK_g, sw' git)</span>
<span id="cb9-24"><a href="#cb9-24" aria-hidden="true" tabindex="-1"></a>              , (xK_h, sw' github)</span>
<span id="cb9-25"><a href="#cb9-25" aria-hidden="true" tabindex="-1"></a>              ])</span>
<span id="cb9-26"><a href="#cb9-26" aria-hidden="true" tabindex="-1"></a>    ]</span>
<span id="cb9-27"><a href="#cb9-27" aria-hidden="true" tabindex="-1"></a>   <span class="kw">where</span></span>
<span id="cb9-28"><a href="#cb9-28" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- | Same window, new window.</span></span>
<span id="cb9-29"><a href="#cb9-29" aria-hidden="true" tabindex="-1"></a>    sw, sw',<span class="ot"> nw ::</span> <span class="dt">SearchEngine</span> <span class="ot">-&gt;</span> <span class="dt">X</span> ()</span>
<span id="cb9-30"><a href="#cb9-30" aria-hidden="true" tabindex="-1"></a>    sw  <span class="ot">=</span> searchIn browser</span>
<span id="cb9-31"><a href="#cb9-31" aria-hidden="true" tabindex="-1"></a>    nw  <span class="ot">=</span> searchIn <span class="st">&quot;browser-new-window.sh&quot;</span></span>
<span id="cb9-32"><a href="#cb9-32" aria-hidden="true" tabindex="-1"></a>    sw' <span class="ot">=</span> searchIn altBrowser</span>
<span id="cb9-33"><a href="#cb9-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-34"><a href="#cb9-34" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Eq</span> <span class="co">{- ORPHAN -}</span> <span class="dt">SearchEngine</span> <span class="kw">where</span></span>
<span id="cb9-35"><a href="#cb9-35" aria-hidden="true" tabindex="-1"></a><span class="ot">  (==) ::</span> <span class="dt">SearchEngine</span> <span class="ot">-&gt;</span> <span class="dt">SearchEngine</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb9-36"><a href="#cb9-36" aria-hidden="true" tabindex="-1"></a>  (<span class="dt">SearchEngine</span> n _) <span class="op">==</span> (<span class="dt">SearchEngine</span> n' _) <span class="ot">=</span> n <span class="op">==</span> n'</span></code></pre></div>
<p>For my full configuration, see <a href="https://gitlab.com/slotThe/dotfiles/-/blob/c31bc324a8cc3df5449d9ca7a50aabfcd87a7ad8/xmonad/.config/xmonad/src/xmonad.hs#L720">here</a>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>As always, even the simplest topic—that of a search—leaves a lot more
room for personalisation than one would initially think. Also as
always, XMonad delivers on the “there is already a module for that”
front.</p>
<p>For me personally, X.A.Search has really alleviated this perceived
slowness in searching, especially when using many different engines
simultaneously. So much so, in fact, that I no longer have a problem
looking up information from multiple sources mid (text) conversation.
This not only helps me, but I reckon a few users of the <code>#xmonad</code> <a href="https://web.libera.chat/#xmonad">IRC
Channel</a> are quite glad about this as well!</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>Just to name a few, I regularly look things up on
<a href="https://zbmath.org/">zbmath</a>,
<a href="https://hoogle.haskell.org/">Hoogle</a>,
<a href="https://clojuredocs.org/">ClojureDocs</a>,
<a href="https://en.wikipedia.org/">Wikipedia</a>,
<a href="https://www.openstreetmap.org/">Open­Street­Map</a>,
<a href="https://searx.github.io/searx/">searX</a>,
<a href="https://arxiv.org/">arXiv</a>,
<a href="https://noogle.dev/">noogle</a>,
forges like <a href="https://github.com/">Git­Hub</a>,
… the list goes on.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>{-} 󠀠</p>
<p>󠀠</p>
<p>This uses <a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Util-EZConfig.html">XMonad.Util.EZConfig</a> syntax.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>As an aside, this is an ideal use case for <a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Actions-Prefix.html">XMonad.​Actions.​Prefix</a>.
With that module, one could define an equivalent keybinding along the lines of</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ot">searchKeys ::</span> [(<span class="dt">String</span>, <span class="dt">X</span> ())]</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>searchKeys <span class="ot">=</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  [ (<span class="st">&quot;M-s&quot;</span>, withPrefixArgument <span class="op">$</span> \<span class="kw">case</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>      <span class="dt">Raw</span> _ <span class="ot">-&gt;</span> selectSearch     wikipedia</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>      _     <span class="ot">-&gt;</span> promptSearch def wikipedia)</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>  ]</span></code></pre></div>
<p>This is especially useful when multiple search engines are involved;
see <a href="#further-tweaks">below</a> or check out <a href="https://gitlab.com/slotThe/dotfiles/-/blob/c31bc324a8cc3df5449d9ca7a50aabfcd87a7ad8/xmonad/.config/xmonad/src/xmonad.hs#L720">my configuration</a> for a complete example.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>{-} For the following code examples, you may need to place extra
pragmas along the lines of</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE BlockArguments #-}</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE LambdaCase     #-}</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE MultiWayIf     #-}</span></span></code></pre></div>
<p>at the top of your XMonad configuration file.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>In this case here, that single candidate will be from the relevant
prompt history.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6"><p>{-} Just for completeness, an in order to improve
copy-pasteability, the definition of <code>basicSubmapFromList</code> used a
lot in this piece of code is:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>basicSubmapFromList</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> <span class="dt">Ord</span> key</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=&gt;</span> [(key, action)]</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">Map</span> (<span class="dt">KeyMask</span>, key) action</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>basicSubmapFromList <span class="ot">=</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>  fromList <span class="op">.</span> <span class="fu">map</span> \(k, a) <span class="ot">-&gt;</span> ((<span class="dv">0</span>, k), a)</span></code></pre></div>
<p>This is just creates a basic (i.e. there is no additional ‘KeyMask’ to consider)
submap from a list of <code>(key, action)</code> pairs.<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Using Sidenotes with Hakyll</title>
    <link href="https://tony-zorman.com/posts/block-sidenotes.html" />
    <id>https://tony-zorman.com/posts/block-sidenotes.html</id>
    <published>2023-01-27T00:00:00Z</published>
    <updated>2023-01-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2023-01-27
      
      
        &thinsp;·&thinsp; last modified: 2024-07-17
      
      
        &thinsp;·&thinsp; <span title="2104 words">9 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'haskell'." href="/tags/haskell.html" rel="tag">haskell</a>, <a title="All pages tagged 'hakyll'." href="/tags/hakyll.html" rel="tag">hakyll</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>
</p>
<p>I’ve become quite enamoured with sidenotes recently, and so of course
this website now has them as well! Thankfully, the integration with
pandoc and Hakyll is quite straightforward, because other people have
already done the hard work.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> Depending on your use-case, however, the
existing libraries might not entirely fit the bill; for example, by
default blocks that are more complicated than just paragraphs of pure
text don’t work. In this post, I’d like to explain an alternative
approach of integrating sidenotes into pandoc, which does enable the use
of these features.</p>
<!--more-->
<h2 id="introduction">Introduction</h2>
<p>If you don’t know: sidenotes are footnotes, just on the side of the
page!<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> More specifically they are footnotes placed inside of the
margins, in order to avoid having to click or scroll, breaking the flow
of reading—a flick of the eyes is enough. This is very convenient,
especially for longer entries with lots of asides that don’t necessarily
fit the flow of the article. However, because websites are dynamic in
size, a fallback option should be provided in case the margins are too
small/nonexistent. In most cases, this amount to making sidenotes
clickable again and, in one way or another, showing their content once
clicked.</p>
<p>Gwern Branwen has written about many different sidenote implementations
<a href="https://gwern.net/Sidenotes">here</a>. I settled on <a href="https://github.com/edwardtufte/tufte-css">Tufte CSS</a>,
mainly because it seemed to be the most popular non-JS solution. Plus,
there is the fantastic <a href="https://hackage.haskell.org/package/pandoc-sidenote">pandoc-sidenote</a>, which
provides an appropriate pandoc filter. After extracting the relevant
CSS into <a href="https://github.com/slotThe/slotThe.github.io/blob/main/css/sidenotes.css">sidenotes.css</a> and plugging the exported
<code>usingSidenotes</code> function into my pandoc compiler,<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a> things just
worked!</p>
<p>There is but one problem with this setup: paragraphs. A sidenote
roughly looks like the following:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;sidenote-wrapper&quot;</span><span class="dt">&gt;</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&lt;</span><span class="kw">label</span><span class="ot"> for</span><span class="op">=</span><span class="st">&quot;sn-NAME&quot;</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;margin-toggle sidenote-number&quot;</span><span class="dt">&gt;</span> <span class="dt">&lt;/</span><span class="kw">label</span><span class="dt">&gt;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&lt;</span><span class="kw">input</span><span class="ot"> type</span><span class="op">=</span><span class="st">&quot;checkbox&quot;</span><span class="ot"> id</span><span class="op">=</span><span class="st">&quot;sn-NAME&quot;</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;margin-toggle&quot;</span><span class="dt">&gt;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;sidenote&quot;</span><span class="dt">&gt;</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    SIDENOTEn</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span></code></pre></div>
<p>As Chris MacKay—a Tufte CSS contributor—helpfully explains in an
<a href="https://github.com/edwardtufte/tufte-css/issues/93#issuecomment-234316022">issue</a>, spans officially don’t play nice with
paragraphs:</p>
<blockquote>
<p>so marginnotes and sidenotes, as they are implemented now, are
<code>&lt;span&gt;</code> elements inside paragraph <code>&lt;p&gt;</code> elements. Only inline
elements are allowed inside paragraphs per the HTML standard.</p>
</blockquote>
<p>I know what you’re thinking: people don’t usually let themselves be
hampered by standards, do they?<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a> Alas, the <code>pandoc-sidenote</code> package
quite sensibly converts a given footnote into an approximation of the
above HTML by using pandoc’s native <code>Span</code> data constructor. Here is a
(heavily) simplified version of the relevant function.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">filterInline ::</span> <span class="dt">Inline</span> <span class="ot">-&gt;</span> <span class="dt">Inline</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>filterInline <span class="ot">=</span> \<span class="kw">case</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- A @Note@ signifies a footnote.</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Note</span> blocks <span class="ot">-&gt;</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> <span class="co">-- Note has a [Block], but Span needs [Inline]</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>        content <span class="ot">=</span> coerceToInline blocks</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>     <span class="kw">in</span> <span class="dt">Span</span> (<span class="st">&quot;&quot;</span>, [<span class="st">&quot;sidenote-wrapper&quot;</span>], [])</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>             [ <span class="dt">RawInline</span> <span class="st">&quot;html&quot;</span> <span class="st">&quot;&lt;label for …&quot;</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>             , <span class="dt">RawInline</span> <span class="st">&quot;html&quot;</span> <span class="st">&quot;&lt;input type …&quot;</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>             , <span class="dt">Span</span> (<span class="st">&quot;&quot;</span>, [<span class="st">&quot;sidenote&quot;</span>], []) content</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>             ]</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>  inline <span class="ot">-&gt;</span> inline</span></code></pre></div>
<p>Now, pandoc very much does <em>not</em> want you to put any kind of block
inside of its <code>Span</code>s—that’s why its type is</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="dt">Span</span><span class="ot"> ::</span> <span class="dt">Attr</span> <span class="ot">-&gt;</span> [<span class="dt">Inline</span>] <span class="ot">-&gt;</span> <span class="dt">Inline</span></span></code></pre></div>
<p>Notice the absence of a <code>[Block]</code> argument. This is why
<code>coerceToInline</code> exists, which tries to convert as many blocks as it can
to inline elements.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ot">coerceToInline ::</span> [<span class="dt">Block</span>] <span class="ot">-&gt;</span> [<span class="dt">Inline</span>]</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>coerceToInline <span class="ot">=</span> <span class="fu">concatMap</span> deBlock <span class="op">.</span> walk deNote</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a> <span class="kw">where</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="ot">  deBlock ::</span> <span class="dt">Block</span> <span class="ot">-&gt;</span> [<span class="dt">Inline</span>]</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>  deBlock (<span class="dt">Plain</span>     ls    ) <span class="ot">=</span> ls</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Simulate paragraphs with double LineBreak</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>  deBlock (<span class="dt">Para</span>      ls    ) <span class="ot">=</span> ls <span class="op">++</span> newline</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- See extension: line_blocks</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>  deBlock (<span class="dt">LineBlock</span> lss   ) <span class="ot">=</span> intercalate [<span class="dt">LineBreak</span>] lss <span class="op">++</span> newline</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Pretend RawBlock is RawInline (might not work!)</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Consider: raw &lt;div&gt; now inside RawInline... what happens?</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>  deBlock (<span class="dt">RawBlock</span> fmt str) <span class="ot">=</span> [<span class="dt">RawInline</span> fmt str]</span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- lists, blockquotes, headers, hrs, and tables are all omitted</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Think they shouldn't be? I'm open to sensible PR's.</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>  deBlock _                  <span class="ot">=</span> []</span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a><span class="ot">  deNote ::</span> <span class="dt">Inline</span> <span class="ot">-&gt;</span> <span class="dt">Inline</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>  deNote (<span class="dt">Note</span> _) <span class="ot">=</span> <span class="dt">Str</span> <span class="st">&quot;&quot;</span></span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>  deNote x        <span class="ot">=</span> x</span></code></pre></div>
<p>The <code>coerceToInline</code> function behaves sensibly with respect to the
simplest kinds of blocks, but already mentions that the <code>RawBlock → RawInline</code> transformation may have some caveats. For example,
<a href="https://tony-zorman.com/posts/pygmentising-hakyll.html">prerendering code blocks</a> puts one in exactly such a
“now we have a <code>&lt;div&gt;</code> tag inside of a <code>RawInline</code> element” situation.
Well, what happens?</p>
<span class="sidenote-wrapper">
<label for="sn-test" class="margin-toggle sidenote-number"></label>
<input type="checkbox" id="sn-test" class="margin-toggle">
<p><span class="sidenote">Now simulating <code>pandoc-sidenode</code>s behaviour, the following is a piece of code <em>in the sidenote:</em>
<div class="highlight"><pre><span></span><span class="nf">a</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">Int</span> <span class="nf">
a</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="mi">42</span> </pre></div>
</span></p>
</span>
<p>This is the next line in the main document; the above code block was
supposed to be in the relevant sidenote, but “spilled” into the text
instead. This is obviously not what we want.</p>
<p>The documentation mentions other things that are missing, and that pull
requests are welcome, but for many blocks there just is no good
alternative. For example, code blocks and inline code serve very
different purposes most of the time. Pandoc itself has a
<a href="https://hackage.haskell.org/package/pandoc-3.0.1/docs/Text-Pandoc-Shared.html#v:blocksToInlines">function</a> of the same name that
attempts to convert tables, figures, and the like, but this also yields
some surprising behaviour when used instead of <code>pandoc-sidenote</code>s
variant.<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a></p>
<p>So what to do? Well, life wouldn’t be fun if we didn’t at least try to
hack our way around a standard, would it?</p>
<h2 id="rewriting-pandoc-sidenote">Rewriting <code>pandoc-sidenote</code></h2>
<p>As I’ve learned while <a href="https://tony-zorman.com/posts/pygmentising-hakyll.html">writing</a> about using
<code>pygmentize</code> to syntax highlight code for this site, pandoc has quite
good support for changing its AST in creative ways. A strategy unfolds:
find every <code>Note</code> block in a document, somehow render its contents, and
create a <code>RawBlock "html"</code> node instead of using pandoc’s built in
<code>Span</code> .</p>
<p>For rendering HTML, pandoc has a
<a href="https://hackage.haskell.org/package/pandoc-3.0.1/docs/Text-Pandoc-Writers.html#v:writeHtml5String">writeHtml5String</a> function, which is
conveniently wrapped by Hakyll in
<a href="https://hackage.haskell.org/package/hakyll-4.15.1.1/docs/Hakyll-Web-Pandoc.html#v:writePandocWith">writePandocWith</a>:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- | Write a document (as HTML) using pandoc, with the supplied options</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="ot">writePandocWith ::</span> <span class="dt">WriterOptions</span>  <span class="co">-- ^ Writer options for pandoc</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>                <span class="ot">-&gt;</span> <span class="dt">Item</span> <span class="dt">Pandoc</span>    <span class="co">-- ^ Document to write</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>                <span class="ot">-&gt;</span> <span class="dt">Item</span> <span class="dt">String</span>    <span class="co">-- ^ Resulting HTML</span></span></code></pre></div>
<p>Importantly, rendering takes some <code>WriterOptions</code>; since we don’t want
to mess around with changing pure HTML afterwards, this is quite
important for us.</p>
<p>Writing this filter now essentially works by the same strategy outlined
in the last post: look through the Haddocks to find the types that we
want, <a href="https://aphyr.com/posts/342-typing-the-technical-interview">seize some meaningless functions from the void, and imbue them
with meaning</a>. The relevant bits
from pandoc’s internal types are the following.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Pandoc</span> <span class="ot">=</span> <span class="dt">Pandoc</span> <span class="dt">Meta</span> [<span class="dt">Block</span>]</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Block</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>    <span class="ot">=</span> <span class="dt">Plain</span> [<span class="dt">Inline</span>]       <span class="co">-- ^ Plain text, not a paragraph</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> <span class="dt">Para</span> [<span class="dt">Inline</span>]        <span class="co">-- ^ Paragraph</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- …</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> <span class="dt">RawBlock</span> <span class="dt">Format</span> <span class="dt">Text</span> <span class="co">-- ^ Raw block</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Inline</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>    <span class="ot">=</span> <span class="dt">Str</span> <span class="dt">Text</span>             <span class="co">-- ^ Text (string)</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- …</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> <span class="dt">Note</span> [<span class="dt">Block</span>]         <span class="co">-- ^ Footnote or endnote</span></span></code></pre></div>
<p>While this document is <em>not</em> a literate Haskell file, the following is
still here for convenience, in case you are left wondering where some of
the functions come from.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE BangPatterns             #-}</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE LambdaCase               #-}</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE OverloadedStrings        #-}</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE StandaloneKindSignatures #-}</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Control.Monad.State</span> (<span class="dt">State</span>, foldM, get, modify', runState)</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Kind</span> (<span class="dt">Type</span>)</span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Text</span> (<span class="dt">Text</span>)</span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Text</span> <span class="kw">as</span> <span class="dt">T</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Hakyll</span> (<span class="dt">Item</span> (..), writePandocWith)</span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Text.Pandoc.Definition</span> (<span class="dt">Block</span> (..), <span class="dt">Inline</span> (..), <span class="dt">Pandoc</span> (..))</span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Text.Pandoc.Options</span> (<span class="dt">WriterOptions</span>)</span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Text.Pandoc.Shared</span> (tshow)</span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Text.Pandoc.Walk</span> (walkM)</span></code></pre></div>
<p>Rendering the actual sidenote isn’t very complicated, and amounts to
picking out the <code>Note</code> constructor, rendering it, and putting everything
back together.<a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a></p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ot">renderSidenote ::</span> [<span class="dt">Inline</span>]            <span class="co">-- ^ Inlines from a single @Note@</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>               <span class="ot">-&gt;</span> <span class="dt">Sidenote</span> [<span class="dt">Block</span>]</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>renderSidenote <span class="ot">=</span> go []</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a> <span class="kw">where</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a><span class="ot">  go ::</span> [<span class="dt">Inline</span>] <span class="ot">-&gt;</span> [<span class="dt">Inline</span>] <span class="ot">-&gt;</span> <span class="dt">Sidenote</span> [<span class="dt">Block</span>]</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>  go inlines <span class="ot">=</span> \<span class="kw">case</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>    []           <span class="ot">-&gt;</span> <span class="fu">pure</span> [<span class="dt">Plain</span> inlines]</span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Note</span> bs <span class="op">:</span> xs <span class="ot">-&gt;</span> <span class="kw">do</span> block <span class="ot">&lt;-</span> renderBlock bs</span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>                       ([<span class="dt">Plain</span> inlines, block] <span class="op">&lt;&gt;</span>) <span class="op">&lt;$&gt;</span> go [] xs</span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>    b       <span class="op">:</span> xs <span class="ot">-&gt;</span> go (inlines <span class="op">&lt;&gt;</span> [b]) xs</span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a><span class="ot">  renderBlock ::</span> [<span class="dt">Block</span>] <span class="ot">-&gt;</span> <span class="dt">Sidenote</span> <span class="dt">Block</span></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>  renderBlock blocks <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- Update sidenote counter and get the `WriterOption's.</span></span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a>    <span class="dt">SNS</span> w i <span class="ot">&lt;-</span> get <span class="op">&lt;*</span> modify' (\sns <span class="ot">-&gt;</span> sns{ counter <span class="ot">=</span> <span class="dv">1</span> <span class="op">+</span> counter sns })</span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a>    <span class="fu">pure</span> <span class="op">.</span> <span class="dt">RawBlock</span> <span class="st">&quot;html&quot;</span> <span class="op">$</span> <span class="co">-- … all the opening html stuff</span></span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a>                             writePandocWith w (<span class="dt">Item</span> <span class="st">&quot;&quot;</span> (<span class="dt">Pandoc</span> <span class="fu">mempty</span> blocks))</span>
<span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a>                             <span class="co">-- … all the closing html stuff</span></span></code></pre></div>
<p>Finding notes is a bit more finicky, since they could potentially occur
in a lot of places. Right now, for obvious reasons, I’ve settled on
covering all cases that currently occur on this website. Importantly,
we need to be a bit careful about inserting newlines for paragraphs (and
when to omit this). This is because <code>Note</code>s are actually inline
elements, and so we are replacing a single <code>Block</code> by a list of
<code>Block</code>s, which incurs some additional formatting.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="ot">mkSidenote ::</span> [<span class="dt">Block</span>] <span class="ot">-&gt;</span> <span class="dt">Sidenote</span> [<span class="dt">Block</span>]</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>mkSidenote <span class="ot">=</span> foldM (\acc b <span class="ot">-&gt;</span> (acc <span class="op">&lt;&gt;</span>) <span class="op">&lt;$&gt;</span> single b) []</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a> <span class="kw">where</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="ot">  single ::</span> <span class="dt">Block</span> <span class="ot">-&gt;</span> <span class="dt">Sidenote</span> [<span class="dt">Block</span>]</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>  single <span class="ot">=</span> \<span class="kw">case</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- Simulate a paragraph by inserting a dummy block; this is needed</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- in case two consecutive paragraphs have sidenotes, or a paragraph</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- doesn't have one at all.</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Para</span> inlines         <span class="ot">-&gt;</span> (<span class="dt">Para</span> [<span class="dt">Str</span> <span class="st">&quot;&quot;</span>] <span class="op">:</span>) <span class="op">&lt;$&gt;</span> renderSidenote inlines</span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a>    <span class="dt">OrderedList</span> attrs bs <span class="ot">-&gt;</span> (<span class="op">:</span>[]) <span class="op">.</span> <span class="dt">OrderedList</span> attrs <span class="op">&lt;$&gt;</span> <span class="fu">traverse</span> mkSidenote bs</span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a>    <span class="dt">BulletList</span>        bs <span class="ot">-&gt;</span> (<span class="op">:</span>[]) <span class="op">.</span> <span class="dt">BulletList</span>        <span class="op">&lt;$&gt;</span> <span class="fu">traverse</span> mkSidenote bs</span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>    block                <span class="ot">-&gt;</span> <span class="fu">pure</span> [block]</span></code></pre></div>
<p>Putting everything together, we apply this transformation to every block
in a document:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="ot">usingSidenotes ::</span> <span class="dt">WriterOptions</span> <span class="ot">-&gt;</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Pandoc</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>usingSidenotes writer (<span class="dt">Pandoc</span> meta blocks) <span class="ot">=</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Pandoc</span> meta (walkBlocks (<span class="dt">SNS</span> writer <span class="dv">0</span>) blocks)</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a> <span class="kw">where</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a><span class="ot">  walkBlocks ::</span> <span class="dt">SidenoteState</span> <span class="ot">-&gt;</span> [<span class="dt">Block</span>] <span class="ot">-&gt;</span> [<span class="dt">Block</span>]</span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>  walkBlocks sns <span class="ot">=</span> \<span class="kw">case</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>    []       <span class="ot">-&gt;</span> []</span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a>    (b <span class="op">:</span> bs) <span class="ot">-&gt;</span> b' <span class="op">&lt;&gt;</span> walkBlocks s' bs</span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>     <span class="kw">where</span> (b', s') <span class="ot">=</span> runState (walkM mkSidenote [b]) sns</span></code></pre></div>
<p>This can now be used much like the <code>usingSidenotes</code> function from
<code>pandoc-sidenote</code>, only that it needs to know your <code>WriterOption</code>s.
More importantly, it should be the last of the transformations that you
do to pandoc’s AST, since <code>usingSidenotes</code> completely renders the
footnote, which is not what you want in case you—like me—do other
creative transformations, such as separately generating HTML for
<code>CodeBlock</code>s. In my configuration, I now have</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="ot">myPandocCompiler ::</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>myPandocCompiler <span class="ot">=</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>  pandocCompilerWithTransformM</span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>    defaultHakyllReaderOptions</span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a>    myWriter</span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>    (<span class="fu">pure</span> <span class="op">.</span> usingSidenotes myWriter <span class="op">&lt;=&lt;</span> pygmentsHighlight  <span class="op">.</span> addSectionLinks)</span></code></pre></div>
<p>Tufte CSS needs to be changed minimally to support this extended
functionality, but thankfully Said Achmiz has already documented what
needs to be done <a href="https://github.com/edwardtufte/tufte-css/issues/93#issuecomment-671102819">here</a>. This is
already included in my <code>sidenotes.css</code>, so if you’re just copying that
then you should be fine.</p>
<p>Even better, as Gwern Branwen <a href="https://github.com/jez/pandoc-sidenote/issues/4#issuecomment-1426123545">mentions</a>, we
don’t even need to use <code>span</code>s anymore!</p>
<blockquote>
<p>It’s true that <code>Span</code> nodes are often unsuited for doing anything
interesting involving a <code>Block</code> or <code>[Block]</code>, but that’s precisely
what <code>Div</code> is for: it’s the <code>Block</code>-level equivalent of the <code>Inline</code>
<code>Span</code>. And if you are rendering blocks into an HTML <code>&lt;span&gt;</code> wrapper,
that would seem to be bad HTML practice:
<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span"><code>&lt;span&gt;</code></a>
is defined as being inline and containing inline stuff (which is why
Pandoc makes it expressed as an <code>Inline</code>), in contrast to
<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div"><code>&lt;div&gt;</code></a>
block containers.</p>
</blockquote>
<p>So far, I had assumed that there was a reason why Tufte CSS used <code>span</code>
elements instead of <code>div</code>s in their sidenote, but this does not seem to
be the case.<a href="#fn7" class="footnote-ref" id="fnref7" role="doc-noteref"><sup>7</sup></a> Instead of writing</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;sidenote&quot;</span><span class="dt">&gt;</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>  «sidenote»</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span></code></pre></div>
<p>one may well use</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;</span><span class="kw">div</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;sidenote&quot;</span><span class="dt">&gt;</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>  «sidenote»</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;/</span><span class="kw">div</span><span class="dt">&gt;</span></span></code></pre></div>
<p>instead—since we render directly to HTML now, that door opened for us.
This means no more standard violations!</p>
<h2 id="conclusion">Conclusion</h2>
<p>Being perfectly honest, I’m not very satisfied with the module.
It does work, but pre-rendering everything and not using pandoc’s built in constructors feels like a big hack.</p>
<p>However, this solution seems to be quite comfortable from a Hakyll
perspective,<a href="#fn8" class="footnote-ref" id="fnref8" role="doc-noteref"><sup>8</sup></a> and people have told me that the functionality provided
is still useful to them. Since what I’ve done here amounts to a
complete rewrite—and almost certainly a regression in places—I don’t
think that this will ever replace <code>Text.​Pandoc.​SideNote</code> wholesale.
However, the <code>pandoc-sidenote</code> library now features a
<a href="https://github.com/jez/pandoc-sidenote/blob/master/src/Text/Pandoc/SideNoteHTML.hs">Text.​Pandoc.​SideNoteHTML</a>
module as an alternative.
This keeps backwards compatibility,
yet still allows people to make use of the alternative filter.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>{-} To put this front and centre:
the <code>pandoc-sidenote</code> library now features a
<a href="https://github.com/jez/pandoc-sidenote/blob/master/src/Text/Pandoc/SideNoteHTML.hs">Text.​Pandoc.​SideNoteHTML</a>
module, which is an implementation of what’s discussed in this post!<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>For example, this is one.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>Just like you would expect:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">myPandocCompiler ::</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>myPandocCompiler <span class="ot">=</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  pandocCompilerWithTransformM</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    defaultHakyllReaderOptions</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    myWriter</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    ( pygmentsHighlight <span class="co">-- syntax highlight</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span> usingSidenotes    <span class="co">-- sidenotes</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span> addSectionLinks   <span class="co">-- link on hover</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    )</span></code></pre></div>
<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></li>
<li id="fn4"><p>Just ask any person who’s ever worked on a window manager what
creative “interpretations” programs have of <a href="https://x.org/releases/X11R7.6/doc/xorg-docs/specs/ICCCM/icccm.html">ICCCM</a> or <a href="https://en.wikipedia.org/wiki/Extended_Window_Manager_Hints">EWMH</a> :)<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>Whereas now, things like</p>
<ul>
<li><p>tables</p>
<table style="width:66%;">
<colgroup>
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 26%" />
</colgroup>
<thead>
<tr class="header">
<th>Fruit</th>
<th>Price</th>
<th>Advantages</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Oranges</td>
<td>$2.10</td>
<td><ul>
<li>cures scurvy</li>
<li>tasty</li>
</ul></td>
</tr>
</tbody>
</table></li>
<li><p>quotes</p>
<blockquote>
<p>they said that …</p>
</blockquote></li>
<li><p>display maths</p>
<p><span class="math display">
\int^{a, b} \mathcal{C}(a \otimes b, {-}) \cdot Fa \otimes Gb
</span></p></li>
</ul>
<p>and the like are no problem at all!<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6"><p>The <code>Sidenote</code> type you are seeing is just some alias for <code>State</code>,
which keeps track of the sidenote number, as well as the supplied
<code>WriterOption</code>s; nothing fancy.<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn7"><p>At least not to my current knowledge.<a href="#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn8"><p>Jake Zimmerman—the author of <code>pandoc-sidenote</code>—also
<a href="https://github.com/jez/pandoc-sidenote/issues/4#issuecomment-269744553">thought about this issue</a>,
and concluded that perhaps a custom pandoc <code>Writer</code> would be the
most elegant solution to this problem. However, since using
pandoc’s HTML5 writer is quite hard-coded into Hakyll, I don’t think
that I will go down that path.<a href="#fnref8" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Pygmentising Hakyll's Syntax Highlighting</title>
    <link href="https://tony-zorman.com/posts/pygmentising-hakyll.html" />
    <id>https://tony-zorman.com/posts/pygmentising-hakyll.html</id>
    <published>2023-01-21T00:00:00Z</published>
    <updated>2023-01-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2023-01-21
      
      
        &thinsp;·&thinsp; last modified: 2025-01-05
      
      
        &thinsp;·&thinsp; <span title="1847 words">8 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'haskell'." href="/tags/haskell.html" rel="tag">haskell</a>, <a title="All pages tagged 'hakyll'." href="/tags/hakyll.html" rel="tag">hakyll</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>By default, Hakyll uses pandoc to generate syntax highlighting for all
kinds of different programming languages. However, even in simple
examples the HTML this produces is unsatisfactory. Thankfully, the two
programs are almost infinitely customisable, and changing pretty much
any setting doesn’t usually involve a lot of work—this is no exception.
Using <code>pygmentize</code> as an example, I will show you how you can swap out
pandoc’s native syntax highlighting with pretty much any third party
tool that can output HTML.</p>
<!--more-->
<h2 id="the-problem">The problem</h2>
<p>Pandoc uses the <a href="https://hackage.haskell.org/package/skylighting">skylighting</a> library to generate syntax highlighting
for a given block of code. Skylighting, in turn, uses <a href="https://docs.kde.org/stable5/en/kate/katepart/highlight.html">KDE XML syntax
definitions</a> for the respective tokenisers. However, even for simple
examples I don’t agree with the HTML this generates. Consider the
following Haskell code block.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">fibs ::</span> [<span class="dt">Integer</span>]</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>fibs <span class="ot">=</span> <span class="dv">0</span> <span class="op">:</span> scanl' (<span class="op">+</span>) <span class="dv">1</span> fibs</span></code></pre></div>
<p>Pandoc would generate something like the following:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;</span><span class="kw">div</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;sourceCode&quot;</span><span class="ot"> id</span><span class="op">=</span><span class="st">&quot;cb1&quot;</span><span class="dt">&gt;</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&lt;</span><span class="kw">pre</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;sourceCode haskell&quot;</span><span class="dt">&gt;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;</span><span class="kw">code</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;sourceCode haskell&quot;</span><span class="dt">&gt;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> id</span><span class="op">=</span><span class="st">&quot;cb1-1&quot;</span><span class="dt">&gt;</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>        <span class="dt">&lt;</span><span class="kw">a</span><span class="ot"> href</span><span class="op">=</span><span class="st">&quot;#cb1-1&quot;</span><span class="ot"> aria-hidden</span><span class="op">=</span><span class="st">&quot;true&quot;</span><span class="ot"> tabindex</span><span class="op">=</span><span class="st">&quot;-1&quot;</span><span class="dt">&gt;</span> <span class="dt">&lt;/</span><span class="kw">a</span><span class="dt">&gt;</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>        <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;ot&quot;</span><span class="dt">&gt;</span>    fibs :: <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span> [<span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;dt&quot;</span><span class="dt">&gt;</span>Integer <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span>]</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> id</span><span class="op">=</span><span class="st">&quot;cb1-2&quot;</span><span class="dt">&gt;</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>        <span class="dt">&lt;</span><span class="kw">a</span><span class="ot"> href</span><span class="op">=</span><span class="st">&quot;#cb1-2&quot;</span><span class="ot"> aria-hidden</span><span class="op">=</span><span class="st">&quot;true&quot;</span><span class="ot"> tabindex</span><span class="op">=</span><span class="st">&quot;-1&quot;</span><span class="dt">&gt;</span> <span class="dt">&lt;/</span><span class="kw">a</span><span class="dt">&gt;</span>    fibs</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>        <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;ot&quot;</span><span class="dt">&gt;</span>= <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>        <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;dv&quot;</span><span class="dt">&gt;</span>0 <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span> <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;op&quot;</span><span class="dt">&gt;</span>: <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>        scanl<span class="dv">&amp;#39;</span> (<span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;op&quot;</span><span class="dt">&gt;</span>+ <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span>) <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;dv&quot;</span><span class="dt">&gt;</span>1</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>        <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span> fibs</span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;/</span><span class="kw">code</span><span class="dt">&gt;</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&lt;/</span><span class="kw">pre</span><span class="dt">&gt;</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;/</span><span class="kw">div</span><span class="dt">&gt;</span></span></code></pre></div>
<p>One can already see a few things wrong with this: (i) in the type
signature, the name of the list is smushed together with the separating
double colon (worse: it’s just in the “other” syntax class), (ii) in the
actual definition, <code>fibs</code> isn’t assigned any class at all, and (iii) the
assignment operator is also in the “other” class, instead of something
related to it being a built in operator! As one can imagine, this only
gets worse as snippets get more complicated.</p>
<p>These kinds of issues, combined with the fact that certain
languages—like Emacs Lisp—don’t have any syntax definitions at all,
annoyed me enough to look for an alternative way to highlight code on
this website.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> There are of course many options to choose from; I
went with <code>pygmentize</code>, solely because I already had it installed. All
that’s left is to tell pandoc and Hakyll to make use of it. As
mentioned, this thankfully doesn’t turn out to be very difficult!</p>
<h2 id="playing-with-pygmentize">Playing with <code>pygmentize</code></h2>
<p>Having never used <code>pygmentize</code> as a command line utility,<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> I expected
this to take some work—possibly involving Python <em>shudder</em>—but all of
the necessary pieces are already present in the CLI. First up, the <code>-f</code>
option specifies the formatter to use, which will decide the shape of
the output.</p>
<pre class="console"><code>$ pygmentize -L formatter | grep html
* html:
    Format tokens as HTML 4 ``&lt;span&gt;`` tags within a ``&lt;pre&gt;`` tag, wrapped
    in a ``&lt;div&gt;`` tag. The ``&lt;div&gt;``'s CSS class can be set by the `cssclass`
    option. (filenames *.html, *.htm)</code></pre>
<p>We can test how this highlighting looks straight away; executing</p>
<pre class="console"><code>$ echo &quot;fibs :: [Integer]\nfibs = 0 : scanl' (+) 1 fibs&quot; \
   \ | pygmentize -l haskell -f html</code></pre>
<p>produces an HTML output along the lines of</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;</span><span class="kw">div</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;highlight&quot;</span><span class="dt">&gt;</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&lt;</span><span class="kw">pre</span><span class="dt">&gt;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;</span><span class="kw">span</span><span class="dt">&gt;</span> <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;nf&quot;</span><span class="dt">&gt;</span>fibs <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span> <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;w&quot;</span><span class="dt">&gt;</span> <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;ow&quot;</span><span class="dt">&gt;</span>:: <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span> <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;w&quot;</span><span class="dt">&gt;</span> <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;p&quot;</span><span class="dt">&gt;</span>[<span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;kt&quot;</span><span class="dt">&gt;</span>Integer <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span> <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;p&quot;</span><span class="dt">&gt;</span>] <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;nf&quot;</span><span class="dt">&gt;</span>fibs <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span> <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;w&quot;</span><span class="dt">&gt;</span> <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;ow&quot;</span><span class="dt">&gt;</span>= <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span> <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;w&quot;</span><span class="dt">&gt;</span> <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;mi&quot;</span><span class="dt">&gt;</span>0 <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span> <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;w&quot;</span><span class="dt">&gt;</span> <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;kt&quot;</span><span class="dt">&gt;</span>: <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span> <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;w&quot;</span><span class="dt">&gt;</span> <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;n&quot;</span><span class="dt">&gt;</span>scanl<span class="dv">&amp;#39;</span> <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span> <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;w&quot;</span><span class="dt">&gt;</span> <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;p&quot;</span><span class="dt">&gt;</span>(<span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;o&quot;</span><span class="dt">&gt;</span>+ <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span> <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;p&quot;</span><span class="dt">&gt;</span>) <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;w&quot;</span><span class="dt">&gt;</span> <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;mi&quot;</span><span class="dt">&gt;</span>1 <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span> <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;w&quot;</span><span class="dt">&gt;</span> <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;n&quot;</span><span class="dt">&gt;</span>fibs <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&lt;/</span><span class="kw">pre</span><span class="dt">&gt;</span></span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;/</span><span class="kw">div</span><span class="dt">&gt;</span></span></code></pre></div>
<p>This looks much better! The class names are kind of obtuse, but
<code>pygmentize</code> can also give you nicely annotated CSS styles for its
supported colour schemes. For example, the following is a small excerpt
of the output:</p>
<pre class="console"><code>$ pygmentize -S emacs -f html
…
.nf { color: #00A000 }                    /* Name.Function */
.ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
.kt { color: #00BB00; font-weight: bold } /* Keyword.Type */
.w { color: #bbbbbb }                     /* Text.Whitespace */
.c { color: #008800; font-style: italic } /* Comment */
…</code></pre>
<p>You can redirect this into a <code>pygments.css</code> file, link to it (e.g., from
your <code>default.html</code> template), and be on your way. The annotation also
makes it very easy to change that file after the fact, in case
<code>pygmentize</code> does not have the theme that you want.</p>
<h2 id="integration">Integration</h2>
<p>The idea of what we want to do is quite simple: for every code block in
a given post, shell out to <code>pygmentize</code>, and use its output to replace
the block, somehow making sure pandoc doesn’t touch it afterwards.
Let’s solve this step by step.</p>
<h3 id="pandoc">Pandoc</h3>
<p>Pandoc has an aptly named <code>Pandoc</code> type, which represents the internal
structure of a document.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Pandoc</span> <span class="ot">=</span> <span class="dt">Pandoc</span> <span class="dt">Meta</span> [<span class="dt">Block</span>]</span></code></pre></div>
<p>We’ll neglect the metadata for now and just look at the <code>Block</code>s;
specifically, we want to zoom in on two constructors that will give you
everything we need:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Block</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Lots of other constructors omitted</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=</span> <span class="dt">CodeBlock</span> <span class="dt">Attr</span> <span class="dt">Text</span>   <span class="co">-- ^ Code block (literal) with attributes</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">RawBlock</span> <span class="dt">Format</span> <span class="dt">Text</span>  <span class="co">-- ^ Raw block</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="co">-- | Attributes: identifier, classes, key-value pairs</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Attr</span> <span class="ot">=</span> (<span class="dt">Text</span>, [<span class="dt">Text</span>], [(<span class="dt">Text</span>, <span class="dt">Text</span>)])</span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="co">-- | Formats for raw blocks</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">Format</span> <span class="ot">=</span> <span class="dt">Format</span> <span class="dt">Text</span></span></code></pre></div>
<p>To get a feeling for how these <code>CodeBlock</code>s look, again consider our
<code>fibs</code> example from above. By default, the corresponding <code>CodeBlock</code>
for this would look something like</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="dt">CodeBlock</span> (<span class="st">&quot;&quot;</span>, [<span class="st">&quot;haskell&quot;</span>], [])</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>          <span class="st">&quot;fibs :: [Integer]\nfibs = 0 : scanl' (+) 1 fibs&quot;</span></span></code></pre></div>
<p>Importantly, the language (if any) is the first argument of the
<code>classes</code> field of <code>Attr</code>.</p>
<p>A strategy begins to form: look for all occurences of a <code>CodeBlock</code> in
the <code>Pandoc</code> type, and replace it with a <code>RawBlock "html"</code> such that it
isn’t touched anymore. Doing so will not pose very many
challenges—pandoc has really great capabilities for
<a href="https://hackage.haskell.org/package/pandoc-types/docs/Text-Pandoc-Walk.html">walking</a> its AST in order to facilitate exactly these
kinds of changes. Unsurprisingly, the <code>Walkable</code> class resides over all
things walkable; an abbreviated definition looks like this:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">Walkable</span> a b <span class="kw">where</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- | @walk f x@ walks the structure @x@ (bottom up) and replaces every</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- occurrence of an @a@ with the result of applying @f@ to it.</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="ot">  walk  ::</span> (a <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> b</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>  walk f <span class="ot">=</span> runIdentity <span class="op">.</span> walkM (<span class="fu">return</span> <span class="op">.</span> f)</span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- | A monadic version of 'walk'.</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a><span class="ot">  walkM ::</span> (<span class="dt">Monad</span> m, <span class="dt">Applicative</span> m, <span class="dt">Functor</span> m) <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> m a) <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> m b</span></code></pre></div>
<p>Specifically, as we’ll need to shell out to an external program, let us
restrict our attention to the more general <code>walkM</code> function here. There
is an instance</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Walkable</span> <span class="dt">Block</span> <span class="dt">Pandoc</span></span></code></pre></div>
<p>which will be all that we need. The necessary code now just
materialises in front of our eyes:<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a></p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- {-# LANGUAGE BlockArguments    #-}</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- {-# LANGUAGE LambdaCase        #-}</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="co">-- {-# LANGUAGE OverloadedStrings #-}</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a><span class="co">-- {-# LANGUAGE ViewPatterns      #-}</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="co">--</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a><span class="co">-- import Data.Maybe (fromMaybe, listToMaybe)</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a><span class="co">-- import qualified Data.Text as T</span></span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a><span class="co">-- import Hakyll</span></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a><span class="co">-- import System.Process (readProcess)</span></span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a><span class="co">-- import Text.Pandoc.Definition (Block (CodeBlock, RawBlock), Pandoc)</span></span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a><span class="co">-- import Text.Pandoc.Walk (walk, walkM)</span></span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-13"><a href="#cb12-13" aria-hidden="true" tabindex="-1"></a><span class="ot">pygmentsHighlight ::</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> <span class="dt">Pandoc</span></span>
<span id="cb12-14"><a href="#cb12-14" aria-hidden="true" tabindex="-1"></a>pygmentsHighlight <span class="ot">=</span> walkM \<span class="kw">case</span></span>
<span id="cb12-15"><a href="#cb12-15" aria-hidden="true" tabindex="-1"></a>  <span class="dt">CodeBlock</span> (_, (T.unpack <span class="ot">-&gt;</span> lang) <span class="op">:</span> _, _) (T.unpack <span class="ot">-&gt;</span> body) <span class="ot">-&gt;</span></span>
<span id="cb12-16"><a href="#cb12-16" aria-hidden="true" tabindex="-1"></a>    <span class="dt">RawBlock</span> <span class="st">&quot;html&quot;</span> <span class="op">.</span> T.pack <span class="op">&lt;$&gt;</span> unsafeCompiler (callPygs lang body)</span>
<span id="cb12-17"><a href="#cb12-17" aria-hidden="true" tabindex="-1"></a>  block <span class="ot">-&gt;</span> <span class="fu">pure</span> block</span>
<span id="cb12-18"><a href="#cb12-18" aria-hidden="true" tabindex="-1"></a> <span class="kw">where</span></span>
<span id="cb12-19"><a href="#cb12-19" aria-hidden="true" tabindex="-1"></a><span class="ot">  pygs ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">String</span></span>
<span id="cb12-20"><a href="#cb12-20" aria-hidden="true" tabindex="-1"></a>  pygs lang <span class="ot">=</span> readProcess <span class="st">&quot;pygmentize&quot;</span> [<span class="st">&quot;-l&quot;</span>, lang, <span class="st">&quot;-f&quot;</span>, <span class="st">&quot;html&quot;</span>]</span></code></pre></div>
<p>Notice how <em>a priori</em> this would have type <code>Pandoc -&gt; IO Pandoc</code>, but
since we want to use it from Hakyll I’ve already inserted a call to
<code>unsafeCompiler</code> in the correct place.</p>
<p>Further, the above code checks whether the block has an explicit
language attached to it and, if not, leaves it alone; this was suggested
by <a href="https://old.reddit.com/r/haskell/comments/10ilrui/pygmentising_hakylls_syntax_highlighting/j5fih5h/">LSLeary</a> on Reddit. If you want to have a single <code>div</code> class for
every code block—say, for some custom CSS—then you can replace</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>  <span class="dt">CodeBlock</span> (_, (T.unpack <span class="ot">-&gt;</span> lang) <span class="op">:</span> _, _) (T.unpack <span class="ot">-&gt;</span> body) <span class="ot">-&gt;</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">RawBlock</span> <span class="st">&quot;html&quot;</span> <span class="op">.</span> T.pack <span class="op">&lt;$&gt;</span> unsafeCompiler (callPygs lang body)</span></code></pre></div>
<p>with</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>  <span class="dt">CodeBlock</span> (_, listToMaybe <span class="ot">-&gt;</span> mbLang, _) (T.unpack <span class="ot">-&gt;</span> body) <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> lang <span class="ot">=</span> T.unpack (fromMaybe <span class="st">&quot;text&quot;</span> mbLang)</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">RawBlock</span> <span class="st">&quot;html&quot;</span> <span class="op">.</span> T.pack <span class="op">&lt;$&gt;</span> unsafeCompiler (callPygs lang body)</span></code></pre></div>
<h3 id="hakyll">Hakyll</h3>
<p>Thankfully, integrating <code>pygmentsHighlight</code> into Hakyll is not very
complicated either. In addition to the normal <code>pandocCompiler</code> or
<code>pandocCompilerWith</code> functions that you are probably already using,
there is also <a href="https://hackage.haskell.org/package/hakyll-4.15.1.1/docs/Hakyll-Web-Pandoc.html#v:pandocCompilerWithTransformM">pandocCompilerWithTransformM</a>:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a>pandocCompilerWithTransformM</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> <span class="dt">ReaderOptions</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">WriterOptions</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> (<span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> <span class="dt">Pandoc</span>)</span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span></code></pre></div>
<p>Basically, in additions to reader and writer options, it also takes a
monadic transformation of pandoc’s AST and builds an appropriate
<code>Compiler</code> from that.</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- import Hakyll</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- import Text.Pandoc.Options</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a><span class="ot">myPandocCompiler ::</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a>myPandocCompiler <span class="ot">=</span></span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>  pandocCompilerWithTransformM</span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a>    defaultHakyllReaderOptions</span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a>    defaultHakyllWriterOptions</span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a>    pygmentsHighlight</span></code></pre></div>
<p>The <code>myPandocCompiler</code> function can now be used as any other compiler;
for example:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> hakyll <span class="kw">do</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- …</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>  match <span class="st">&quot;posts/**.md&quot;</span> <span class="kw">do</span></span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a>    route (setExtension <span class="st">&quot;html&quot;</span>)</span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a>    compile <span class="op">$</span> myPandocCompiler</span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a>          <span class="op">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/default.html&quot;</span> defaultContext</span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a>          <span class="op">&gt;&gt;=</span> relativizeUrls</span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- …</span></span></code></pre></div>
<p>For a full working example, see <a href="https://github.com/slotThe/slotThe.github.io/blob/main/src/site.hs#L87">my configuration</a>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>That’s it! To my eyes, syntax highlighting looks much better now, and
on the way I—and perhaps you as well—even learned a little bit about how
pandoc internally represents its documents. Time well spent. As I said
in the beginning, in principle one could swap out <code>pygmentize</code> for any
other syntax highlighter that can produce HTML. However, for me these
results are good enough that I will probably not try out every tool
under the sun, chasing that ever present epsilon of highlighting cases
which I still don’t agree with—at least for now.</p>
<h2 id="epilogue-a-pygments-server">Epilogue: a pygments server</h2>
<p><span style="position: relative; top: -0.8em"><em>Added on 2025-01-05</em></span></p>
<p>Shelling out to <code>pygmentize</code> every time is quite expensive,
and once the site contains its fair share of code blocks one is curious if better solutions exist.
As <a href="https://github.com/pygments/pygments">pygments</a> itself is a Python project,
one can instead spin up the interpreter once, and then just query the API a whole lot:</p>
<div class="include" data-from="scripts/pygmentize.py">

</div>
<p>The script is first fed the amount of stuff we intend to send on a separate line,
followed by the language, and finally the body of the block.
One could faff around with bidirectional process communication at this point,
but good old files will also do the trick just fine.</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="ot">pygmentsHighlight ::</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> <span class="dt">Pandoc</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>pygmentsHighlight pandoc <span class="ot">=</span> recompilingUnsafeCompiler <span class="kw">do</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a>  (hin, _, _, _) <span class="ot">&lt;-</span> runInteractiveCommand <span class="st">&quot;python scripts/pygmentize.py&quot;</span></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a>  hSetBuffering hin <span class="dt">NoBuffering</span></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a>  void <span class="op">$</span> (<span class="ot">`walkM`</span> pandoc) \<span class="kw">case</span></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a>    cb<span class="op">@</span>(<span class="dt">CodeBlock</span> (_, listToMaybe <span class="ot">-&gt;</span> mbLang, _) body) <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a>      <span class="kw">let</span> cod <span class="ot">=</span> <span class="fu">mconcat</span> [ T.pack (<span class="st">&quot;/tmp/&quot;</span> <span class="op">&lt;&gt;</span> hash [T.unpack body]), <span class="st">&quot;\n&quot;</span></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a>                        , fromMaybe <span class="st">&quot;text&quot;</span> mbLang <span class="op">&lt;&gt;</span> <span class="st">&quot;\n&quot;</span></span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true" tabindex="-1"></a>                        , body</span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true" tabindex="-1"></a>                        ]</span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true" tabindex="-1"></a>      hPrint hin (T.length cod)</span>
<span id="cb18-12"><a href="#cb18-12" aria-hidden="true" tabindex="-1"></a>      T.hPutStr hin cod</span>
<span id="cb18-13"><a href="#cb18-13" aria-hidden="true" tabindex="-1"></a>      <span class="fu">pure</span> cb</span>
<span id="cb18-14"><a href="#cb18-14" aria-hidden="true" tabindex="-1"></a>    block <span class="ot">-&gt;</span> <span class="fu">pure</span> block</span>
<span id="cb18-15"><a href="#cb18-15" aria-hidden="true" tabindex="-1"></a>  threadDelay <span class="fl">1.0e6</span></span>
<span id="cb18-16"><a href="#cb18-16" aria-hidden="true" tabindex="-1"></a>  (<span class="ot">`walkM`</span> pandoc) \<span class="kw">case</span></span>
<span id="cb18-17"><a href="#cb18-17" aria-hidden="true" tabindex="-1"></a>    <span class="dt">CodeBlock</span> _ body <span class="ot">-&gt;</span></span>
<span id="cb18-18"><a href="#cb18-18" aria-hidden="true" tabindex="-1"></a>      <span class="dt">RawBlock</span> <span class="st">&quot;html&quot;</span> <span class="op">&lt;$&gt;</span> T.readFile (<span class="st">&quot;/tmp/&quot;</span> <span class="op">&lt;&gt;</span> hash [T.unpack body])</span>
<span id="cb18-19"><a href="#cb18-19" aria-hidden="true" tabindex="-1"></a>    block <span class="ot">-&gt;</span> <span class="fu">pure</span> block</span></code></pre></div>
<h2 id="backlinks">Backlinks</h2>
<ul>
<li>Vaibhav Sagar has written a
<a href="https://vaibhavsagar.com/blog/2023/01/29/ghc-syntax-hakyll/">fantastic post</a>
outlining how one can use GHC itself to generate highlighting for Haskell code
using the <a href="https://hackage.haskell.org/package/ghc-syntax-highlighter">ghc-syntax-highlighter</a> library.
Seeing how there are a lot of language extensions that <code>pygmentize</code> does not highlight correctly,
this seems well worth it!</li>
</ul>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>All of this work for a mostly greyscale theme!<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>So far, the only interaction I had with the program was through
the excellent <a href="https://ctan.org/pkg/minted?lang=en">minted</a> LaTeX package.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>If all else fails, simply <a href="https://aphyr.com/posts/353-rewriting-the-technical-interview">trace the sigils in the air and give
them form</a>.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Immediately Refile Notes with X.P.OrgMode</title>
    <link href="https://tony-zorman.com/posts/orgmode-refiling.html" />
    <id>https://tony-zorman.com/posts/orgmode-refiling.html</id>
    <published>2023-01-14T00:00:00Z</published>
    <updated>2023-01-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2023-01-14
      
      
        &thinsp;·&thinsp; last modified: 2023-11-09
      
      
        &thinsp;·&thinsp; <span title="668 words">3 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>, <a title="All pages tagged 'haskell'." href="/tags/haskell.html" rel="tag">haskell</a>, <a title="All pages tagged 'xmonad'." href="/tags/xmonad.html" rel="tag">xmonad</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>In a <a href="/posts/orgmode-prompt/2022-08-27-xmonad-and-org-mode.html">previous post</a> I talked about
<a href="https://xmonad.github.io/xmonad-docs/xmonad-contrib/XMonad-Prompt-OrgMode.html">XMonad.Prompt.OrgMode</a>, an XMonad module to rapidly capture thoughts
and ideas into an Org file. The functionality that the module provides
has proven to be extremely useful to me, and really I couldn’t be
happier with it. However, a user recently contacted me by email and
told me that they’re missing but one feature: the ability to immediately
refile notes.</p>
<!--more-->
<h2 id="motivation">Motivation</h2>
<p>If you don’t know, <a href="https://orgmode.org/manual/Refile-and-Copy.html">refiling</a> is the act of moving an entry<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> <em>below</em>
another heading; i.e., such that it becomes a subheading there. This
can be useful for structuring TODOs into separate categories: one might
have projects called “work”, “life”, “XMonad”, and so on, where all
related tasks live. Quite convenient!</p>
<p>So far, X.P.OrgMode just dumped the created note at the end of the
specified file, leaving you to pick up the pieces. This aligns with my
personal workflow—while I extensively use refiling, I only do so at the
end of the day after reviewing all tasks that have accumulated.
However, it is conceivable that someone might want to refile certain
tasks straight away when it’s pretty clear that (i) they’ll be kept, and
(ii) they can be unambiguously assigned to a certain heading (e.g., an
already scheduled work meeting with X).</p>
<h2 id="showcase">Showcase</h2>
<p>Long story short, this is now built into X.P.OrgMode. There are two new
functions:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">    orgPromptRefile   ::</span> <span class="dt">XPConfig</span> <span class="ot">-&gt;</span>           <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">FilePath</span> <span class="ot">-&gt;</span> <span class="dt">X</span> ()</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="ot">    orgPromptRefileTo ::</span> <span class="dt">XPConfig</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">FilePath</span> <span class="ot">-&gt;</span> <span class="dt">X</span> ()</span></code></pre></div>
<p>The former takes the same arguments as <a href="https://hackage.haskell.org/package/xmonad-contrib-0.17.1/docs/XMonad-Prompt-OrgMode.html#v:orgPrompt">orgPrompt</a> (which see), and is
for popping up another prompt that asks for a heading. The latter
refiles everything under the specified (as the second argument) heading.</p>
<p>The way <code>orgPromptRefile</code> works is that, after querying for a TODO, it
<em>always</em> inserts the note into the file and then <em>possibly</em> refiles it
to another heading. This way, you don’t need to worry about losing
notes when you abort the refiling prompt or enter a non-existent
heading.</p>
<p><img class="pure-img" src="../images/orgmode-refiling/refiling.gif" alt="Entering a TODO, and refiling it to an appropriate place"></p>
<p>Note: Refiling is (near) instant; the delay you are seeing above is due
to <code>auto-revert-mode</code>.</p>
<h3 id="some-gory-details">Some gory details</h3>
<p>All of the refiling is actually directly done by Emacs itself! More
precisely, the EDSL that <a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Util-Run.html">XMonad.Util.Run</a> defines—which I’ve also
<a href="/posts/2022-05-25-calling-emacs-from-xmonad.html">written about</a>—shells out to Emacs. This
might intuitively <em>feel</em> horrible, but that’s just another reason to
share it:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ot">refile ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">FilePath</span> <span class="ot">-&gt;</span> <span class="dt">X</span> ()</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>refile (asString <span class="ot">-&gt;</span> parent) (asString <span class="ot">-&gt;</span> fp) <span class="ot">=</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  proc <span class="op">$</span> inEmacs</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>     <span class="op">&gt;-&gt;</span> asBatch</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>     <span class="op">&gt;-&gt;</span> eval (progn</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>                [ <span class="st">&quot;find-file&quot;</span> <span class="op">&lt;&gt;</span> fp</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>                , <span class="st">&quot;end-of-buffer&quot;</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>                , <span class="st">&quot;org-refile nil nil&quot;</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>                    <span class="op">&lt;&gt;</span> list [ parent, fp, <span class="st">&quot;nil&quot;</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>                            , saveExcursion</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>                               [<span class="st">&quot;org-find-exact-headline-in-buffer&quot;</span> <span class="op">&lt;&gt;</span> parent]</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>                            ]</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>                , <span class="st">&quot;save-buffer&quot;</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>                ])</span></code></pre></div>
<p>This—as you probably guessed already—just executes the following elisp
snippet in Emacs’s batch mode:</p>
<pre class="emacs-lisp"><code>(progn
  (find-file «fp»)
  (end-of-buffer)
  (org-refile nil nil
              (list «parent» «fp» nil
                    (save-excursion
                      (org-find-exact-headline-in-buffer «parent»))))
  (save-buffer))</code></pre>
<p>I know this seems insane, but letting Emacs do this work is actually
much less brittle than the alternative. The Org maintainers certainly
know best what refiling <em>means</em>, and thus also what it entails—if all of
this logic is already written, why not take advantage of it? Plus, I
now don’t have to keep track of subtle changes in newer versions of Org.</p>
<h2 id="closing-thoughts">Closing thoughts</h2>
<p>Writing this was actually a lot of fun, and a great opportunity to play
with the EDSL that X.U.Run exposes. I reckon there are a few places in
my own XMonad configuration in which I could use these kinds of “Emacs
scripts” to great effect!</p>
<p>One other idea I’ve had is to integrate this into the language that
plain old <code>orgPrompt</code> accepts. It could be prefixed by something like
“<code>ref:</code>”, followed by a unique substring with which to identity a
heading. This would have the disadvantage that—without the second
prompt—one would not get any suggestions for headings. However, if you
want to refile something you probably know where you want to put it;
plus, it would not involve a possibly distracting second prompt.
Actually, this sounds like a good first pull request: contributions
welcome!</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>A headline, possibly with an attached body.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>XMonad Module Showcase: X.A.TopicSpace</title>
    <link href="https://tony-zorman.com/posts/topic-spaces.html" />
    <id>https://tony-zorman.com/posts/topic-spaces.html</id>
    <published>2022-09-11T00:00:00Z</published>
    <updated>2022-09-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2022-09-11
      
      
        &thinsp;·&thinsp; last modified: 2023-11-09
      
      
        &thinsp;·&thinsp; <span title="1309 words">6 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'haskell'." href="/tags/haskell.html" rel="tag">haskell</a>, <a title="All pages tagged 'xmonad'." href="/tags/xmonad.html" rel="tag">xmonad</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>One of my favourite—and most used—modules is <code>XMonad.​Actions.​TopicSpace</code>.
However, it seems relatively unknown among the general XMonad community.
I fear this is due to the fact that the module is quite old and formerly
had a rather high barrier to entry. Despite having been given shiny
<a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Actions-TopicSpace.html">new documentation</a>, lots of people probably did not bother
revisiting it and thus still don’t really understand why they might be
interested in using topics instead of workspaces. Time to change that!</p>
<!--more-->
<h2 id="introduction">Introduction</h2>
<p>First, this post is not to be seen as a tutorial on <code>X.A.TopicSpace</code>, but
much rather as a showcase of how its functionality could be used day to
day. If you like what you see, perhaps check out the
<a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Actions-TopicSpace.html">docs</a> and give it a spin yourself! I have already written
an introduction to the module in the post about my <a href="./my-phd-workflow.html">research workflow</a>:</p>
<blockquote>
<p>XMonad has a module called TopicSpace, which upgrades the X11
workspace—virtual desktop—concept to so-called topics. These are
workspaces with a “theme” associated to them; for example, I have a
topic for every project that I’m currently working on. This results
in a clean separation of concerns. Plus, I always know where my
windows are!</p>
<p>Every topic has a directory and a “startup hook”, firing when the
topic is switched to and empty, associated to it. While most
convenient for programming related tasks—e.g., spawn <code>ghcid</code> in the
relevant directory or automatically build and open this website—it’s
also quite convenient for mathematical projects.</p>
<p>I have set up special keybindings to bring up an Emacs session in the
topic directory, or spawn a terminal there. Switching to topics is
done fuzzily via the XMonad prompt, which means I only have to type a
few characters to get to my destination. This makes it feasible to
have 30 topics, instead of the usual 9 or so, in the first place. As
a result, it’s rather fast to go from thinking about a certain problem
to working on it.</p>
</blockquote>
<p>At a glance, this probably does not sound very impressive—so one can
have a directory and some function associated to a workspace (hereafter
also called “topic”), big deal. However, we will see that with a bit of
creativity this can be used to great effect.</p>
<h2 id="examples">Examples</h2>
<h3 id="basic-topics">Basic topics</h3>
<p>The most obvious application of all of this is to have workspaces that
do one and only one thing. For example, I have a topic dedicated to
connecting to a VPN, should the need arise. Naturally, I automatically
want to execute <code>openvpn</code> and pick a random server whenever I happen to
enter that workspace and it’s empty (i.e., <code>openvpn</code> is not already
running).</p>
<p>More such use cases include having a topic dedicated to my RSS feed
reader, instant messaging, or IRC. Since I only show workspaces with
windows on them in xmobar, I can just glance at my status bar to find
out whether I currently have, for example, IRC open. No additional
program for checking the status of things necessary! Obviously, this
<em>modus operandi</em> takes a bit of discipline to uphold over the course of
the day, but I find that such a separation of concerns greatly reduces
mental load regarding what’s currently happening on my computer.
Definitely worth it.</p>
<p>In terms of code, this—as well as the following examples—heavily use the
<a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Util-Run.html#g:EDSL">new interface</a> to XMonad.Util.Run, which allows one to
spawn processes in a declarative and compositional way; I’ve <a href="./calling-emacs-from-xmonad.html">written
about this</a> in another post. For example, my RSS topic is
specified thusly:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- import XMonad.Actions.TopicSpace (inHome)</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- import XMonad.Util.Run</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  , inHome <span class="st">&quot;7:RSS&quot;</span> <span class="op">$</span> proc <span class="op">$</span> inEditor</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>                        <span class="op">&gt;-&gt;</span> setFrameName <span class="st">&quot;elfeed&quot;</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>                        <span class="op">&gt;-&gt;</span> execute (elispFun <span class="st">&quot;elfeed&quot;</span>)</span></code></pre></div>
<p>Here, <code>inHome</code> is a little helper function that takes a topic name and
an action, and creates a new topic with <code>$HOME</code> as its associated
directory.</p>
<p>You can find all of my topics (and there are a lot of them)
<a href="https://gitlab.com/slotThe/dotfiles/-/blob/master/xmonad/.config/xmonad/src/xmonad.hs#L219-L265">here</a>.</p>
<h3 id="spawning-everything-in-the-topic-directory">Spawning <em>everything</em> in the topic directory</h3>
<p>More generally, programming projects in the same language almost always
require me to open the same set of standard tools, so it’s extremely
convenient to directly spawn them upon first visit. This allows for
very little friction before starting to work on whatever I wanted to
work on.</p>
<p>For example, I want to open Emacs and <a href="https://github.com/ndmitchell/ghcid">ghcid</a> in every Haskell project
of mine—so why not automate this? Using what X.U.Run gives us, we can
quickly throw together a function that executes the given instruction
inside of a terminal:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- import XMonad.Actions.TopicSpace (currentTopicDir)</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- 'topicConfig' is my personal topic configuration.</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="co">-- | Execute a program in the topic directory (inside a terminal).</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="ot">executeInTopic ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">X</span> ()</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>executeInTopic p <span class="ot">=</span> proc <span class="op">$</span> (termInDir <span class="op">&gt;-$</span> currentTopicDir topicConfig)</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>                      <span class="op">&gt;-&gt;</span> execute p</span></code></pre></div>
<p>Similar functions can be created for spawning the terminal and editor:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- Whatever you're looking for, it's probably in X.A.TopicSpace</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- or X.U.Run.</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="co">-- | Spawn terminal in topic directory.</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="ot">spawnTermInTopic ::</span> <span class="dt">X</span> ()</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>spawnTermInTopic <span class="ot">=</span> proc <span class="op">$</span> termInDir <span class="op">&gt;-$</span> currentTopicDir topicConfig</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="co">-- | Spawn editor in the current topic directory.</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="ot">spawnEditorInTopic ::</span> <span class="dt">X</span> ()</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>spawnEditorInTopic <span class="ot">=</span> proc <span class="op">$</span> inEditor <span class="op">&gt;-$</span> currentTopicDir topicConfig</span></code></pre></div>
<p>Check the documentation of <a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Util-Run.html#g:EDSL">XMonad.Util.Run</a> to see how <code>inEditor</code> and
<code>termInDir</code> are defined and may be customised.</p>
<p>In my mathematical and other work-adjacent projects I keep it pretty
simple; an editor there is mostly sufficient.</p>
<p><img class="pure-img" src="../images/phd-workflow/topics.gif" alt="Navigating to an empty topic, Emacs pops up"></p>
<p>We can also get a little bit more fancy. Since the topic action is just
a general <code>X</code> action, we can really do anything we want in there. In
addition to spawning programs, all of my Haskell projects should default
to the <code>Hacking</code><a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> layout:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ot">spawnHaskell ::</span> <span class="dt">X</span> ()</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>spawnHaskell <span class="ot">=</span> sendMessage (<span class="dt">JumpToLayout</span> <span class="st">&quot;Hacking&quot;</span>)</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>            <span class="op">*&gt;</span> spawnEditorInTopic</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>            <span class="op">*&gt;</span> executeInTopic <span class="st">&quot;ghcid&quot;</span></span></code></pre></div>
<p>And Voilà, we can now attach this action to all the topics that we want!</p>
<p>Note that the <code>*&gt;</code> operator is—in this case—just the sequencing of
actions. If you’re more comfortable with <code>do</code> notation, you can also
write the above as</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ot">spawnHaskell ::</span> <span class="dt">X</span> ()</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>spawnHaskell <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>  sendMessage (<span class="dt">JumpToLayout</span> <span class="st">&quot;Hacking&quot;</span>)</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>  spawnEditorInTopic</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>  executeInTopic <span class="st">&quot;ghcid&quot;</span></span></code></pre></div>
<p>Furthermore, since the associated directory for a topic can easily be
made <code>$HOME</code> by default (as we’ve seen, <code>X.A.TopicSpace</code> even exports
the <code>inHome</code> function), spawning programs in certain topics can easily
be made to replace the default keybindings!</p>
<p>For the sake of completeness, I will showcase one slightly more
complicated example. My main shell environment is <code>eshell</code> and getting
sane behaviour there presents one with a few more obstacles than
<code>spawnTermInTopic</code> did. It also uses <code>inProgram</code> instead of <code>inEditor</code>,
allowing access to a different instance of the Emacs server.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- | Spawn an eshell frame in the current topic directory.</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="ot">spawnEshellInTopic ::</span> <span class="dt">X</span> ()</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>spawnEshellInTopic <span class="ot">=</span> currentTopicDir topicConfig <span class="op">&gt;&gt;=</span> \dir <span class="ot">-&gt;</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>  proc <span class="op">$</span> inProgram <span class="st">&quot;emacsclient -a '' -c -s eshell&quot;</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>     <span class="op">&gt;-&gt;</span> execute (progn [ <span class="st">&quot;eshell&quot;</span> <span class="op">&lt;&gt;</span> quote <span class="st">&quot;new-shell&quot;</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>                        , <span class="st">&quot;eshell/cd&quot;</span> <span class="op">&lt;&gt;</span> asString dir</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>                        , <span class="st">&quot;eshell/clear-scrollback&quot;</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>                        , <span class="st">&quot;eshell-send-input&quot;</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>                        ])</span></code></pre></div>
<p>All in all, we have something that looks a little bit like this:</p>
<p><img class="pure-img" src="../images/topic-space/haskell-topic.gif" alt="Switching to a Haskell topic, then using project.el to navigate the project"></p>
<h3 id="testing-this-website">Testing this website</h3>
<p>Much in the same vein as my Haskell topics, I find the <code>website</code> topic
to be extremely handy—you can probably guess what it’s used for. Its
associated function <code>spawnWebsite</code> switches to the “Tall” layout, spawns
an Emacs frame in the topic directory, builds the website, and opens a
browser window pointing to the local copy:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ot">spawnWebsite ::</span> <span class="dt">X</span> ()</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>spawnWebsite <span class="ot">=</span> switchToLayout <span class="st">&quot;Tall&quot;</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>            <span class="op">*&gt;</span> spawnEditorInTopic</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>            <span class="op">*&gt;</span> executeInTopic <span class="st">&quot;hakyll-build.sh --hold&quot;</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>            <span class="op">*&gt;</span> spawn <span class="st">&quot;browser-new-window.sh localhost:8000&quot;</span></span></code></pre></div>
<p>The whole thing looks like this:</p>
<p><img class="pure-img" src="../images/topic-space/website.gif" alt="Switching to an empty topic; various things automatically start up"></p>
<h2 id="conclusion">Conclusion</h2>
<p>Hopefully these examples have convinced you to give <code>X.A.TopicSpace</code> a spin;
perhaps you’ve even gotten some ideas of your own you’d like to try out.
Although conceptually very simple, the module can be used in a variety
of ways to automate boring tasks just that tiny bit more—definitely a
win in my book!</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>In case you are interested:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>hacking</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=</span> renamed [<span class="dt">Replace</span> <span class="st">&quot;Hacking&quot;</span>]</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  <span class="op">.</span> limitWindows <span class="dv">3</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">.</span> magnify <span class="fl">1.3</span> (<span class="dt">NoMaster</span> <span class="dv">3</span>) <span class="dt">True</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>  <span class="op">$</span> <span class="dt">ResizableTall</span> <span class="dv">1</span> (<span class="dv">3</span> <span class="op">%</span> <span class="dv">100</span>) (<span class="dv">13</span> <span class="op">%</span> <span class="dv">25</span>) []</span></code></pre></div>
<p>As the rest of my dotfiles, it’s available
<a href="https://gitlab.com/slotThe/dotfiles/-/blob/master/xmonad/.config/xmonad/src/xmonad.hs#L341">here</a>.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Calling Emacs from XMonad</title>
    <link href="https://tony-zorman.com/posts/calling-emacs-from-xmonad.html" />
    <id>https://tony-zorman.com/posts/calling-emacs-from-xmonad.html</id>
    <published>2022-05-25T00:00:00Z</published>
    <updated>2022-05-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2022-05-25
      
      
        &thinsp;·&thinsp; last modified: 2023-03-07
      
      
        &thinsp;·&thinsp; <span title="1742 words">7 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>, <a title="All pages tagged 'haskell'." href="/tags/haskell.html" rel="tag">haskell</a>, <a title="All pages tagged 'xmonad'." href="/tags/xmonad.html" rel="tag">xmonad</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>In the post about my <a href="/posts/phd-workflow/2022-05-01-my-phd-workflow.html#citations">research workflow</a>, I briefly mentioned having to
call Emacs—or other external programs—from within XMonad. I figured
that this was perhaps something that could be of use to more people than
just me. After a little bit of deliberation and coming up with a
generic enough API, I decided to turn it into an XMonad module!</p>
<p>These changes now live as part of the <a href="https://github.com/xmonad/xmonad-contrib">xmonad-contrib</a> repository and
are—from version 0.17.1 onwards—available for everyone to try out.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>
I’d like to use this opportunity to both showcase the module—how and why
one would use it—and talk a little bit about its only redeeming
implementation detail.</p>
<!--more-->
<h2 id="main-use-cases">Main use cases</h2>
<p>Wouldn’t it be neat to have some kind of <a href="https://en.wikipedia.org/wiki/Domain-specific_language">EDSL</a> for spawning external
processes? Something where one can just compose Haskell functions
together, not having to worry about the actual underlying string
manipulations? Something that’s composable, so that one does not have
to write the same <code>"emacsclient -c -a '' …"</code> or <code>"alacritty --working-directory …"</code> prefix over and over again? Well, at least
that’s what I thought on some rainy afternoon a few months ago.</p>
<h3 id="scratchpads">Scratchpads</h3>
<p>The first use case that I came up with was <a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Util-NamedScratchpad.html">scratchpad</a>s. The idea of
these things is simple: while we normally don’t like floating windows,
it’s quite convenient to have some of them around that one can bring to
the current workspace, as well as hide, with a single keybinding. This
is useful for things like email, a calendar, a daily agenda, a
calculator, etc.</p>
<p>For scratchpads to work reliably, windows need to have some unique
characteristic they can be recognised by, like a special <a href="https://tronche.com/gui/x/icccm/sec-4.html#WM_CLASS">class or
instance name</a>. Endowing an application with additional properties
sounds exactly like what our EDSL should be good at, so let’s try that!</p>
<p>Using the new features of <code>XMonad.Util.Run</code>, we could spawn an Emacs
frame with a special name for our scratchpad hooks to grab onto, and
execute <code>notmuch</code>:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">mailSession ::</span> <span class="dt">X</span> <span class="dt">String</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>mailSession <span class="ot">=</span> getInput <span class="op">$</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  inEditor <span class="op">&gt;-&gt;</span> setFrameName mailInstName</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>           <span class="op">&gt;-&gt;</span> eval (function <span class="st">&quot;notmuch&quot;</span>)</span></code></pre></div>
<p>You can read the <code>&gt;-&gt;</code> operator a little like a pipe, where you start
with what you want and thread that information through to the end: “I
want an editor with a certain frame name that also starts up notmuch”.</p>
<p>In full, the above function would produce the string (broken into a few
lines for better readability)</p>
<pre><code>&quot;emacsclient -c -a ''
             -F '(quote (name . \&quot;notmuch-scratch\&quot;))'
             --eval '(notmuch)'&quot;</code></pre>
<p>which would be quite bothersome to type indeed.</p>
<p>Because the type of <code>mailSession</code> is <code>X String</code> and not just <code>String</code>,
the setup for this is a little bit different than usual when using
scratchpads. You would use it like this:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">myScratchpads ::</span> <span class="dt">X</span> [<span class="dt">NamedScratchpad</span>]</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>myScratchpads <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- First, get the finished string.</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  mailSession <span class="ot">&lt;-</span> getInput <span class="op">$</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    inEditor <span class="op">&gt;-&gt;</span> setFrameName mailInst <span class="op">&gt;-&gt;</span> eval (elispFun <span class="st">&quot;notmuch&quot;</span>)</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Now we can insert it into our scratchpads as normal.</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>  <span class="fu">pure</span> [ <span class="dt">NS</span> <span class="st">&quot;Mail&quot;</span> mailSession (appName <span class="op">=?</span> mailInst) quake ]</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a> <span class="kw">where</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>  mailInst <span class="ot">=</span> <span class="st">&quot;notmuch-scratch&quot;</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>  quake    <span class="ot">=</span> customFloating <span class="op">$</span> <span class="dt">RationalRect</span> <span class="dv">0</span> <span class="dv">0</span> <span class="dv">1</span> (<span class="dv">4</span> <span class="op">/</span> <span class="dv">5</span>)</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a><span class="co">-- The call to @namedScratchpadManageHook@ in the manageHook also</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a><span class="co">-- needs to be slightly adjusted.</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="ot">myManageHook ::</span> <span class="dt">ManageHook</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>myManageHook <span class="ot">=</span> <span class="fu">mconcat</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>  [ …</span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>  , namedScratchpadManageHook <span class="op">=&lt;&lt;</span> liftX myScratchpads</span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>  ]</span></code></pre></div>
<p>Normally you would also add your <code>myScratchpads</code> list to all calls of
<code>namedScratchpadAction</code>; e.g., when you define the keys to call your
scratchpads. However, since the former lives in <code>X</code> now, this doesn’t
work anymore! Thankfully,
<a href="https://github.com/xmonad/xmonad-contrib/commit/3fc830aa09368dca04df24bf7ec4ac817f2de479">nowadays</a>
the first argument to <code>namedScratchpadAction</code> is actually unused and
only there for backwards compatibility. This means that it’s not
necessary to enter your scratchpads there at all if they are added to
your <code>manageHook</code>. For example, in the following I just provide the empty list:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>  (<span class="st">&quot;M-C-t&quot;</span>, namedScratchpadAction [] <span class="st">&quot;Mail&quot;</span>)</span></code></pre></div>
<p>This works all the same with the above definition of <code>myScratchpads</code>.</p>
<p>A full example of how a scratchpad setup would look using this machinery
can be found in <a href="https://gitlab.com/slotThe/dotfiles/-/blob/master/xmonad/.config/xmonad/src/xmonad.hs#L414">my config</a>.</p>
<h3 id="calling-emacs-in-scripts">Calling Emacs in scripts</h3>
<p>Spawning frames is nice and all, but how about something more
complicated, like Emacs’s batch mode so that we can use it properly in
scripts? No problem at all!</p>
<p>For example, I have the following snippet in my config to get the
currently selected text and call <a href="https://github.com/slotthe/arxiv-citation">arxiv-citation</a> with it to <a href="/posts/phd-workflow/2022-05-01-my-phd-workflow.html#citations">produce a
citation entry in my bibliography
files</a>:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ot">callArXiv ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">X</span> ()</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>callArXiv fun <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  url <span class="ot">&lt;-</span> getSelection  <span class="co">-- from X.U.XSelection</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>  proc <span class="op">$</span> inEmacs</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>     <span class="op">&gt;-&gt;</span> withEmacsLibs [ <span class="dt">ElpaLib</span> <span class="st">&quot;dash&quot;</span>, <span class="dt">ElpaLib</span> <span class="st">&quot;s&quot;</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>                       , <span class="dt">ElpaLib</span> <span class="st">&quot;arxiv-citation&quot;</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>                       , <span class="dt">Special</span> <span class="st">&quot;~/.config/emacs/private-stuff.el&quot;</span> ]</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>     <span class="op">&gt;-&gt;</span> asBatch</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>     <span class="op">&gt;-&gt;</span> eval (progn [require <span class="st">&quot;arxiv-citation&quot;</span>, fun <span class="op">&lt;&gt;</span> asString url])</span></code></pre></div>
<p>When executed, this translates to something like</p>
<pre><code>emacs -L /home/slot/.config/emacs/elpa/dash-20220417.2250
      -L /home/slot/.config/emacs/elpa/s-20210616.619
      -L /home/slot/.config/emacs/elpa/arxiv-citation-20220510.1137/
      --batch
      --eval '(progn
                (require (quote arxiv-citation))
                (arXiv-citation &quot;&lt;url-in-the-primary-selection&gt;&quot;))'</code></pre>
<p>I certainly know which one I’d rather type—especially with ELPA
directory names changing quite frequently! On that note,
<a href="https://github.com/slotthe/arxiv-citation">arxiv-citation</a> is on MELPA now; yay!</p>
<h3 id="other-programs">Other programs</h3>
<p>As this is my main use case for it, the new features of
<code>XMonad.Util.Run</code> are quite specialised for Emacs. However, even for
other programs they may well come in handy. Drawing from the point
about scratchpads again, here is a hypothetical one that spawns a ghci
session:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>  ghci <span class="ot">&lt;-</span> proc <span class="op">$</span> inTerm <span class="op">&gt;-&gt;</span> setXClass calcInstName <span class="op">&gt;-&gt;</span> execute <span class="st">&quot;ghci&quot;</span></span></code></pre></div>
<p>Further, something that’s useful when dealing with <a href="/posts/phd-workflow/2022-05-01-my-phd-workflow.html#topics">topic-based
workspaces</a>
is spawning a terminal or an editor already in the current topic
directory:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">XMonad.Actions.TopicSpace</span>  <span class="co">-- for currentTopicDir and more</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>topicConfig <span class="ot">=</span> …</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="ot">spawnTermInTopic ::</span> <span class="dt">X</span> ()</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>spawnTermInTopic <span class="ot">=</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>  proc <span class="op">$</span> termInDir <span class="op">&gt;-$</span> currentTopicDir topicConfig</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a><span class="co">-- Optionally, modify the path to the editor with a function.</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="ot">spawnEditorInTopic ::</span> (<span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span>) <span class="ot">-&gt;</span> <span class="dt">X</span> ()</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>spawnEditorInTopic with <span class="ot">=</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>  proc <span class="op">$</span> inEditor <span class="op">&gt;-$</span> with <span class="op">&lt;$&gt;</span> currentTopicDir topicConfig</span></code></pre></div>
<p>Quite convenient if you ask me.</p>
<p>If you have or know of a use case you would like to support but which is
awkward with the current set of functions and combinators do not
hesitate to open a pull request or an issue!</p>
<h2 id="implementation-considerations">Implementation considerations</h2>
<p>The implementation is actually very straightforward—no really, check out
the
<a href="https://github.com/xmonad/xmonad-contrib/blob/master/XMonad/Util/Run.hs#L303">source</a>
if you don’t believe me!</p>
<p>One concept that’s still worth touching upon is the internal use of
<a href="https://github.com/spl/dlist#references">difference list</a>s. The basic idea of these things is that, instead of
concatenating strings one by one, we create functions <code>String -&gt; String</code>
and then use function composition to do the work for us:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Ordinary string concatenation</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;string1&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string2&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string3&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string4&quot;</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Using difference lists:</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>  string1, string2, string3,<span class="ot"> string4 ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>  string1 s <span class="ot">=</span> <span class="st">&quot;string1&quot;</span> <span class="op">&lt;&gt;</span> s</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>  string2 s <span class="ot">=</span> …</span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>  string1 <span class="op">.</span> string2 <span class="op">.</span> string3 <span class="op">.</span> string4 <span class="op">$</span> <span class="st">&quot;&quot;</span></span></code></pre></div>
<p>Note how we have to apply the entire thing to <code>""</code> at the end in order
to actually get a string back. As a concrete example, assuming we have
set <code>"Emacs"</code> as our editor, the <code>inEditor</code> function would essentially
be</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="ot">inEditor ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>inEditor s <span class="ot">=</span> <span class="st">&quot; Emacs &quot;</span> <span class="op">&lt;&gt;</span> s</span></code></pre></div>
<p>There are some further considerations to be made, since we are in the
<code>X</code> monad and thus the type is actually <code>X (String -&gt; String)</code> instead
of just <code>String -&gt; String</code>, but that isn’t too important for us here.</p>
<p>Difference lists have some performance advantages over the traditional
concatenation of strings. The concatenation <code>(&lt;&gt;)</code> on strings is left
associative by default and so</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;string1&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string2&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string3&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string4&quot;</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>  ≡ ((<span class="st">&quot;string1&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string2&quot;</span>) <span class="op">&lt;&gt;</span> <span class="st">&quot;string3&quot;</span>) <span class="op">&lt;&gt;</span> <span class="st">&quot;string4&quot;</span></span></code></pre></div>
<p>However, the complexity characteristics of this operation are working
against us here; the definition of <code>(&lt;&gt;)</code> on <code>String</code><a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> is</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="ot">(&lt;&gt;) ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>[]       <span class="op">&lt;&gt;</span> ys <span class="ot">=</span>           ys</span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>(x <span class="op">:</span> xs) <span class="op">&lt;&gt;</span> ys <span class="ot">=</span> x <span class="op">:</span> xs <span class="op">&lt;&gt;</span> ys</span></code></pre></div>
<p>We are merely traversing the first string, leaving the second one
completely untouched (and unevaluated!). All in all, this means that
<code>s₁ &lt;&gt; s₂</code> is in <code>𝓞(|s₁|)</code>; given an expression of the form</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>  ((<span class="st">&quot;string1&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string2&quot;</span>) <span class="op">&lt;&gt;</span> <span class="st">&quot;string3&quot;</span>) <span class="op">&lt;&gt;</span> <span class="st">&quot;string4&quot;</span></span></code></pre></div>
<p>we will have to walk over <code>"string1"</code> three times! What we actually
want is a right-associative ordering—exactly what function compositions
gives us. Spelled out,</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>    string1 <span class="op">.</span> string2 <span class="op">.</span> string3 <span class="op">.</span> string4 <span class="op">$</span> <span class="st">&quot;&quot;</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>  ≡ string1 (string2 (string3 (string4 <span class="st">&quot;&quot;</span>)))</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>  ≡ <span class="st">&quot;string1&quot;</span> <span class="op">&lt;&gt;</span> (<span class="st">&quot;string2&quot;</span> <span class="op">&lt;&gt;</span> (<span class="st">&quot;string3&quot;</span> <span class="op">&lt;&gt;</span> (<span class="st">&quot;string4&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;&quot;</span>)))</span></code></pre></div>
<p>which yields the desired behaviour. In fact, this is so canonical that
instead of using <code>(.)</code>, we could have also—perhaps a bit
confusingly—used <code>(&lt;&gt;)</code> directly:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a>    string1  <span class="op">.</span> string2  <span class="op">.</span> string3  <span class="op">.</span> string4</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>  ≡ string1 <span class="op">&lt;&gt;</span> string2 <span class="op">&lt;&gt;</span> string3 <span class="op">&lt;&gt;</span> string4</span></code></pre></div>
<p>This is the fact that the <em>endomorphisms</em> for any type <code>a</code>—the functions
<code>a -&gt; a</code>—form a <em>monoid</em>. That is to say that they come equipped with
an associative an unital operation: function composition. In Haskell,
<code>(&lt;&gt;)</code> is, in some sense,
<a href="https://www.haskell.org/tutorial/classes.html">overloaded</a> so that it
can be used with any monoidal composition one can think of!<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a></p>
<p>The attentive reader may have concluded that the pipe operator that we
called <code>(&gt;-&gt;)</code> above is really just <code>(&lt;&gt;)</code> in disguise, and that’s
exactly right! I, however, thought that for people not familiar with
Haskell, giving it a pipe-like appearance would be more conceptually
amenable to the threading idea.</p>
<p>I haven’t benchmarked this, so it’s not entirely clear to me whether
performance is actually relevant in this situation<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a>, but using
difference lists just feels right here, and so I did.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I have to say that I’m quite satisfied with this API. In fact, if I
compare it with the old code that only resided within my personal
config, this new version is even a bit more ergonomic in a few places,
despite having essentially no user-specific strings hardcoded anywhere!
As I said before, if you try this and find something missing, do let me
know and we’ll probably find a solution! If you try this and find it
useful, also let me know :)</p>
<p>Of course, technically none of this needs to live only inside your
XMonad config at all. In combination with the excellent <a href="https://hackage.haskell.org/package/turtle">turtle</a>
library, I reckon it would be quite easy to produce Haskell versions of
cool tools like magit.sh.<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a> Go nuts!</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>Alternatively, one could use the git versions of <code>xmonad</code> and
<code>xmonad-contrib</code>; refer to
<a href="https://xmonad.org/INSTALL.html">INSTALL</a> for more information.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>Really, this is the definition of <code>(++)</code> for arbitrary lists <code>[a]</code>
and <code>(&lt;&gt;) = (++)</code> for <code>String = [Char]</code>, but let’s not get into
that here.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>Really, for any <em>semigroup</em>, which is a slightly weaker notion of
an operation that is merely associative, but doesn’t necessarily
have a unit.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>I suspect that the answer is “probably not”—that didn’t stop me,
however!<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>Available <a href="https://github.com/alphapapa/magit.sh">here</a>. I also
maintain a slightly modified and POSIX shell compatible version
<a href="https://gitlab.com/slotThe/dotfiles/-/blob/master/scripts/.scripts/magit.sh">here</a>.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>

</feed>
