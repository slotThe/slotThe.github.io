<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Tony Zorman · Blog</title>
    <link href="https://tony-zorman.com/atom-rust.xml" rel="self" />
    <link href="https://tony-zorman.com" />
    <id>https://tony-zorman.com/atom-rust.xml</id>
    <author>
        <name>Tony Zorman</name>
        
        <email>tonyzorman@mailbox.org</email>
        
    </author>
    <updated>2024-03-23T00:00:00Z</updated>
    <entry>
    <title>Announcing: rq Version 0.1.0</title>
    <link href="https://tony-zorman.com/posts/rq.html" />
    <id>https://tony-zorman.com/posts/rq.html</id>
    <published>2024-03-23T00:00:00Z</published>
    <updated>2024-03-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2024-03-23
      
      
      
        &thinsp;·&thinsp; <span title="1251 words">6 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'rust'." href="/tags/rust.html" rel="tag">rust</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>
</p>
<p>I’ve just released version 0.1.0 of <a href="https://github.com/slotThe/rq"><code>rq</code></a>,<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>
a small functional language to manipulate JSON—and my excuse to learn Rust!
This seems as good a time as any to talk about it,
so let’s do that.</p>
<!--more-->
<h2 id="overview">Overview</h2>
<p>As the name suggests,
<code>rq</code> is heavily inspired by the venerable <code>jq</code>,<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>
and looks quite similar in action:</p>
<p><img class="pure-img" src="../images/rq/rq.png" alt="rq in action"></p>
<p>Another example,
printing out the name of <code>rq</code>s direct and transitive dependencies.</p>
<pre class="console"><code>$ cargo metadata | rq '.packages | map .name | filter (!= &quot;rq&quot;)'
[ahash, allocator-api2, anyhow, ariadne, cc, cfg-if, chumsky, hashbrown,
libc, once_cell, proc-macro2, psm, quote, stacker, syn, unicode-ident,
unicode-width, version_check, winapi, winapi-i686-pc-windows-gnu,
winapi-x86_64-pc-windows-gnu, yansi, zerocopy, zerocopy-derive]</code></pre>
<p>I will try to give a coarse overview of the language,
adding some design considerations,
without repeating too much of what is already in the projects
<a href="https://github.com/slotThe/rq?tab=readme-ov-file#the-expression-language">README</a>.
I would advise you to consult that if you’re interested in a more comprehensive description of <code>rq</code>.</p>
<h2 id="the-language">The language</h2>
<p>The tl;dr is that <code>rq</code>—as advertised—is a small functional language with the usual idioms.
There is a small REPL to try out the language,
which can be accessed by executing <code>rq</code> with a <code>repl</code> argument.<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a></p>
<pre><code>$ rq repl
λ&gt;

λ&gt; const 1 2
1

λ&gt; (\x -&gt; x + 1) 41
42

λ&gt; map (+ 1) [1, 2, 3, 4, 5]
[2, 3, 4, 5, 6]

λ&gt; foldl (+) 0 [9, 3, 13, 17]
42

# `get` gets the i'th index or key from a collection.
λ&gt; get 1 [0, 2, 3, 4]
2
λ&gt; get &quot;name&quot; { name: &quot;Name&quot; }
Name</code></pre>
<p>The language has some <code>jq</code>-inspired syntactic sugar for working with JSON,
like <code>x.1</code> desugaring to <code>get 1 x</code>, and <code>.1</code> meaning <code>λx → get 1 x</code>.
Additionally, <code>|</code> designates covariant function composition.<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a></p>
<pre><code>λ&gt; (filter (get &quot;age&quot; | (&gt;= 42)) | map (\x -&gt; { x.name: x.age })) \
     [{&quot;name&quot;: &quot;John Doe&quot;, &quot;age&quot;: 43, &quot;phone&quot;: &quot;+44 1234567&quot;},{&quot;name&quot;:&quot;Alice&quot;},{&quot;name&quot;:&quot;Bob&quot;, &quot;age&quot;:42}]
[{John Doe: 43}, {Bob: 42}]</code></pre>
<h3 id="type-system">Type system</h3>
<p>I like statically typed languages,
so why not make <code>rq</code> one as well?
For a program whose sole purpose is to receive a one-line expression,
this might seem overkill—and it is!</p>
<p>Currently, the type system is a bit rudimentary and only features the most essential pieces:
universally quantified type variables,
arrows,
as well as <code>Num</code> and <code>JSON</code> as “basic types”,
where the former is a subtype of the latter.
The <code>JSON</code> type is to be seen as a black hole of sorts,
swallowing everything and
enabling our statically typed language to come across as quite dynamic indeed.<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a></p>
<p>In the REPL, types can be queried with <code>:t</code>.</p>
<pre><code>λ&gt; :t const
∀a. ∀b. a → b → a

λ&gt; :t get
JSON → JSON → JSON

λ&gt; :t \f g x -&gt; f x (g x)
∀j. ∀i. ∀g. (g → i → j) → (g → i) → g → j

λ&gt; :t id
∀a. a → a

λ&gt; :t id 1
Num

λ&gt; :t id 1 :: JSON
JSON

λ&gt; :t &quot;a&quot; :: Num
JSON is not a subtype of Num</code></pre>
<p>Implementation wise, one needs something that supports both polymorphism and subtyping.
Sadly, this rules out any Hindley–Milner-inspired type system (at least to my knowledge).
I settled on Dunfield and Krishnaswami’s bidirectional
type checking algorithm from their paper<a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a> “Complete and easy
bidirectional type checking for higher-rank polymorphism”
<span class="citation" data-cites="dunfield13:higher">[@dunfield13:higher]</span>,
as it seemed to be the most straightforward description of exactly what I needed.
The paper is quite readable, actually,
so I encourage you to check it out!</p>
<p>And that’s <code>rq</code>, pretty much.
besides <code>map</code>, <code>filter</code>, <code>foldl</code>, <code>get</code>, and <code>set</code>
there are relatively few builtin functions that do interesting things right now.
Someone should definitely do something about that…!</p>
<h2 id="performance">Performance</h2>
<p>Performance is “fine”;
a bit slower than <code>jq</code>,
though probably not enough to notice very often in practice.
There currently is no streaming parser,
though, so please don’t pump gigabytes of JSON through <code>rq</code> :)</p>
<p>As a “real world” example,
I ran <code>cargo metadata</code> on the
<a href="https://github.com/rust-lang/rust-analyzer">rust-analyzer GitHub repository</a>,
which produces ~1mb of JSON.
On that data, <code>jq</code> takes 144ms and <code>rq</code> needs around 186ms.</p>
<pre class="console"><code>$ hyperfine &quot;cargo metadata --format-version=1 | jq '.packages | map (.name)'&quot;
Benchmark 1: cargo metadata --format-version=1 | jq '.packages | map (.name)'
  Time (mean ± σ):     144.0 ms ±   3.6 ms    [User: 112.3 ms, System: 36.2 ms]
  Range (min … max):   136.5 ms … 149.5 ms    19 runs

$ hyperfine &quot;cargo metadata --format-version=1 | rq '.packages | map .name'&quot;
Benchmark 1: cargo metadata --format-version=1 | rq '.packages | map .name'
  Time (mean ± σ):     185.7 ms ±   4.0 ms    [User: 139.2 ms, System: 46.6 ms]
  Range (min … max):   178.6 ms … 194.8 ms    16 runs</code></pre>
<p><a href="#fn7" class="footnote-ref" id="fnref7" role="doc-noteref"><sup>7</sup></a>A cursory analysis reveals that parsing takes about 10ms,
with the type checker and evaluator needing around 20ms each.
The bulk of the time, 130ms, is spent invoking <code>cargo metadata</code> and reading its output.</p>
<p>Still, overall I’m quite happy with this,
as I haven’t really tried optimising for performance at all,
and yet the result is quite acceptable.</p>
<h2 id="future-work">Future work</h2>
<ul>
<li><p>We need more functions to actually do useful things!
This is both the most important
and least exciting
direction,
so let’s see which feeling ends up winning :)</p></li>
<li><p>Guessing at performance improvements,
I suppose a case could be made to more closely look at the evaluator;
currently conversion between the semantic and syntactic representation of the expression is done by copious amounts of copying.
Perhaps a bit of this could be alleviated by making certain functions take mutable references instead,
though I haven’t completely thought this through yet.</p></li>
<li><p>I was initially thinking about implementing the standard library
using
<a href="https://en.wikipedia.org/wiki/Higher-order_abstract_syntax">higher-order abstract syntax</a>
instead of
<a href="https://github.com/slotThe/rq/blob/4ff7bb1e35dbbde201a069f5e2c588059c79149b/src/eval.rs#L148">hard coding</a>
them into the evaluator itself.
This would essentially involve a change in the expression type from</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">enum</span> Expr <span class="op">{</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>  <span class="co">// …</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>  Builtin(Builtin)<span class="op">,</span> <span class="co">// Builtin is a big enum of names</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>to something along the lines of</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">enum</span> Expr <span class="op">{</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>  <span class="co">// …</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>  Builtin(<span class="kw">dyn</span> <span class="bu">Fn</span>(Expr) <span class="op">-&gt;</span> Expr)<span class="op">,</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>I reckon hard coding the builtin functions into the evaluator might be a net speed gain,
though this seems like a fun exercise,
so perhaps I will explore this on a separate branch.</p></li>
<li><p>Implementing a more complete type system seems advisable;
in particular list and object types should not be very difficult to add.
I’m not totally sure how union types<a href="#fn8" class="footnote-ref" id="fnref8" role="doc-noteref"><sup>8</sup></a> would fit into the current algorithm,
but this is definitely something I’d like to implement.
Having a type signature like</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>get <span class="ot">:</span> <span class="ot">(</span>Num <span class="ot">|</span> Str<span class="ot">)</span> <span class="ot">→</span> <span class="ot">(</span>Arr <span class="ot">|</span> Obj<span class="ot">)</span> <span class="ot">→</span> JSON</span></code></pre></div>
<p>or even</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a>get <span class="ot">:</span> <span class="ot">(</span>Num <span class="ot">→</span> Arr <span class="ot">→</span> JSON<span class="ot">)</span> <span class="ot">|</span> <span class="ot">(</span>Str <span class="ot">→</span> Obj <span class="ot">→</span> JSON<span class="ot">)</span></span></code></pre></div>
<p>would please me.</p></li>
<li><p>I’m also interested to find other (bidirectional) type checking algorithms that may be worth studying more closely.</p></li>
</ul>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>{-} I would <em>never</em> have made a release solely to have an excuse to write about <code>rq</code>;
what are you talking about‽<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>Though obviously it—right now—only covers a meagre subset of what <code>jq</code> can do.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>{-} 󠀠</p>
<p>󠀠</p>
<p>To appease… someone reading this,
lambdas can also be written in Rust-esque notation,
and can take multiple arguments:</p>
<pre><code>|x, y| x y  ≡  λx y → x y  ≡  \x -&gt; \y -&gt; x y</code></pre>
<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></li>
<li id="fn4"><p>As in, <code>(f | g)(x)</code> means <code>g(f(x))</code>,
to mirror how shells use pipes.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>After all, a dynamically typed language is just a statically typed one with a single base type.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6"><p>{-} The paper is freely available <a href="https://arxiv.org/abs/1306.6032">on the arXiv</a>.<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn7"><p>{-} I’m quite surprised—though happy—by the type checker being this fast!
Likewise, I’m glad that all of the praise I’ve read about
<a href="https://en.wikipedia.org/wiki/Normalisation_by_evaluation">normalisation by evaluation</a>
was justified.<a href="#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn8"><p>As in, not coproducts but the other ones.<a href="#fnref8" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Fixing Lsp-Mode's Hover Signatures</title>
    <link href="https://tony-zorman.com/posts/fixing-lsp-mode.html" />
    <id>https://tony-zorman.com/posts/fixing-lsp-mode.html</id>
    <published>2023-10-22T00:00:00Z</published>
    <updated>2023-10-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2023-10-22
      
      
        &thinsp;·&thinsp; last modified: 2023-10-27
      
      
        &thinsp;·&thinsp; <span title="1148 words">5 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>, <a title="All pages tagged 'haskell'." href="/tags/haskell.html" rel="tag">haskell</a>, <a title="All pages tagged 'rust'." href="/tags/rust.html" rel="tag">rust</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>By now,
LSP servers have become the norm for editor-agnostic language support.
As expected, Emacs features at least two packages that implement the protocol:
the built-in <code>eglot</code>,
and the third-party <code>lsp-mode</code>.
I will focus on the latter in this post.</p>
<p>L<span class="small-caps">sp</span> clients have the option of showing useful things on hover.
In most languages, there is an obvious candidate for this:
the type signature of the thing at point.
Sadly—for some languages—the implementation of the feature is… not great.
Buggy even, one might say.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>
Taking this as an excuse to talk about Emacs’s infinite customisability,
there is of course a way to fix this within the bounds of our configuration.
Let’s do that!</p>
<!--more-->
<h2 id="the-problem">The problem</h2>
<p>Take any Haskell function with a long enough type signature, like the
following:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">iAmTooLong ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>iAmTooLong <span class="ot">=</span> <span class="fu">undefined</span></span></code></pre></div>
<p>By default, lsp-mode<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> will display the following type signature
in the echo-area
when hovering over the function name:</p>
<p><img class="pure-img" style="padding-left: 1em;" src="../images/fixing-lsp-mode/lsp-mode-default.png" alt="By default, lsp-mode only shows `iamTooLong :: Stirng`"></p>
<p>That’s… not correct.
Executing <code>lsp-describe-thing-at-point</code> immediately reveals the problem;
the request we get back looks like this:</p>
<pre><code>``` haskell
iAmTooLong :: String
-&gt; String
-&gt; String
-&gt; String
-&gt; String
-&gt; String
-&gt; String
-&gt; String
```

Defined at »PATH«</code></pre>
<p>The type signature is so long that the server breaks it into several lines.
Lsp-mode uses <code>lsp-clients-extract-signature-on-hover</code> to extract a signature on hover—by default, it looks like this:</p>
<pre class="emacs-lisp"><code>(cl-defgeneric lsp-clients-extract-signature-on-hover (contents _server-id)
  &quot;Extract a representative line from CONTENTS, to show in the echo area.&quot;
  (car (s-lines (s-trim (lsp--render-element contents)))))</code></pre>
<p>It just takes the first line of the first markdown code block.
While this works for simple type signatures,
it obviously falls flat in more complicated scenarios.
However, this being a generic function,
there’s the possibility to overload it depending on the major mode.</p>
<h2 id="fixing-haskell-type-signatures">Fixing Haskell type signatures</h2>
<p>The strategy seems pretty clear:
extract the whole block instead of only the first line.
This is swiftly done:<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a></p>
<pre class="emacs-lisp"><code>(defun slot/lsp-get-type-signature (lang str)
  &quot;Get LANGs type signature in STR.
Original implementation from https://github.com/emacs-lsp/lsp-mode/pull/1740.&quot;
  (let* ((start (concat &quot;```&quot; lang))
         (groups (--filter (s-equals? start (car it))
                           (-partition-by #'s-blank? (s-lines (s-trim str)))))
         (name-at-point (symbol-name (symbol-at-point)))
         (type-sig-group (car
                          (--filter (s-contains? name-at-point (cadr it))
                                    groups))))
    (-&gt;&gt; (or type-sig-group (car groups))
         (-drop 1)                    ; ``` LANG
         (-drop-last 1)               ; ```
         (-map #'s-trim)
         (s-join &quot; &quot;))))</code></pre>
<p>We can now override the method with our own implementation:</p>
<pre class="emacs-lisp"><code>(cl-defmethod lsp-clients-extract-signature-on-hover
  (contents (_server-id (eql lsp-haskell))) ; Only for Haskell.
  &quot;Display the type signature of the function at point.&quot;
  (slot/lsp-get-type-signature &quot;haskell&quot; (plist-get contents :value)))</code></pre>
<p>This already looks <em>fine</em>, but something is still amiss.</p>
<p><img class="pure-img" style="padding-left: 1em;" src="../images/fixing-lsp-mode/lsp-mode-no-syntax-highlighting.png" alt="Correctly shows the whole type signature, but there is no syntax highlighting"></p>
<p>There is no syntax highlighting!
Thankfully, this is not very difficult to fix;
the idea is to paste the string into a temporary buffer,
activate <code>haskell-mode</code>,
and grab the propertised string from that.
The only thing to take care of is that we dont want to run <code>lsp-mode</code> and friends <em>again</em> in the temporary buffer.</p>
<pre class="emacs-lisp"><code>(defun slot/syntax-highlight-string (str mode)
  &quot;Syntax highlight STR in MODE.&quot;
  (with-temp-buffer
    (insert str)
    ;; We definitely don't want to call certain modes, so delay the mode's
    ;; hooks until we have removed them.
    (delay-mode-hooks (funcall mode))
    (-map #'funcall
          (--remove (-contains? '(lsp-mode lsp-deferred) it)
                    (-mapcat #'symbol-value delayed-mode-hooks)))
    ;; Now we can propertise the string.
    (font-lock-ensure)
    (buffer-string)))</code></pre>
<p>Lsp-mode also provides a function for this, <code>lsp--render-string</code>,
but that one does not try to load all of the “safe” hooks for the major mode.
However, I have some <code>pretify-symbols-mode</code> configuration for Haskell
which I would very much like to take effect.</p>
<p>All in all, we have<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a></p>
<pre class="emacs-lisp"><code>;; Fixes https://github.com/emacs-lsp/lsp-haskell/issues/151
(cl-defmethod lsp-clients-extract-signature-on-hover
  (contents (_server-id (eql lsp-haskell)))
  &quot;Display the type signature of the function at point.&quot;
  (slot/syntax-highlight-string
   (slot/lsp-get-type-signature &quot;haskell&quot; (plist-get contents :value))
   'haskell-mode))</code></pre>
<p>This works quite nicely:</p>
<p><img class="pure-img" style="padding-left: 1em;" src="../images/fixing-lsp-mode/lsp-mode-fixed.png" alt="Properly syntax highlighted type signature"></p>
<h2 id="fixing-rust-hovers">Fixing Rust hovers</h2>
<p>One of the above code snippets already mentions <a href="https://github.com/emacs-lsp/lsp-mode/pull/1740">lsp-mode#1740</a>,
which is not about Haskell, but Rust,
a language that I also occasionally dabble in.
The basic issue here goes like this:
by default, <code>lsp-mode</code> shows the following hover information.</p>
<p><img class="pure-img" style="padding-left: 1em;" src="../images/fixing-lsp-mode/lsp-rust-default-hover.png" alt="By default, the hover shows the module that the identifier is imported from"></p>
<p>Much like the user who opened the mentioned pull-request,
I really don’t care about this.
Instead, I’d much rather see</p>
<p><img class="pure-img" style="padding-left: 1em;" src="../images/fixing-lsp-mode/lsp-rust-improved-hover.png" alt="Instead of the module, show the type singature"></p>
<p>which looks much more useful to me.</p>
<p>Luckily, this is exactly the same situation as in the Haskell case,
which we already fixed.
Writing</p>
<pre class="emacs-lisp"><code>(cl-defmethod lsp-clients-extract-signature-on-hover
  (contents (_server-id (eql rust-analyzer))) ; Only for Rust.
  &quot;Display the type signature of the function at point.&quot;
  (slot/syntax-highlight-string
   (slot/lsp-get-type-signature &quot;rust&quot; (plist-get contents :value))
   'rustic-mode))</code></pre>
<p>works out of the box.
Nice.</p>
<h2 id="bonus-adding-type-signatures">Bonus: adding type signatures</h2>
<p>Here’s another problem that we’ve solved <em>en passant</em>:
lsp-mode has code-lens support<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a>,
which enables one to add type signatures by clicking on the relevant button:</p>
<p><img class="pure-img" style="padding-left: 1em;" src="../images/fixing-lsp-mode/add-type-signature-mouse.gif" alt="Clicking on the relevant code lens adds a type signature"></p>
<p>However, this ostensibly requires me to use the mouse,<a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a>
and—more importantly—the above GIF also shows that local functions do not have such a code lens attached to them.
I quite like type signatures for local definitions,
so that’s a bit of a shame.</p>
<p>Fixing this is not terribly difficult either;
the hardest thing is having to look through lsp-mode’s codebase so one actually knows which functions to call.
When defining the overrides for <code>lsp-clients-extract-signature-on-hover</code>, the LSP response was free,
whereas now we want to create a request for the thing at point.</p>
<pre class="emacs-lisp"><code>(defun slot/lsp-get-type-signature-at-point (&amp;optional lang)
  &quot;Get LANGs type signature at point.
LANG is not given, get it from `lsp--buffer-language'.&quot;
  (interactive)
  (-some-&gt;&gt; (lsp--text-document-position-params)
    (lsp--make-request &quot;textDocument/hover&quot;)
    lsp--send-request
    lsp:hover-contents
    (funcall (-flip #'plist-get) :value)
    (slot/lsp-get-type-signature (or lang lsp--buffer-language))))</code></pre>
<p>Once we have the type signature at point,
all that’s left is to insert it into the buffer.<a href="#fn7" class="footnote-ref" id="fnref7" role="doc-noteref"><sup>7</sup></a></p>
<pre class="emacs-lisp"><code>(defun slot/lsp-haskell-type-signature ()
  &quot;Add a type signature for the thing at point.
This is very convenient, for example, when dealing with local
functions, since those—as opposed to top-level expressions—don't
have a code lens for \&quot;add type signature here\&quot; associated with
them.&quot;
  (interactive)
  (let* ((value (slot/lsp-get-type-signature-at-point &quot;haskell&quot;)))
    (slot/back-to-indentation)
    (insert value)
    (haskell-indentation-newline-and-indent)))</code></pre>
<p>Bind that to a key and you’re good to go!</p>
<p><img class="pure-img" style="padding-left: 1em;" src="../images/fixing-lsp-mode/add-type-signature-keybinding.gif" alt="Clicking on the relevant code lens adds a type signature"></p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>I have reported this as a bug <a href="https://github.com/emacs-lsp/lsp-haskell/issues/151">here</a>,
but that issue seems to have stalled,
so here we are.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>And also eglot, judging from a cursory test.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>Even more so because smart people have already written this for me;
see the docstring.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>{-} 󠀠</p>
<p>󠀠</p>
<p>This code assumes that lsp-mode uses
<a href="https://emacs-lsp.github.io/lsp-mode/page/performance/#use-plists-for-deserialization">plists instead of hash tables for deserialisation</a>.
If you don’t have the <code>lsp-use-plists</code> variable set<!--
  -->—and have recompiled lsp-mode afterwards—<!--
  -->then just replace <code>(plist-get contents :value)</code> with <code>(gethash "value" contents)</code>.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>Incidentally, this is the only reason that I use lsp-mode over eglot.
There is a
<a href="https://github.com/joaotavora/eglot/pull/71">stalled PR</a>
from five years ago,
but that never led anywhere.
<em>Someone</em> should pick this back up, I suppose.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6"><p>Lsp-mode also provides <code>lsp-avy-lens</code>,
so this is not really an actual problem.<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn7"><p>{-} For when hovering inexplicably breaks again,
this also enables for a quick definition of “show the type signature of the thing at point”:</p>
<pre class="emacs-lisp"><code>(defun slot/lsp-show-type-signature ()
  &quot;Show the type signature for the thing at
point.  This is essentially what
`lsp-clients-extract-signature-on-hover'
does, just as an extra function.&quot;
  (interactive)
  (message
   (slot/syntax-highlight-string
    (slot/lsp-get-type-signature-at-point)
    major-mode)))</code></pre>
<p>This can, again, be bound to a key for convenient access.<a href="#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>

</feed>
