<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Tony Zorman · Blog</title>
    <link href="https://tony-zorman.com/atom-emacs.xml" rel="self" />
    <link href="https://tony-zorman.com" />
    <id>https://tony-zorman.com/atom-emacs.xml</id>
    <author>
        <name>Tony Zorman</name>
        
        <email>mail@tony-zorman.com</email>
        
    </author>
    <updated>2024-05-11T00:00:00Z</updated>
    <entry>
    <title>Leveraging LaTeX in Anki</title>
    <link href="https://tony-zorman.com/posts/anki-latex.html" />
    <id>https://tony-zorman.com/posts/anki-latex.html</id>
    <published>2024-05-11T00:00:00Z</published>
    <updated>2024-05-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2024-05-11
      
      
        &thinsp;·&thinsp; last modified: 2024-05-15
      
      
        &thinsp;·&thinsp; <span title="1016 words">5 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'anki'." href="/tags/anki.html" rel="tag">anki</a>, <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>, <a title="All pages tagged 'maths'." href="/tags/maths.html" rel="tag">maths</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>
</p>
<p>Recently, I’ve been quite invested in learning maths with <a href="https://apps.ankiweb.net/index.html">Anki</a>.
Sadly, there are relatively few good resources out there on how to
twist Anki’s LaTeX pipeline into something generally acceptable,
without having to rely on MathJax.
As such, this post collects some bits and pieces from all over,
hoping to weave them together into something coherent.</p>
<!--more-->
<p><a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>Note that I will only concerns myself with
“how to make LaTeX work to an acceptable degree”,
instead of
“how to write mathematics notes”.
The latter is extremely dependent on the desired outcome,
types of maths that one studies,
experience of the person writing the notes, and so on.
Too many facets for me—or anyone, really—to give blanket recommendations.</p>
<p>A lot of things here are rehashes of <a href="https://unhewn-thoughts.org/anki/guide-on-using-latex-xetex-luatex-with-anki.html">Unhewn Thought’s</a>
post about the same thing,
as well as the official <a href="https://docs.ankiweb.net/math.html#latex">Anki documentation</a>
on the matter.
As always, this post is mostly about reminding myself about some details in two months’ time.</p>
<h2 id="mathjax-is-not-enough">MathJax is not enough</h2>
<p>Anki fully supports MathJax as a backend for its LaTeX previewing system.
This is great for most users:
MathJax is trivial to set up, and fits snugly into the generated HTML<!--
-->—there’s a reason it’s used so widely all over the internet!</p>
<p>However,
especially for personal notes like these,
MathJax might be amongst the worst solutions for me:
its <a href="https://docs.mathjax.org/en/latest/input/tex/extensions.html">macro support</a>
is awkward at best,
and since it only implements maths macros,
many of the packages that I’m using on a daily basis are not available at all.
I for one am certainly not going to rewrite my bespoke <a href="https://github.com/slotThe/latex-styles">style file</a>,
just so I get something that half-works with MathJax,
when I could be using the real thing instead!</p>
<h2 id="actually-writing-latex">Actually writing LaTeX</h2>
<p>To get this out of the way:
I have absolutely no opinions on how to <em>write</em> LaTeX with Anki.
I haven’t ever actually composed a note inside of the program,
and I’m doubtful that I ever will.</p>
<p>Instead, I write all of my notes in Org and then export them via <a href="https://github.com/anki-editor/anki-editor">anki-editor</a>.
This is very convenient,
as it means that I have all of the key bindings and snippets available that I normally write LaTeX with.<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>
Plus, rough edges that one would otherwise have to care about,
like <code>}}</code> inside of maths closing the current cloze deletion,
are solved completely by <code>anki-editor</code> without me even having to think about them.<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>
As an added bonus,
Org mode’s <a href="https://www.youtube.com/watch?v=n-AfvuV-bYo">new LaTeX preview functionality</a> is just fantastic,
and makes crafting notes quite fun!</p>
<h2 id="aligning-fragments-vertically">Aligning fragments vertically</h2>
<p>One thing that MathJax does <em>very</em> well is its pixel-perfect alignment of LaTeX fragments.
In contrast, the default alignment is really rather bad.
It can, however, be somewhat improved by using CSS to vertically centre the image:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>img<span class="ex">[</span><span class="ss">src</span><span class="op">*=</span><span class="st">&quot;latex&quot;</span><span class="ex">]</span> {</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">vertical-align</span><span class="ch">:</span> <span class="dv">middle</span><span class="op">;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>It looks like this:<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a></p>
<p><img class="pure-img" src="../images/anki-latex/centered.png" alt="A note with approrimately centred LaTeX"></p>
<p>Very far from perfect, but readable.
Since this seems to be the only drawback with not using MathJax,
I’ll take it.
Content over form—at least in this case.</p>
<h2 id="preview-generation-with-preview.sty">Preview generation with <code>preview.sty</code></h2>
<p>The <code>preview</code> package is specifically designed for these kinds of previews.
Originally written for <a href="https://www.gnu.org/software/auctex/">AUCTeX</a>,
it has made its way into all TeX distributions that I know of.
In addition to being used all over Emacs,
<code>preview</code> is being employed by quite a few other programs as well.</p>
<p>Amongst intangible benefits such as familiarity,
I chose <code>preview</code> mostly because
it “correctly” tightens display maths environments not just to the maths itself,
but to the whole line.
Operationally this means that display maths is automatically centred on my Anki card,
even if the rest of the text is left-aligned.<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a></p>
<p>To use <code>preview.sty</code> in this way,
one simply has to include it Anki’s LaTeX preamble—<code>C-S-n</code> and then “Options”—and wrap the whole document (i.e., the formula being rendered) with the <code>preview</code> environment:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">%%% Header</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="bu">\documentclass</span>{<span class="ex">article</span>}</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="bu">\usepackage</span>[active,tightpage]{<span class="ex">preview</span>}</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="kw">\begin</span>{<span class="ex">document</span>}</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="co">% Remove extra space above display maths.</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="fu">\setlength</span>{<span class="fu">\abovedisplayskip</span>}{0pt}</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="kw">\begin</span>{<span class="ex">preview</span>}</span></code></pre></div>
<div class="sourceCode" id="cb3"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">%%% Footer</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="kw">\end</span>{<span class="ex">preview</span>}</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="kw">\end</span>{<span class="ex">document</span>}</span></code></pre></div>
<p>For this to work smoothly, I also highly recommend to enable SVG support,
and to tweak Anki’s LaTeX compilation pipeline.
The handy <a href="https://ankiweb.net/shared/info/937148547">Edit LaTeX build process</a> addon can be used for that purpose.
My <code>svgCommands</code> settings look like this:<a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a></p>
<pre><code> &quot;svgCommands&quot;: [
      [
          &quot;latex&quot;,
          &quot;-interaction=nonstopmode&quot;,
          &quot;tmp.tex&quot;
      ],
      [
          &quot;dvisvgm&quot;,
          &quot;--page=1-&quot;,
          &quot;--optimize&quot;,
          &quot;--clipjoin&quot;,
          &quot;--relative&quot;,
          &quot;--bbox=preview&quot;,
          &quot;--no-fonts&quot;,
          &quot;tmp.dvi&quot;,
          &quot;-o&quot;,
          &quot;tmp.svg&quot;
      ]
  ]</code></pre>
<p>The generated LaTeX might be too small,
though fixing this just involves a small CSS modification to the <code>latex</code> class:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="fu">.latex</span> {</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  zoom<span class="ch">:</span> <span class="dv">160</span><span class="dt">%</span><span class="op">;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>If you want to dig deeper into how Anki generates maths, I recommend looking at
<a href="https://github.com/ankitects/anki/blob/c29125939db1dbb9ef48d42f425eb70abaee53ad/pylib/anki/latex.py">latex.py</a>,
<a href="https://github.com/ankitects/anki/blob/c29125939db1dbb9ef48d42f425eb70abaee53ad/rslib/src/latex.rs">latex.rs</a>,
and the
<a href="https://unhewn-thoughts.org/anki/guide-on-using-latex-xetex-luatex-with-anki.html#tex-generation"><code>.tex</code> Generation</a>
section in Unhewn Thought’s blog post.<a href="#fn7" class="footnote-ref" id="fnref7" role="doc-noteref"><sup>7</sup></a></p>
<h3 id="complete-preamble">Complete preamble</h3>
<p>My complete preamble is not much larger than what I have shown above;
it merely also includes my <a href="https://github.com/slotThe/latex-styles">personal style file</a>.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="co">%%% Header</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="bu">\documentclass</span>{<span class="ex">article</span>}</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="bu">\usepackage</span>[type=org,math=fancy]{<span class="ss">$HOME/.tex/styles/style}</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="sc">\usepackage</span><span class="ss">[active,tightpage]{preview}</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="sc">\usepackage</span><span class="ss">{xcolor}</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="kw">\begin</span>{<span class="ex">document</span>}</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="sc">\setlength</span><span class="ss">{</span><span class="sc">\parindent</span><span class="ss">}{0in}</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="sc">\setlength</span><span class="ss">{</span><span class="sc">\abovedisplayskip</span><span class="ss">}{0pt}</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="kw">\begin</span>{<span class="ex">preview</span>}</span></code></pre></div>
<div class="sourceCode" id="cb7"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="co">%%% Footer</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="kw">\end</span>{<span class="ex">preview</span>}</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="kw">\end</span>{<span class="ex">document</span>}</span></code></pre></div>
<h2 id="conclusion">Conclusion</h2>
<p>With these relatively straightforward tweaks,
Anki’s LaTeX integration is really plug and play—I can just use my whole style file as-is,
no extra care needed.
Nice.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>{-} I will not waste the reader’s time with an introduction of what Anki is or why spaced repetition is useful;
<a href="https://gwern.net/spaced-repetition">other</a>
<a href="https://augmentingcognition.com/ltm.html">people</a>
have done a much better job at that than I ever could.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>See, for example,
<a href="https://tony-zorman.com/posts/my-phd-workflow.html#digital-notes">here</a>,
<a href="https://tony-zorman.com/posts/emacs-potpourri.html#latex">here</a>,
<a href="https://tony-zorman.com/posts/pretty-latex.html">here</a>,
or
<a href="https://gitlab.com/slotThe/dotfiles/-/blob/master/emacs/lisp/hopf-latex-math.el?ref_type=heads">here</a>.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>For the specific example of maths and cloze deletions,
one needs to set <code>anki-editor-break-consecutive-braces-in-LaTeX</code>.
This should probably be the default—and perhaps it will be in the future!<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>{-} As you can see, I haven’t bothered with fancy CSS to make the cards pretty. Content over form.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>One could solve this by making <code>anki-editor</code> output an extra <code>div</code> that it only wraps display maths with<!--
  -->—and I have done that in the past—but using <code>preview.sty</code> feels much cleaner to me.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6"><p>{-} For compatibility reasons with all of my papers (and other notes) I use <code>latex</code> here.
In case you are not bound by these restrictions—or more adventurous than me—I would recommend you use lualatex instead.<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn7"><p>{-} It should be noted that Anki—thankfully—caches previews by hashing their contents,
and reuses the same SVG every time it encounters a LaTeX fragment with the same hash.
Thus, if you want to completely regenerate everything, just delete the respective directory.
For me, this is <code>~/.local/share/Anki2/User 1/collection.media/</code>.<a href="#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Smartly join comments with join-line</title>
    <link href="https://tony-zorman.com/posts/join-lines-comments.html" />
    <id>https://tony-zorman.com/posts/join-lines-comments.html</id>
    <published>2024-03-02T00:00:00Z</published>
    <updated>2024-03-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2024-03-02
      
      
        &thinsp;·&thinsp; last modified: 2024-08-15
      
      
        &thinsp;·&thinsp; <span title="1018 words">5 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->


<div>
  <p>Emacs’s <code>join-line</code> function,
upon execution,
joins the current line onto the previous one,
deleting any extraneous whitespace.
Alternatively, it can also sensibly act on a whole region of text.
This is quite useful,
though sadly the function does not handle comments very gracefully by default;
let’s fix that.</p>
<!--more-->
<p>Actually an alias for <code>delete-indentation</code>,
<code>join-line</code>’s behaviour is perhaps more easily seen
rather than explained.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></p>
<p><img class="pure-img" src="../images/join-line/join-line.gif" alt="Original join-line behaviour"></p>
<p>However, the default implementation of that function is quite oblivious to comments—in the sense that it doesn’t care about them at all!</p>
<p><img class="pure-img" src="../images/join-line/join-line-comment.gif" alt="Original join-line behaviour with respect to comments."></p>
<p>This is a bit annoying, though thankfully it’s not difficult to fix!
<code>delete-indentation</code> already has some code that removes a possibly-present <code>fill-prefix</code><a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> variable:</p>
<pre class="emacs-lisp"><code>(defun delete-indentation (&amp;optional arg beg end)
  …
  (let ((prefix (and (&gt; (length fill-prefix) 0)
                     (regexp-quote fill-prefix))))
    (while (and (&gt; (line-beginning-position) beg)
                (forward-line 0)
                (= (preceding-char) ?\n))
      (delete-char -1)
      ;; If the appended line started with the fill prefix,
      ;; delete the prefix.
      (if (and prefix (looking-at prefix))
          (replace-match &quot;&quot; t t))
      (fixup-whitespace))))</code></pre>
<p>Adjusting this to my idiosyncratic preferences is quite straightforward:
just set <code>fill-prefix</code> to the current comment syntax<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>, and let the function do the rest.</p>
<pre class="emacs-lisp"><code>(advice-add 'delete-indentation :around
  (lambda (old-fun &amp;optional arg beg end)
    (let ((fill-prefix comment-start))
      (funcall old-fun arg beg end))))</code></pre>
<p>Pretty neat, huh?
Sadly, this does not quite work yet!</p>
<p><img class="pure-img" src="../images/join-line/join-line-advise.gif" alt="Advised join-line behaviour with respect to comments."></p>
<p>The point is that <code>comment-start</code> for <code>emacs-lisp-mode</code> is simply <code>"; "</code>,
but by convention comments on their own line get two such semicolons instead.
This is also not difficult to fix,
but requires <a href="https://en.wikipedia.org/wiki/Monkey_patch">monkey-patching</a> <code>delete-indentation</code> itself,
rather than just having to advise it.
Ostensibly all we have to do is to change<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a></p>
<pre class="emacs-lisp"><code>(if (and prefix (looking-at prefix))
  …)</code></pre>
<p>to</p>
<pre class="emacs-lisp"><code>(while (and prefix (looking-at prefix))
  …)</code></pre>
<p>While we’re at it,
we might as well remove the advice and hard-code the <code>fill-prefix</code> into the function.
Modulo some minor details,
this gives us the finished product,
which works as expected in all situations I’ve cared to try it in!<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a></p>
<pre class="emacs-lisp"><code>(defun delete-indentation (&amp;optional arg beg end)
  &quot;Join this line to previous and fix up whitespace at join.
If there is a fill prefix, delete it from the beginning of this
line.
With prefix ARG, join the current line to the following line.
When BEG and END are non-nil, join all lines in the region they
define.  Interactively, BEG and END are, respectively, the start
and end of the region if it is active, else nil.  (The region is
ignored if prefix ARG is given.)

When joining lines, smartly delete comment beginnings, such that one
does not have to do this by oneself.&quot;
  (interactive
   (progn (barf-if-buffer-read-only)
          (cons current-prefix-arg
                (and (use-region-p)
                     (list (region-beginning) (region-end))))))
  ;; Consistently deactivate mark even when no text is changed.
  (setq deactivate-mark t)
  (if (and beg (not arg))
      ;; Region is active.  Go to END, but only if region spans
      ;; multiple lines.
      (and (goto-char beg)
           (&gt; end (line-end-position))
           (goto-char end))
    ;; Region is inactive.  Set a loop sentinel
    ;; (subtracting 1 in order to compare less than BOB).
    (setq beg (1- (line-beginning-position (and arg 2))))
    (when arg (forward-line)))
  (let* ((comment (string-trim-right comment-start))
         (prefix-start (and (&gt; (length comment-start) 0)
                            (regexp-quote comment)))
         ;; A continuation of a comment. This is important for
         ;; languages such as Haskell, where -- starts a comment
         ;; and --- still is one.
         (prefix-cont (and prefix-start
                           (regexp-quote (substring comment 0 1))))
         (prev-comment?                 ; Comment on previous line?
          (save-excursion
            (forward-line -1)
            (back-to-indentation)
            (search-forward prefix-start (pos-eol) 'no-error))))
    (while (and (&gt; (line-beginning-position) beg)
                (forward-line 0)
                (= (preceding-char) ?\n))
      (delete-char -1)
      (unless (save-excursion (forward-line -1) (eolp))
        (delete-horizontal-space)
        ;; Delete the start of a comment once.
        (when (and prev-comment? prefix-start (looking-at prefix-start))
          (replace-match &quot;&quot; t t)
          ;; Look for continuations.
          (while (and prefix-cont (looking-at prefix-cont))
            (replace-match &quot;&quot; t t)))
        (fixup-whitespace)))))</code></pre>
<p>If you’re interested in a diff with the original function, you can find that below.</p>
<details>
<summary>
Click
</summary>
<div class="sourceCode" id="cb6"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -6,7 +6,10 @@</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a> When BEG and END are non-nil, join all lines in the region they</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a> define.  Interactively, BEG and END are, respectively, the start</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a> and end of the region if it is active, else nil.  (The region is</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="st">-ignored if prefix ARG is given.)&quot;</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="va">+ignored if prefix ARG is given.)</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="va">+When joining lines, smartly delete comment beginnings, such that one</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="va">+does not have to do this by oneself.&quot;</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>   (interactive</span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>    (progn (barf-if-buffer-read-only)</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>           (cons current-prefix-arg</span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -24,14 +27,28 @@</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>     ;; (subtracting 1 in order to compare less than BOB).</span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a>     (setq beg (1- (line-beginning-position (and arg 2))))</span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a>     (when arg (forward-line)))</span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a><span class="st">-  (let ((prefix (and (&gt; (length fill-prefix) 0)</span></span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a><span class="st">-                     (regexp-quote fill-prefix))))</span></span>
<span id="cb6-19"><a href="#cb6-19" aria-hidden="true" tabindex="-1"></a><span class="va">+  (let* ((comment (string-trim-right comment-start))</span></span>
<span id="cb6-20"><a href="#cb6-20" aria-hidden="true" tabindex="-1"></a><span class="va">+         (prefix-start (and (&gt; (length comment-start) 0)</span></span>
<span id="cb6-21"><a href="#cb6-21" aria-hidden="true" tabindex="-1"></a><span class="va">+                            (regexp-quote comment)))</span></span>
<span id="cb6-22"><a href="#cb6-22" aria-hidden="true" tabindex="-1"></a><span class="va">+         ;; A continuation of a comment. This is important for</span></span>
<span id="cb6-23"><a href="#cb6-23" aria-hidden="true" tabindex="-1"></a><span class="va">+         ;; languages such as Haskell, where -- starts a comment</span></span>
<span id="cb6-24"><a href="#cb6-24" aria-hidden="true" tabindex="-1"></a><span class="va">+         ;; and --- still is one.</span></span>
<span id="cb6-25"><a href="#cb6-25" aria-hidden="true" tabindex="-1"></a><span class="va">+         (prefix-cont (and prefix-start (regexp-quote (substring comment 0 1))))</span></span>
<span id="cb6-26"><a href="#cb6-26" aria-hidden="true" tabindex="-1"></a><span class="va">+         (prev-comment?                 ; Comment on previous line?</span></span>
<span id="cb6-27"><a href="#cb6-27" aria-hidden="true" tabindex="-1"></a><span class="va">+          (save-excursion</span></span>
<span id="cb6-28"><a href="#cb6-28" aria-hidden="true" tabindex="-1"></a><span class="va">+            (forward-line -1)</span></span>
<span id="cb6-29"><a href="#cb6-29" aria-hidden="true" tabindex="-1"></a><span class="va">+            (back-to-indentation)</span></span>
<span id="cb6-30"><a href="#cb6-30" aria-hidden="true" tabindex="-1"></a><span class="va">+            (search-forward prefix-start (pos-eol) 'no-error))))</span></span>
<span id="cb6-31"><a href="#cb6-31" aria-hidden="true" tabindex="-1"></a>     (while (and (&gt; (line-beginning-position) beg)</span>
<span id="cb6-32"><a href="#cb6-32" aria-hidden="true" tabindex="-1"></a>                 (forward-line 0)</span>
<span id="cb6-33"><a href="#cb6-33" aria-hidden="true" tabindex="-1"></a>                 (= (preceding-char) ?\n))</span>
<span id="cb6-34"><a href="#cb6-34" aria-hidden="true" tabindex="-1"></a>       (delete-char -1)</span>
<span id="cb6-35"><a href="#cb6-35" aria-hidden="true" tabindex="-1"></a><span class="st">-      ;; If the appended line started with the fill prefix,</span></span>
<span id="cb6-36"><a href="#cb6-36" aria-hidden="true" tabindex="-1"></a><span class="st">-      ;; delete the prefix.</span></span>
<span id="cb6-37"><a href="#cb6-37" aria-hidden="true" tabindex="-1"></a><span class="st">-      (if (and prefix (looking-at prefix))</span></span>
<span id="cb6-38"><a href="#cb6-38" aria-hidden="true" tabindex="-1"></a><span class="st">-          (replace-match &quot;&quot; t t))</span></span>
<span id="cb6-39"><a href="#cb6-39" aria-hidden="true" tabindex="-1"></a><span class="st">-      (fixup-whitespace))))</span></span>
<span id="cb6-40"><a href="#cb6-40" aria-hidden="true" tabindex="-1"></a><span class="va">+      (unless (save-excursion (forward-line -1) (eolp))</span></span>
<span id="cb6-41"><a href="#cb6-41" aria-hidden="true" tabindex="-1"></a><span class="va">+        (delete-horizontal-space)</span></span>
<span id="cb6-42"><a href="#cb6-42" aria-hidden="true" tabindex="-1"></a><span class="va">+        ;; Delete the start of a comment once.</span></span>
<span id="cb6-43"><a href="#cb6-43" aria-hidden="true" tabindex="-1"></a><span class="va">+        (when (and prev-comment? prefix-start (looking-at prefix-start))</span></span>
<span id="cb6-44"><a href="#cb6-44" aria-hidden="true" tabindex="-1"></a><span class="va">+          (replace-match &quot;&quot; t t)</span></span>
<span id="cb6-45"><a href="#cb6-45" aria-hidden="true" tabindex="-1"></a><span class="va">+          ;; Look for continuations.</span></span>
<span id="cb6-46"><a href="#cb6-46" aria-hidden="true" tabindex="-1"></a><span class="va">+          (while (and prefix-cont (looking-at prefix-cont))</span></span>
<span id="cb6-47"><a href="#cb6-47" aria-hidden="true" tabindex="-1"></a><span class="va">+            (replace-match &quot;&quot; t t)))</span></span>
<span id="cb6-48"><a href="#cb6-48" aria-hidden="true" tabindex="-1"></a><span class="va">+        (fixup-whitespace)))</span></span></code></pre></div>
</details>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>{-} 󠀠</p>
<p>In daily usage, I have this bound to <code>C-u C-w</code>,
where <code>C-w</code> itself is bound to what’s essentially <code>backward-kill-word</code>;
see <a href="https://gitlab.com/slotThe/dotfiles/-/blob/5929dc10bcbdf0d3531bd6f9940f54f8294a27a3/emacs/lisp/hopf-keybindings.el#L131">here</a>
for the full function.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>This is a “String for filling to insert at front of new line, or nil for none.”<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>This is helpfully provided by the <code>comment-start</code> variable.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>{-} 󠀠</p>
<p>Notice that the <code>if</code> in the code is really a <code>when</code>.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>{-} 󠀠</p>
<p>It is in moments like these that I’m extremely glad about<!--
  -->—albeit a bit scared of—<!--
  -->Emacs’s infinite customisability.
If something doesn’t work to your liking,
just overwrite a builtin function;
what’s the worst that could happen?</p>
<p>In case you don’t want to copy the whole function,
you can find a small package for it
on <a href="https://github.com/slotThe/delete-indentation-comments">Microsoft GitHub</a>.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Parentheses-Aware Yanking</title>
    <link href="https://tony-zorman.com/posts/yanking.html" />
    <id>https://tony-zorman.com/posts/yanking.html</id>
    <published>2024-01-03T00:00:00Z</published>
    <updated>2024-01-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2024-01-03
      
      
        &thinsp;·&thinsp; last modified: 2024-01-05
      
      
        &thinsp;·&thinsp; <span title="885 words">4 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>
</p>
<p>Copying, killing, and yanking<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> text in Emacs is quite straightforward,
and very little is done to manipulate the contents of the string during these operations.
Rightfully so, of course,
as this might yield pretty surprising behaviour to many people.
To me, however, inserting unbalanced expressions is even more surprising
than not preprocessing anything at all, so let’s change that.</p>
<!--more-->
<h2 id="the-problem">The problem</h2>
<p>Say you have the following s-expression:</p>
<pre class="emacs-lisp"><code>(insert-for-yank
 (current-kill
  (cond
   ((listp arg) 0)
   ((eq arg '-) -2)
   (t (1- arg)))))</code></pre>
<p>Now, for whatever reason,
you might want to copy the <code>(t (1- arg))</code> on the last line.
One way to do that would be to navigate to it,
set the mark with <code>M-SPC</code>,
jump to its end with <code>M-C-f</code>,
and save everything to the kill ring with <code>M-w</code>.<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>
This works, but it feels a bit slow sometimes,
even when navigating to the expression is fast thanks to
<a href="https://paredit.org/">paredit</a>.</p>
<p>There is the wonderful
<a href="https://github.com/purcell/whole-line-or-region">whole-line-or-region</a>
package,
which makes many commands act on the current line if no region is selected.
With that, copying the last line of the above expression just involves navigating to it and pressing <code>M-w</code>.
Alas, when yanking the line into the buffer again, we are greeted with</p>
<pre class="emacs-lisp"><code>(t (1- arg)))))</code></pre>
<p>Lots of unbalanced parentheses!
This is especially troublesome when one uses
<a href="https://github.com/Malabarba/aggressive-indent-mode">aggressive-indent-mode</a><!--
-->—as I do—since then you run the chance of your buffer shifting around you.</p>
<p>All of this would be fixed with a version of <code>yank</code> that correctly trims off these extraneous parentheses
before yanking the killed text into the buffer.
Let’s make one.<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a></p>
<h2 id="an-approximate-solution">An approximate solution</h2>
<p>We first create a small function that gives us some info about how many
open delimiters<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a> there are in the current buffer.
The implementation is straightforward,
we just need to make sure to take care of a few special cases<!--
-->—and I almost certainly missed one—<!--
-->like delimiters appearing inside of strings or comments.<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a></p>
<pre class="emacs-lisp"><code>(defun slot/get-delimiters ()
  &quot;Return delimiter count in current buffer.
Returns a list, each element being of the form (OPEN CLOSE AMNT),
where OPEN and CLOSE are the respective opening and closing
delimiters, and AMNT is an integer; a positive (negative) number
signalling that there are that many extraneous opening (closing)
delimiters.  Thus, a value of 0 signifies a balanced buffer.

Do not count a delimiter towards the global total if it is
escaped (prefixed by a backslash), part of a string, or part of a
comment.&quot;
  (goto-char (point-min))
  (let-alist '((paren . 0) (square . 0) (curly . 0))
    (while-let ((char (char-after)))
      (unless (or (-intersection (text-properties-at (point))
                                 '(font-lock-string-face
                                   font-lock-comment-face))
                  (eq ?\\ (char-before)))
        (pcase char
          (?\( (cl-incf .paren)) (?\[ (cl-incf .square)) (?\{ (cl-incf .curly))
          (?\) (cl-decf .paren)) (?\] (cl-decf .square)) (?\} (cl-decf .curly))))
      (forward-char))
    `((&quot;(&quot; &quot;)&quot; ,.paren)
      (&quot;[&quot; &quot;]&quot; ,.square)
      (&quot;{&quot; &quot;}&quot; ,.curly))))</code></pre>
<p>Having <code>slot/get-delimiters</code>, which does most of the actual work,
all that’s left to get this running is to actually trim the string before yanking it.
No tricks needed here.</p>
<pre class="emacs-lisp"><code>(defun slot/trim-delimiter (open close n)
  &quot;Trim delimiter in current buffer.
OPEN and CLOSE are the respective opening and closing delimiters.
The number N indicates how many—and which—delimiters to trim.  If
it is positive, trim CLOSE; otherwise, trim OPEN.&quot;
  (-let (((pt del) (if (&lt; n 0)          ; More closing than opening?
                       `(point-max (when (search-backward ,close (point-min) t)
                                     (delete-forward-char 1)))
                     `(point-min (when (search-forward ,open (point-max) t)
                                   (delete-backward-char 1))))))
    (goto-char (funcall pt))
    (dotimes (_ (abs n))
      (eval del))))

(defun slot/trim-delimiters (str)
  &quot;Trim delimiters in current buffer.
See `slot/get-delimiters' for a list of all relevant delimiters,
and `slot/trim-delimiter' for how delimiters are actually
trimmed.&quot;
  (with-temp-buffer
    (insert str)
    (--each (slot/get-delimiters)
      (apply #'slot/trim-delimiter it))
    (buffer-string)))

;; Implementation copied verbatim from `yank', except for the insertion
;; of `slot/trim-delimiters'.
(defun slot/yank (&amp;optional arg)
  &quot;Delimiter-aware yanking.
Like `yank' (which see), but trim non-matching delimiters from
the string before actually yanking it into the current buffer.
The kill-ring itself remains untouched.&quot;
  (interactive &quot;*P&quot;)
  (setq yank-window-start (window-start))
  ;; If we don't get all the way through, make `last-command' indicate
  ;; that for the following command.
  (setq this-command t)
  (push-mark)
  (insert-for-yank (slot/trim-delimiters        ; &lt;- HERE
                    (current-kill
                     (cond
                      ((listp arg) 0)
                      ((eq arg '-) -2)
                      (t (1- arg))))))
  (when (consp arg)
    ;; This is like `exchange-point-and-mark', but doesn't activate
    ;; the mark.  It is cleaner to avoid activation, even though the
    ;; command loop would deactivate the mark because we inserted text.
    (goto-char (prog1 (mark t)
                 (set-marker (mark-marker) (point) (current-buffer)))))
  ;; If we do get all the way through, make `this-command' indicate that.
  (when (eq this-command t)
    (setq this-command 'yank))
  nil)</code></pre>
<p>Instead of defining <code>slot/yank</code>,
one might also just override <code>yank</code> with the new definition.
That, however, seems a bit uncouth,
and it’s not terribly difficult to assign the same key to the new function:</p>
<pre class="emacs-lisp"><code>(bind-key &quot;C-y&quot; #'slot/yank)</code></pre>
<p>Killing <code>(t (1- arg)))))</code> and yanking it again yields <code>(t (1- arg))</code>,
as desired.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>Also known as copying, cutting, and pasting in every other context ever.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>One might also use <code>C-k C-y</code> (<code>paredit-kill</code> followed by <code>yank</code>) instead of <code>M-SPC M-C-f M-w</code>,
but that only works at the end of an expression.
Plus, what <code>paredit-kill</code> kills might be more than the current line.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>Doing it this way also has the added benefit of working for every major mode,
not just ones where I happen to use paredit
(or <a href="https://github.com/AmaiKinono/puni">puni</a>).<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>By “delimiter” I mean parentheses, square brackets, and curly braces.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>{-} 󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>This code now also lives <a href="https://github.com/slotThe/yank-delimiters">here</a>.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Integrating Zsh's History Into Eshell</title>
    <link href="https://tony-zorman.com/posts/eshell-zsh-history.html" />
    <id>https://tony-zorman.com/posts/eshell-zsh-history.html</id>
    <published>2023-11-27T00:00:00Z</published>
    <updated>2023-11-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2023-11-27
      
      
      
        &thinsp;·&thinsp; <span title="416 words">2 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->


<div>
  <p>I use eshell as my main shell.
Still,
a terminal emulator with zsh is kept around for longer running processes and <a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Util-NamedScratchpad.html">scratchpads</a>.
One thing that’s essential for this setup to make sense is that eshell and zsh share the same history file.
Sadly,
this doesn’t work out of the box:
zsh stores its history in a metafied format<!--
-->—nothing that’s not fixable on the Emacs side, of course!</p>
<!--more-->
<p><a href="https://www.zsh.org/mla/users/2011/msg00154.html">This email</a> explains the problem quite well.
In short:</p>
<blockquote>
<p>[…] when 0x80-0x9F characters are used, then always 0x83 Meta
character is inserted and following character is bit shifted, […]</p>
</blockquote>
<p>This is not a bug, but expected behaviour;
zsh’s history is saved in exactly such a metafied format.
The upshot is that,
when setting <code>eshell-history-file-name</code> to e.g. <code>"~/.config/zsh/zsh_history"</code>,
Emacs either won’t know how to properly encode the file upon exiting eshell,
or one will get suggestions<!--
-->—using a package like <a href="https://github.com/dieggsy/esh-autosuggest">esh-autosuggest</a>—<!--
-->containing garbage like <code>\304§</code> instead of <code>ć</code>.</p>
<p>The linked discussion helpfully contains a small C program to unmetafy the history:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#define Meta </span><span class="op">((</span><span class="dt">char</span><span class="op">)</span><span class="pp"> </span><span class="bn">0x83</span><span class="op">)</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="co">/* from zsh utils.c */</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="dt">char</span> <span class="op">*</span>unmetafy<span class="op">(</span><span class="dt">char</span> <span class="op">*</span>s<span class="op">,</span> <span class="dt">int</span> <span class="op">*</span>len<span class="op">)</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>  <span class="dt">char</span> <span class="op">*</span>p<span class="op">,</span> <span class="op">*</span>t<span class="op">;</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">(</span>p <span class="op">=</span> s<span class="op">;</span> <span class="op">*</span>p <span class="op">&amp;&amp;</span> <span class="op">*</span>p <span class="op">!=</span> Meta<span class="op">;</span> p<span class="op">++);</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">(</span>t <span class="op">=</span> p<span class="op">;</span> <span class="op">(*</span>t <span class="op">=</span> <span class="op">*</span>p<span class="op">++);)</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(*</span>t<span class="op">++</span> <span class="op">==</span> Meta<span class="op">)</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>      t<span class="op">[-</span><span class="dv">1</span><span class="op">]</span> <span class="op">=</span> <span class="op">*</span>p<span class="op">++</span> <span class="op">^</span> <span class="dv">32</span><span class="op">;</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>len<span class="op">)</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">*</span>len <span class="op">=</span> t <span class="op">-</span> s<span class="op">;</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> s<span class="op">;</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>This looks pretty terse,
at least to my non-C-reading-eyes,
but essentially every time <code>0x83</code> is encountered,
we delete it and XOR the following character with the number 32.
An implementation in elisp might look like the following:</p>
<pre class="emacs-lisp"><code>(defun slot/unmetafy ()
  (cl-flet ((unmetafy (input)
              (let ((i 0) output)
                (while-let ((char (nth i input))
                            (inc-and-char
                             (if (= char #x83)
                                 ;; Skip meta character and unmetafy.
                                 `(2 . ,(logxor (nth (1+ i) input) 32))
                               ;; Advance as usual.
                               `(1 . ,char))))
                  (cl-incf i (car inc-and-char))
                  (setq output (cons (cdr inc-and-char) output)))
                (decode-coding-string
                 (apply #'unibyte-string (nreverse output))
                 'utf-8-unix
                 t))))
    (let ((hist-file &quot;~/.config/zsh/zsh_history&quot;))
      (with-temp-buffer
        (insert (mapconcat (-compose #'unmetafy #'string-to-list)
                           (s-lines (f-read-bytes hist-file))
                           &quot;\n&quot;))
        (write-file hist-file)))))
</code></pre>
<p>This can be conveniently integrated into an <code>eshell/exit</code>-like function,
such as</p>
<pre class="emacs-lisp"><code>(defun slot/eshell-exit (&amp;optional arg)
  &quot;Exit eshell and kill the current frame.&quot;
  (interactive &quot;P&quot;)
  (slot/unmetafy)
  (eshell-write-history)
  (save-buffers-kill-terminal))
</code></pre>
<p>Finally, one just need to take care to bind that function to a key,
and to unmetafy the history when eshell starts.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></p>
<pre class="emacs-lisp"><code>(use-package eshell
  :hook (eshell-hist-load . slot/unmetafy)
  :bind (:map eshell-mode-map
              (&quot;C-x C-c&quot; . slot/eshell-exit)))
</code></pre>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>Unmetafying when quitting resolves the “Emacs can’t decide on an encoding” issue,
and doing so at the start solves <code>esh-autosuggest</code> et al producing garbage suggestions.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Using XMonad with NixOS</title>
    <link href="https://tony-zorman.com/posts/xmonad-on-nixos.html" />
    <id>https://tony-zorman.com/posts/xmonad-on-nixos.html</id>
    <published>2023-11-13T00:00:00Z</published>
    <updated>2023-11-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2023-11-13
      
      
        &thinsp;·&thinsp; last modified: 2024-10-15
      
      
        &thinsp;·&thinsp; <span title="1173 words">5 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>, <a title="All pages tagged 'nix'." href="/tags/nix.html" rel="tag">nix</a>, <a title="All pages tagged 'xmonad'." href="/tags/xmonad.html" rel="tag">xmonad</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>
I recently switched to NixOS,
and one of the first tasks was to properly set up my window manager of choice—XMonad, of course.
Luckily, the project provides a custom flake that makes pretty very straightforward;
if you know your way around flakes and Nix, that is.
I don’t yet, so I hit some rough spots.
Since providing more documentation always sounds like a worthwhile goal,
this post is just that: a diff-by-diff guide on how everything was set up on my side.
</p>
<!--more-->
As indicated, I’ll be working with direct diffs from my configuration;
this seems to tell the story in the most accurate way.
Because scrolling through lots of diffs is about as fun as a visit to the dentist,
they are all tucked away in expandable sections
<details>
<summary>
Like this one
</summary>
Hi :)
</details>
<h2 id="setup">Setup</h2>
<p>First and foremost I should mention that XMonad does in fact have some documentation on how to set up the flake:
it’s tucked away in <a href="https://github.com/xmonad/xmonad-contrib/blob/master/NIX.md">NIX.md</a>.
The process mainly consists of two parts:
adding an <code>xmonad-contrib</code> input to your system flake,
and enabling this functionality in <code>windowManager.xmonad</code>.</p>
<details>
<summary>
Modifying the system flake
</summary>
<p><a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></p>
<div class="sourceCode" id="cb1"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">diff --git a/flake.nix b/flake.nix</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>index 4cf35e4..dedd839 100644</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="dt">--- a/flake.nix</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/flake.nix</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -6,13 +6,14 @@</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>     emacs-overlay.url = github:nix-community/emacs-overlay;</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>     hmenu.url         = gitlab:slotThe/hmenu;</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>     kmonad.url        = git+https://github.com/kmonad/kmonad?submodules=1&amp;dir=nix;</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="va">+    xmonad-contrib.url= github:xmonad/xmonad-contrib;</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>     home-manager      = {</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>       url = github:nix-community/home-manager;</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>       inputs.nixpkgs.follows = &quot;nixpkgs&quot;;</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>     };</span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>   };</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a><span class="st">-  outputs = inputs@{ self, nixpkgs, emacs-overlay, hmenu, kmonad, home-manager, ... }:</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a><span class="va">+  outputs = inputs@{ self, nixpkgs, emacs-overlay, hmenu, kmonad, xmonad-contrib, home-manager, ... }:</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>     let my-overlays = {</span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>           nixpkgs.overlays = [</span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>             emacs-overlay.overlays.default</span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -20,7 +21,7 @@</span></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a>           ];</span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>         };</span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>     in {</span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a><span class="st">-      nixosConfigurations.comonad = nixpkgs.lib.nixosSystem {</span></span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a><span class="va">+      nixosConfigurations.comonad = nixpkgs.lib.nixosSystem rec {</span></span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a>         system  = &quot;x86_64-linux&quot;;</span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a>         modules = [</span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>           ./nix/hardware-configuration.nix</span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -34,6 +35,8 @@</span></span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a>             home-manager.useUserPackages = true;</span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a>             home-manager.users.slot      = import ./nix/home.nix;</span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a>           }</span>
<span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a><span class="va">+        ] ++ xmonad-contrib.nixosModules ++ [</span></span>
<span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a><span class="va">+          xmonad-contrib.modernise.${system}</span></span>
<span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a>         ];</span>
<span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a>       };</span>
<span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a>     };</span></code></pre></div>
</details>
<p>After having added the input, making use of the flake is quite easy.<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a></p>
<details>
<summary>
Enabling the flake
</summary>
<div class="sourceCode" id="cb2"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">diff --git a/nix/configuration.nix b/nix/configuration.nix</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>index 4700e14..50b1519 100644</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="dt">--- a/nix/configuration.nix</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/nix/configuration.nix</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -63,6 +63,16 @@</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>     enable = true;</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>     layout = &quot;us&quot;;</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>     displayManager.startx.enable = true;</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="va">+    windowManager.xmonad = {</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="va">+      enable = true;</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a><span class="va">+      enableContribAndExtras = true;</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a><span class="va">+      flake  = {</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a><span class="va">+        enable   = true;</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a><span class="va">+        compiler = &quot;ghc947&quot;;</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a><span class="va">+      };</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a><span class="va">+      config = builtins.readFile ../xmonad/xmonad.hs;</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a><span class="va">+      enableConfiguredRecompile = true;</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a><span class="va">+    };</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>   };</span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>   fonts.packages = with pkgs; [</span></code></pre></div>
</details>
<p>And that’s really it!
No need to write a custom <code>launch</code> function and similar shenanigans,
the flake takes care of all of those details for you—pretty neat, I think;
thanks <a href="https://github.com/lsleary">Leary</a>!</p>
<h2 id="primitive-emacs-integration">Primitive Emacs integration</h2>
<p>Though not directly relevant to making the flake work,
a nice-to-have feature is Emacs support.
One could <a href="https://srid.ca/xmonad-conf-ide">create a cabal project</a> to get real <code>haskell-language-server</code> support,
but that seems a bit overkill to me.
I don’t really need more than a <code>ghci</code> session for my configuration<!--
-->—anything complicated enough to warrant a language server should immediately be upstreamed into <code>xmonad-contrib</code>.</p>
<p>In Emacs’s <code>haskell-mode</code>,
executing <code>haskell-interactive-bring</code> (bound to <code>C-c C-c</code> by default)
brings up a <code>ghci</code> session.<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>
Rather obviously, this fails out of the box.
It tries to call the global <code>ghci</code>,
which doesn’t come from the flake,
and is thus not equipped with <code>xmonad-contrib</code> and other dependencies that I might have.</p>
<p>The low-tech solution I chose here is twofold;
first, I outsourced starting the Emacs daemon from my xinitrc to my XMonad configuration file.
In this way, the resulting Emacs instance comes equipped with the <code>$XMONAD_GHC</code> environment variable.</p>
<details>
<summary>
Moving Emacs
</summary>
<div class="sourceCode" id="cb4"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">diff --git a/nix/modules/emacs.nix b/nix/modules/emacs.nix</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>index 794f636..fad9cd0 100644</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="dt">--- a/nix/modules/emacs.nix</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/nix/modules/emacs.nix</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -1,8 +1,6 @@</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a> { config, pkgs, ... }:</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a> {</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="st">-  services.emacs.enable = true; # Start as daemon</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="st">-</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>   xdg.configFile.&quot;emacs&quot;.source = config.lib.my.mkSymlink &quot;emacs&quot;;</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>   home.packages = with pkgs; [</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a><span class="kw">diff --git a/xinitrc/.xinitrc b/xinitrc/.xinitrc</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>index c9a6958..b8176bd 100755</span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a><span class="dt">--- a/xinitrc/.xinitrc</span></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/xinitrc/.xinitrc</span></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -32,10 +32,6 @@ kmonad ~/.config/kmonad/config.kbd &amp;</span></span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a> # 14dec2019</span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a> redshift -l 55.7:12.6 -t 6500K:3200K -b 1.0:0.8 &amp;</span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a><span class="st">-# Start emacs as a daemon.</span></span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a><span class="st">-emacs --daemon &amp;</span></span>
<span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a><span class="st">-emacs --daemon=eshell &amp;</span></span>
<span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a><span class="st">-</span></span>
<span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a> # Hide mouse cursor when idle.</span>
<span id="cb4-27"><a href="#cb4-27" aria-hidden="true" tabindex="-1"></a> unclutter --ignore-scrolling &amp;</span>
<span id="cb4-28"><a href="#cb4-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-29"><a href="#cb4-29" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -46,4 +42,4 @@ wallpaper-changer &amp;</span></span>
<span id="cb4-30"><a href="#cb4-30" aria-hidden="true" tabindex="-1"></a> compton --blur-method kawase --blur-strength 5 --config ~/.config/compton/compton.conf &amp;</span>
<span id="cb4-31"><a href="#cb4-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-32"><a href="#cb4-32" aria-hidden="true" tabindex="-1"></a> # Start the window manager.</span>
<span id="cb4-33"><a href="#cb4-33" aria-hidden="true" tabindex="-1"></a><span class="st">-exec &quot;$XMONAD_CONFIG_DIR&quot;/xmonad-x86_64-linux</span></span>
<span id="cb4-34"><a href="#cb4-34" aria-hidden="true" tabindex="-1"></a><span class="va">+exec xmonad</span></span>
<span id="cb4-35"><a href="#cb4-35" aria-hidden="true" tabindex="-1"></a><span class="kw">diff --git a/xmonad/xmonad.hs b/xmonad/xmonad.hs</span></span>
<span id="cb4-36"><a href="#cb4-36" aria-hidden="true" tabindex="-1"></a>index 5802888..933a274 100644</span>
<span id="cb4-37"><a href="#cb4-37" aria-hidden="true" tabindex="-1"></a><span class="dt">--- a/xmonad/xmonad.hs</span></span>
<span id="cb4-38"><a href="#cb4-38" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/xmonad/xmonad.hs</span></span>
<span id="cb4-39"><a href="#cb4-39" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -80,6 +80,7 @@ import XMonad.Prompt.Workspace (workspacePrompt)</span></span>
<span id="cb4-40"><a href="#cb4-40" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-41"><a href="#cb4-41" aria-hidden="true" tabindex="-1"></a> import XMonad.Util.Cursor (setDefaultCursor)</span>
<span id="cb4-42"><a href="#cb4-42" aria-hidden="true" tabindex="-1"></a> import XMonad.Util.EZConfig (additionalKeysP)</span>
<span id="cb4-43"><a href="#cb4-43" aria-hidden="true" tabindex="-1"></a><span class="va">+import XMonad.Util.SpawnOnce (spawnOnce)</span></span>
<span id="cb4-44"><a href="#cb4-44" aria-hidden="true" tabindex="-1"></a> import XMonad.Util.Loggers (logTitlesOnScreen)</span>
<span id="cb4-45"><a href="#cb4-45" aria-hidden="true" tabindex="-1"></a> import XMonad.Util.NamedScratchpad (NamedScratchpad (NS), customFloating, namedScratchpadAction, namedScratchpadManageHook, scratchpadWorkspaceTag)</span>
<span id="cb4-46"><a href="#cb4-46" aria-hidden="true" tabindex="-1"></a> import XMonad.Util.Run (EmacsLib (ElpaLib, Special), asBatch, asString, elispFun, eval, execute, executeNoQuote, findFile, getInput, inEditor, inEmacs, inProgram, inTerm, proc, progn, quote, require, setFrameName, setXClass, spawnExternalProcess, termInDir, toInput, withEmacsLibs, (&gt;&amp;&amp;&gt;), (&gt;-$), (&gt;-&gt;))</span>
<span id="cb4-47"><a href="#cb4-47" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -121,7 +122,10 @@ myConfig = def</span></span>
<span id="cb4-48"><a href="#cb4-48" aria-hidden="true" tabindex="-1"></a>   , normalBorderColor  = colorBg</span>
<span id="cb4-49"><a href="#cb4-49" aria-hidden="true" tabindex="-1"></a>   , focusedBorderColor = colorBlue</span>
<span id="cb4-50"><a href="#cb4-50" aria-hidden="true" tabindex="-1"></a>   , terminal           = &quot;alacritty&quot;</span>
<span id="cb4-51"><a href="#cb4-51" aria-hidden="true" tabindex="-1"></a><span class="st">-  , startupHook        = setDefaultCursor xC_left_ptr</span></span>
<span id="cb4-52"><a href="#cb4-52" aria-hidden="true" tabindex="-1"></a><span class="va">+  , startupHook        = do</span></span>
<span id="cb4-53"><a href="#cb4-53" aria-hidden="true" tabindex="-1"></a><span class="va">+      setDefaultCursor xC_left_ptr</span></span>
<span id="cb4-54"><a href="#cb4-54" aria-hidden="true" tabindex="-1"></a><span class="va">+      spawnOnce &quot;emacs --daemon&quot;        -- See Note [Emacs]</span></span>
<span id="cb4-55"><a href="#cb4-55" aria-hidden="true" tabindex="-1"></a><span class="va">+      spawnOnce &quot;emacs --daemon=eshell&quot;</span></span>
<span id="cb4-56"><a href="#cb4-56" aria-hidden="true" tabindex="-1"></a>   , workspaces         = topicNames topics</span>
<span id="cb4-57"><a href="#cb4-57" aria-hidden="true" tabindex="-1"></a>   , manageHook         = myManageHook</span>
<span id="cb4-58"><a href="#cb4-58" aria-hidden="true" tabindex="-1"></a>   , layoutHook         = lessBorders (Combine Union Screen OnlyFloat) layoutOrder</span>
<span id="cb4-59"><a href="#cb4-59" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -132,6 +136,14 @@ myConfig = def</span></span>
<span id="cb4-60"><a href="#cb4-60" aria-hidden="true" tabindex="-1"></a>                          -- move pointer to exact center of that window.</span>
<span id="cb4-61"><a href="#cb4-61" aria-hidden="true" tabindex="-1"></a>   }</span>
<span id="cb4-62"><a href="#cb4-62" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-63"><a href="#cb4-63" aria-hidden="true" tabindex="-1"></a><span class="va">+{- Note [Emacs]</span></span>
<span id="cb4-64"><a href="#cb4-64" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb4-65"><a href="#cb4-65" aria-hidden="true" tabindex="-1"></a><span class="va">+All of the Emacs daemons are spawned here, and *not* as systemd services</span></span>
<span id="cb4-66"><a href="#cb4-66" aria-hidden="true" tabindex="-1"></a><span class="va">+or in the ~/.xinitrc. The reason is that, in this way, Emacs inherits</span></span>
<span id="cb4-67"><a href="#cb4-67" aria-hidden="true" tabindex="-1"></a><span class="va">+all environment variables that are set by the XMonad executable, like</span></span>
<span id="cb4-68"><a href="#cb4-68" aria-hidden="true" tabindex="-1"></a><span class="va">+$XMONAD_GHC. See the bottom of this file for a use-case.</span></span>
<span id="cb4-69"><a href="#cb4-69" aria-hidden="true" tabindex="-1"></a><span class="va">+-}</span></span>
<span id="cb4-70"><a href="#cb4-70" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb4-71"><a href="#cb4-71" aria-hidden="true" tabindex="-1"></a> -- | Building my own pretty-printer.</span>
<span id="cb4-72"><a href="#cb4-72" aria-hidden="true" tabindex="-1"></a> xmobarPP :: ScreenId -&gt; X PP</span>
<span id="cb4-73"><a href="#cb4-73" aria-hidden="true" tabindex="-1"></a> xmobarPP sid = pure . filterOutWsPP [scratchpadWorkspaceTag] $ def</span></code></pre></div>
</details>
<p>All that’s left now is to set some local variable,
making Emacs aware that it should use another GHC version for my <code>xmonad.hs</code>.</p>
<details>
<summary>
Adding <code>haskell-process-path</code> to my <code>xmonad.hs</code>
</summary>
<div class="sourceCode" id="cb5"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">diff --git a/xmonad/xmonad.hs b/xmonad/xmonad.hs</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>index 933a274..185ed2e 100644</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="dt">--- a/xmonad/xmonad.hs</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/xmonad/xmonad.hs</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -881,3 +881,8 @@ switchToLayout = sendMessage . JumpToLayout</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a> -- submap from a list of @(key, action)@ pairs.</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a> basicSubmapFromList :: Ord key =&gt; [(key, action)] -&gt; Map (KeyMask, key) action</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a> basicSubmapFromList = fromList . map \(k, a) -&gt; ((0, k), a)</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a><span class="va">+--- Local Variables:</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a><span class="va">+--- mode: haskell</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a><span class="va">+--- eval: (setopt haskell-process-path-ghci (concat (or (getenv &quot;XMONAD_GHC&quot;) &quot;ghc&quot;) &quot;i&quot;))</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a><span class="va">+--- End:</span></span></code></pre></div>
</details>
<p>Now <code>C-c C-c</code> works out of the box!</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>{-} 󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>Note that <code>xmonad-contrib.modernise.${system}</code> was only temporarily needed until nixpkgs caught up with some upstream changes in XMonad.
If you still have this in your flake, you should probably remove it—it might lead to quirky behaviour upon evaluation!<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>Note the presence of the <code>enableConfiguredRecompile</code> flag—this is necessary for <code>M-q</code> recompilation to work out of the box!
I figured that out so you don’t have to.
Make sure that the revision of <code>nixpkgs</code> that you track is recent enough,
else this flag may not be available.</p>
<p>Also, don’t forget to provide XMonad with your configuration,
lest you will be greeted by a black screen upon login.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>More precisely, I have <code>C-c C-c</code> bound to</p>
<pre class="emacs-lisp"><code>(defun slot/haskell-load-and-bring ()
  &quot;Sane behaviour when loading the current file into ghci.&quot;
  (interactive)
  (save-buffer)
  (haskell-process-load-file)
  (haskell-interactive-bring))</code></pre>
<p>but this is only a small quality of life wrapper.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Fixing Lsp-Mode's Hover Signatures</title>
    <link href="https://tony-zorman.com/posts/fixing-lsp-mode.html" />
    <id>https://tony-zorman.com/posts/fixing-lsp-mode.html</id>
    <published>2023-10-22T00:00:00Z</published>
    <updated>2023-10-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2023-10-22
      
      
        &thinsp;·&thinsp; last modified: 2023-10-27
      
      
        &thinsp;·&thinsp; <span title="1148 words">5 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>, <a title="All pages tagged 'haskell'." href="/tags/haskell.html" rel="tag">haskell</a>, <a title="All pages tagged 'rust'." href="/tags/rust.html" rel="tag">rust</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>By now,
LSP servers have become the norm for editor-agnostic language support.
As expected, Emacs features at least two packages that implement the protocol:
the built-in <code>eglot</code>,
and the third-party <code>lsp-mode</code>.
I will focus on the latter in this post.</p>
<p>L<span class="small-caps">sp</span> clients have the option of showing useful things on hover.
In most languages, there is an obvious candidate for this:
the type signature of the thing at point.
Sadly—for some languages—the implementation of the feature is… not great.
Buggy even, one might say.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>
Taking this as an excuse to talk about Emacs’s infinite customisability,
there is of course a way to fix this within the bounds of our configuration.
Let’s do that!</p>
<!--more-->
<h2 id="the-problem">The problem</h2>
<p>Take any Haskell function with a long enough type signature, like the
following:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">iAmTooLong ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>iAmTooLong <span class="ot">=</span> <span class="fu">undefined</span></span></code></pre></div>
<p>By default, lsp-mode<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> will display the following type signature
in the echo-area
when hovering over the function name:</p>
<p><img class="pure-img" style="padding-left: 1em;" src="../images/fixing-lsp-mode/lsp-mode-default.png" alt="By default, lsp-mode only shows `iamTooLong :: Stirng`"></p>
<p>That’s… not correct.
Executing <code>lsp-describe-thing-at-point</code> immediately reveals the problem;
the request we get back looks like this:</p>
<pre><code>``` haskell
iAmTooLong :: String
-&gt; String
-&gt; String
-&gt; String
-&gt; String
-&gt; String
-&gt; String
-&gt; String
```

Defined at »PATH«</code></pre>
<p>The type signature is so long that the server breaks it into several lines.
Lsp-mode uses <code>lsp-clients-extract-signature-on-hover</code> to extract a signature on hover—by default, it looks like this:</p>
<pre class="emacs-lisp"><code>(cl-defgeneric lsp-clients-extract-signature-on-hover (contents _server-id)
  &quot;Extract a representative line from CONTENTS, to show in the echo area.&quot;
  (car (s-lines (s-trim (lsp--render-element contents)))))</code></pre>
<p>It just takes the first line of the first markdown code block.
While this works for simple type signatures,
it obviously falls flat in more complicated scenarios.
However, this being a generic function,
there’s the possibility to overload it depending on the major mode.</p>
<h2 id="fixing-haskell-type-signatures">Fixing Haskell type signatures</h2>
<p>The strategy seems pretty clear:
extract the whole block instead of only the first line.
This is swiftly done:<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a></p>
<pre class="emacs-lisp"><code>(defun slot/lsp-get-type-signature (lang str)
  &quot;Get LANGs type signature in STR.
Original implementation from https://github.com/emacs-lsp/lsp-mode/pull/1740.&quot;
  (let* ((start (concat &quot;```&quot; lang))
         (groups (--filter (s-equals? start (car it))
                           (-partition-by #'s-blank? (s-lines (s-trim str)))))
         (name-at-point (symbol-name (symbol-at-point)))
         (type-sig-group (car
                          (--filter (s-contains? name-at-point (cadr it))
                                    groups))))
    (-&gt;&gt; (or type-sig-group (car groups))
         (-drop 1)                    ; ``` LANG
         (-drop-last 1)               ; ```
         (-map #'s-trim)
         (s-join &quot; &quot;))))</code></pre>
<p>We can now override the method with our own implementation:</p>
<pre class="emacs-lisp"><code>(cl-defmethod lsp-clients-extract-signature-on-hover
  (contents (_server-id (eql lsp-haskell))) ; Only for Haskell.
  &quot;Display the type signature of the function at point.&quot;
  (slot/lsp-get-type-signature &quot;haskell&quot; (plist-get contents :value)))</code></pre>
<p>This already looks <em>fine</em>, but something is still amiss.</p>
<p><img class="pure-img" style="padding-left: 1em;" src="../images/fixing-lsp-mode/lsp-mode-no-syntax-highlighting.png" alt="Correctly shows the whole type signature, but there is no syntax highlighting"></p>
<p>There is no syntax highlighting!
Thankfully, this is not very difficult to fix;
the idea is to paste the string into a temporary buffer,
activate <code>haskell-mode</code>,
and grab the propertised string from that.
The only thing to take care of is that we dont want to run <code>lsp-mode</code> and friends <em>again</em> in the temporary buffer.</p>
<pre class="emacs-lisp"><code>(defun slot/syntax-highlight-string (str mode)
  &quot;Syntax highlight STR in MODE.&quot;
  (with-temp-buffer
    (insert str)
    ;; We definitely don't want to call certain modes, so delay the mode's
    ;; hooks until we have removed them.
    (delay-mode-hooks (funcall mode))
    (-map #'funcall
          (--remove (-contains? '(lsp-mode lsp-deferred) it)
                    (-mapcat #'symbol-value delayed-mode-hooks)))
    ;; Now we can propertise the string.
    (font-lock-ensure)
    (buffer-string)))</code></pre>
<p>Lsp-mode also provides a function for this, <code>lsp--render-string</code>,
but that one does not try to load all of the “safe” hooks for the major mode.
However, I have some <code>pretify-symbols-mode</code> configuration for Haskell
which I would very much like to take effect.</p>
<p>All in all, we have<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a></p>
<pre class="emacs-lisp"><code>;; Fixes https://github.com/emacs-lsp/lsp-haskell/issues/151
(cl-defmethod lsp-clients-extract-signature-on-hover
  (contents (_server-id (eql lsp-haskell)))
  &quot;Display the type signature of the function at point.&quot;
  (slot/syntax-highlight-string
   (slot/lsp-get-type-signature &quot;haskell&quot; (plist-get contents :value))
   'haskell-mode))</code></pre>
<p>This works quite nicely:</p>
<p><img class="pure-img" style="padding-left: 1em;" src="../images/fixing-lsp-mode/lsp-mode-fixed.png" alt="Properly syntax highlighted type signature"></p>
<h2 id="fixing-rust-hovers">Fixing Rust hovers</h2>
<p>One of the above code snippets already mentions <a href="https://github.com/emacs-lsp/lsp-mode/pull/1740">lsp-mode#1740</a>,
which is not about Haskell, but Rust,
a language that I also occasionally dabble in.
The basic issue here goes like this:
by default, <code>lsp-mode</code> shows the following hover information.</p>
<p><img class="pure-img" style="padding-left: 1em;" src="../images/fixing-lsp-mode/lsp-rust-default-hover.png" alt="By default, the hover shows the module that the identifier is imported from"></p>
<p>Much like the user who opened the mentioned pull-request,
I really don’t care about this.
Instead, I’d much rather see</p>
<p><img class="pure-img" style="padding-left: 1em;" src="../images/fixing-lsp-mode/lsp-rust-improved-hover.png" alt="Instead of the module, show the type singature"></p>
<p>which looks much more useful to me.</p>
<p>Luckily, this is exactly the same situation as in the Haskell case,
which we already fixed.
Writing</p>
<pre class="emacs-lisp"><code>(cl-defmethod lsp-clients-extract-signature-on-hover
  (contents (_server-id (eql rust-analyzer))) ; Only for Rust.
  &quot;Display the type signature of the function at point.&quot;
  (slot/syntax-highlight-string
   (slot/lsp-get-type-signature &quot;rust&quot; (plist-get contents :value))
   'rustic-mode))</code></pre>
<p>works out of the box.
Nice.</p>
<h2 id="bonus-adding-type-signatures">Bonus: adding type signatures</h2>
<p>Here’s another problem that we’ve solved <em>en passant</em>:
lsp-mode has code-lens support<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a>,
which enables one to add type signatures by clicking on the relevant button:</p>
<p><img class="pure-img" style="padding-left: 1em;" src="../images/fixing-lsp-mode/add-type-signature-mouse.gif" alt="Clicking on the relevant code lens adds a type signature"></p>
<p>However, this ostensibly requires me to use the mouse,<a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a>
and—more importantly—the above GIF also shows that local functions do not have such a code lens attached to them.
I quite like type signatures for local definitions,
so that’s a bit of a shame.</p>
<p>Fixing this is not terribly difficult either;
the hardest thing is having to look through lsp-mode’s codebase so one actually knows which functions to call.
When defining the overrides for <code>lsp-clients-extract-signature-on-hover</code>, the LSP response was free,
whereas now we want to create a request for the thing at point.</p>
<pre class="emacs-lisp"><code>(defun slot/lsp-get-type-signature-at-point (&amp;optional lang)
  &quot;Get LANGs type signature at point.
LANG is not given, get it from `lsp--buffer-language'.&quot;
  (interactive)
  (-some-&gt;&gt; (lsp--text-document-position-params)
    (lsp--make-request &quot;textDocument/hover&quot;)
    lsp--send-request
    lsp:hover-contents
    (funcall (-flip #'plist-get) :value)
    (slot/lsp-get-type-signature (or lang lsp--buffer-language))))</code></pre>
<p>Once we have the type signature at point,
all that’s left is to insert it into the buffer.<a href="#fn7" class="footnote-ref" id="fnref7" role="doc-noteref"><sup>7</sup></a></p>
<pre class="emacs-lisp"><code>(defun slot/lsp-haskell-type-signature ()
  &quot;Add a type signature for the thing at point.
This is very convenient, for example, when dealing with local
functions, since those—as opposed to top-level expressions—don't
have a code lens for \&quot;add type signature here\&quot; associated with
them.&quot;
  (interactive)
  (let* ((value (slot/lsp-get-type-signature-at-point &quot;haskell&quot;)))
    (slot/back-to-indentation)
    (insert value)
    (haskell-indentation-newline-and-indent)))</code></pre>
<p>Bind that to a key and you’re good to go!</p>
<p><img class="pure-img" style="padding-left: 1em;" src="../images/fixing-lsp-mode/add-type-signature-keybinding.gif" alt="Clicking on the relevant code lens adds a type signature"></p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>I have reported this as a bug <a href="https://github.com/emacs-lsp/lsp-haskell/issues/151">here</a>,
but that issue seems to have stalled,
so here we are.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>And also eglot, judging from a cursory test.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>Even more so because smart people have already written this for me;
see the docstring.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>{-} 󠀠</p>
<p>󠀠</p>
<p>This code assumes that lsp-mode uses
<a href="https://emacs-lsp.github.io/lsp-mode/page/performance/#use-plists-for-deserialization">plists instead of hash tables for deserialisation</a>.
If you don’t have the <code>lsp-use-plists</code> variable set<!--
  -->—and have recompiled lsp-mode afterwards—<!--
  -->then just replace <code>(plist-get contents :value)</code> with <code>(gethash "value" contents)</code>.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>Incidentally, this is the only reason that I use lsp-mode over eglot.
There is a
<a href="https://github.com/joaotavora/eglot/pull/71">stalled PR</a>
from five years ago,
but that never led anywhere.
<em>Someone</em> should pick this back up, I suppose.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6"><p>Lsp-mode also provides <code>lsp-avy-lens</code>,
so this is not really an actual problem.<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn7"><p>{-} For when hovering inexplicably breaks again,
this also enables for a quick definition of “show the type signature of the thing at point”:</p>
<pre class="emacs-lisp"><code>(defun slot/lsp-show-type-signature ()
  &quot;Show the type signature for the thing at
point.  This is essentially what
`lsp-clients-extract-signature-on-hover'
does, just as an extra function.&quot;
  (interactive)
  (message
   (slot/syntax-highlight-string
    (slot/lsp-get-type-signature-at-point)
    major-mode)))</code></pre>
<p>This can, again, be bound to a key for convenient access.<a href="#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Prettifying LaTeX Buffers</title>
    <link href="https://tony-zorman.com/posts/pretty-latex.html" />
    <id>https://tony-zorman.com/posts/pretty-latex.html</id>
    <published>2023-09-10T00:00:00Z</published>
    <updated>2023-09-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2023-09-10
      
      
        &thinsp;·&thinsp; last modified: 2023-10-15
      
      
        &thinsp;·&thinsp; <span title="1622 words">7 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>A friend recently confided in me that,
after years of using Emacs,
he was only now getting into using <code>prettify-symbols-mode</code> for editing LaTeX buffers!
After overwhelming him with more customisations related to this,
I realised that the topic<!--
-->—while seemingly easy on the surface—<!--
-->actually has a lot more depth to it than one would first imagine.</p>
<!--more-->
<h2 id="prettify-symbols-mode"><code>prettify-symbols-mode</code></h2>
<p>If you’ve never come into contact with <code>prettify-symbols-mode</code> before,
I encourage you to just issue an <code>M-x prettify-symbols-mode RET</code> in a <code>LaTeX-mode</code> buffer.
The default <code>prettify-symbols-alist</code> that e.g. AUCTeX provides already includes a lot of symbols.
For the uninitiated,
it would display a buffer like this<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></p>
<p><img class="pure-img" style="padding-left: 1em" src="../images/pretty-latex/no-pretty-symbols.png" alt="Definition of the Day convolution without prettify-symbols-mode enabled"></p>
<p>as the already much more readable</p>
<p><img class="pure-img" style="padding-left: 1em" src="../images/pretty-latex/default-pretty-symbols.png" alt="Definition of the Day convolution with AUCTeX's default prettify-symbols-alist"></p>
<p>Basically, <code>prettify-symbols-mode</code> is a home-cooked ligature system for Emacs,
because of course that exists.</p>
<p>However, the above already has some problems:
<code>\otimes</code> is quite small,
and thus barely discernible from <code>\bullet</code>,
and of course user-defined macros—like <code>\defeq</code> or <code>\cat</code>—don’t get picked up on at all.
We can refine the displayed symbols by adding our own definitions to
the (buffer-local) <code>prettify-symbols-alist</code> variable:</p>
<pre class="emacs-lisp"><code>(add-hook 'LaTeX-mode-hook
          (lambda ()
            (--map (push it prettify-symbols-alist)
                   '((&quot;\\blank&quot;      . ?—)
                     (&quot;\\otimes&quot;     . ?⨂) ; more visible
                     (&quot;\\defeq&quot;      . ?≔)
                     (&quot;\\mathcal{C}&quot; . ?𝓒) ; better looking
                     (&quot;\\cat{C}&quot;     . ?𝓒)))))</code></pre>
<p>Executing that hook makes the above situation even prettier.</p>
<p><img class="pure-img" style="padding-left: 1em" src="../images/pretty-latex/custom-pretty-symbols.png" alt="Definition of the Day convolution with a custom prettify-symbols-alist"></p>
<h3 id="going-further">Going further</h3>
<p>Naturally<!--
-->—this being Emacs—<!--
-->substituting one symbol for another is not all that <code>prettify-symbols-mode</code> has to offer.
Digging into the documentation of <code>prettify-symbols-alist</code>,
the second entry of the cons pair can be<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a></p>
<blockquote>
<p>[…] a character, a string or a vector or list of integers and rules.</p>
<p>If it is a character, it is an alternate character to display instead
of the text in the region.</p>
<p>If it is a string, the elements are alternate characters. In
this case, TAB element has a special meaning. If the first
character is TAB, the glyphs are displayed with left padding space
so that no pixel overlaps with the previous column. If the last
character is TAB, the glyphs are displayed with right padding
space so that no pixel overlaps with the following column.</p>
<p>If it is a vector or list, it is a sequence of alternate characters and
composition rules, where (2N)th elements are characters and (2N+1)th
elements are composition rules to specify how to compose (2N+2)th
elements with previously composed N glyphs.</p>
<p>A composition rule is a cons of global and new glyph reference point
symbols. See the documentation of reference-point-alist for more
details.</p>
</blockquote>
<p>We’ve only used a plain character as the replacement so far,
but in fact we can supply a whole list of them,
with some rules on how everything should be glued together.
The gluing of each pair of glyphs is done according to the following diagram,
taken from the documentation of <code>reference-point-alist</code>:</p>
<pre><code>  0----1----2 &lt;---- ascent    0:tl or top-left
  |         |                 1:tc or top-center
  |         |                 2:tr or top-right
  |         |                 3:Bl or base-left     9:cl or center-left
  9   10   11 &lt;---- center    4:Bc or base-center  10:cc or center-center
  |         |                 5:Br or base-right   11:cr or center-right
--3----4----5-- &lt;-- baseline  6:bl or bottom-left
  |         |                 7:bc or bottom-center
  6----7----8 &lt;---- descent   8:br or bottom-right</code></pre>
<p>A gluing instruction either comprises a cons pair of two locations<!--
-->—e.g., <code>(cr . cl)</code> to glue position 9 of the left glyph to position 11 of the right—<!--
-->or a list with some additional <code>x</code> and <code>y</code> offsets,
like <code>'(cr cl 0 10)</code>.</p>
<p>As an easy example,
consider <code>\defeq</code> from the above LaTeX snippet,
which is a better-looking version of the definitional equality symbol <code>:=</code>.<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>
Sadly, the appropriate Unicode symbol <code>≔</code> does not look particularly nice in my font<!--
-->—simply fusing <code>:</code> and <code>=</code> together works quite well, however!
Defining</p>
<pre class="emacs-lisp"><code>'(&quot;\\coloneqq&quot; . (?: (cr cl -20 -8) ?=))</code></pre>
<p>yields a decent approximation of what I would want the Unicode symbol to look like.
Here are some more examples of this in action:</p>
<pre class="emacs-lisp"><code>'((&quot;\\tak&quot;         . (?× (br . cl) ?A))
  (&quot;^{\\op}&quot;       . (?ᵒ (tr tl -25 0) ?ᵖ))
  (&quot;\\defeq&quot;       . (?: (cr cl -20 -8) ?=))
  (&quot;^{\\tensorop}&quot; . (?​ (tr bl 0 80) ?⊗ (tr . tl) ?ᵒ (tr tl -25 0) ?ᵖ))
  (&quot;^{-1}&quot;         . (?​ (tr bl 0 100) ?- (cr . bl) ?¹)))</code></pre>
<p><img class="pure-img" style="padding-left: 1em" src="../images/pretty-latex/stitching-together-symbols.png" alt="The above symbols"></p>
<h2 id="going-too-far-code-folding">Going too far: code folding</h2>
<p><a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a></p>
<p>The only thing that <code>prettify-symbols-mode</code> lacks is
being able to supply a function as a replacement,
in order to manipulate the matched symbol.</p>
<p>Enter code folding, which does not have this restriction.
Most often, it is used to hide parts of a definition or section,
in order to make the respective buffer more easily scannable for a human.
However, AUCTeX’s machinery is set up in such a way
that one can supply an arbitrary function that transforms the matched text somehow.
This is extremely convenient for things like mathematical alphabets,
as then one does not have to hard-code all replacements.<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a></p>
<p>The main variables to change here are
<code>TeX-fold-math-spec-list</code> and <code>TeX-fold-macro-spec-list</code>.
The parsing of <code>tex-fold.el</code> is fairly featureful;
the documentation for the latter variable tells the whole story.</p>
<blockquote>
<p>List of replacement specifiers and macros to fold.</p>
<p>The first element of each item can be a string, an integer or a
function symbol. The second element is a list of macros to fold
without the leading backslash.</p>
If the first element is a string, it will be used as a display
replacement for the whole macro. Numbers in braces, brackets,
parens or angle brackets will be replaced by the respective macro
argument. For example “{1}” will be replaced by the first
mandatory argument of the macro. One can also define
alternatives within the specifier which are used if an argument
is not found. Alternatives are separated by “||”. They are
most useful with optional arguments. As an example, the default
specifier for
<p>is “[1]:||*” which means that if there is
an optional argument, its value is shown followed by a colon. If
there is no optional argument, only an asterisk is used as the
display string.</p>
<p>If the first element is an integer, the macro will be replaced by
the respective macro argument.</p>
<p>If the first element is a function symbol, the function will be
called with all mandatory arguments of the macro and the result
of the function call will be used as a replacement for the macro.</p>
<p>Setting this variable does not take effect immediately. Use
Customize or reset the mode.</p>
</blockquote>
<p>Quite the functionality!
The simplest example is probably hiding the <code>\emph</code> macro,
which indicates emphasised text.<a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a></p>
<pre class="emacs-lisp"><code>(setopt TeX-fold-macro-spec-list '((&quot;{1}&quot; (&quot;emph&quot;))))</code></pre>
<p>This ends up looking like the following:</p>
<p><img class="pure-img" style="padding-left: 1em" src="../images/pretty-latex/hide-emphasis.png" alt="Hiding \emph"></p>
<p>As with <code>prettify-symbols-mode</code>,
things unprettify when the point is on them.</p>
<p><img class="pure-img" style="padding-left: 1em" src="../images/pretty-latex/show-emphasis.png" alt="Show \emph on hover"></p>
<p>Using these techniques,
we can define replacements for calligraphic letters
(or any other alphabet, like Fraktur or blackboard bold)
in a much more straightforward fashion.
First, we create a function to shift each codepoint in a string by a certain offset.<a href="#fn7" class="footnote-ref" id="fnref7" role="doc-noteref"><sup>7</sup></a></p>
<pre class="emacs-lisp"><code>(defun slot/shift-string (offset word)
  &quot;Shift the codepoint of each character in WORD by OFFSET.
Add an extra -6 shift if the letter is lowercase.&quot;
  (apply #'string
         (--map (pcase it
                  (?, ?,)   ; Allow things like \Hom(\mathbb{A,B})
                  (_ (+ (if (&gt;= it ?a) (- it 6) it) offset)))
                word)))</code></pre>
<p>Now, all that’s left to do is to define some folds for mathematical alphabets,
and give them the right starting points:<a href="#fn8" class="footnote-ref" id="fnref8" role="doc-noteref"><sup>8</sup></a></p>
<pre class="emacs-lisp"><code>(cl-flet ((start-at (pt)
            (- pt ?A)))
  (setq TeX-fold-math-spec-list
        `((,(lambda (c) (slot/shift-string (start-at ?𝔄) c)) (&quot;mathfrak&quot;))
          (,(lambda (c) (slot/shift-string (start-at ?𝓐) c)) (&quot;mathcal&quot;)))))

;; For good measure
(setq LaTeX-fold-math-spec-list TeX-fold-math-spec-list)</code></pre>
<p>Note that this again has the advantage of
making user-defined macros much easier to integrate into the whole system.
Above we have met the <code>\cat</code> macro<a href="#fn9" class="footnote-ref" id="fnref9" role="doc-noteref"><sup>9</sup></a>,
which should be displayed in much the same way as <code>\mathcal</code> is.
With code folding,
all this entails is to amend the respective line in <code>TeX-fold-math-spec-list</code>:</p>
<pre class="emacs-lisp"><code>(,(lambda (c) (slot/shift-string (start-at ?𝓐) c)) (&quot;mathcal&quot; &quot;cat&quot;))</code></pre>
<h2 id="conclusion">Conclusion</h2>
<p>Using everything in this article together—see
<a href="https://gitlab.com/slotThe/dotfiles/-/blob/7b2885a8343327717c91818d1970576238184307/emacs/.config/emacs/lisp/hopf-latex-pretty-symbols.el">here</a>—<!--
-->one can transform a boring old LaTeX buffer</p>
<p><img class="pure-img" style="padding-left: 1em" src="../images/pretty-latex/end-before.png" alt="Before prettifying: Sections, subsections, emphasis, math"></p>
<p>into something like this:</p>
<p><img class="pure-img" style="padding-left: 1em" src="../images/pretty-latex/end-after.png" alt="After prettifying: Sections, subsections, emphasis, math"></p>
<p>Nice.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>{-} If you don’t have AUCTeX installed for some reason<!--
  -->—why are you reading this?—<!--
  -->then trying out the following snippet might also get the message across:</p>
<pre class="emacs-lisp"><code>(add-hook
 'emacs-lisp-mode-hook
 (lambda ()
   (setq-local prettify-symbols-alist
               '((&quot;lambda&quot; . ?λ)))
   (prettify-symbols-mode)))</code></pre>
<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></li>
<li id="fn2"><p>{-} The citation itself is from the documentation of <code>compose-region</code>,
as that is what the <code>CHARACTER</code> argument of <code>prettify-symbols-alist</code> can be.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>For the interested reader:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="fu">\newcommand*</span>{<span class="ex">\defeq</span>}{<span class="co">%</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  <span class="fu">\mathrel</span>{<span class="fu">\vcenter</span>{<span class="co">%</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>      <span class="fu">\baselineskip</span>0.5ex <span class="fu">\lineskiplimit</span>0pt</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>      <span class="fu">\hbox</span>{<span class="fu">\scriptsize</span>.}<span class="fu">\hbox</span>{<span class="fu">\scriptsize</span>.}}}<span class="co">%</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>  =}</span></code></pre></div>
<p>I think that this looks better than <code>amsmath</code>’s <code>\coloneq</code>.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>{-} <strong>Disclaimer</strong>:
Pretty much all of the code in this section was written by
<a href="https://git.tecosaur.net/">tecosaur</a>,
from whose
<a href="https://tecosaur.github.io/emacs-config/config.html#editor-visuals">configuration</a><!--
  -->—which I encourage you to check out—<!--
  -->I first learned about the fact that one can use AUCTeX’s code folding in this way.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>This actually happens;
just a small excerpt of the default <code>tex--prettify-symbols-alist</code>:</p>
<pre class="emacs-lisp"><code>(&quot;\\mathcal{A}&quot; . ?𝒜)
(&quot;\\mathcal{B}&quot; . ?ℬ)
(&quot;\\mathcal{C}&quot; . ?𝒞)
(&quot;\\mathcal{D}&quot; . ?𝒟)
(&quot;\\mathcal{E}&quot; . ?ℰ)
(&quot;\\mathcal{F}&quot; . ?ℱ)
(&quot;\\mathcal{G}&quot; . ?𝒢)
(&quot;\\mathcal{H}&quot; . ?ℋ)
(&quot;\\mathcal{I}&quot; . ?ℐ)
(&quot;\\mathcal{J}&quot; . ?𝒥)
(&quot;\\mathcal{K}&quot; . ?𝒦)
(&quot;\\mathcal{L}&quot; . ?ℒ)
(&quot;\\mathcal{M}&quot; . ?ℳ)
(&quot;\\mathcal{N}&quot; . ?𝒩)
(&quot;\\mathcal{O}&quot; . ?𝒪)
(&quot;\\mathcal{P}&quot; . ?𝒫)
(&quot;\\mathcal{Q}&quot; . ?𝒬)
(&quot;\\mathcal{R}&quot; . ?ℛ)
(&quot;\\mathcal{S}&quot; . ?𝒮)
(&quot;\\mathcal{T}&quot; . ?𝒯)
(&quot;\\mathcal{U}&quot; . ?𝒰)
(&quot;\\mathcal{V}&quot; . ?𝒱)
(&quot;\\mathcal{W}&quot; . ?𝒲)
(&quot;\\mathcal{X}&quot; . ?𝒳)
(&quot;\\mathcal{Y}&quot; . ?𝒴)
(&quot;\\mathcal{Z}&quot; . ?𝒵)</code></pre>
<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></li>
<li id="fn6"><p>{-} The <code>TeX-fold-macro-spec-list</code> can be used for any macro outside of math-mode.
One application is to define
prettier versions of <code>\[sub]section</code> commands,
or even <code>\item</code>:</p>
<pre class="emacs-lisp"><code>(setopt
 TeX-fold-macro-spec-list
 '((&quot;{1}&quot; (&quot;emph&quot;))
   (&quot;[1]:||►&quot; (&quot;item&quot;))
   (&quot;§ {1}&quot; (&quot;section&quot; &quot;section*&quot;))
   (&quot;§§ {1}&quot; (&quot;subsection&quot; &quot;subsection*&quot;))
   (&quot;¶ {1}&quot; (&quot;paragraph&quot; &quot;paragraph*&quot;))))</code></pre>
<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></li>
<li id="fn7"><p>The
<a href="https://gitlab.com/slotThe/dotfiles/-/blob/7b2885a8343327717c91818d1970576238184307/emacs/.config/emacs/lisp/hopf-latex-pretty-symbols.el#L77-L117">real function</a>
is a tad more complicated,
as some codepoints are not where you expect them to be,
so some sort of lookup table has to be consulted as well.<a href="#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn8"><p>{-} 󠀠</p>
<p>󠀠</p>
<p>Ideally, one would make use of the new <code>setopt</code> macro here,
but the fact that <code>TeX-fold-math-spec-list</code> accepts functions in this way was only documented in
<a href="https://git.savannah.gnu.org/cgit/auctex.git/commit/?id=3c03ee089a2b74d0d5a0285f983a9eba82dc04a5">3c03ee08</a>,
which has not found its way to GNU ELPA yet.<a href="#fnref8" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn9"><p>Defined as</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="fu">\newcommand*</span>{<span class="ex">\cat</span>}[1]{<span class="co">%</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>  <span class="ss">\ensuremath{</span><span class="sc">\mathcal</span><span class="ss">{#1}}</span><span class="co">%</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<a href="#fnref9" class="footnote-back" role="doc-backlink">↩︎</a></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Change the Insides of an S-Expression in Emacs</title>
    <link href="https://tony-zorman.com/posts/change-inner.html" />
    <id>https://tony-zorman.com/posts/change-inner.html</id>
    <published>2023-08-26T00:00:00Z</published>
    <updated>2023-08-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2023-08-26
      
      
        &thinsp;·&thinsp; last modified: 2023-08-29
      
      
        &thinsp;·&thinsp; <span title="1770 words">8 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p><a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>I have to make a confession:
I have an <a href="https://github.com/emacs-evil/evil">evil</a> past—literally.
Having switched to vanilla Emacs keybindings a while ago,
one thing that I genuinely miss from <em>that time</em> are the <code>ci(</code> and <code>ca(</code> motions,
killing everything in or around the closest encompassing <code>()</code>-environment.
Luckily, the <a href="https://github.com/magnars/change-inner.el">change-inner</a> package provides exactly these commands for Emacs proper.
Unluckily, there are some issues regarding whitespace handling—let’s try to fix that.</p>
<!--more-->
<h2 id="how-it-all-started">How it all started</h2>
<p>After happily using change-inner for a few days,
one of the first problems I ran into
was the package’s flakiness with respect to whitespace.
This is elucidated in, for example,
<a href="https://github.com/magnars/change-inner.el/issues/5">this issue</a>:</p>
<blockquote>
<p>When using change-inner with rust-mode, the following code (with <code>|</code> as the cursor):</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> issue_list_url <span class="op">=</span> <span class="pp">Url::</span>parse(<span class="op">|</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;https://github.com/rust-lang/rust/issues?labels=E-easy&amp;state=open&quot;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>        )<span class="op">.</span>unwrap()<span class="op">;</span></span></code></pre></div>
<p>calling <code>M-x change-inner (</code> gives:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> issue_list_url <span class="op">=</span> <span class="pp">Url::</span>parse<span class="op">|.</span>unwrap()<span class="op">;</span></span></code></pre></div>
<p>whereas I would expect:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> issue_list_url <span class="op">=</span> <span class="pp">Url::</span>parse(<span class="op">|</span>)<span class="op">.</span>unwrap()<span class="op">;</span></span></code></pre></div>
<p>It looks like it’s related to newlines. There’s a similar issue in JS:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="co">// works here</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> foo <span class="op">=</span> <span class="fu">bar</span>(<span class="op">|</span><span class="st">&quot;baz&quot;</span>)<span class="op">;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="co">// error: Couldn't find expansion</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> foo <span class="op">=</span> <span class="fu">bar</span>(<span class="op">|</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;baz&quot;</span>)<span class="op">;</span></span></code></pre></div>
</blockquote>
<p>Change-inner as a package builds upon another excellent one from the same author:
<a href="https://github.com/magnars/expand-region.el">expand-region</a>,
an “Emacs extension to increase selected region by semantic units.”
Essentially, change-inner just expands the region
until it hits something that it’s happy with.
As such, the problem eluded to above is
with the respective expand-region functions that are called;
specifically, <code>er/mark-inside-pairs</code>,
which is defined like so:</p>
<pre class="emacs-lisp"><code>(defun er/mark-inside-pairs ()
  &quot;Mark inside pairs (as defined by the mode), not including the pairs.&quot;
  (interactive)
  (when (er--point-inside-pairs-p)
    (goto-char (nth 1 (syntax-ppss)))
    (set-mark (save-excursion
                (forward-char 1)
                (skip-chars-forward er--space-str) ; ← HERE
                (point)))
    (forward-list)
    (backward-char)
    (skip-chars-backward er--space-str)            ; ← HERE
    (exchange-point-and-mark)))</code></pre>
<p>Notice the invocations of <code>(skip-chars-forward er--space-str)</code>;
if we start with<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a></p>
<div class="sourceCode" id="cb6"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> foo <span class="op">=</span> <span class="fu">bar</span>(<span class="op">|</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;baz&quot;</span>)<span class="op">;</span></span></code></pre></div>
<p>and run <code>M-x er/mark-inside-pairs RET</code>,
then the marked area will actually just be <code>"baz"</code>,
instead of everything inside of the parentheses.</p>
<p>Mystery solved, right?
Maybe, but having to redefine that function for this package alone
feels wrong to me.
This got me looking into the internals of change-inner,<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>
in order to see where the problem <em>actually</em> lies.</p>
<h2 id="inside-change-inner">Inside change-inner</h2>
<p>Taking a closer look at <code>change-inner*</code><!--
-->—the internal function doing the actual work—<!--
-->reveals the following.
After some initial book keeping,
the area surrounding the point is expanded,
looking for the innermost expression matching the parameters:<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a></p>
<pre class="emacs-lisp"><code>(er--expand-region-1)
(er--expand-region-1)                      ; sic!
(while (and (not (= (point) (point-min)))
            (not (looking-at q-char)))
  (er--expand-region-1))</code></pre>
<p>Crucially,
the area is expanded twice <em>completely unconditionally</em>.
This stops only
once we’ve reached the bounds of either the buffer,
or the expression we are interested in.</p>
<p>The idea is to start in a situation like this</p>
<pre class="emacs-lisp"><code>'( &quot;one&quot; &quot;t|wo&quot; &quot;three&quot; &quot;four&quot; )</code></pre>
<p>and expand until we encompass the whole list<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a></p>
<pre class="emacs-lisp"><code>'( &quot;one&quot; &quot;t|wo&quot; &quot;three&quot; &quot;four&quot; )
;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
<p>noting that the previous step was</p>
<pre class="emacs-lisp"><code>'( &quot;one&quot; &quot;t|wo&quot; &quot;three&quot; &quot;four&quot; )
;  ^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
<p>which equates to the “inner” part of the list.
Then, one can call
<code>er/contract-region</code>,
which relies on an expansion history,
in order to only kill this inner part.</p>
<p>Why expand twice unconditionally?
Because in a situation like</p>
<pre class="emacs-lisp"><code>'|( &quot;one&quot; &quot;two&quot; &quot;three&quot; &quot;four&quot; )</code></pre>
<p>The expansion would immediately encompass the whole list,<a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a>
and its innards wouldn’t be available to expand-region’s contraction history.
The “trick” is to actually expand <em>further</em> than necessary;
looping through the <code>while</code> above until one inevitably hits <code>(point-min)</code> and stops expanding.
This triggers yet another bit of code that then recurses with prefilled arguments<a href="#fn7" class="footnote-ref" id="fnref7" role="doc-noteref"><sup>7</sup></a></p>
<pre class="emacs-lisp"><code>(if (not (looking-at q-char))
    (if search-forward-char
        (error &quot;Couldn't find any expansion starting with %S&quot; char)
      (goto-char starting-point)
      (setq mark-active nil)
      (change-inner* yank? char))
  ;; … else …
  )</code></pre>
<p>During that additional run of the function,
it searches for the correct delimiter via</p>
<pre class="emacs-lisp"><code>(search-forward char (point-at-eol))</code></pre>
<p>and<!--
-->—due to the way that <code>search-forward</code> works by default—<!--
-->we end up with the point directly after the opening delimiter</p>
<pre class="emacs-lisp"><code>'(| &quot;one&quot; &quot;two&quot; &quot;three&quot; &quot;four&quot; )</code></pre>
<p>This now expands correctly.<a href="#fn8" class="footnote-ref" id="fnref8" role="doc-noteref"><sup>8</sup></a></p>
<h3 id="puni-to-the-rescue">Puni to the rescue</h3>
<p>I certainly know what I think of this solution.
Instead of trying to fix this web of expansions and contractions,
how about we rewrite the function instead?</p>
<p>I’ve been happily using <a href="https://github.com/AmaiKinono/puni">puni</a> for a while,
and it seems pretty apt for the job.
Briefly, puni is a structured editing package,
like <a href="https://paredit.org/">paredit</a> or <a href="https://github.com/Fuco1/smartparens">smartparens</a>,
but it works for a broader range of languages than the former,
while comprising of a much smaller code-base<!--
-->—and even fewer language-specific bits—<!--
-->than the latter.<a href="#fn9" class="footnote-ref" id="fnref9" role="doc-noteref"><sup>9</sup></a>
While I still prefer paredit for lisps,
puni has become my de facto standard for language-agnostic parenthesis handling.</p>
<p>Luckily for us,
puni already comes equipped with a <code>puni-expand-region</code> function,
so one can swiftly rewrite the core of <code>change-inner*</code> using that instead of <code>er--expand-region-1</code>:</p>
<pre class="emacs-lisp"><code>;; Try to find a region.
(puni-expand-region)
(when (&gt; (point) (mark)) ; By default, puni jumps to the end of the sexp
  (exchange-point-and-mark))
(while (and (not (= (point) (point-min)))
            (not (looking-at q-char)))
  (puni-expand-region))</code></pre>
<p>Notice that the double expansion vanished!
Instead, when a region was found,
we can make use of <code>puni-bounds-of-list-around-point</code> to get the internals explicitly,
and then calculate how big the delimiters were:</p>
<pre class="emacs-lisp"><code>(let* ((rb (region-beginning))
       (re (region-end))
       (insides (progn (goto-char (1+ rb))
                       (puni-bounds-of-list-around-point)))
       (olen (- (car insides) rb))  ; Length of opening delimiter
       (clen (- re (cdr insides)))) ; Length of closing delimiter
  (kill-region (+ rb olen) (- re clen)))</code></pre>
<p>Trying this out with our trusty example of</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> foo <span class="op">=</span> <span class="fu">bar</span>(<span class="op">|</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;baz&quot;</span>)<span class="op">;</span></span></code></pre></div>
<p>we… are greeted with a type error.</p>
<pre><code>Debugger entered--Lisp error: (wrong-type-argument number-or-marker-p nil)
  puni--smaller-interval((103 . 108) (nil . 108))</code></pre>
<p>Yikes.</p>
<h3 id="puni-to-the-rescue-1">Puni to the rescue?</h3>
<p>The <code>puni--smaller-interval</code> function does some comparisons with <code>&lt;=</code>,
and having <code>nil</code> in there will obviously result in a bad time for everyone.
As it turns out, puni <em>also</em> has some problems handling whitespace,
in that it <em>doesn’t</em> skip it.
At some point in <code>puni-expand-region</code>,
we call <code>puni-bounds-of-sexp-at-point</code>,
which tries to find out whether we are at the start or end of an S-expression
by going forwards and backwards a few times:</p>
<pre class="emacs-lisp"><code>(save-excursion
  (setq end-forward (puni-strict-forward-sexp)
        beg-forward (puni-strict-backward-sexp)))
(save-excursion
  (setq beg-backward (puni-strict-backward-sexp)
        end-backward (puni-strict-forward-sexp)))</code></pre>
<p>Now, when we are in a situation like <code>(|   "furble")</code>,
an invocation of <code>puni-strict-forward-sexp</code> will leave us at <code>(   "furble"|)</code>,
but executing <code>puni-strict-backward-sexp</code> after that will result in <code>(   |"furble")</code>—not where we started.
As such, puni will (incorrectly) conclude that we were not at the start of the expression.</p>
<p>One could try to cram some whitespace handling into this,
but who says we don’t run into other issues then?<a href="#fn10" class="footnote-ref" id="fnref10" role="doc-noteref"><sup>10</sup></a>
In fact, <code>puni-expand-region</code> is written in such a way
that it tries out different expansion strategies until one succeeds—why not just quiet the error?</p>
<pre class="emacs-lisp"><code>(advice-add 'puni-bounds-of-sexp-at-point :around
  (lambda (fun)
    (ignore-errors (fun))))</code></pre>
<p>This… turns out to work!</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="co">// before</span></span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> foo <span class="op">=</span> <span class="fu">bar</span>(<span class="op">|</span></span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;baz&quot;</span>)<span class="op">;</span></span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true" tabindex="-1"></a><span class="co">// after</span></span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> foo <span class="op">=</span> <span class="fu">bar</span>(<span class="op">|</span>)<span class="op">;</span></span></code></pre></div>
<p>Phew.</p>
<h2 id="the-code">The code</h2>
<p>For anyone interested, here is the full code.
It also includes a <code>mode</code> setting, which can be set to <code>outer</code>,
in order to kill around the parentheses; e.g.,</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="co">// before</span></span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> issue_list_url <span class="op">=</span> <span class="pp">Url::</span>parse(<span class="op">|</span><span class="st">&quot;https://my-url.com&quot;</span>)<span class="op">.</span>unwrap()<span class="op">;</span></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true" tabindex="-1"></a><span class="co">// after</span></span>
<span id="cb25-5"><a href="#cb25-5" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> issue_list_url <span class="op">=</span> <span class="pp">Url::</span>parse<span class="op">|.</span>unwrap()<span class="op">;</span></span></code></pre></div>
<p>For obvious reasons,
I will not submit this upstream to change-inner,
but it will instead live in my personal configuration.<a href="#fn11" class="footnote-ref" id="fnref11" role="doc-noteref"><sup>11</sup></a></p>
<pre class="emacs-lisp"><code>(cl-defun slot/change-sexp (&amp;key search-for mode)
  &quot;Delete (the innards of) a sexp.
Takes a char, like ( or \&quot;, and kills the first ancestor semantic
unit starting with that char. The unit must be recognisable to
`puni'.

SEARCH-FOR is the opening delimiter to search for: if this is
nil, prompt for one. MODE is whether to kill the whole
region (`outer'), or just the innards of it (any other value,
including nil).&quot;
  (cl-labels
      ((expand (char &amp;optional forward)
         &quot;Expand until we encompass the whole expression.&quot;
         (let* ((char (or char
                          (char-to-string
                           (read-char (format &quot;Kill %s:&quot;
                                              (symbol-name
                                               (or mode 'inner)))))))
                (q-char (regexp-quote char))
                (starting-point (point)))
           ;; Try to find a region.
           (puni-expand-region)
           (when (&gt; (point) (mark))
             (exchange-point-and-mark))
           (while (and (not (= (point) (point-min)))
                       (not (looking-at q-char)))
             (puni-expand-region))
           ;; If we haven't found one yet, initiate a forward search and
           ;; try again—once.
           (when (not (looking-at q-char))
             (goto-char starting-point)
             (deactivate-mark)
             (if forward
                 (error &quot;Couldn't find any expansion starting with %S&quot; char)
               (search-forward char (pos-eol 2))
               (expand char 'forward))))))
    (expand search-for)
    ;; Now that we have a region, decide what to do with it.
    (let ((rb (region-beginning))
          (re (region-end)))
      (if (eq mode 'outer)
          (kill-region rb re)           ; Kill everything
        ;; If we want to delete inside the expression, fall back to `puni'.
        ;; This circumvents having to call `er--expand-region-1' and then
        ;; `er/contract-region' in some vaguely sensical order, and hoping
        ;; to recover the inner expansion from that.
        ;; Addresses ghub:magnars/change-inner.el#5
        (let* ((insides (progn (goto-char (1+ rb))
                               (puni-bounds-of-list-around-point)))
               (olen (- (car insides) rb)) ; Length of opening delimiter
               (clen (- re (cdr insides)))) ; Length of closing delimiter
          (kill-region (+ rb olen) (- re clen)))))))</code></pre>
<p>One can bind killing the innards to <code>M-i</code>,
and killing everything to <code>M-o</code>,
as change-inner suggests.
Alternatively, and this is what I do,<a href="#fn12" class="footnote-ref" id="fnref12" role="doc-noteref"><sup>12</sup></a>
a second small helper function is swiftly written,
such that only one keybinding is needed:</p>
<pre class="emacs-lisp"><code>(defun slot/change-around (&amp;optional arg)
  (interactive &quot;P&quot;)
  (if arg
      (slot/change-sexp :mode 'outer)
    (slot/change-sexp)))

(bind-key &quot;M-i&quot; #'slot/change-around)</code></pre>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>{-} The term “S-expression” is not super accurate,
and should be substituted with something like “semantic unit” instead,
as I’m also talking about things that aren’t necessarily S-expressions as Emacs knows them.
I mainly chose the term for brevity, and because it’s hopefully more familiar—and thus less scary—to the reader.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>{-} As is common,
I will use <code>|</code>
to indicate the position of the point.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>I wish I hadn’t.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>{-} 󠀠</p>
<p>󠀠</p>
<p><code>q-char</code> is the char that the user input,
but quoted as a regular expression via <code>regexp-quote</code>.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>{-} 󠀠</p>
<p>As you’ve probably already guessed,
the <code>^</code>’s are supposed to signal the marked region.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6"><p>As in</p>
<pre class="emacs-lisp"><code>'|( &quot;one&quot; &quot;two&quot; &quot;three&quot; &quot;four&quot; )
; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></li>
<li id="fn7"><p>{-} 󠀠</p>
<p>󠀠</p>
<p><code>search-forward-char</code> is the second argument of <code>change-inner*</code>;
if the function was called with that,
we have already recursed once, so stop.
<code>char</code> is the character that the user actually input.
<code>starting-point</code> is the position of the point before anything happened.<a href="#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn8"><p>Actually,
the searching also has a different, actual, use.
When in a situation like</p>
<pre class="emacs-lisp"><code>'(1| 2 &quot;this is a string&quot;)</code></pre>
<p>One might want to change the string—indeed,
<code>M-x change-inner "</code> correctly jumps to the string:</p>
<pre class="emacs-lisp"><code>'(1 2 &quot;|&quot;)</code></pre>
<p>This is one of the great features of Vim’s <code>ci"</code>,
and certainly something to preserve.<a href="#fnref8" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn9"><p>Puni achieves this by relying on Emacs’s built-in functions.<a href="#fnref9" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn10"><p>The real reason,
of course,
is that I just wanted my code to work <em>right now</em>,
instead of having to wait for upstream to fix something.
At some point this should definitely be fixed in puni, though.<a href="#fnref10" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn11"><p>{-} 󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>Using a recursive local function also incidentally fixes <a href="https://github.com/magnars/change-inner.el/issues/9">#9</a>.
Nice.<a href="#fnref11" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn12"><p><code>M-o</code> will never be something other than <code>other-window</code>.<a href="#fnref12" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Notmuch: Warn on Empty Subjects</title>
    <link href="https://tony-zorman.com/posts/notmuch-subject.html" />
    <id>https://tony-zorman.com/posts/notmuch-subject.html</id>
    <published>2023-07-30T00:00:00Z</published>
    <updated>2023-07-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2023-07-30
      
      
      
        &thinsp;·&thinsp; <span title="523 words">3 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->


<div>
  <p>Emacs’s <code>notmuch</code> package has this fantastic concept of an <em>attachment check</em>:
adding <code>notmuch-mua-attachment-check</code> to <code>notmuch-mua-send-hook</code> will,
before sending the message,
check whether the regular expression in <code>notmuch-mua-attachment-regexp</code> matches.
If yes—and no attachment has been added—it will alert the user,
asking whether one really wants to send that email;
otherwise, everything goes through smoothly.
Due to some personal idiosyncrasies,
I needed a variant of this to check for empty subjects,
lest I become one of those people who sends emails like that.
As always, Emacs delivers.</p>
<!--more-->
<p>The code for <code>notmuch-mua-attachment-check</code> is relatively straightforward,
and worth a look if we want to imitate this kind of behaviour for other headers.
A simplified<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> version goes as follows:</p>
<pre class="emacs-lisp"><code>(defun notmuch-mua-attachment-check ()
  &quot;Signal an error an attachement is expected but missing.

Signal an error if the message text indicates that an attachment
is expected but no MML referencing an attachment is found.

Typically this is added to `notmuch-mua-send-hook'.&quot;
  (when (and
         ;; When the message mentions attachment...
         (save-excursion
           (message-goto-body)
           ;; Limit search from reaching other possible parts of the message
           (let ((search-limit (search-forward &quot;\n&lt;#&quot; nil t)))
             (message-goto-body)
             (re-search-forward notmuch-mua-attachment-regexp search-limit t)))
         ;; ...but doesn't have a part with a filename...
         (save-excursion
           (message-goto-body)
           (not (re-search-forward &quot;^&lt;#part [^&gt;]*filename=&quot; nil t)))
         ;; ...and that's not okay...
         (not
          (y-or-n-p &quot;Attachment mentioned, but no attachment - is that okay?&quot;)))
    ;; ...signal an error.
    (error &quot;Missing attachment&quot;)))</code></pre>
<p>There is nothing fancy happening here,
so it’s not terribly difficult to adapt it to other settings.
As I said in the beginning,
I need it to check for subjects,
due to the bad habit of only adding a subject once the email is already written—only sometimes I forget.
Instead of trying to change my habits—which is hard!—it sounds much easier to modify Emacs to suit my needs.</p>
<p>The strategy is exactly the same as for <code>notmuch-mua-attachment-check</code>;
check for a certain regular expression, whitespace, and say something if it matches the current subject:</p>
<pre class="emacs-lisp"><code>(defun notmuch-mua-subject-check ()
  (or (save-excursion
        (message-goto-subject)
        (message-beginning-of-header t)
        (not (looking-at-p &quot;[[:blank:]]*$&quot;)))
      (y-or-n-p &quot;No subject given – still send?&quot;)
      (error &quot;No subject&quot;)))</code></pre>
<p>All one has to do is to execute this before sending a mail:</p>
<pre class="emacs-lisp"><code>(add-hook 'notmuch-mua-send-hook #'notmuch-mua-attachment-check)</code></pre>
<p>and we’re good to go.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>Looking for an attachment is complicated insofar as there are some ways the regular expression might match,
which however <em>don’t</em> indicate that anything needs to be done.
The real code looks at this by observing text properties of the matches.
However, this is not important for what follows, so I simply omitted it.</p>
<p>If you’re interested:</p>
<pre class="emacs-lisp"><code>;; When the message mentions attachment...
(save-excursion
  (message-goto-body)
  ;; Limit search from reaching other possible
  ;; parts of the message
  (let ((search-limit
         (search-forward &quot;\n&lt;#&quot; nil t)))
    (message-goto-body)
    (cl-loop
     while (re-search-forward
             notmuch-mua-attachment-regexp
             search-limit t)
     ;; For every instance of the &quot;attachment&quot;
     ;; string found, examine the text
     ;; properties.  If the text has either a
     ;; `face' or `syntax-table' property then
     ;; it is quoted text and should *not*
     ;; cause the user to be asked about a
     ;; missing attachment.
     if (let ((props (text-properties-at
                      (match-beginning 0))))
          (not (or (memq 'syntax-table props)
                   (memq 'face props))))
     return t
     finally return nil)))</code></pre>
<p>Alternatively, check the source code of <code>notmuch-mua-attachment-check</code> directly.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Use-package now has a :vc keyword</title>
    <link href="https://tony-zorman.com/posts/use-package-vc.html" />
    <id>https://tony-zorman.com/posts/use-package-vc.html</id>
    <published>2023-05-18T00:00:00Z</published>
    <updated>2023-05-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2023-05-18
      
      
      
        &thinsp;·&thinsp; <span title="232 words">1 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->


<div>
  <p>Just a quick heads-up: <code>use-package</code>,
which was merged into Emacs in <a href="https://git.savannah.gnu.org/cgit/emacs.git/commit/?id=4a1e9d61b57c36255752437a2668e037e79fe870">November last year</a>,
now has a <code>:vc</code> keyword!</p>
<!--more-->
<p>The change was <a href="https://git.savannah.gnu.org/cgit/emacs.git/commit/?id=2ce279680bf9c1964e98e2aa48a03d6675c386fe">merged</a> two days ago,
and supersedes—indeed, is a rewrite of—<a href="https://github.com/slotThe/vc-use-package">vc-use-package</a>,
which is now only needed for people who prefer to stick to released versions of Emacs.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>
In short,
the keyword enables one to install packages directly from their remote source:</p>
<pre class="emacs-lisp"><code>(use-package modus-themes
  :vc (:url &quot;https://gitlab.com/protesilaos/modus-themes&quot;
       :branch &quot;main&quot;))</code></pre>
<p>This is not dependent on git,
but should work for all version control systems that Emacs knows about;
see <code>vc-handled-backends</code>.</p>
<p>By default,
<code>:vc</code> installs the latest <em>release</em> of a package—the
last commit that bumped the <code>"Version"</code> tag inside of the main elisp file
(yes, really).
Installing the most recent commit instead,
which should feel more familiar to users coming from package archives like MELPA,
can be done by giving <code>:vc</code> a <code>:rev :newest</code> argument.
Additionally,
<code>:rev</code> can also be used to pin specific revisions of a package.
Other niceties, like specifying alternative lisp directories, are also included:</p>
<pre class="emacs-lisp"><code>(use-package vertico
  :vc (:url &quot;https://github.com/minad/vertico&quot;
       :rev :newest
       :lisp-dir &quot;extensions/&quot;))</code></pre>
<p>For more information on the specific syntax,
refer to <code>C-h v package-vc-selected-packages RET</code>,
and the relevant info node <code>(emacs)Fetching Package Sources</code>.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>There is no reason for that, of course.
Building Emacs is just a</p>
<pre class="shell"><code>BUILD_OPTS=$(emacs \
  --batch \
  --eval &quot;(prin1 system-configuration-options)&quot;)

./autogen.sh
echo &quot;$BUILD_OPTS&quot; | sed 's/^&quot;\(.*\)&quot;$/\1/' \
                   | xargs ./configure
make bootstrap
sudo make install</code></pre>
<p>away!<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Announcing: latex-change-env Version 0.3</title>
    <link href="https://tony-zorman.com/posts/latex-change-env-0.3.html" />
    <id>https://tony-zorman.com/posts/latex-change-env-0.3.html</id>
    <published>2023-02-19T00:00:00Z</published>
    <updated>2023-02-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2023-02-19
      
      
        &thinsp;·&thinsp; last modified: 2023-06-03
      
      
        &thinsp;·&thinsp; <span title="965 words">4 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>I’ve just released version 0.3 of <code>latex-change-env</code>, featuring some
major improvements with regard to inline maths and macro handling; this
seems as good a time as any to talk about the package in full. I
briefly mentioned it in the post about my <a href="https://tony-zorman.com/posts/my-phd-workflow.html#digital-notes">research workflow</a>, but I
figure now that the library has reached a state where I’m not ashamed of
it anymore—at least, not at the time of writing this—it may warrant its
own post.</p>
<!--more-->
<h2 id="functionality">Functionality</h2>
<p>Briefly, <code>latex-change-env</code><a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> can be seen as an extension of AUCTeX’s
built-in facilities to manipulate the current environment. Taking
functions like <code>LaTeX-environment</code> as a base, it adds extra
functionality like deleting environments, changing to and from display
maths, “remembering” and editing labels, as well as macro<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> and inline
maths support on top of them. There are two main “entry points”:
<code>latex-change-env</code> and <code>latex-change-env-cycle</code>.</p>
<p>The basic functionality may be used with a <code>use-package</code> configuration
along the lines of</p>
<pre class="emacs-lisp"><code>(use-package latex-change-env
  :after latex
  :commands latex-change-env
  :bind (:map LaTeX-mode-map (&quot;C-c r&quot; . latex-change-env))
  :custom
  (latex-change-env-math-display '(&quot;\\[&quot; . &quot;\\]&quot;))
  (latex-change-env-math-inline  '(&quot;$&quot;   . &quot;$&quot;)))</code></pre>
<p>Pressing the keybinding for <code>latex-change-env</code> will pop up a selection
in the minibuffer; by default, one can delete the current
environment<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a> with <code>k</code>, modify it into something else with <code>m</code>, or
switch to display maths with <code>d</code>. This is all controlled by the
<code>latex-change-env-options</code> variable, allowing for user-defined functions
to be inserted, should that be desired.</p>
<p>For example, the following video showcases switching to display maths,
changing the environment into an <code>equation</code>, and deleting it completely.</p>
<p>
<video width="100%" controls>
<source src="../images/latex-change-env/basic-functionality.webm" type="video/webm">
Basic functionality of <code>latex-change-env</code>: changing and deleting labels.
</video>
</p>
<h3 id="cycling-through-environments">Cycling through environments</h3>
<p>The <code>latex-change-env-cycle</code> function may be used to create a list of
environments to cycle through. For convenience, it depends on Omar
Antolín Camarena’s <a href="https://github.com/oantolin/math-delimiters">math-delimiters</a> package, so as to facilitate a
comfortable workflow with maths environments out of the box.<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a> For
example, one could define a simple maths-based toggle</p>
<pre class="emacs-lisp"><code>(defun my/insert-toggle-math ()
  (interactive)
  (latex-change-env-cycle
   '(display-math equation* align* equation align)))</code></pre>
<p>and then bind that to <code>$</code> in <code>latex-mode</code>. This works because
<code>math-delimiters-insert</code> is called when one is not in any environment.
Quoting from the documentation of <code>latex-change-env-cycle</code> (slightly
edited):</p>
<blockquote>
<p>Cycle through the given list of environments. The special symbol
<code>display-math</code> denotes a display maths environment.</p>
<p>If one is right at the end of a display or inline maths environment,
call <code>math-delimiters-insert</code> instead of cycling through environments.
The same is done when not inside any environment, which, for our
definition of environment, also includes inline maths.</p>
</blockquote>
<p>The following video illustrates how <code>my/insert-toggle-math</code> might be
used.</p>
<p>
<video width="100%" controls>
<source src="../images/latex-change-env/cycling-maths.webm" type="video/webm">
Cycling between inline and display maths, as well as several maths environments.
</video>
</p>
<p>Of course, cycling also works for non-maths environments, as well as
macros; below, I bound the following to a key:</p>
<pre class="emacs-lisp"><code>(defun my/cycle-macros ()
  (interactive)
  (latex-change-env-cycle
   '(textbf emph textsc textit texttt)))</code></pre>
<p>
<video width="100%" controls>
<source src="../images/latex-change-env/cycling-macros.webm" type="video/webm">
Cycling macros
</video>
</p>
<p>An effort was made to make macro handling feel like a first class
citizen; for example, when cycling through possible modifications,
instead of <code>LaTeX-environment-list-filtered</code> (as would be used for
environments), the macro-specific <code>TeX--symbol-completion-table</code> is used
to generate a list of possible replacements.</p>
<h3 id="labels">Labels</h3>
<p>When changing or deleting environments, <code>latex-change-env</code> tries to
smartly handle associated labels. In the former case, labels have a
unique prefix associated to what environment they are defined in; for
example, <code>theorem</code> environments might start their labels with <code>thm:</code>,
while a <code>lemma</code> will have a <code>lem:</code> prefix.<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a> Further, when deleting an
environment, or switching to one that does not have an associated label
prefix, the label is (i) deleted, and (ii) stored for the session, such
that it can be restored when switching back to the original environment.</p>
<p>While this is all well and good, renaming and deleting labels seems of
little use when the changes aren’t reflected in the rest of the project.
As such, there is an optional <code>latex-change-env-edit-labels-in-project</code>
variable. When it is customised to <code>t</code>, a label change/deletion
triggers a project-wide <code>query-replace-regexp</code>, such that the user can
decide whether referencing labels should change as well. This utilises
Emacs’s own <code>project.el</code>, so one should make sure that the LaTeX project
is version controlled—in which case the relevant ignore file is also
respected—or otherwise recognisable by the library.<a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a></p>
<p>
<video width="100%" controls>
<source src="../images/latex-change-env/label-handling.webm" type="video/webm">
Label handling
</video>
</p>
<h2 id="conclusion">Conclusion</h2>
<p>That’s about all of the functionality that the package currently has.
It has certainly served me quite well so far—my hope is that it will be
useful to at least one other person.</p>
<p>On that note: contributions welcome! For example, something that should
not be too hard to implement is the ability to store labels not just for
the session, but permanently, by serialising the internal hash-map to a
file. I don’t know how useful this would be but, given a certain
workflow, it could certainly be worthwhile! Another path of inquiry
might be to add better macro handling. As I said, support is currently
limited to macros that take exactly one (mandatory) argument. However,
the response one gets from <code>LaTeX-what-macro</code> is quite general, so I
reckon it wouldn’t be too hard to cook up a more general implementation.</p>
<p>Again, if you want to give the package a spin then you can find it on
<a href="https://gitlab.com/slotThe/change-env">GitLab</a>, <a href="https://github.com/slotThe/change-env">GitHub</a>,
and <a href="https://melpa.org/#/latex-change-env">MELPA</a>!</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>Available on <a href="https://gitlab.com/slotThe/change-env">GitLab</a> and
<a href="https://github.com/slotThe/change-env">GitHub</a>, as well as
<a href="https://melpa.org/#/latex-change-env">MELPA</a>.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>At least, macros taking exactly only argument, which is what
support is currently restricted to; contributions welcome!<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>In the context of this package, by “environment” I will often mean
a proper environment, inline or display maths, or a (simple)
macro.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>As such, be sure that you configure <code>math-delim​it​ers-{inline,display}</code>
accordingly. For example, it may be useful to set</p>
<pre class="emacs-lisp"><code>  (setq math-delimiters-display
        latex-change-env-math-display)</code></pre>
<p>and so on.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>This behaviour may be changed by customising the
<code>latex-change-env-labels</code> variable.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6"><p>{-} If you look closely at the video, you can see that, while the
label changes, the “Lemma” before the reference does not. This
would require more sophisticated regular expressions, but—reading
<code>latex​-​change-env-labels</code> and making some assumptions—it certainly
seems possible to do.<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Immediately Refile Notes with X.P.OrgMode</title>
    <link href="https://tony-zorman.com/posts/orgmode-refiling.html" />
    <id>https://tony-zorman.com/posts/orgmode-refiling.html</id>
    <published>2023-01-14T00:00:00Z</published>
    <updated>2023-01-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2023-01-14
      
      
        &thinsp;·&thinsp; last modified: 2023-02-13
      
      
        &thinsp;·&thinsp; <span title="668 words">3 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>, <a title="All pages tagged 'haskell'." href="/tags/haskell.html" rel="tag">haskell</a>, <a title="All pages tagged 'xmonad'." href="/tags/xmonad.html" rel="tag">xmonad</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>In a <a href="/posts/orgmode-prompt/2022-08-27-xmonad-and-org-mode.html">previous post</a> I talked about
<a href="https://xmonad.github.io/xmonad-docs/xmonad-contrib/XMonad-Prompt-OrgMode.html">XMonad.Prompt.OrgMode</a>, an XMonad module to rapidly capture thoughts
and ideas into an Org file. The functionality that the module provides
has proven to be extremely useful to me, and really I couldn’t be
happier with it. However, a user recently contacted me by email and
told me that they’re missing but one feature: the ability to immediately
refile notes.</p>
<!--more-->
<h2 id="motivation">Motivation</h2>
<p>If you don’t know, <a href="https://orgmode.org/manual/Refile-and-Copy.html">refiling</a> is the act of moving an entry<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> <em>below</em>
another heading; i.e., such that it becomes a subheading there. This
can be useful for structuring TODOs into separate categories: one might
have projects called “work”, “life”, “XMonad”, and so on, where all
related tasks live. Quite convenient!</p>
<p>So far, X.P.OrgMode just dumped the created note at the end of the
specified file, leaving you to pick up the pieces. This aligns with my
personal workflow—while I extensively use refiling, I only do so at the
end of the day after reviewing all tasks that have accumulated.
However, it is conceivable that someone might want to refile certain
tasks straight away when it’s pretty clear that (i) they’ll be kept, and
(ii) they can be unambiguously assigned to a certain heading (e.g., an
already scheduled work meeting with X).</p>
<h2 id="showcase">Showcase</h2>
<p>Long story short, this is now built into X.P.OrgMode. There are two new
functions:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">    orgPromptRefile   ::</span> <span class="dt">XPConfig</span> <span class="ot">-&gt;</span>           <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">FilePath</span> <span class="ot">-&gt;</span> <span class="dt">X</span> ()</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="ot">    orgPromptRefileTo ::</span> <span class="dt">XPConfig</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">FilePath</span> <span class="ot">-&gt;</span> <span class="dt">X</span> ()</span></code></pre></div>
<p>The former takes the same arguments as <a href="https://hackage.haskell.org/package/xmonad-contrib-0.17.1/docs/XMonad-Prompt-OrgMode.html#v:orgPrompt">orgPrompt</a> (which see), and is
for popping up another prompt that asks for a heading. The latter
refiles everything under the specified (as the second argument) heading.</p>
<p>The way <code>orgPromptRefile</code> works is that, after querying for a TODO, it
<em>always</em> inserts the note into the file and then <em>possibly</em> refiles it
to another heading. This way, you don’t need to worry about losing
notes when you abort the refiling prompt or enter a non-existent
heading.</p>
<p><img class="pure-img" src="../images/orgmode-refiling/refiling.gif" alt="Entering a TODO, and refiling it to an appropriate place"></p>
<p>Note: Refiling is (near) instant; the delay you are seeing above is due
to <code>auto-revert-mode</code>.</p>
<h3 id="some-gory-details">Some gory details</h3>
<p>All of the refiling is actually directly done by Emacs itself! More
precisely, the EDSL that <a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Util-Run.html">XMonad.Util.Run</a> defines—which I’ve also
<a href="/posts/2022-05-25-calling-emacs-from-xmonad.html">written about</a>—shells out to Emacs. This
might intuitively <em>feel</em> horrible, but that’s just another reason to
share it:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ot">refile ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">FilePath</span> <span class="ot">-&gt;</span> <span class="dt">X</span> ()</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>refile (asString <span class="ot">-&gt;</span> parent) (asString <span class="ot">-&gt;</span> fp) <span class="ot">=</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  proc <span class="op">$</span> inEmacs</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>     <span class="op">&gt;-&gt;</span> asBatch</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>     <span class="op">&gt;-&gt;</span> eval (progn</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>                [ <span class="st">&quot;find-file&quot;</span> <span class="op">&lt;&gt;</span> fp</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>                , <span class="st">&quot;end-of-buffer&quot;</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>                , <span class="st">&quot;org-refile nil nil&quot;</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>                    <span class="op">&lt;&gt;</span> list [ parent, fp, <span class="st">&quot;nil&quot;</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>                            , saveExcursion</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>                               [<span class="st">&quot;org-find-exact-headline-in-buffer&quot;</span> <span class="op">&lt;&gt;</span> parent]</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>                            ]</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>                , <span class="st">&quot;save-buffer&quot;</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>                ])</span></code></pre></div>
<p>This—as you probably guessed already—just executes the following elisp
snippet in Emacs’s batch mode:</p>
<pre class="emacs-lisp"><code>(progn
  (find-file «fp»)
  (end-of-buffer)
  (org-refile nil nil
              (list «parent» «fp» nil
                    (save-excursion
                      (org-find-exact-headline-in-buffer «parent»))))
  (save-buffer))</code></pre>
<p>I know this seems insane, but letting Emacs do this work is actually
much less brittle than the alternative. The Org maintainers certainly
know best what refiling <em>means</em>, and thus also what it entails—if all of
this logic is already written, why not take advantage of it? Plus, I
now don’t have to keep track of subtle changes in newer versions of Org.</p>
<h2 id="closing-thoughts">Closing thoughts</h2>
<p>Writing this was actually a lot of fun, and a great opportunity to play
with the EDSL that X.U.Run exposes. I reckon there are a few places in
my own XMonad configuration in which I could use these kinds of “Emacs
scripts” to great effect!</p>
<p>One other idea I’ve had is to integrate this into the language that
plain old <code>orgPrompt</code> accepts. It could be prefixed by something like
“<code>ref:</code>”, followed by a unique substring with which to identity a
heading. This would have the disadvantage that—without the second
prompt—one would not get any suggestions for headings. However, if you
want to refile something you probably know where you want to put it;
plus, it would not involve a possibly distracting second prompt.
Actually, this sounds like a good first pull request: contributions
welcome!</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>A headline, possibly with an attached body.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Announcing: vc-use-package</title>
    <link href="https://tony-zorman.com/posts/vc-use-package.html" />
    <id>https://tony-zorman.com/posts/vc-use-package.html</id>
    <published>2022-12-22T00:00:00Z</published>
    <updated>2022-12-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2022-12-22
      
      
        &thinsp;·&thinsp; last modified: 2023-05-18
      
      
        &thinsp;·&thinsp; <span title="286 words">2 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->


<div>
  <p>I’d like to announce a small package I’ve written: <a href="https://github.com/slotThe/vc-use-package">vc-use-package</a>. It
is a first attempt at integrating the new (as of Emacs 29)
<code>package-vc.el</code> with the now built-in use-package. I’ve already talked
about how these two interact in my <a href="https://tony-zorman.com/posts/package-vc-install.html">last post</a>—you can
see this package as automating things juuuust a little more.</p>
<!--more-->
<p><em>Update (2023-05-18)</em>: This is now built into Emacs 30!
Check <a href="https://tony-zorman.com/posts/use-package-vc.html">here</a> for more details.</p>
<h2 id="motivation">Motivation</h2>
<p>For the last post, someone gave me some <a href="https://old.reddit.com/r/emacs/comments/z9i4ce/exploring_packagevcinstall_as_an_alternative_to/iygzeum/">feedback</a>:
couldn’t we go a little further? In particular, they wanted a new <code>:vc</code>
keyword for use-package, much like <a href="https://github.com/quelpa/quelpa">quelpa</a> has done with
<a href="https://github.com/quelpa/quelpa-use-package">quelpa-use-package</a>. I already gave them a small working example in a
follow-up comment, but figured this might actually interest enough
people so that turning it into a proper package could be worth it; and
here we are!</p>
<p>The basic premise is really this simple—we create a handler for a new
<code>:vc</code> use-package keyword. It can be used like so:</p>
<pre class="emacs-lisp"><code>(use-package math-delimiters
  :vc (:fetcher github :repo oantolin/math-delimiters))</code></pre>
<p>One can specify most arguments that <code>package-vc-install</code> also accepts; for example:</p>
<pre class="emacs-lisp"><code>(use-package math-delimiters
  :vc (:fetcher &quot;github&quot;
       :repo &quot;oantolin/math-delimiters&quot;
       :rev &quot;master&quot;         ; also accepts the special `:last-release'
       :backend Git))</code></pre>
<p>Much like quelpa-use-package, there is some care needed concerning the
interaction between this package and the <code>use-package-always-ensure</code>
variable, but this should mostly be taken care of automatically. For
more information (and manual controls), see the
<a href="https://github.com/slotThe/vc-use-package#in-combination-with-use-package-always-ensure">README</a>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>As I said above,
this is no longer only available as an external package,
but actually <a href="https://tony-zorman.com/posts/use-package-vc.html">built into Emacs</a>!
By virtue of being a part of it now,
the integration with <code>use-package</code> is a lot tighter—try it out if you’re using <code>HEAD</code> anyways!
If not, then don’t worry: <code>vc-use-package</code> will not go anywhere for the forseeable future.</p>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Exploring package-vc-install</title>
    <link href="https://tony-zorman.com/posts/package-vc-install.html" />
    <id>https://tony-zorman.com/posts/package-vc-install.html</id>
    <published>2022-11-30T00:00:00Z</published>
    <updated>2022-11-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2022-11-30
      
      
        &thinsp;·&thinsp; last modified: 2023-05-18
      
      
        &thinsp;·&thinsp; <span title="621 words">3 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>The Emacs 29 release branch was just cut—and it’s chock full of new
features! In this post, I want to talk about the new
<code>package-vc-install</code> function, which allows one to install packages
directly from their respective upstream source; for example, GitHub. It
can be seen as a built-in alternative to things like quelpa or
straight.el.</p>
<!--more-->
<p><em>Update (2023-05-18)</em>:
Integration into <code>use-package</code> is now available as
a <a href="https://tony-zorman.com/posts/vc-use-package.html">standalone package</a>,
as well as—as of Emacs 30—a
<a href="https://tony-zorman.com/posts/use-package-vc.html">built-in option</a></p>
<h2 id="the-story-so-far">The story so far</h2>
<p>I’ve been using <a href="https://github.com/quelpa/quelpa">quelpa</a> and <a href="https://github.com/quelpa/quelpa-use-package">quelpa-use-package</a> to install packages
that are not on any popular archive straight from source. Especially
the latter package resulted in an almost seemless integration with the
rest of my configuration; for example:</p>
<pre class="emacs-lisp"><code>(use-package math-delimiters
  :quelpa (math-delimiters :fetcher github :repo &quot;oantolin/math-delimiters&quot;))</code></pre>
<p><a href="https://git.savannah.gnu.org/cgit/emacs.git/commit/?id=5fa2f116799b8a7c17ff6eedd6e1b1af077c116b">Recently</a>, Emacs added built-in capabilities for
installing a package directly from its remote repository. Eager to
shave yet another external package from my otherwise ever growing list,
I took <code>package-vc.el</code> out for a spin: turns out, it almost perfectly
covers the use-case for which I—and perhaps a few other people—used
quelpa up until now!</p>
<p>The most user-facing of these new functions is <code>package-vc-install</code>,
with signature</p>
<pre class="emacs-lisp"><code>(package-vc-install PACKAGE &amp;optional NAME REV BACKEND)</code></pre>
<p>In the simplest case, it takes a URL pointing to some online source as
its argument and installs the respective package from there, guessing
the name from the URL. In case that doesn’t work—or one wants more
control, like requiring a specific revision—there are some other
optional arguments available, see the function’s documentation.</p>
<h2 id="customising-package-vc-install">Customising <code>package-vc-install</code></h2>
<p>When a package is already installed, <code>package-vc-install</code> will ask the
user to interactively confirm whether they really want to overwrite the
existing directory. Naturally, this is not a good experience when
trying to use this in a non-interactive fashion.</p>
<p>There are a few ways one could go about fixing this. One of these is
even documented in the manual: customise <code>package-vc-selected-packages</code>
and then call <code>package-vc-install-selected-packages</code>, which works much
like <code>package-install-selected-packages</code>. However, this feels
unergonomic to me—at least considering that I want to use
<code>package-vc-install</code> as a (hopefully) drop-in replacement for
use-package’s <code>quelpa</code> keyword. Plus, I’d rather have the information
that package X is not installed from *ELPA local to the use-package
declaration of X itself.</p>
<p>So, let’s take the easy way out and write a small wrapper:</p>
<pre class="emacs-lisp"><code>(cl-defun slot/vc-install (&amp;key (fetcher &quot;github&quot;) repo name rev backend)
  &quot;Install a package from a remote if it's not already installed.
This is a thin wrapper around `package-vc-install' in order to
make non-interactive usage more ergonomic.  Takes the following
named arguments:

- FETCHER the remote where to get the package (e.g., \&quot;gitlab\&quot;).
  If omitted, this defaults to \&quot;github\&quot;.

- REPO should be the name of the repository (e.g.,
  \&quot;slotThe/arXiv-citation\&quot;.

- NAME, REV, and BACKEND are as in `package-vc-install' (which
  see).&quot;
  (let* ((url (format &quot;https://www.%s.com/%s&quot; fetcher repo))
         (iname (when name (intern name)))
         (pac-name (or iname (intern (file-name-base repo)))))
    (unless (package-installed-p pac-name)
      (package-vc-install url iname rev backend))))</code></pre>
<p>This function can now be used under the <code>init</code> keyword of the
use-package macro, almost without changing the shape of the declaration
from above:</p>
<pre class="emacs-lisp"><code>;; Before
(use-package math-delimiters
  :quelpa (math-delimiters :fetcher github :repo &quot;oantolin/math-delimiters&quot;))

;; After
(use-package math-delimiters
  :init (slot/vc-install :fetcher &quot;github&quot; :repo &quot;oantolin/math-delimiters&quot;)
  ;; OR (slot/vc-install :repo &quot;oantolin/math-delimiters&quot;)
  )</code></pre>
<p>In case you think I cherry picked the example, <a href="https://gitlab.com/slotThe/dotfiles/-/commit/6d55ac184af125a117215a1bb812ad75c5b0ab03">here</a>
is the full commit that exchanges quelpa for <code>slot/vc-install</code>.</p>
<h2 id="thats-all-folks">That’s all folks!</h2>
<p>Admittedly, my use of quelpa was rather primitive. I can imagine users
more heavily invested in, for example, the <code>straight.el</code> ecosystem
probably want a bit more out of their package manager than <code>package.el</code>
can give them right now, even with the added convenience of
<code>package-vc.el</code>. However, for me—and probably at least a few people out
there—this is quite enough. After all, for anything more there’s always
<a href="https://nixos.org/">nix</a> :)</p>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Adjusting preview.el for vertical monitors</title>
    <link href="https://tony-zorman.com/posts/vertical-previews.html" />
    <id>https://tony-zorman.com/posts/vertical-previews.html</id>
    <published>2022-11-05T00:00:00Z</published>
    <updated>2022-11-05T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2022-11-05
      
      
        &thinsp;·&thinsp; last modified: 2023-02-13
      
      
        &thinsp;·&thinsp; <span title="451 words">2 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->


<div>
  <p>Here’s a fun one: when previewing LaTeX fragments via AUCTeX’s
<code>preview.el</code> library (whether it be in a .tex buffer, or—via
<a href="https://github.com/karthink/org-auctex">org-auctex</a>—in Org) things get <em>really</em> messed up when one or more
monitors are set up in portrait mode.</p>
<!--more-->
<p>When you have two monitors oriented vertically, previews might end up
looking something like this:</p>
<p style="text-align:center;">
<img class="pure-img" src="../images/vertical-preview/two-vertical.png" alt="preview with two vertical monitors, horribly squished vertically">
</p>
<p>With the perhaps more common setup of one vertical and one horizontal
monitor, you could instead get the charming</p>
<p style="text-align:center;">
<img class="pure-img" src="../images/vertical-preview/one-vertical.png" alt="preview with one vertical monitor, horribly squished horizontally">
</p>
<p>Imagine a whole page of this—things get pretty funky. Being a boring
person, I would rather prefer the much more ordinary looking</p>
<p style="text-align:center;">
<img class="pure-img" src="../images/vertical-preview/normal.png" alt="normal preview, prefectly legible">
</p>
<p>Thankfully, this isn’t so complicated. Looking into <code>preview.el</code>, we
get the geometry of the frame from <code>preview-get-geometry</code>. At least,
this is what <code>preview-generate-preview</code> calls before delegating the
heavy lifting to some internal functions. After staring at the former
function for a while, one can single out <code>preview-get-dpi</code> as the main
culprit. It seems to calculate the “resolution” of the preview:</p>
<pre class="emacs-lisp"><code>  (defun preview-get-dpi ()
    (let* ((monitor-attrs (frame-monitor-attributes))
           (mm-dims (cdr (assoc 'mm-size monitor-attrs)))
           (mm-width (nth 0 mm-dims))
           (mm-height (nth 1 mm-dims))
           (pixel-dims (cl-cdddr (assoc 'geometry monitor-attrs)))
           (pixel-width (nth 0 pixel-dims))
           (pixel-height (nth 1 pixel-dims)))
      (cons (/ (* 25.4 pixel-width) mm-width)
            (/ (* 25.4 pixel-height) mm-height))))</code></pre>
<p>Monitor details are returned by the <code>frame-monitor-attributes</code> function;
its output for a horizontal monitor is</p>
<pre class="emacs-lisp"><code>  '((name . &quot;DP1&quot;)
    (geometry 0 0 1920 1080)
    (workarea 0 0 1920 1080)
    (mm-size 530 300)
    (frames &lt;&lt;omitted&gt;&gt;)
    (source . &quot;XRandR 1.5&quot;))</code></pre>
<p>While the same monitor in “vertical-mode” returns</p>
<pre class="emacs-lisp"><code>  '((name . &quot;DP1&quot;)
    (geometry 0 0 1080 1920)
    (workarea 0 0 1080 1920)
    (mm-size 530 300)
    (frames &lt;&lt;omitted&gt;&gt;)
    (source . &quot;XRandR 1.5&quot;))</code></pre>
<p>Crucially, the physical width and height of the monitor don’t change,
but the <em>geometry</em>—the pixel width and height—does; you can <code>C-h f display-monitor-attributes-list RET</code> for more information. This means
that in portrait mode, we actually compare the pixel <em>width</em> of the
monitor with its physical <em>height</em>, as well as its pixel height with its
width. Naturally, and depending on the specific setup, this produces
too narrow or too wide previews.</p>
<p>The solution is to only compare the comparable values. Indeed,
overriding the built-in <code>preview-get-dpi</code> function with</p>
<pre class="emacs-lisp"><code>  (defun preview-get-dpi ()
    (-let (((&amp;alist 'mm-size (mw mh)
                    'geometry (_ _ pw ph))
            (frame-monitor-attributes)))
      (cons (/ (* 25.4 (max pw ph)) (max mw mh))
            (/ (* 25.4 (min pw ph)) (min mw mh)))))</code></pre>
<p>produces the correct behaviour! This implicit assumption—that monitors
are generally wider than they are tall—of <code>preview-get-dpi</code> should
probably be fixed; I will report it as an Emacs bug.</p>
<p>As an aside, this is an excellent opportunity to see the ergonomic
benefits of the <a href="https://github.com/magnars/dash.el">dash.el</a> library. Compare the readability of the
“fixed” implementation using <code>-let</code> to the original one above. I
certainly know which of the two I’d rather write!</p>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>A Potpourri of Emacs Tweaks</title>
    <link href="https://tony-zorman.com/posts/emacs-potpourri.html" />
    <id>https://tony-zorman.com/posts/emacs-potpourri.html</id>
    <published>2022-10-22T00:00:00Z</published>
    <updated>2022-10-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2022-10-22
      
      
        &thinsp;·&thinsp; last modified: 2024-03-02
      
      
        &thinsp;·&thinsp; <span title="3265 words">14 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>Emacs is the “extensible text editor”, and it wouldn’t be fun if one
didn’t at least try to take advantage of that, right? Having just
written a <a href="https://gitlab.com/slotThe/dotfiles/-/tree/master/emacs">README</a> for my Emacs configuration, I
thought it might be nice to somewhat expand on certain ideas and give a
little context to some snippets that have accumulated over time.</p>
<p>While there is a post about <a href="https://tony-zorman.com/posts/query-replace-many.html">my version</a> of the
<code>query-replace</code> function, most other tidbits have only seen the light of
day in places like the “Weekly Tips, Tricks, &amp;c.” thread on Reddit. In
the spirit of hosting my content somewhere that I actually control,
I chose to showcase these again here, hoping that other people may also
find some of this stuff useful.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></p>
<!--more-->
<h2 id="frame-inhibit-implied-resize"><code>frame-inhibit-implied-resize</code></h2>
<p>This variable is interesting for all the people who, for one reason or
another, care about the startup time of their Emacs session. Even more
if one uses a tiling window manager, as then Emacs doesn’t get a say in
how big its frame will be anyway. An excerpt from the documentation:</p>
<blockquote>
<p>Whether frames should be resized implicitly.</p>
<p>If this option is nil, setting font, menu bar, tool bar, tab bar,
internal borders, fringes or scroll bars of a specific frame may
resize the frame in order to preserve the number of columns or lines
it displays. If this option is t, no such resizing is done.</p>
</blockquote>
<p>I always wondered why startup time skyrocketed whenever I changed the
default font to something else—surely opening a font and using it can’t
be that expensive! What I didn’t realise was that what I set was
slightly larger than Emacs’s default font, which I reckon was some kind
of monospace fallback on my system. Setting
<code>frame-inhibit-implied-resize</code> to <code>t</code> will thusly prevent Emacs from
trying to—futilely, since I use <a href="https://xmonad.org">XMonad</a>—resize its frame in order to
“preserve the number of columns or lines it displays”. The upshot is
that this cuts my startup time from just over 1 second to about 0.8
seconds. This may not seem like much, but it’s literally <a href="https://gitlab.com/slotThe/dotfiles/-/blob/460060b7b5e164e6b892397e264b0da470ed74c9/emacs/.config/emacs/early-init.el#L51">setting a
single variable</a> in my <code>early-init.el</code>—pretty good
value for money.</p>
<h2 id="pixel-scroll-precision-mode"><code>pixel-scroll-precision-mode</code></h2>
<p>This is pretty old news by now, but I wanted to take the opportunity to
again praise <code>pixel-scroll-precision-mode</code>. My day job is being a <a href="./my-phd-workflow.html">PhD
student in maths</a>, which means that I write a lot of
LaTeX and also use Org extensively for taking notes. While ordinary
LaTeX entry in Org works quite well, commutative diagrams are a pain
more often than not. In fact, It’s much easier to draw them with a tool
like <a href="https://q.uiver.app/">quiver</a>, make a screenshot, and then include the resulting picture
in the file. However, now we have the problem that Emacs treats
pictures as very large single characters—the result is a scrolling
experience that’s very far from optimal. This is <em>exactly</em> where
<code>pixel-scroll-precision-mode</code> comes in and saves the day, but see the
difference for yourself:</p>
<p>
<video width="100%" controls>
<source src="../images/emacs-potpourri/pixel-scroll-precision-mode.mp4" type="video/mp4">
</video>
</p>
<h2 id="quickly-insert-images-in-org-roam">Quickly insert images in <code>org-roam</code></h2>
<p>Speaking of inserting images into Org; how does one do that, exactly?
Doing everything by hand seems like a slog: select an arbitrary
rectangle on the screen, take a screenshot of it, move the resulting
picture into the correct directory, give it an appropriate name, and
insert a link to it into the current buffer. This sounds like a lot of
busywork for something that I ideally don’t want to think about at all;
thankfully, most of this can be nicely automated.</p>
<pre class="emacs-lisp"><code>(defun slot/org-roam-insert-image ()
  &quot;Select and insert an image at point.&quot;
  (interactive)
  (let* ((file-name (format &quot;%s-%s.png&quot;
                            (file-name-sans-extension (buffer-name))
                            (cl-random (expt 2 31))))
         (path (format &quot;%s/%s/%s&quot; org-roam-directory &quot;images&quot; file-name)))
    ;; The mouse movement via xdotool is needed because otherwise, if
    ;; unclutter is active, the pointer will remain hidden.  Uff.
    (call-process &quot;xdotool&quot; nil 0 nil &quot;mousemove_relative&quot; &quot;--&quot; &quot;-1&quot; &quot;0&quot;)
    (let ((scrot-exit (call-process &quot;scrot&quot; nil nil nil
                                    &quot;-z&quot; &quot;-f&quot; &quot;-s&quot; &quot;--file&quot; path)))
      (when (= scrot-exit 0)
        (insert (format &quot;[[../images/%s]]&quot; file-name))))))</code></pre>
<p>All it needs is <code>xdotool</code> for moving the mouse (though, if you don’t use
<code>unclutter</code> then this may well be deleted) and <code>scrot</code> for actually
taking the screenshot. Pretty convenient. If <code>scrot</code> is too low-tech
for you, then the above snippet probably also works with <code>flameshot</code> or
a similar tool.</p>
<h2 id="latex">LaTeX</h2>
<h3 id="latex-for-the-lazy-mathematician">LaTeX for the lazy mathematician</h3>
<p>I am pretty impatient when it comes to LaTeX entry. So impatient that I
have created a few “now you’re really taking it too far”-type of
functions. To be honest, they kind of delight me.</p>
<p>First, the following is an override for the <code>self-insert-command</code>, which
enables faster entry of one-character math symbols:</p>
<pre class="emacs-lisp"><code>(defun slot/LaTeX-self-insert (&amp;optional arg char)
  &quot;`self-insert-command' for LaTeX mode.
If the previous word is just a single character, surround it with
dollar signs.  If already in math mode, do nothing.  If the
character is a single `a', do nothing.

If called with a single \\[universal-argument], just call
`self-insert-command'.&quot;
  (interactive &quot;P&quot;)
  (pcase arg
    ('(4) (self-insert-command 1))
    (_ (let ((ppoint (save-excursion (backward-word)       (point)))
             (ipoint (save-excursion (back-to-indentation) (point)))
             (word   (word-at-point)))
         (unless (or (length&gt; word 1)   ; longer than a single character
                     (not word)
                     (= ipoint ppoint)  ; the first thing on a new line
                     (equal &quot;a&quot; word)
                     (number-at-point)
                     (texmathp))
           (-let (((open . close) math-delimiters-inline))
             (backward-char)
             (insert open)
             (forward-char 1)
             (insert close)))
         (self-insert-command 1 char)))))</code></pre>
<p>Bound to <code>&lt;SPC&gt;</code> (and also things like <code>.</code> and <code>-</code>), it enables one to
write <code>"foo T&lt;SPC&gt;"</code> and have Emacs insert <code>"foo $T$ "</code> instead—very
convenient, and much faster even than having a snippet to insert dollars
based on some condition.</p>
<p>The laziness continues with me not wanting to write <code>\blank</code> so
often.<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> I could also create an auto-expanding snippet for this, but
wouldn’t it be <em>much better</em> to insert it on a double tap of the space
bar instead? I think so!</p>
<pre class="emacs-lisp"><code>(defun slot/LaTeX-space (&amp;optional arg)
  &quot;Insert a space; or not.
In case the previous character was already a space, insert
\\blank instead.&quot;
  (interactive &quot;P&quot;)
  (if (and (= ?\s (char-before)) (texmathp))
      (insert &quot;\\blank &quot;)
    (slot/LaTeX-self-insert arg ?\s)))</code></pre>
<p>Now, writing something like <code>"C(&lt;SPC&gt;&lt;SPC&gt;,&lt;SPC&gt;&lt;SPC&gt;)"</code> in math-mode
nicely inserts <code>"C( \blank , \blank )"</code>. Because the space bar is so
easy to press, this is again marginally faster than having to write
something like <code>"C(bln,bln)"</code>.</p>
<p>Together with auto-expanding snippets, this enables reasonably fast
LaTeX entry:</p>
<p><img class="pure-img" src="../images/emacs-potpourri/latex-entry.gif" alt="Fast LaTeX entry with various kinds of macros and abbreviations"></p>
<p>More examples can be found in the <a href="./my-phd-workflow.html#digital-notes">post</a> about
my research workflow.</p>
<h3 id="prettify-latex-buffers">Prettify LaTeX buffers</h3>
<p>This story is interesting enough that I’ve written a whole <a href="./pretty-latex.html">post</a> about it<!--
-->—go check it out!
Long story short, one can transform a buffers like this</p>
<p><img class="pure-img" style="padding-left: 1em" src="../images/pretty-latex/end-before.png" alt="Before prettifying: Sections, subsections, emphasis, math"></p>
<p>into one like this</p>
<p><img class="pure-img" style="padding-left: 1em" src="../images/pretty-latex/end-after.png" alt="After prettifying: Sections, subsections, emphasis, math"></p>
<h2 id="erc">ERC</h2>
<p>I recently switched from WeeChat to <a href="https://www.gnu.org/software/emacs/erc.html">ERC</a> for IRC. It’s
really great so far, but some things felt a bit lackluster out of the
box. As such, my <a href="https://gitlab.com/slotThe/dotfiles/-/blob/460060b7b5e164e6b892397e264b0da470ed74c9/emacs/.config/emacs/lisp/erc-config.el">ERC config</a> has already grown quite a
bit.<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a> The following are a few tweaks that improve my experience
greatly.</p>
<h3 id="mark-the-current-frame-as-urgent">Mark the current frame as urgent</h3>
<p>One feature I was dearly missing was the ability to set <a href="https://tronche.com/gui/x/xlib/ICC/client-to-window-manager/wm-hints.html">urgency
hints</a> in the case I get highlighted/pinged. This is
essentially the window telling your window manager or desktop
environment that it wants your attention. You can then execute an
action based on this urgency hint. Thankfully, Emacs is extensible, so
hacking this behaviour into ERC wasn’t actually all that complicated.</p>
<pre class="emacs-lisp"><code>(defun slot/mark-emacs-urgent ()
  &quot;Mark the current frame as urgent.&quot;
  (let* ((WM-HINTS &quot;WM_HINTS&quot;)
         (hints (seq--into-list
                 ;; By default this returns a string/vector.
                 (x-window-property WM-HINTS nil WM-HINTS nil nil t))))
    ;; Urgency flag: (1L &lt;&lt; 8) == 256
    ;; Source (as always): https://tronche.com/gui/x/xlib/ICC/client-to-window-manager/wm-hints.html
    (setcar hints (logior (car hints) (lsh 1 8)))
    (x-change-window-property WM-HINTS hints nil WM-HINTS 32)))

(defun slot/beep-on-match (match-type _nickuserhost message)
  &quot;Beep and mark the frame as urgent on highlight.&quot;
  (let ((visible-bell nil))
    (slot/mark-emacs-urgent)
    (erc-beep-on-match match-type _nickuserhost message)))

(add-hook 'erc-text-matched-hook #'slot/beep-on-match)</code></pre>
<p>And that’s really it! Now ERC correctly sends an urgency hint whenever
I get highlighted. Note that, <a href="https://old.reddit.com/r/emacs/comments/xjyuni/weekly_tips_tricks_c_thread/ipfjlw0/">as we found out</a>, if
you use a reparenting window manager (you probably do if you use a
desktop environment) you might have to give <code>x-change-window-property</code>
above an extra <code>t</code> argument.</p>
<h3 id="dont-highlight-quite-so-much">Don’t highlight quite so much</h3>
<p>Having configured quite a few regular expressions for when I get
highlighted, things can get quite overwhelming at times. For example,
when ERC starts up it prints <code>/users</code> in every channel buffer. Of
course, I’m a user in a channel that I’m in, so Emacs happily starts
beeping and throwing around urgency hints—not a good experience. This
also clutters the <code>ERC Keywords</code> buffer (which is built-in and akin to
WeeChat’s <code>highmon.pl</code>).</p>
<p>Thankfully, however, there is a straightforward hack around this: just
check the message for certain regular expression first and do nothing
when they are present.</p>
<pre class="emacs-lisp"><code>(defun slot/erc-ignore-highlight (msg)
  &quot;Don't highlight me when these things happen.&quot;
  (let ((message (s-trim-left msg))
        (channel (or (erc-default-target) &quot;&quot;)))
    (--any? (s-prefix? it message)
            `(&quot;*** Users on&quot;
              &quot;*** Your new nickname is&quot;
              &quot;*** Welcome to the&quot;
              ,(concat &quot;*** &quot; channel &quot;: topic set by&quot;)))))</code></pre>
<p>All that’s left to do is to thread this function through to
<code>erc-log-matches</code> and the above-defined <code>slot/beep-on-match</code>:</p>
<pre class="emacs-lisp"><code>(defun slot/erc-log-matches (match-type nickuserhost message)
  &quot;Log matches to extra buffer, unless they are annoying.&quot;
  (unless (slot/erc-ignore-highlight message)
    (erc-log-matches match-type nickuserhost message)))

(defun slot/beep-on-match (match-type _nickuserhost message)
  &quot;Beep and mark the frame as urgent on highlight.&quot;
  (let ((visible-bell nil))
    (unless (slot/erc-ignore-highlight message)
      (slot/mark-emacs-urgent)
      (erc-beep-on-match match-type _nickuserhost message))))

;; As before, now add the appropriate hooks to `erc-text-matched-hook'.</code></pre>
<p>If it works, it works, right?</p>
<h2 id="inserting-links">Inserting links</h2>
<p>Next to being a user, I also spend way too much time working on XMonad.
As such, I often help people coming into our IRC or posting on the
subreddit with their problems. More often than not one needs to link to
the same resources over and over again—why not write something so that I
don’t have to dig up these links again and again?</p>
<p>I currently have a set-up where I can link to every XMonad module, all
of my blog posts, as well as selected extra sites, like our tutorial and
installation instructions. Depending on the given universal argument, a
different link style is used, to accomodate for different platforms.</p>
<pre class="emacs-lisp"><code>(defun slot/get-xmonad-modules ()
  &quot;Get all XMonad modules in the form (NAME . DOC-URL).&quot;
  (let* ((xmonad-cabal &quot;~/repos/xmonad/xmonad-contrib/xmonad-contrib.cabal&quot;)
         (hackage &quot;https://hackage.haskell.org/package/xmonad-contrib/docs/&quot;)
         (modules (shell-command-to-string
                   (format &quot;tail -n +50 %s | grep -E \&quot; XMonad\\.*\&quot;&quot;
                           xmonad-cabal))))
    (-&gt;&gt; (s-lines modules)
         (-drop-last 1)                 ; empty line
         (--map (s-trim (s-replace &quot;exposed-modules:&quot; &quot;&quot; it)))
         (--map (cons it
                      (concat hackage (s-replace &quot;.&quot; &quot;-&quot; it) &quot;.html&quot;))))))

(defun slot/get-posts ()
  &quot;Get all of my blog posts in the form (NAME . URL).&quot;
  (let* ((website &quot;https://tony-zorman.com/&quot;)
         (base-path &quot;~/repos/slotThe.github.io/&quot;)
         (posts (directory-files-recursively (concat base-path &quot;posts/&quot;)
                                             &quot;.md$&quot;)))
    (--map (with-temp-buffer
             (insert-file-contents-literally it)
             (search-forward &quot;title: &quot;)
             (cons                      ; Name . URL
              (string-replace &quot;\&quot;&quot; &quot;&quot; (buffer-substring (point)
                                                        (point-at-eol)))
              (concat website (string-trim it base-path &quot;.md&quot;) &quot;.html&quot;)))
           posts)))

(defun slot/often-used-links (&amp;optional arg)
  &quot;Choose a link and insert it into the buffer in .md format.
This is quite useful, since many people happen to have very
similar problems when, for example, first starting out with
xmonad.&quot;
  (interactive &quot;P&quot;)
  (-let* ((links
           (-concat '((&quot;tutorial&quot; . &quot;https://xmonad.org/TUTORIAL.html&quot;)
                      (&quot;install&quot;  . &quot;https://xmonad.org/INSTALL.html&quot;)
                      (&quot;xmonad.hs&quot;. &quot;https://gitlab.com/slotThe/dotfiles/-/blob/master/xmonad/.config/xmonad/src/xmonad.hs&quot;))
                    (slot/get-xmonad-modules)
                    (slot/get-posts)))
          (choice (completing-read &quot;Link: &quot; (mapcar #'car links)))
          ((name . link) (assoc choice links)))
    (insert &quot;[&quot; name &quot;]&quot;)
    (if arg
        (insert &quot;(&quot; link &quot;)&quot;)
      (save-excursion (insert &quot;\n\n[&quot; name &quot;]: &quot; link)))))</code></pre>
<p>I bind this to <code>C-c l</code> in <code>markdown-mode</code>; it looks like this:</p>
<p><img class="pure-img" src="../images/emacs-potpourri/markdown-entry.gif" alt="link entry in markdown-mode, with an interactive prompt"></p>
<h2 id="a-macro-for-repeat-mode">A macro for <code>repeat-mode</code></h2>
<p>I’ve written a macro for Emacs’s <code>repeat-mode</code>, which allows you to
execute repeated commands without having to press the same prefix over
and over again. For example, one can set this up for Org navigation
commands such that <code>C-c C-n n n</code> executes <code>org-next-visible-heading</code>
three times. A great introduction to <code>repeat-mode</code> can be found
<a href="https://karthinks.com/software/it-bears-repeating/">here</a>.</p>
<p>There are <a href="https://tildegit.org/acdw/define-repeat-map.el">lots</a> of <a href="https://github.com/mmarshall540/repeaters">packages</a>
around that define different macros which probably work much better than
the one below. Even <a href="https://github.com/jwiegley/use-package">use-package</a> now sports a <code>:repeat-map</code> keyword
now. However, obviously the one I wrote feels the most natural to <em>me</em>,
so it’s being kept around regardless.</p>
<pre class="emacs-lisp"><code>(defmacro defrepeatmap (sym pairs &amp;optional docstring)
  &quot;A macro for defining `repeat-map's.
Defines a new repeat-map called SYM with the given DOCSTRING.
The keys are derived via the list PAIRS, whose elements are cons
cells of the form (KEY . DEF), where KEY and DEF must fulfill the
same requirements as if given to `define-key'.

If the key only consists of a single character; i.e., is already
bound and a repeat map is created afterwards, simply add it to
the repeat-map SYM.  If not, globally bind KEY to DEF and only
insert the last character of DEF into the repeat map SYM.&quot;
  (declare (indent 1) (debug t))
  `(progn
     (defvar ,sym
       (let ((kmap (make-sparse-keymap)))
         (--each ,pairs
           (-let (((key . fun) it))
             (if (length= key 1)
                 (define-key kmap (kbd key) fun)
               (bind-key (kbd key) fun)
               (define-key kmap (kbd (s-right 1 key)) fun))))
         kmap)
       ,docstring)
     ;; Tell the keys they are in a repeat map.
     (--each (mapcar 'cdr (cdr ,sym))
       (put it 'repeat-map ',sym))))</code></pre>
<p>The following would, for example, bind <code>mc/mark-next-like-this-word</code> to
<code>M-s s</code> globally and to <code>s</code> in the created <code>mc-repeat-map</code>. Likewise,
<code>mc/mark-next-word-like-this</code> is bound to <code>.</code> in that map, and so on.</p>
<pre class="emacs-lisp"><code>(defrepeatmap mc-repeat-map
    '((&quot;M-s s&quot; . mc/mark-next-like-this-word)
      (&quot;C-M-.&quot; . mc/mark-next-word-like-this)
      (&quot;C-M-,&quot; . mc/mark-previous-word-like-this)
      (&quot;C-&gt;&quot;   . mc/skip-to-next-like-this)
      (&quot;C-&lt;&quot;   . mc/skip-to-previous-like-this))
    &quot;`repeat-mode' keymap to repeat `multiple-cursors' bindings.&quot;)</code></pre>
<p>This may be too implicit for many people, but for me it’s just right—and
that’s sort of the point of all of this, right?</p>
<h2 id="warn-on-empty-subjects">Warn on empty subjects</h2>
<p>Emacs’s <code>notmuch</code> package has this fantastic concept of an <em>attachment check</em>:
adding <code>notmuch-mua-attachment-check</code> to <code>notmuch-mua-send-hook</code> will,
before sending the message,
check whether the regular expression in <code>notmuch-mua-attachment-regexp</code> matches.
If yes—and no attachment has been added—it will alert the user,
asking whether one really wants to send that email;
otherwise, everything goes through smoothly.
Due to some personal idiosyncrasies,
I needed a variant of this to check for empty subjects,
lest I become one of those people who sends emails like that.
As always, Emacs delivers.</p>
<p>The code for <code>notmuch-mua-attachment-check</code> is relatively straightforward,
and worth a look if we want to imitate this kind of behaviour for other headers.
A simplified<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a> version goes as follows:</p>
<pre class="emacs-lisp"><code>(defun notmuch-mua-attachment-check ()
  &quot;Signal an error an attachement is expected but missing.

Signal an error if the message text indicates that an attachment
is expected but no MML referencing an attachment is found.

Typically this is added to `notmuch-mua-send-hook'.&quot;
  (when (and
         ;; When the message mentions attachment...
         (save-excursion
           (message-goto-body)
           ;; Limit search from reaching other possible parts of the message
           (let ((search-limit (search-forward &quot;\n&lt;#&quot; nil t)))
             (message-goto-body)
             (re-search-forward notmuch-mua-attachment-regexp search-limit t)))
         ;; ...but doesn't have a part with a filename...
         (save-excursion
           (message-goto-body)
           (not (re-search-forward &quot;^&lt;#part [^&gt;]*filename=&quot; nil t)))
         ;; ...and that's not okay...
         (not
          (y-or-n-p &quot;Attachment mentioned, but no attachment - is that okay?&quot;)))
    ;; ...signal an error.
    (error &quot;Missing attachment&quot;)))</code></pre>
<p>There is nothing fancy happening here,
so it’s not terribly difficult to adapt it to other settings.
As I said in the beginning,
I need it to check for subjects,
due to the bad habit of only adding a subject once the email is already written—only sometimes I forget.
Instead of trying to change my habits—which is hard!—it sounds much easier to modify Emacs to suit my needs.</p>
<p>The strategy is exactly the same as for <code>notmuch-mua-attachment-check</code>;
check for a certain regular expression, whitespace, and say something if it matches the current subject:</p>
<pre class="emacs-lisp"><code>(defun notmuch-mua-subject-check ()
  (or (save-excursion
        (message-goto-subject)
        (message-beginning-of-header t)
        (not (looking-at-p &quot;[[:blank:]]*$&quot;)))
      (y-or-n-p &quot;No subject given – still send?&quot;)
      (error &quot;No subject&quot;)))</code></pre>
<p>All one has to do is to execute this before sending a mail:</p>
<pre class="emacs-lisp"><code>(add-hook 'notmuch-mua-send-hook #'notmuch-mua-attachment-check)</code></pre>
<p>and we’re good to go.</p>
<h2 id="sane-type-signatures-with-lsp-mode">Sane type signatures with lsp-mode</h2>
<p>By default, <code>lsp-mode</code>s type signatures for certain languages are… not great.</p>
<p><img class="pure-img" style="padding-left: 1em;" src="../images/fixing-lsp-mode/lsp-mode-default.png" alt="By default, lsp-mode only shows `iamTooLong :: Stirng`"></p>
<p>However, with a bit of hacking around this turns out to be quite fixable:</p>
<p><img class="pure-img" style="padding-left: 1em;" src="../images/fixing-lsp-mode/lsp-mode-fixed.png" alt="Properly syntax highlighted type signature"></p>
<p><a href="https://tony-zorman.com/posts/fixing-lsp-mode.html">The full post with all the code is here</a>.</p>
<h2 id="eshell">Eshell</h2>
<h3 id="integrating-zshs-history-into-eshell">Integrating zsh’s history into eshell</h3>
<p>If you use zsh and eshell together, you—like me—will soon be annoyed at the fact that the two programs use separate history files.
However, unification is not as easy as <code>(setq eshell-history-file-name "~/.config/zsh/zsh_history")</code>,
since zsh stores its history file in a metafied format.<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a>
This means that,
on the eshell side,
we have to make sure unmetafy the history file before writing to it.</p>
<p><a href="https://tony-zorman.com/posts/eshell-zsh-history.html">The implementation and more details can be found here</a>.</p>
<h3 id="integrating-zoxide-with-eshell">Integrating zoxide with eshell</h3>
<p><a href="https://github.com/ajeetdsouza/zoxide">Zoxide</a> is a rewrite
of the original <a href="https://github.com/rupa/z"><code>z</code></a> shell script
to quickly jump around directories.<a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a>
Basically, it keeps a history of your most visited directories<!--
-->—ranked by <a href="https://github.com/ajeetdsouza/zoxide/wiki/Algorithm">frecency</a>—<!--
-->and jumps to the best match.
Think of it as a more general version of <code>cd</code> that learns from your habits.</p>
<p>Below is the most basic integration of zoxide with eshell,
which has however been enough for me;
at least for the time being.</p>
<pre class="emacs-lisp"><code>(advice-add 'eshell/cd :around
  (lambda (cd &amp;rest args)
    &quot;On directory change, add the path to zoxide's database.&quot;
    (let ((old-path (eshell/pwd))
          (_ (apply cd args))
          (new-path (eshell/pwd)))
      (when (and old-path new-path (not (string= old-path new-path)))
        (shell-command-to-string (concat &quot;zoxide add &quot; new-path))))))

(defun eshell/n (dir)
  &quot;Navigate to a previously visited directory.&quot;
  (eshell/cd
   (string-trim (shell-command-to-string (concat &quot;zoxide query &quot; dir))))
  (eshell/ls))</code></pre>
<h2 id="parentheses-aware-yanking">Parentheses-aware yanking</h2>
<p>Normally, when you have an expression like</p>
<pre class="emacs-lisp"><code>(insert-for-yank
 (current-kill
  (cond
   ((listp arg) 0)
   ((eq arg '-) -2)
   (t (1- arg)))))</code></pre>
<p>and you try to copy the last line and insert it again,
it will be returned exactly as-is:</p>
<pre class="emacs-lisp"><code>   (t (1- arg)))))
</code></pre>
<p>While this is expected behaviour, it gravely messes with awesome tools like paredit.
As I’m in the habit—using the power of <a href="https://github.com/purcell/whole-line-or-region">whole-line-or-region</a>—of lazily copying with with <code>M-w</code> all the time,
this posits a problem.<a href="#fn7" class="footnote-ref" id="fnref7" role="doc-noteref"><sup>7</sup></a></p>
<p>The solution, thankfully, does not involve all that much code.
<a href="https://tony-zorman.com/posts/yanking.html">You can read about it here</a>.</p>
<h2 id="make-join-line-handle-comments-sanely">Make <code>join-line</code> handle comments sanely</h2>
<p>By default, the <code>join-line</code> function does not handle comments at all,
and is thus quite useless for a majority of cases</p>
<p><img class="pure-img" src="../images/join-line/join-line-comment.gif" alt="Original join-line behaviour with respect to comments."></p>
<p>However,
with a bit of <a href="https://en.wikipedia.org/wiki/Monkey_patch">monkey-patching</a>,
one can get a result that approximated a sane solution!
<a href="https://tony-zorman.com/posts/join-lines-comments.html">Here is the corresponding post for this</a>.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>I am aware of the futility of this—Reddit is almost certainly
going to be around longer than my personal site will. And yet,
this feels “more correct” in some way.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>This is a placeholder that’s often used when not wanting to
explicitly quantify over an argument.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>Though it’s still much smaller than whatever it is that WeeChat
auto-generates :)<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>Looking for an attachment is complicated insofar as there are some ways the regular expression might match,
which however <em>don’t</em> indicate that anything needs to be done.
The real code looks at this by observing text properties of the matches.
However, this is not important for what follows, so I simply omitted it.</p>
<p>If you’re interested:</p>
<pre class="emacs-lisp"><code>;; When the message mentions attachment...
(save-excursion
  (message-goto-body)
  ;; Limit search from reaching other possible
  ;; parts of the message
  (let ((search-limit
         (search-forward &quot;\n&lt;#&quot; nil t)))
    (message-goto-body)
    (cl-loop
     while (re-search-forward
             notmuch-mua-attachment-regexp
             search-limit t)
     ;; For every instance of the &quot;attachment&quot;
     ;; string found, examine the text
     ;; properties.  If the text has either a
     ;; `face' or `syntax-table' property then
     ;; it is quoted text and should *not*
     ;; cause the user to be asked about a
     ;; missing attachment.
     if (let ((props (text-properties-at
                      (match-beginning 0))))
          (not (or (memq 'syntax-table props)
                   (memq 'face props))))
     return t
     finally return nil)))</code></pre>
<p>Alternatively, check the source code of <code>notmuch-mua-attachment-check</code> directly.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>For whatever reason, when any character from the <code>0x80</code>–<code>0x9F</code> range is encountered
the “Meta character” <code>0x83</code> is inserted and the following character gets XORed with 32.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6"><p>Eshell’s own <code>cd=</code> command only keeps track of the last <code>n</code> directories without filtering or ranking anything.
I know about <a href="https://github.com/xuchunyang/eshell-z">eshell-z</a>,
but since I’m using zoxide within zsh anyways
it seems prudent to not depend on an additional package here.<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn7"><p>Of course, the <em>real problem</em> is my lack of discipline,
but I’m certainly not going to change my habits if I can instead change my editor around me!<a href="#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Rapidly Capture Ideas with XMonad and Emacs</title>
    <link href="https://tony-zorman.com/posts/xmonad-and-org-mode.html" />
    <id>https://tony-zorman.com/posts/xmonad-and-org-mode.html</id>
    <published>2022-08-27T00:00:00Z</published>
    <updated>2022-08-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2022-08-27
      
      
        &thinsp;·&thinsp; last modified: 2023-03-07
      
      
        &thinsp;·&thinsp; <span title="656 words">3 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>, <a title="All pages tagged 'xmonad'." href="/tags/xmonad.html" rel="tag">xmonad</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->


<div>
  <p>As I’ve said before, basically my entire digital life happens in either
<a href="https://www.gnu.org/software/emacs/">Emacs</a> or <a href="https://xmonad.org/">XMonad</a>. Thus, a lot of time spent on my setup either goes
towards working on the two configurations separately, or—as we’ll do
today—bringing them ever closed together.</p>
<p>Specifically, I want to showcase a new<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> XMonad module:
<a href="https://xmonad.github.io/xmonad-docs/xmonad-contrib/XMonad-Prompt-OrgMode.html">XMonad.​Prompt.​Org­Mode</a>. Building on top of XMonad’s prompt—which works
much like <a href="https://tools.suckless.org/dmenu/">dmenu</a>—it is designed to rapidly capture thoughts and ideas
whenever inspiration strikes and, importantly, to do so without
disrupting one’s current workflow. The module recently got support for
Org <a href="https://orgmode.org/manual/Priorities.html">priorities</a>, so I figured this was as good an excuse as
any to talk about it.</p>
<!--more-->
<h3 id="motivation">Motivation</h3>
<p>One theme in the post about my <a href="./my-phd-workflow.html">research workflow</a> was how it’s possible
to use org-mode (with all of its appendages, like <a href="https://www.orgroam.com/">org-roam</a>) to
organise one’s thoughts. <code>XMonad.Prompt.OrgMode</code> was created as yet
another link in that chain. Unlike when writing tiny <a href="./calling-emacs-from-xmonad.html">Emacs Lisp
scripts in XMonad</a>, this does not involve any
custom elisp code one has to run; all of it is taken care of by the
module itself.</p>
<p>The upshot of all of this is a tool to quickly and unobtrusively jot
down an idea—quiet the monkey mind—and then get back to work straight
away. For me, having something like this is very important, lest I get
distracted by some thought about another project and spend the next hour
or so working on that instead of doing what I was actually supposed to
do. Having the idea written down in a known place—perhaps even with an
automatic reminder in my <a href="https://orgmode.org/manual/Agenda-Views.html">agenda</a>—helps me get rid of that creeping
anxiety that I’m forgetting things left and right.</p>
<h3 id="functionality">Functionality</h3>
<p>The following showcases the core functionality of the module—taking
notes!</p>
<p><img class="pure-img" src="../images/orgmode-prompt/simple-task.gif" alt="capturing a single task"></p>
<p>In case you <em>really</em> don’t want to forget something, there is also the
ability to create <code>DEADLINE</code> and <code>SCHEDULED</code> tasks. Optionally, you can
also specify a <a href="https://orgmode.org/manual/Priorities.html">priority</a>, depending on the importance of the note. If
you add the org file in which the TODOs are placed to the
<code>org-agenda-files</code> variable, then this will immediately show these tasks
in your agenda!</p>
<p><img class="pure-img" src="../images/orgmode-prompt/deadline-task.gif" alt="capturing a deadline"></p>
<p>How exactly one may specify the <code>SCHEDULED</code> and <code>DEADLINE</code> keywords, as
well as a date, time, and priority is covered in detail in the
<a href="https://xmonad.github.io/xmonad-docs/xmonad-contrib/XMonad-Prompt-OrgMode.html">documentation</a> for <code>X.P.OrgMode</code>.</p>
<p>Last but not least, it’s possible to capture the current (primary)
selection and, depending on the type of thing in it, use that as either
the body or the header of the task. If it’s a URL, create a link (i.e.,
it will be of the form <code>[[link][input-text]]</code>); if not, just add the
selection to the body of the note.</p>
<p><img class="pure-img" src="../images/orgmode-prompt/selection-tasks.png" alt="visual representation of the above paragraph, showing various states of notes"></p>
<p>Of course, you can use all of this together as well—directly link to
that one paper or blog post you wanted to read, or that one YouTube
video you want to watch on the weekend!</p>
<h3 id="sample-configuration">Sample configuration</h3>
<p>To round things off—and quickly showcase another cool (and new!)
module, <a href="https://xmonad.github.io/xmonad-docs/xmonad-contrib/XMonad-Actions-Prefix.html">XMonad.Actions.Prefix</a>—here is a sample keybinding that takes
“normal” <code>TODO</code> notes on <code>M-o c</code><a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> and uses the selection when called
with a universal argument:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- uses {-# LANGUAGE LambdaCase #-}</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="ot">orgKey ::</span> (<span class="dt">String</span>, <span class="dt">X</span> ())</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>orgKey <span class="ot">=</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  (<span class="st">&quot;M-o c&quot;</span>, withPrefixArgument <span class="op">$</span> (<span class="ot">`uncurry`</span> orgSettings) <span class="op">.</span> \<span class="kw">case</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>     <span class="dt">Raw</span> _ <span class="ot">-&gt;</span> orgPromptPrimary promptNoHist</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>     _     <span class="ot">-&gt;</span> orgPrompt        promptNoHist)</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a> <span class="kw">where</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>  orgSettings <span class="ot">=</span> (<span class="st">&quot;TODO&quot;</span>, <span class="st">&quot;~/todos.org&quot;</span>)</span></code></pre></div>
<p>I’ve found <code>M-u</code> to be quite convenient for XMonad’s universal argument
key, mirroring the <code>C-u</code> convention from Emacs. In either case, simply
add the <code>usePrefix​Argument</code> combinator somewhere to your <code>main</code> function
and give it your preferred keybinding. For example:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> xmonad</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>     <span class="op">.</span> usePrefixArgument <span class="st">&quot;M-u&quot;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>     <span class="op">$</span> def{ modMask <span class="ot">=</span> mod4Mask  <span class="co">-- use &lt;Super&gt; as mod</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>          }</span></code></pre></div>
<p>If you’re anything like me, this will soon become an integral part of
your workflow and you won’t want to live without it. If not, then
perhaps you still don’t understand what all the fuss is about; in either
case, I’d like to <a href="mailto:soliditsallgood@mailbox.org">hear from you</a>!</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>Version 0.17.0 onwards.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>Note that for this post, <code>M</code> means <code>&lt;Super_L&gt;</code> and not <code>&lt;Alt_L&gt;</code>.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Multiple Replacements with query-replace</title>
    <link href="https://tony-zorman.com/posts/query-replace-many.html" />
    <id>https://tony-zorman.com/posts/query-replace-many.html</id>
    <published>2022-08-06T00:00:00Z</published>
    <updated>2022-08-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2022-08-06
      
      
        &thinsp;·&thinsp; last modified: 2023-03-07
      
      
        &thinsp;·&thinsp; <span title="1022 words">5 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>As its name suggests, Emacs’s <code>query-replace</code> function, bound to <code>M-%</code> by default, can be used to replace occurences of one string with another—and it’s quite good at what it does.
However, there is one crucial feature missing from its default functionality: the ability to create multiple <code>from → to</code> pairs.
But this is Emacs, after all, which means that I can write that <code>query-replace-many</code> function I’ve always wanted, and even share it with others!
The <a href="#the-code">code</a> is packaged as <code>query-replace-many</code>, available on <a href="https://gitlab.com/slotThe/query-replace-many">GitLab</a> and <a href="https://github.com/slotThe/query-replace-many">GitHub</a>.</p>
<!--more-->
<p>I quite like the workflow that <code>query-replace</code> offers. In comparison to
other tools that are used for similar purposes—keyboard macros and
multiple-cursors—the whole process after entering the <code>from</code> and <code>to</code>
strings is interactive all the way through: it’s quite fast to step
through the individual matches and decide whether one would like to
replace them or not. In true Emacs fashion, the function also takes way
too many arguments: among other things, it can operate on the current
region, backwards, or only on things surrounded by words boundaries.</p>
<h2 id="motivation">Motivation</h2>
<p>Originally, my motivation came through <a href="../../research.html">work</a>, where I <a href="./my-phd-workflow.html">write a lot of
LaTeX</a>. When polishing papers, it sometimes happens that I would like
to change or unify the notation of certain objects in the current
equation/environment/file.</p>
<p>When an alteration like this only encompasses a single action, like
switching <code>T</code> to <code>H</code>, a simple <code>query-replace</code> after narrowing to the
current region of interest is totally sufficient. For others, like
changing <code>T</code> to <code>H</code> <em>and</em> <code>S</code> to <code>G</code>, this solution, along with
multiple-cursors and other tools people usually go for, would already be
unsatisfactory—the whole region would need to be traversed twice. Now
imagine that you want to change <code>T</code> to <code>U</code> <em>and</em> <code>U</code> to <code>T</code>: chaos!
Save having to give some sort of temporary name to one of the objects,
which would be even slower, <code>query-replace</code> is quite useless in this
situation. It’s possible to cook up a manual solution using the
alternative <code>query-replace-regexp</code> function and capture groups, but I’m
unsure how many people know their elisp regular expressions well enough
for that to be time efficient. I don’t, and almost certainly never
will, so it seemed much easier to automate this instead!</p>
<h2 id="the-solution">The solution</h2>
<p>Thankfully, since <code>replace.el</code> sports a decent API, writing a version of
<code>query-replace</code> that accepts multiple arguments turns out to be easy
enough. The high-level overview is this: we read in multiple queries
until an empty input is given,<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> build up a regular expression of the
form <code>"\\(?:query-1\\|query-2\\|…\\)"</code>, and—when it comes to
replacing—test the current thing to be replaced against all of the
queries to select the correct one.</p>
<p>The beauty of this is that, since it’s really just a thin wrapper over
two functions from <code>replace.el</code> that do the heavy lifting, all of the
modules regular functionality, like the keybindings and history, just
work.</p>
<p>For example, in the following I replace <code>T</code> with <code>U</code> and, at the same
time, <code>U</code> with <code>T</code>. The first few matches are stepped through and the
rest is just accepted wholesale. At the bottom, you can see the default
<code>query-replace</code> interface when interacting with the query.</p>
<p><img class="pure-img" src="../images/query-replace/query-replace-many.gif" alt="query-replace-many functionality showcase"></p>
<p>The only cosmetic imperfection of this is that, while the replacement
candidate itself is correctly updated, we see the whole regular
expression <code>\(?U:\|T\)</code> as the thing to be replaced instead of the bit
that’s actually matching currently. However, since this would seem to
require some work and one of course sees what’s to be replaced by
looking at the thing at point, I can live with this for the moment.</p>
<h3 id="the-code">The code</h3>
<p>As one might imagine, the code is actually quite straightforward—it only
consists of two functions! The first one is a little helper, querying
the user for multiple pairs.</p>
<pre class="emacs-lisp"><code>(defun query-replace-many--get-queries (&amp;optional pairs)
  &quot;Get multiple `query-replace' pairs from the user.
PAIRS is a list of replacement pairs of the form (FROM . TO).&quot;
  (pcase-let* ((`(,from ,to ,delim ,arg)
                (query-replace-read-args
                 (thread-last
                   (list &quot;Query replace many&quot;
                         (cond ((eq current-prefix-arg '-) &quot;backward&quot;)
                               (current-prefix-arg         &quot;word&quot;))
                         (when (use-region-p) &quot;in region&quot;))
                   (seq-keep #'identity)
                   ((lambda (seq) (mapconcat #'identity seq &quot; &quot;))))
                 nil))                  ; no regexp-flag
               (from-to
                (cons (regexp-quote from)
                      (replace-regexp-in-string &quot;\\\\&quot; &quot;\\\\&quot; to t t))))
    ;; HACK: Since the default suggestion of replace.el will be the last
    ;; one we've entered, an empty string will give us exactly that.
    ;; Instead of trying to fight against this, use it in order to
    ;; signal an exit.
    (if (member from-to pairs)
        (list pairs delim arg)
      (query-replace-many--get-queries (push from-to pairs)))))</code></pre>
<p>The actual <code>query-replace-many</code> function now just reads some pairs from
the user by virtue of the above function, and then calls
<code>perform-replace</code> with an appropriately generated regular expression.</p>
<pre class="emacs-lisp"><code>(defun query-replace-many
    (pairs &amp;optional delimited start end backward region-noncontiguous-p)
  &quot;Like `query-replace', but query for several replacements.
Query for replacement PAIRS until the users enters an empty
string (but see `query-replace-many--get-queries').

The optional arguments DELIMITED, START, END, BACKWARD, and
REGION-NONCONTIGUOUS-P are as in `query-replace' and
`perform-replace', which see.&quot;
  (interactive
   (let ((common (query-replace-many--get-queries)))
     (list (nth 0 common)     (nth 1 common)
           (if (use-region-p) (region-beginning))
           (if (use-region-p) (region-end))
           (nth 2 common)     (if (use-region-p)
                                (region-noncontiguous-p)))))
  (perform-replace
   (concat &quot;\\(?:&quot; (mapconcat #'car pairs &quot;\\|&quot;) &quot;\\)&quot;) ; build query
   (cons (lambda (pairs _count)
           (cl-loop for (from . to) in pairs
                    when (string-match from (match-string 0))
                    return to))
         pairs)
   :query :regexp delimited nil nil start end backward
   region-noncontiguous-p))</code></pre>
<p>And that’s it! As an aside, calling <code>query-replace-many</code> also works
from lisp; <code>(query-replace-many '(("1" . "2") ("2" . "1")))</code> has exactly
the effect one would imagine it to have. As I said, everything is
conveniently packaged up on <a href="https://gitlab.com/slotThe/query-replace-many">GitLab</a> and
<a href="https://github.com/slotThe/query-replace-many">GitHub</a>—get it while it’s hot!</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>This isn’t <em>quite</em> what’s actually done, but it’s the right mental
model to have (since this is how the function behaves). The gory
details are that we use the fact that <code>replace.el</code>’s default
suggestion is always the last query that was entered by the user.
What happens on an empty input is quite deep in the bowels of
<code>query-replace-read-from</code>. Since replacing these massive internal
functions sounds like a real pain, leaning on that functionality
suddenly appears much more reasonable. Thus, when we get back a
query that has already been entered in one way or another, we bail
out.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Calling Emacs from XMonad</title>
    <link href="https://tony-zorman.com/posts/calling-emacs-from-xmonad.html" />
    <id>https://tony-zorman.com/posts/calling-emacs-from-xmonad.html</id>
    <published>2022-05-25T00:00:00Z</published>
    <updated>2022-05-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2022-05-25
      
      
        &thinsp;·&thinsp; last modified: 2023-03-07
      
      
        &thinsp;·&thinsp; <span title="1742 words">7 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>, <a title="All pages tagged 'haskell'." href="/tags/haskell.html" rel="tag">haskell</a>, <a title="All pages tagged 'xmonad'." href="/tags/xmonad.html" rel="tag">xmonad</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>In the post about my <a href="/posts/phd-workflow/2022-05-01-my-phd-workflow.html#citations">research workflow</a>, I briefly mentioned having to
call Emacs—or other external programs—from within XMonad. I figured
that this was perhaps something that could be of use to more people than
just me. After a little bit of deliberation and coming up with a
generic enough API, I decided to turn it into an XMonad module!</p>
<p>These changes now live as part of the <a href="https://github.com/xmonad/xmonad-contrib">xmonad-contrib</a> repository and
are—from version 0.17.1 onwards—available for everyone to try out.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>
I’d like to use this opportunity to both showcase the module—how and why
one would use it—and talk a little bit about its only redeeming
implementation detail.</p>
<!--more-->
<h2 id="main-use-cases">Main use cases</h2>
<p>Wouldn’t it be neat to have some kind of <a href="https://en.wikipedia.org/wiki/Domain-specific_language">EDSL</a> for spawning external
processes? Something where one can just compose Haskell functions
together, not having to worry about the actual underlying string
manipulations? Something that’s composable, so that one does not have
to write the same <code>"emacsclient -c -a '' …"</code> or <code>"alacritty --working-directory …"</code> prefix over and over again? Well, at least
that’s what I thought on some rainy afternoon a few months ago.</p>
<h3 id="scratchpads">Scratchpads</h3>
<p>The first use case that I came up with was <a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Util-NamedScratchpad.html">scratchpad</a>s. The idea of
these things is simple: while we normally don’t like floating windows,
it’s quite convenient to have some of them around that one can bring to
the current workspace, as well as hide, with a single keybinding. This
is useful for things like email, a calendar, a daily agenda, a
calculator, etc.</p>
<p>For scratchpads to work reliably, windows need to have some unique
characteristic they can be recognised by, like a special <a href="https://tronche.com/gui/x/icccm/sec-4.html#WM_CLASS">class or
instance name</a>. Endowing an application with additional properties
sounds exactly like what our EDSL should be good at, so let’s try that!</p>
<p>Using the new features of <code>XMonad.Util.Run</code>, we could spawn an Emacs
frame with a special name for our scratchpad hooks to grab onto, and
execute <code>notmuch</code>:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">mailSession ::</span> <span class="dt">X</span> <span class="dt">String</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>mailSession <span class="ot">=</span> getInput <span class="op">$</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  inEditor <span class="op">&gt;-&gt;</span> setFrameName mailInstName</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>           <span class="op">&gt;-&gt;</span> eval (function <span class="st">&quot;notmuch&quot;</span>)</span></code></pre></div>
<p>You can read the <code>&gt;-&gt;</code> operator a little like a pipe, where you start
with what you want and thread that information through to the end: “I
want an editor with a certain frame name that also starts up notmuch”.</p>
<p>In full, the above function would produce the string (broken into a few
lines for better readability)</p>
<pre><code>&quot;emacsclient -c -a ''
             -F '(quote (name . \&quot;notmuch-scratch\&quot;))'
             --eval '(notmuch)'&quot;</code></pre>
<p>which would be quite bothersome to type indeed.</p>
<p>Because the type of <code>mailSession</code> is <code>X String</code> and not just <code>String</code>,
the setup for this is a little bit different than usual when using
scratchpads. You would use it like this:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">myScratchpads ::</span> <span class="dt">X</span> [<span class="dt">NamedScratchpad</span>]</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>myScratchpads <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- First, get the finished string.</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  mailSession <span class="ot">&lt;-</span> getInput <span class="op">$</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    inEditor <span class="op">&gt;-&gt;</span> setFrameName mailInst <span class="op">&gt;-&gt;</span> eval (elispFun <span class="st">&quot;notmuch&quot;</span>)</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Now we can insert it into our scratchpads as normal.</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>  <span class="fu">pure</span> [ <span class="dt">NS</span> <span class="st">&quot;Mail&quot;</span> mailSession (appName <span class="op">=?</span> mailInst) quake ]</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a> <span class="kw">where</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>  mailInst <span class="ot">=</span> <span class="st">&quot;notmuch-scratch&quot;</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>  quake    <span class="ot">=</span> customFloating <span class="op">$</span> <span class="dt">RationalRect</span> <span class="dv">0</span> <span class="dv">0</span> <span class="dv">1</span> (<span class="dv">4</span> <span class="op">/</span> <span class="dv">5</span>)</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a><span class="co">-- The call to @namedScratchpadManageHook@ in the manageHook also</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a><span class="co">-- needs to be slightly adjusted.</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="ot">myManageHook ::</span> <span class="dt">ManageHook</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>myManageHook <span class="ot">=</span> <span class="fu">mconcat</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>  [ …</span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>  , namedScratchpadManageHook <span class="op">=&lt;&lt;</span> liftX myScratchpads</span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>  ]</span></code></pre></div>
<p>Normally you would also add your <code>myScratchpads</code> list to all calls of
<code>namedScratchpadAction</code>; e.g., when you define the keys to call your
scratchpads. However, since the former lives in <code>X</code> now, this doesn’t
work anymore! Thankfully,
<a href="https://github.com/xmonad/xmonad-contrib/commit/3fc830aa09368dca04df24bf7ec4ac817f2de479">nowadays</a>
the first argument to <code>namedScratchpadAction</code> is actually unused and
only there for backwards compatibility. This means that it’s not
necessary to enter your scratchpads there at all if they are added to
your <code>manageHook</code>. For example, in the following I just provide the empty list:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>  (<span class="st">&quot;M-C-t&quot;</span>, namedScratchpadAction [] <span class="st">&quot;Mail&quot;</span>)</span></code></pre></div>
<p>This works all the same with the above definition of <code>myScratchpads</code>.</p>
<p>A full example of how a scratchpad setup would look using this machinery
can be found in <a href="https://gitlab.com/slotThe/dotfiles/-/blob/master/xmonad/.config/xmonad/src/xmonad.hs#L414">my config</a>.</p>
<h3 id="calling-emacs-in-scripts">Calling Emacs in scripts</h3>
<p>Spawning frames is nice and all, but how about something more
complicated, like Emacs’s batch mode so that we can use it properly in
scripts? No problem at all!</p>
<p>For example, I have the following snippet in my config to get the
currently selected text and call <a href="https://github.com/slotthe/arxiv-citation">arxiv-citation</a> with it to <a href="/posts/phd-workflow/2022-05-01-my-phd-workflow.html#citations">produce a
citation entry in my bibliography
files</a>:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ot">callArXiv ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">X</span> ()</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>callArXiv fun <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  url <span class="ot">&lt;-</span> getSelection  <span class="co">-- from X.U.XSelection</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>  proc <span class="op">$</span> inEmacs</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>     <span class="op">&gt;-&gt;</span> withEmacsLibs [ <span class="dt">ElpaLib</span> <span class="st">&quot;dash&quot;</span>, <span class="dt">ElpaLib</span> <span class="st">&quot;s&quot;</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>                       , <span class="dt">ElpaLib</span> <span class="st">&quot;arxiv-citation&quot;</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>                       , <span class="dt">Special</span> <span class="st">&quot;~/.config/emacs/private-stuff.el&quot;</span> ]</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>     <span class="op">&gt;-&gt;</span> asBatch</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>     <span class="op">&gt;-&gt;</span> eval (progn [require <span class="st">&quot;arxiv-citation&quot;</span>, fun <span class="op">&lt;&gt;</span> asString url])</span></code></pre></div>
<p>When executed, this translates to something like</p>
<pre><code>emacs -L /home/slot/.config/emacs/elpa/dash-20220417.2250
      -L /home/slot/.config/emacs/elpa/s-20210616.619
      -L /home/slot/.config/emacs/elpa/arxiv-citation-20220510.1137/
      --batch
      --eval '(progn
                (require (quote arxiv-citation))
                (arXiv-citation &quot;&lt;url-in-the-primary-selection&gt;&quot;))'</code></pre>
<p>I certainly know which one I’d rather type—especially with ELPA
directory names changing quite frequently! On that note,
<a href="https://github.com/slotthe/arxiv-citation">arxiv-citation</a> is on MELPA now; yay!</p>
<h3 id="other-programs">Other programs</h3>
<p>As this is my main use case for it, the new features of
<code>XMonad.Util.Run</code> are quite specialised for Emacs. However, even for
other programs they may well come in handy. Drawing from the point
about scratchpads again, here is a hypothetical one that spawns a ghci
session:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>  ghci <span class="ot">&lt;-</span> proc <span class="op">$</span> inTerm <span class="op">&gt;-&gt;</span> setXClass calcInstName <span class="op">&gt;-&gt;</span> execute <span class="st">&quot;ghci&quot;</span></span></code></pre></div>
<p>Further, something that’s useful when dealing with <a href="/posts/phd-workflow/2022-05-01-my-phd-workflow.html#topics">topic-based
workspaces</a>
is spawning a terminal or an editor already in the current topic
directory:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">XMonad.Actions.TopicSpace</span>  <span class="co">-- for currentTopicDir and more</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>topicConfig <span class="ot">=</span> …</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="ot">spawnTermInTopic ::</span> <span class="dt">X</span> ()</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>spawnTermInTopic <span class="ot">=</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>  proc <span class="op">$</span> termInDir <span class="op">&gt;-$</span> currentTopicDir topicConfig</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a><span class="co">-- Optionally, modify the path to the editor with a function.</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="ot">spawnEditorInTopic ::</span> (<span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span>) <span class="ot">-&gt;</span> <span class="dt">X</span> ()</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>spawnEditorInTopic with <span class="ot">=</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>  proc <span class="op">$</span> inEditor <span class="op">&gt;-$</span> with <span class="op">&lt;$&gt;</span> currentTopicDir topicConfig</span></code></pre></div>
<p>Quite convenient if you ask me.</p>
<p>If you have or know of a use case you would like to support but which is
awkward with the current set of functions and combinators do not
hesitate to open a pull request or an issue!</p>
<h2 id="implementation-considerations">Implementation considerations</h2>
<p>The implementation is actually very straightforward—no really, check out
the
<a href="https://github.com/xmonad/xmonad-contrib/blob/master/XMonad/Util/Run.hs#L303">source</a>
if you don’t believe me!</p>
<p>One concept that’s still worth touching upon is the internal use of
<a href="https://github.com/spl/dlist#references">difference list</a>s. The basic idea of these things is that, instead of
concatenating strings one by one, we create functions <code>String -&gt; String</code>
and then use function composition to do the work for us:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Ordinary string concatenation</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;string1&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string2&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string3&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string4&quot;</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Using difference lists:</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>  string1, string2, string3,<span class="ot"> string4 ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>  string1 s <span class="ot">=</span> <span class="st">&quot;string1&quot;</span> <span class="op">&lt;&gt;</span> s</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>  string2 s <span class="ot">=</span> …</span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>  string1 <span class="op">.</span> string2 <span class="op">.</span> string3 <span class="op">.</span> string4 <span class="op">$</span> <span class="st">&quot;&quot;</span></span></code></pre></div>
<p>Note how we have to apply the entire thing to <code>""</code> at the end in order
to actually get a string back. As a concrete example, assuming we have
set <code>"Emacs"</code> as our editor, the <code>inEditor</code> function would essentially
be</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="ot">inEditor ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>inEditor s <span class="ot">=</span> <span class="st">&quot; Emacs &quot;</span> <span class="op">&lt;&gt;</span> s</span></code></pre></div>
<p>There are some further considerations to be made, since we are in the
<code>X</code> monad and thus the type is actually <code>X (String -&gt; String)</code> instead
of just <code>String -&gt; String</code>, but that isn’t too important for us here.</p>
<p>Difference lists have some performance advantages over the traditional
concatenation of strings. The concatenation <code>(&lt;&gt;)</code> on strings is left
associative by default and so</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;string1&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string2&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string3&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string4&quot;</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>  ≡ ((<span class="st">&quot;string1&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string2&quot;</span>) <span class="op">&lt;&gt;</span> <span class="st">&quot;string3&quot;</span>) <span class="op">&lt;&gt;</span> <span class="st">&quot;string4&quot;</span></span></code></pre></div>
<p>However, the complexity characteristics of this operation are working
against us here; the definition of <code>(&lt;&gt;)</code> on <code>String</code><a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> is</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="ot">(&lt;&gt;) ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>[]       <span class="op">&lt;&gt;</span> ys <span class="ot">=</span>           ys</span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>(x <span class="op">:</span> xs) <span class="op">&lt;&gt;</span> ys <span class="ot">=</span> x <span class="op">:</span> xs <span class="op">&lt;&gt;</span> ys</span></code></pre></div>
<p>We are merely traversing the first string, leaving the second one
completely untouched (and unevaluated!). All in all, this means that
<code>s₁ &lt;&gt; s₂</code> is in <code>𝓞(|s₁|)</code>; given an expression of the form</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>  ((<span class="st">&quot;string1&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string2&quot;</span>) <span class="op">&lt;&gt;</span> <span class="st">&quot;string3&quot;</span>) <span class="op">&lt;&gt;</span> <span class="st">&quot;string4&quot;</span></span></code></pre></div>
<p>we will have to walk over <code>"string1"</code> three times! What we actually
want is a right-associative ordering—exactly what function compositions
gives us. Spelled out,</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>    string1 <span class="op">.</span> string2 <span class="op">.</span> string3 <span class="op">.</span> string4 <span class="op">$</span> <span class="st">&quot;&quot;</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>  ≡ string1 (string2 (string3 (string4 <span class="st">&quot;&quot;</span>)))</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>  ≡ <span class="st">&quot;string1&quot;</span> <span class="op">&lt;&gt;</span> (<span class="st">&quot;string2&quot;</span> <span class="op">&lt;&gt;</span> (<span class="st">&quot;string3&quot;</span> <span class="op">&lt;&gt;</span> (<span class="st">&quot;string4&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;&quot;</span>)))</span></code></pre></div>
<p>which yields the desired behaviour. In fact, this is so canonical that
instead of using <code>(.)</code>, we could have also—perhaps a bit
confusingly—used <code>(&lt;&gt;)</code> directly:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a>    string1  <span class="op">.</span> string2  <span class="op">.</span> string3  <span class="op">.</span> string4</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>  ≡ string1 <span class="op">&lt;&gt;</span> string2 <span class="op">&lt;&gt;</span> string3 <span class="op">&lt;&gt;</span> string4</span></code></pre></div>
<p>This is the fact that the <em>endomorphisms</em> for any type <code>a</code>—the functions
<code>a -&gt; a</code>—form a <em>monoid</em>. That is to say that they come equipped with
an associative an unital operation: function composition. In Haskell,
<code>(&lt;&gt;)</code> is, in some sense,
<a href="https://www.haskell.org/tutorial/classes.html">overloaded</a> so that it
can be used with any monoidal composition one can think of!<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a></p>
<p>The attentive reader may have concluded that the pipe operator that we
called <code>(&gt;-&gt;)</code> above is really just <code>(&lt;&gt;)</code> in disguise, and that’s
exactly right! I, however, thought that for people not familiar with
Haskell, giving it a pipe-like appearance would be more conceptually
amenable to the threading idea.</p>
<p>I haven’t benchmarked this, so it’s not entirely clear to me whether
performance is actually relevant in this situation<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a>, but using
difference lists just feels right here, and so I did.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I have to say that I’m quite satisfied with this API. In fact, if I
compare it with the old code that only resided within my personal
config, this new version is even a bit more ergonomic in a few places,
despite having essentially no user-specific strings hardcoded anywhere!
As I said before, if you try this and find something missing, do let me
know and we’ll probably find a solution! If you try this and find it
useful, also let me know :)</p>
<p>Of course, technically none of this needs to live only inside your
XMonad config at all. In combination with the excellent <a href="https://hackage.haskell.org/package/turtle">turtle</a>
library, I reckon it would be quite easy to produce Haskell versions of
cool tools like magit.sh.<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a> Go nuts!</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>Alternatively, one could use the git versions of <code>xmonad</code> and
<code>xmonad-contrib</code>; refer to
<a href="https://xmonad.org/INSTALL.html">INSTALL</a> for more information.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>Really, this is the definition of <code>(++)</code> for arbitrary lists <code>[a]</code>
and <code>(&lt;&gt;) = (++)</code> for <code>String = [Char]</code>, but let’s not get into
that here.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>Really, for any <em>semigroup</em>, which is a slightly weaker notion of
an operation that is merely associative, but doesn’t necessarily
have a unit.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>I suspect that the answer is “probably not”—that didn’t stop me,
however!<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>Available <a href="https://github.com/alphapapa/magit.sh">here</a>. I also
maintain a slightly modified and POSIX shell compatible version
<a href="https://gitlab.com/slotThe/dotfiles/-/blob/master/scripts/.scripts/magit.sh">here</a>.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>My PhD Research Workflow</title>
    <link href="https://tony-zorman.com/posts/my-phd-workflow.html" />
    <id>https://tony-zorman.com/posts/my-phd-workflow.html</id>
    <published>2022-05-01T00:00:00Z</published>
    <updated>2022-05-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2022-05-01
      
      
        &thinsp;·&thinsp; last modified: 2022-05-23
      
      
        &thinsp;·&thinsp; <span title="2284 words">10 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>, <a title="All pages tagged 'maths'." href="/tags/maths.html" rel="tag">maths</a>, <a title="All pages tagged 'xmonad'." href="/tags/xmonad.html" rel="tag">xmonad</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>After reading <a href="https://castel.dev/post/research-workflow/">Gilles Castel</a>’s excellent blog post about his research
workflow, I decided that it was as good a time as any to write about
mine—deeming it novel enough to hopefully contribute something to the
discussion.</p>
<p>Just like Castel, I’m a new PhD student in mathematics, which means no
lab work and—in my case—no code. Just you and your inability to
understand basic concepts. As such, I often scribble things down on
paper or a blackboard first and, when sufficiently convinced that the
information is worth keeping around, type it up. Typesetting something
is a surprisingly effective way to catch errors in handwritten
manuscripts!</p>
<p>As basically my entire digital life happens in either <a href="https://www.gnu.org/software/emacs/">Emacs</a> or
<a href="https://xmonad.org/">XMonad</a>, my setup is heavily skewed in that direction; I will make use
of these tools almost every step of the way.
<!--more-->
As such, there is a lot of tangential almost relevant bits that I could
cover here. However, since these aren’t directly related to my
<em>research</em> workflow—and there is a lot of great resources out there
already—I decided to not do this here.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></p>
<h2 id="high-level-structure">High level structure</h2>
<h3 id="topics">Topics</h3>
<p>XMonad has a module called <a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Actions-TopicSpace.html">TopicSpace</a>, which upgrades the X11
workspace—virtual desktop—concept to so-called topics. These are
workspaces with a “theme” associated to them; for example, I have a
topic for every project that I’m currently working on. This results in
a clean separation of concerns. Plus, I always know where my windows
are!</p>
<p>Every topic has a directory and a “startup hook”, firing when the topic
is switched to and empty, associated to it. While most convenient for
programming related tasks—e.g., spawn <code>ghcid</code> in the relevant directory
or automatically build and open this website—it’s also quite convenient
for mathematical projects.</p>
<p>I have set up special keybindings to bring up an Emacs session in the
topic directory, or spawn a terminal there. Switching to topics is done
fuzzily via the XMonad prompt, which means I only have to type a few
characters to get to my destination. This makes it feasible to have 30
topics, instead of the usual 9 or so, in the first place. As a result,
it’s rather fast to go from thinking about a certain problem to working
on it. When I’m already inside a project, I leverage Emacs’s built-in
<code>project.el</code> library to search through files and the like.</p>
<p><img class="pure-img" src="../images/phd-workflow/topics.gif" alt="Navigation example"></p>
<h3 id="files">Files</h3>
<p>Here I keep things relatively simple; I have a big “library” directory
in which essentially all books or papers that I’ve ever read reside.
This may sound a bit chaotic, but since I never interact with this
as-a-directory it is actually the easiest and cleanest solution for me.</p>
<p>To keep a bit of order, all files are named in a consistent and
descriptive way: <code>authors_title.pdf</code>, where <code>authors</code> is a list of last
names of all authors separated by hyphens and <code>title</code> is the title of
the work, also separated by hyphens. For example:</p>
<pre><code>    pastro-street_double-of-a-monoidal-category.pdf</code></pre>
<p>Also in this directory are <code>.xopp</code> files, when I scribble on the
relevant PDFs in <a href="https://xournalpp.github.io/">xournalpp</a>; more on that later.</p>
<p>Instead of navigating to it, all interaction with the library is done
via <a href="https://github.com/slotthe/hmenu">hmenu</a>, a small wrapper around <a href="https://tools.suckless.org/dmenu/">dmenu</a> to facilitate this kind of
behaviour. I merely have to press <code>M-y</code><a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> and can then fuzzy search
through the directory. Once I’ve made a choice, PDFs are automatically
opened in <a href="https://pwmt.org/projects/zathura/">zathura</a> and <code>.xopp</code> files are opened in xournalpp.</p>
<p><img class="pure-img" src="../images/phd-workflow/hmenu.gif" alt="example hmenu usage"></p>
<p>My bibliography is organised in a similar spirit; see
<a href="#citations">Citations</a>.</p>
<h2 id="note-taking">Note taking</h2>
<h3 id="handwritten-notes">Handwritten notes</h3>
<p>For handwritten notes I… use real paper! A little elaboration is
probably in order, having talked about <code>.xopp</code> files and xournalpp
above. I do have a Wacom tablet lying around and I’m quite happy
annotating PDFs with it. In lieu of printing everything out, this
alleviates a little bit of the usual pain with reading papers, like
coming back to one three weeks later and getting stuck on the same
calculation as last time. I do love those annotations!</p>
<p>However, there is just something deeply psychologically pleasing about
ordinary pen and paper—nothing beats drawing up the first version of
many ideas there. It’s a very “pure” experience: there’s no noise or
distractions, nothing that could break, no additional layer of
abstraction between you and the maths. Chalkboards—but not whiteboards,
with their ever empty markers—fall into this category as well,
especially when collaborating with others.</p>
<p>Not without my quirks (as I’m sure you’ve noticed), I’m a bit picky
about the particular writing setup. It’s either completely white A5<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>
paper, paired with a good (mechanical) pencil/a fine pen, or thick
dotted paper, paired with a fountain pen.</p>
<p>Quite enjoying the experience, I tend to write quite a lot of
manuscripts by hand first. Of course, anything that’s supposed to be
permanent should be typed up properly!</p>
<h3 id="digital-notes">Digital notes</h3>
<p>Not wanting to go insane, I use LaTeX for all of my digital note taking.
My writing setup for <code>.tex</code> files is pretty similar to <a href="https://karthinks.com/software/latex-input-for-impatient-scholars/">Karthik
Chikmagalur</a>’s—whose excellent post you should definitely check out—so I
will not belabour the point too much here. The tl;dr is <a href="https://www.gnu.org/software/auctex/">AUCTeX</a>,
<a href="https://github.com/cdominik/cdlatex">CDLaTeX</a>, and <a href="https://github.com/ymarco/auto-activating-snippets">aas</a>.</p>
<p><img class="pure-img" src="../images/phd-workflow/input.gif" alt="LaTeX input example"></p>
<p>In case you’re not used to <code>prettify-symbols-mode</code>: the inserted LaTeX
code was</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">\begin</span>{<span class="ex">definition</span>} <span class="kw">\label</span>{<span class="ex">def:day-convolution</span>}</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  The <span class="fu">\emph</span>{Day convolution} of two functors <span class="ss">$F$</span> and <span class="ss">$G$</span> is</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  <span class="ss">\[</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="ss">    F * G </span><span class="sc">\defeq</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="ss">      </span><span class="sc">\int</span><span class="ss">^{C,D </span><span class="sc">\in</span><span class="ss"> </span><span class="sc">\cc</span><span class="ss">} </span><span class="sc">\cc</span><span class="ss">(C </span><span class="sc">\otimes</span><span class="ss"> D, </span><span class="sc">\blank</span><span class="ss">) </span><span class="sc">\otimes</span><span class="ss"> FC </span><span class="sc">\otimes</span><span class="ss"> GD.</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="ss">  \]</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="kw">\end</span>{<span class="ex">definition</span>}</span></code></pre></div>
<p>I do use some smaller packages not mentioned in Chikmagalur’s article,
like <a href="https://github.com/oantolin/math-delimiters">math-delimiters</a> and <a href="https://github.com/slotthe/change-env">latex-change-env</a>. The former is for
quickly changing between inline and display math, complete with slurping
punctuation symbols into display math and barfing them out of inline
math. For example, “<code>$1 + 1$.</code>” becomes “<code>\[1 + 1.\]</code>” (with line
breaks) and back.</p>
<p>The <code>latex-change-env</code> package is for changing between different kinds
of environments, including display math, while offering to rename labels
across the project if necessary. When deleting a label from an
environment, it also remembers this for the session!<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a></p>
<p><img class="pure-img" src="../images/phd-workflow/label-renaming.gif" alt="latex-change-env showcase"></p>
<p>One neat feature of AUCTeX that I find myself using more and more often
lately is the in-buffer preview.<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a> Usually when writing a draft I’m
not that interested in how exactly something looks in the PDF—that part
comes later, believe me. In cases like these, just calling
<code>preview-buffer</code> is quite convenient and lets me use the screen real
estate that a PDF viewer would have taken up for something else.</p>
<p><img class="pure-img" src="../images/phd-workflow/preview.gif" alt="latex-preview showcase"></p>
<p>I always use pure LaTeX for writing papers, drafts, or presentations.
However, I also take lots of notes in <a href="https://orgmode.org/">org-mode</a>, which, as a crude
first approximation, is something like a markup language that’s <em>very</em>
well integrated into Emacs.</p>
<p>For the actual note-taking, I use the venerable <a href="https://www.orgroam.com/">org-roam</a>—a free
software alternative to the proprietary Roam Research program—to jot
down things that I’d like to remember for more than three days.
Org-roam describes itself as a “plain-text personal knowledge management
system”, which fits the bill pretty well. In short, it’s a note taking
system in the spirit of the <a href="https://en.wikipedia.org/wiki/zettelkasten">Zettelkasten</a> method, which is essentially
about having lots of notes with lots of backlinks to related concepts:</p>
<p><img class="pure-img" src="../images/phd-workflow/backlinks.png" alt="org-roam showcase"></p>
<p>In fact, using <a href="https://github.com/org-roam/org-roam-ui">org-roam-ui</a>, one can even visualise the entire
Zettelkasten as an interactive and pretty graph in which notes become
nodes and backlinks become edges!</p>
<div class="pure-g">
<div class="pure-u-1-2">
<img class="pure-img" src="../images/phd-workflow/org-roam-ui-close.png" alt="org-roam-ui example zoomed-in">
</div>
<div class="pure-u-1-2">
<img class="pure-img" src="../images/phd-workflow/org-roam-ui-far.png" alt="org-roam-ui example zoomed-out">
</div>
</div>
<p>Org-roam <a href="https://github.com/org-roam/org-roam#configuration">suggests
keybindings</a> for all
of the most important concepts: creating notes, inserting them, showing
all of the backlinks of a file, etc. An important extra that I’ve added
is having two “types” of notes: <code>reference</code>s, where things that I
learned but are otherwise known reside, and <code>novel</code>s, where I put my own
ideas.</p>
<p>As I’m predisposed to quite easily forget details, I regularly engage
with my Zettelkasten, so as to keep things fresh in my mind. Reading
through all of the notes that are relevant to what I’m currently working
on, creating new backlinks, filling in gaps, even deleting old
information and re-organising some local region of the graph. Indeed, I
tag every new entry as a <code>draft</code> until further notice, forcing me to go
back there especially. This results in pretty good recollection of the
most important facts, even with my brain.</p>
<h2 id="staying-up-to-date">Staying up to date</h2>
<p>I use <a href="https://github.com/skeeto/elfeed">elfeed</a> to query the <a href="https://arxiv.org/">arXiv</a> for new preprints that are of
interest to me. Thankfully, the fields I’m subscribed to tend to be
moving slow-ish and so I can manage to at least read the abstract of
every paper that pops up in my feed. There is also <a href="https://gitlab.com/slotThe/dotfiles/-/blob/afa8fd39cea2647152038e3f4dd42f1dbd66c413/emacs/.config/emacs/lisp/rss.el#L61">a little bit of
elisp</a>
involved to print arXiv entries in a more readable way than the default
formatting.</p>
<p>When the abstract interests me, I usually directly download the paper
into my library and open it with zathura. This is fully automated via
<a href="https://github.com/slotthe/arxiv-citation">arxiv-citation</a>—more on that later. I merely have to press <code>C-c d</code>
while looking at a paper and magic happens!</p>
<p><img class="pure-img" src="../images/phd-workflow/elfeed.gif" alt="elfeed showcase"></p>
<p>In the above gif, on the right-hand side you can see a score associated
to each entry. While reading every abstract has worked quite well for
me thus far, it’s nice to get the papers that are “probably interesting”
high up, so that I’m more likely to notice them sooner rather than
later. I use <a href="https://github.com/sp1ff/elfeed-score">elfeed-score</a> for this, which integrates seamlessly into
the rest of the machinery. It compares certain features of the entry
(like the title and abstract) with a list of regular expressions,
increasing the total score of the entry every time it matches something.</p>
<p>Speaking of the arXiv, in XMonad I have bound <code>M-s a</code> to look up the
given string there. Likewise, <a href="https://zbmath.org/">zbmath</a> is searched with <code>M-s z</code>. When
these commands get a “universal argument”—an Emacs concept that XMonad
borrowed—they automatically start a search with the current selection
instead. Briefly, pressing <code>M-u</code> before a command can modify it in
different ways. All of my search commands act on the <a href="https://www.jwz.org/doc/x-cut-and-paste.html">primary
selection</a> when given such an argument; <code>M-u M-s &lt;letter&gt;</code> will look up
the currently selected text on the relevant “search engine”. One
instance where this is useful is for quickly switching between the arXiv
and zbmath:</p>
<p><img class="pure-img" src="../images/phd-workflow/selected-search.gif" alt="XMonad.Actions.Search showcase"></p>
<h3 id="citations">Citations</h3>
<p>For citation management, I use a very simple system—no Zotero, JabRef,
or similar technology. Concretely, this means that I have a blessed
bibliography file somewhere within my home directory and I either
symlink (when I’m writing something alone) or copy (when working with at
least one coauthor) the file into the relevant project directory. In
case of a copy operation, I only have to update a single variable in
Emacs (<code>arxiv-citation-bibtex-files</code>), which is good enough for me and
doesn’t seem to warrant a slightly more automated, yet probably much
more complicated solution.</p>
<p>Adding new citations is done via the now aptly named Emacs package
<a href="https://github.com/slotthe/arxiv-citation">arxiv-citation</a><a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a> with <a href="https://gitlab.com/slotThe/dotfiles/-/blob/afa8fd39cea2647152038e3f4dd42f1dbd66c413/xmonad/.config/xmonad/src/xmonad.hs#L576">a bit of
plumbing</a>
on the XMonad side to get Emacs going. The basic idea is that—given an
arXiv or zbmath link—we first look up the paper on zbmath to see if it
was published and, if not, just use the arXiv data to construct our own
bibliography entry instead. By default, my keybinding for this acts on
the primary selection, so I merely have to highlight the link, press
<code>M-o a</code>, sit back, and enjoy the show. The following gif should help
drive home the point, also showcasing the format of a not yet published
paper and a published one.</p>
<p><img class="pure-img" src="../images/phd-workflow/arXiv-citation.gif" alt="arXiv-citation showcase"></p>
<h2 id="final-thoughts">Final thoughts</h2>
<p>And that’s it! If nothing else, this post helped me to nail down some
ideas that I had lying around and got me to finally clean up and publish
many of the extensions talked about here—that’s already a win in my
book.</p>
<p>I’m sure that some details will change over the course of the next three
years as I mature mathematically and my needs change, but overall I feel
pretty comfortable with this setup.</p>
<h5 id="addendum">Addendum</h5>
<p>Thanks to everyone who reached out! I received some inquiries as to my
configurations, so here are the most important bits again, for your
convenience:
<a href="https://gitlab.com/slotThe/dotfiles/-/tree/master/emacs">my Emacs config</a>,
<a href="https://gitlab.com/slotThe/dotfiles/-/tree/master/xmonad">my XMonad config</a>,
<a href="https://www.orgroam.com/">org-roam</a>, <a href="https://github.com/oantolin/math-delimiters">math-delimiters</a>, <a href="https://github.com/slotthe/arxiv-citation">arxiv-citation</a>, <a href="https://github.com/slotthe/change-env">latex-change-env</a>,
<a href="https://github.com/slotthe/hmenu">hmenu</a>.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>If you’d like some examples: being employed at a university also
means I have to worry a bit about efficiently dealing with
bureaucracy (<a href="https://notmuchmail.org/">notmuch.el</a>), keeping some sort of up-to-date
calendar and readable todo-notes (<a href="https://orgmode.org/">org-mode</a> and goodies, as well
as integration via <a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Prompt-OrgMode.html">XMonad’s OrgMode prompt</a>), accessing the
universities internal nextcloud server (<a href="https://gitlab.com/hperrey/khalel">khalel</a> and <code>davfs2</code> or
<code>TRAMP</code>), … You get the idea.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>I will be using Emacs style notation throughout the article. This
means that, for example, <code>C-x a</code> should be read as “hold down
control and press x, then release both and press a”. You can of
course safely ignore this, since the keys just serve illustrative
purposes. An important note for Emacs users, lest anyone be
confused: in XMonad, <code>M-</code> usually does <strong>not</strong> refer to the Meta
key, but to the <code>modMask</code> that the user specified. This is indeed
<code>&lt;Alt&gt;</code> by default, but many people understandably rebind this
straight away to something that’s less likely to interfere with
other programs. In my case, that’s the Super key, so <code>M-s</code> means
<code>&lt;Super&gt;-s</code> and not <code>&lt;Alt&gt;-s</code>.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>Although, admittedly, when drawing up large diagrams I’m sometimes
forced to switch to A4 paper in landscape mode.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>This is based on the hash of the contents of the environment—if
that changes, the label is “lost”; though it can of course still
be retrieved manually from the relevant hash map.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>This is, in part, due to the new <code>pixel-scroll-precision-mode</code> in
Emacs 29, making use of XInput 2.4 functionality. It makes
scrolling through buffers that are quite dense with pictures
rather smooth.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6"><p>Ostensibly, this should be an XMonad module, as it does not
necessarily have anything to do with Emacs itself. However, I had
already written the elfeed integration and so the most annoying
part (scraping the arXiv xml for certain bits) was already done.
On the other hand, there are more Emacs than XMonad users, so
perhaps doing it like this will help more people anyways.<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>

</feed>
