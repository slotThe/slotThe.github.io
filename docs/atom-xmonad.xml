<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Tony Zorman · Blog</title>
    <link href="https://tony-zorman.com/atom-xmonad.xml" rel="self" />
    <link href="https://tony-zorman.com" />
    <id>https://tony-zorman.com/atom-xmonad.xml</id>
    <author>
        <name>Tony Zorman</name>
        
        <email>mail@tony-zorman.com</email>
        
    </author>
    <updated>2023-11-13T00:00:00Z</updated>
    <entry>
    <title>Using XMonad with NixOS</title>
    <link href="https://tony-zorman.com/posts/xmonad-on-nixos.html" />
    <id>https://tony-zorman.com/posts/xmonad-on-nixos.html</id>
    <published>2023-11-13T00:00:00Z</published>
    <updated>2023-11-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2023-11-13
      
      
        &thinsp;·&thinsp; last modified: 2024-10-15
      
      
        &thinsp;·&thinsp; <span title="1173 words">5 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>, <a title="All pages tagged 'nix'." href="/tags/nix.html" rel="tag">nix</a>, <a title="All pages tagged 'xmonad'." href="/tags/xmonad.html" rel="tag">xmonad</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>
I recently switched to NixOS,
and one of the first tasks was to properly set up my window manager of choice—XMonad, of course.
Luckily, the project provides a custom flake that makes pretty very straightforward;
if you know your way around flakes and Nix, that is.
I don’t yet, so I hit some rough spots.
Since providing more documentation always sounds like a worthwhile goal,
this post is just that: a diff-by-diff guide on how everything was set up on my side.
</p>
<!--more-->
As indicated, I’ll be working with direct diffs from my configuration;
this seems to tell the story in the most accurate way.
Because scrolling through lots of diffs is about as fun as a visit to the dentist,
they are all tucked away in expandable sections
<details>
<summary>
Like this one
</summary>
Hi :)
</details>
<h2 id="setup">Setup</h2>
<p>First and foremost I should mention that XMonad does in fact have some documentation on how to set up the flake:
it’s tucked away in <a href="https://github.com/xmonad/xmonad-contrib/blob/master/NIX.md">NIX.md</a>.
The process mainly consists of two parts:
adding an <code>xmonad-contrib</code> input to your system flake,
and enabling this functionality in <code>windowManager.xmonad</code>.</p>
<details>
<summary>
Modifying the system flake
</summary>
<p><a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></p>
<div class="sourceCode" id="cb1"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">diff --git a/flake.nix b/flake.nix</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>index 4cf35e4..dedd839 100644</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="dt">--- a/flake.nix</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/flake.nix</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -6,13 +6,14 @@</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>     emacs-overlay.url = github:nix-community/emacs-overlay;</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>     hmenu.url         = gitlab:slotThe/hmenu;</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>     kmonad.url        = git+https://github.com/kmonad/kmonad?submodules=1&amp;dir=nix;</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="va">+    xmonad-contrib.url= github:xmonad/xmonad-contrib;</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>     home-manager      = {</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>       url = github:nix-community/home-manager;</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>       inputs.nixpkgs.follows = &quot;nixpkgs&quot;;</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>     };</span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>   };</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a><span class="st">-  outputs = inputs@{ self, nixpkgs, emacs-overlay, hmenu, kmonad, home-manager, ... }:</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a><span class="va">+  outputs = inputs@{ self, nixpkgs, emacs-overlay, hmenu, kmonad, xmonad-contrib, home-manager, ... }:</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>     let my-overlays = {</span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>           nixpkgs.overlays = [</span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>             emacs-overlay.overlays.default</span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -20,7 +21,7 @@</span></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a>           ];</span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>         };</span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>     in {</span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a><span class="st">-      nixosConfigurations.comonad = nixpkgs.lib.nixosSystem {</span></span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a><span class="va">+      nixosConfigurations.comonad = nixpkgs.lib.nixosSystem rec {</span></span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a>         system  = &quot;x86_64-linux&quot;;</span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a>         modules = [</span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>           ./nix/hardware-configuration.nix</span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -34,6 +35,8 @@</span></span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a>             home-manager.useUserPackages = true;</span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a>             home-manager.users.slot      = import ./nix/home.nix;</span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a>           }</span>
<span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a><span class="va">+        ] ++ xmonad-contrib.nixosModules ++ [</span></span>
<span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a><span class="va">+          xmonad-contrib.modernise.${system}</span></span>
<span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a>         ];</span>
<span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a>       };</span>
<span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a>     };</span></code></pre></div>
</details>
<p>After having added the input, making use of the flake is quite easy.<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a></p>
<details>
<summary>
Enabling the flake
</summary>
<div class="sourceCode" id="cb2"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">diff --git a/nix/configuration.nix b/nix/configuration.nix</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>index 4700e14..50b1519 100644</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="dt">--- a/nix/configuration.nix</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/nix/configuration.nix</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -63,6 +63,16 @@</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>     enable = true;</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>     layout = &quot;us&quot;;</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>     displayManager.startx.enable = true;</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="va">+    windowManager.xmonad = {</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="va">+      enable = true;</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a><span class="va">+      enableContribAndExtras = true;</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a><span class="va">+      flake  = {</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a><span class="va">+        enable   = true;</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a><span class="va">+        compiler = &quot;ghc947&quot;;</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a><span class="va">+      };</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a><span class="va">+      config = builtins.readFile ../xmonad/xmonad.hs;</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a><span class="va">+      enableConfiguredRecompile = true;</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a><span class="va">+    };</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>   };</span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>   fonts.packages = with pkgs; [</span></code></pre></div>
</details>
<p>And that’s really it!
No need to write a custom <code>launch</code> function and similar shenanigans,
the flake takes care of all of those details for you—pretty neat, I think;
thanks <a href="https://github.com/lsleary">Leary</a>!</p>
<h2 id="primitive-emacs-integration">Primitive Emacs integration</h2>
<p>Though not directly relevant to making the flake work,
a nice-to-have feature is Emacs support.
One could <a href="https://srid.ca/xmonad-conf-ide">create a cabal project</a> to get real <code>haskell-language-server</code> support,
but that seems a bit overkill to me.
I don’t really need more than a <code>ghci</code> session for my configuration<!--
-->—anything complicated enough to warrant a language server should immediately be upstreamed into <code>xmonad-contrib</code>.</p>
<p>In Emacs’s <code>haskell-mode</code>,
executing <code>haskell-interactive-bring</code> (bound to <code>C-c C-c</code> by default)
brings up a <code>ghci</code> session.<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>
Rather obviously, this fails out of the box.
It tries to call the global <code>ghci</code>,
which doesn’t come from the flake,
and is thus not equipped with <code>xmonad-contrib</code> and other dependencies that I might have.</p>
<p>The low-tech solution I chose here is twofold;
first, I outsourced starting the Emacs daemon from my xinitrc to my XMonad configuration file.
In this way, the resulting Emacs instance comes equipped with the <code>$XMONAD_GHC</code> environment variable.</p>
<details>
<summary>
Moving Emacs
</summary>
<div class="sourceCode" id="cb4"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">diff --git a/nix/modules/emacs.nix b/nix/modules/emacs.nix</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>index 794f636..fad9cd0 100644</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="dt">--- a/nix/modules/emacs.nix</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/nix/modules/emacs.nix</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -1,8 +1,6 @@</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a> { config, pkgs, ... }:</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a> {</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="st">-  services.emacs.enable = true; # Start as daemon</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="st">-</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>   xdg.configFile.&quot;emacs&quot;.source = config.lib.my.mkSymlink &quot;emacs&quot;;</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>   home.packages = with pkgs; [</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a><span class="kw">diff --git a/xinitrc/.xinitrc b/xinitrc/.xinitrc</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>index c9a6958..b8176bd 100755</span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a><span class="dt">--- a/xinitrc/.xinitrc</span></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/xinitrc/.xinitrc</span></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -32,10 +32,6 @@ kmonad ~/.config/kmonad/config.kbd &amp;</span></span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a> # 14dec2019</span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a> redshift -l 55.7:12.6 -t 6500K:3200K -b 1.0:0.8 &amp;</span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a><span class="st">-# Start emacs as a daemon.</span></span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a><span class="st">-emacs --daemon &amp;</span></span>
<span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a><span class="st">-emacs --daemon=eshell &amp;</span></span>
<span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a><span class="st">-</span></span>
<span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a> # Hide mouse cursor when idle.</span>
<span id="cb4-27"><a href="#cb4-27" aria-hidden="true" tabindex="-1"></a> unclutter --ignore-scrolling &amp;</span>
<span id="cb4-28"><a href="#cb4-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-29"><a href="#cb4-29" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -46,4 +42,4 @@ wallpaper-changer &amp;</span></span>
<span id="cb4-30"><a href="#cb4-30" aria-hidden="true" tabindex="-1"></a> compton --blur-method kawase --blur-strength 5 --config ~/.config/compton/compton.conf &amp;</span>
<span id="cb4-31"><a href="#cb4-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-32"><a href="#cb4-32" aria-hidden="true" tabindex="-1"></a> # Start the window manager.</span>
<span id="cb4-33"><a href="#cb4-33" aria-hidden="true" tabindex="-1"></a><span class="st">-exec &quot;$XMONAD_CONFIG_DIR&quot;/xmonad-x86_64-linux</span></span>
<span id="cb4-34"><a href="#cb4-34" aria-hidden="true" tabindex="-1"></a><span class="va">+exec xmonad</span></span>
<span id="cb4-35"><a href="#cb4-35" aria-hidden="true" tabindex="-1"></a><span class="kw">diff --git a/xmonad/xmonad.hs b/xmonad/xmonad.hs</span></span>
<span id="cb4-36"><a href="#cb4-36" aria-hidden="true" tabindex="-1"></a>index 5802888..933a274 100644</span>
<span id="cb4-37"><a href="#cb4-37" aria-hidden="true" tabindex="-1"></a><span class="dt">--- a/xmonad/xmonad.hs</span></span>
<span id="cb4-38"><a href="#cb4-38" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/xmonad/xmonad.hs</span></span>
<span id="cb4-39"><a href="#cb4-39" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -80,6 +80,7 @@ import XMonad.Prompt.Workspace (workspacePrompt)</span></span>
<span id="cb4-40"><a href="#cb4-40" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-41"><a href="#cb4-41" aria-hidden="true" tabindex="-1"></a> import XMonad.Util.Cursor (setDefaultCursor)</span>
<span id="cb4-42"><a href="#cb4-42" aria-hidden="true" tabindex="-1"></a> import XMonad.Util.EZConfig (additionalKeysP)</span>
<span id="cb4-43"><a href="#cb4-43" aria-hidden="true" tabindex="-1"></a><span class="va">+import XMonad.Util.SpawnOnce (spawnOnce)</span></span>
<span id="cb4-44"><a href="#cb4-44" aria-hidden="true" tabindex="-1"></a> import XMonad.Util.Loggers (logTitlesOnScreen)</span>
<span id="cb4-45"><a href="#cb4-45" aria-hidden="true" tabindex="-1"></a> import XMonad.Util.NamedScratchpad (NamedScratchpad (NS), customFloating, namedScratchpadAction, namedScratchpadManageHook, scratchpadWorkspaceTag)</span>
<span id="cb4-46"><a href="#cb4-46" aria-hidden="true" tabindex="-1"></a> import XMonad.Util.Run (EmacsLib (ElpaLib, Special), asBatch, asString, elispFun, eval, execute, executeNoQuote, findFile, getInput, inEditor, inEmacs, inProgram, inTerm, proc, progn, quote, require, setFrameName, setXClass, spawnExternalProcess, termInDir, toInput, withEmacsLibs, (&gt;&amp;&amp;&gt;), (&gt;-$), (&gt;-&gt;))</span>
<span id="cb4-47"><a href="#cb4-47" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -121,7 +122,10 @@ myConfig = def</span></span>
<span id="cb4-48"><a href="#cb4-48" aria-hidden="true" tabindex="-1"></a>   , normalBorderColor  = colorBg</span>
<span id="cb4-49"><a href="#cb4-49" aria-hidden="true" tabindex="-1"></a>   , focusedBorderColor = colorBlue</span>
<span id="cb4-50"><a href="#cb4-50" aria-hidden="true" tabindex="-1"></a>   , terminal           = &quot;alacritty&quot;</span>
<span id="cb4-51"><a href="#cb4-51" aria-hidden="true" tabindex="-1"></a><span class="st">-  , startupHook        = setDefaultCursor xC_left_ptr</span></span>
<span id="cb4-52"><a href="#cb4-52" aria-hidden="true" tabindex="-1"></a><span class="va">+  , startupHook        = do</span></span>
<span id="cb4-53"><a href="#cb4-53" aria-hidden="true" tabindex="-1"></a><span class="va">+      setDefaultCursor xC_left_ptr</span></span>
<span id="cb4-54"><a href="#cb4-54" aria-hidden="true" tabindex="-1"></a><span class="va">+      spawnOnce &quot;emacs --daemon&quot;        -- See Note [Emacs]</span></span>
<span id="cb4-55"><a href="#cb4-55" aria-hidden="true" tabindex="-1"></a><span class="va">+      spawnOnce &quot;emacs --daemon=eshell&quot;</span></span>
<span id="cb4-56"><a href="#cb4-56" aria-hidden="true" tabindex="-1"></a>   , workspaces         = topicNames topics</span>
<span id="cb4-57"><a href="#cb4-57" aria-hidden="true" tabindex="-1"></a>   , manageHook         = myManageHook</span>
<span id="cb4-58"><a href="#cb4-58" aria-hidden="true" tabindex="-1"></a>   , layoutHook         = lessBorders (Combine Union Screen OnlyFloat) layoutOrder</span>
<span id="cb4-59"><a href="#cb4-59" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -132,6 +136,14 @@ myConfig = def</span></span>
<span id="cb4-60"><a href="#cb4-60" aria-hidden="true" tabindex="-1"></a>                          -- move pointer to exact center of that window.</span>
<span id="cb4-61"><a href="#cb4-61" aria-hidden="true" tabindex="-1"></a>   }</span>
<span id="cb4-62"><a href="#cb4-62" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-63"><a href="#cb4-63" aria-hidden="true" tabindex="-1"></a><span class="va">+{- Note [Emacs]</span></span>
<span id="cb4-64"><a href="#cb4-64" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb4-65"><a href="#cb4-65" aria-hidden="true" tabindex="-1"></a><span class="va">+All of the Emacs daemons are spawned here, and *not* as systemd services</span></span>
<span id="cb4-66"><a href="#cb4-66" aria-hidden="true" tabindex="-1"></a><span class="va">+or in the ~/.xinitrc. The reason is that, in this way, Emacs inherits</span></span>
<span id="cb4-67"><a href="#cb4-67" aria-hidden="true" tabindex="-1"></a><span class="va">+all environment variables that are set by the XMonad executable, like</span></span>
<span id="cb4-68"><a href="#cb4-68" aria-hidden="true" tabindex="-1"></a><span class="va">+$XMONAD_GHC. See the bottom of this file for a use-case.</span></span>
<span id="cb4-69"><a href="#cb4-69" aria-hidden="true" tabindex="-1"></a><span class="va">+-}</span></span>
<span id="cb4-70"><a href="#cb4-70" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb4-71"><a href="#cb4-71" aria-hidden="true" tabindex="-1"></a> -- | Building my own pretty-printer.</span>
<span id="cb4-72"><a href="#cb4-72" aria-hidden="true" tabindex="-1"></a> xmobarPP :: ScreenId -&gt; X PP</span>
<span id="cb4-73"><a href="#cb4-73" aria-hidden="true" tabindex="-1"></a> xmobarPP sid = pure . filterOutWsPP [scratchpadWorkspaceTag] $ def</span></code></pre></div>
</details>
<p>All that’s left now is to set some local variable,
making Emacs aware that it should use another GHC version for my <code>xmonad.hs</code>.</p>
<details>
<summary>
Adding <code>haskell-process-path</code> to my <code>xmonad.hs</code>
</summary>
<div class="sourceCode" id="cb5"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">diff --git a/xmonad/xmonad.hs b/xmonad/xmonad.hs</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>index 933a274..185ed2e 100644</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="dt">--- a/xmonad/xmonad.hs</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/xmonad/xmonad.hs</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -881,3 +881,8 @@ switchToLayout = sendMessage . JumpToLayout</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a> -- submap from a list of @(key, action)@ pairs.</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a> basicSubmapFromList :: Ord key =&gt; [(key, action)] -&gt; Map (KeyMask, key) action</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a> basicSubmapFromList = fromList . map \(k, a) -&gt; ((0, k), a)</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a><span class="va">+--- Local Variables:</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a><span class="va">+--- mode: haskell</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a><span class="va">+--- eval: (setopt haskell-process-path-ghci (concat (or (getenv &quot;XMONAD_GHC&quot;) &quot;ghc&quot;) &quot;i&quot;))</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a><span class="va">+--- End:</span></span></code></pre></div>
</details>
<p>Now <code>C-c C-c</code> works out of the box!</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>{-} 󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>Note that <code>xmonad-contrib.modernise.${system}</code> was only temporarily needed until nixpkgs caught up with some upstream changes in XMonad.
If you still have this in your flake, you should probably remove it—it might lead to quirky behaviour upon evaluation!<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>Note the presence of the <code>enableConfiguredRecompile</code> flag—this is necessary for <code>M-q</code> recompilation to work out of the box!
I figured that out so you don’t have to.
Make sure that the revision of <code>nixpkgs</code> that you track is recent enough,
else this flag may not be available.</p>
<p>Also, don’t forget to provide XMonad with your configuration,
lest you will be greeted by a black screen upon login.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>More precisely, I have <code>C-c C-c</code> bound to</p>
<pre class="emacs-lisp"><code>(defun slot/haskell-load-and-bring ()
  &quot;Sane behaviour when loading the current file into ghci.&quot;
  (interactive)
  (save-buffer)
  (haskell-process-load-file)
  (haskell-interactive-bring))</code></pre>
<p>but this is only a small quality of life wrapper.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>XMonad Module Showcase: X.A.Search</title>
    <link href="https://tony-zorman.com/posts/x.a.search.html" />
    <id>https://tony-zorman.com/posts/x.a.search.html</id>
    <published>2023-03-19T00:00:00Z</published>
    <updated>2023-03-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2023-03-19
      
      
        &thinsp;·&thinsp; last modified: 2023-07-12
      
      
        &thinsp;·&thinsp; <span title="1313 words">6 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'haskell'." href="/tags/haskell.html" rel="tag">haskell</a>, <a title="All pages tagged 'xmonad'." href="/tags/xmonad.html" rel="tag">xmonad</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>I’d like to highlight another XMonad module that has become quite
essential to me: <a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Actions-Search.html">XMonad.Actions.Search</a>. Its premise is simple: you
enter some text into the XMonad prompt, and it queries a search engine
of your choice with this input—straightforward, and yet very effective.</p>
<!--more-->
<p>In fact, this sounds so simple that one might immediately ask: what’s
the point? The problem with regular searching is that it’s <em>slow</em>; who
has the time to open their browser, navigate to the relevant website,
and only then enter their search? In today’s world, where many things
now have their own dedicated search engines<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>, searching efficiently
becomes increasingly important. Plus, the lower barrier to entry means
that looking something up—always a good idea, with all of humanities
collected knowledge at one’s fingertips—may well become instinctive,
instead of feeling like a chore.</p>
<h2 id="functionality">Functionality</h2>
<p>The basic workflow suggested by the module simply consists of picking a
search engine, and binding it to a key via <code>promptSearch</code>—that’s it.
Additionally, there is also <code>selectSearch</code> to look up the current
(primary) selection. For example, suppose we had bound<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a></p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">searchKeys ::</span> [(<span class="dt">String</span>, <span class="dt">X</span> ())]</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>searchKeys <span class="ot">=</span>              <span class="co">-- def is an optional prompt config</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  [ (<span class="st">&quot;M-s&quot;</span>    , promptSearch def wikipedia)</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  , (<span class="st">&quot;M-u M-s&quot;</span>, selectSearch     wikipedia)</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>  ]</span></code></pre></div>
<p>This would enable us to search through Wikipedia normally by pressing
<code>M-s</code>, and directly look up the currently selected text with <code>M-u M-s</code>.<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a> The whole things looks like this:</p>
<p>
<video width="100%" controls>
<source src="../images/search-showcase/search-simple.webm" type="video/webm">
Searching for “Alexander Grothendieck” once manually,
and then highlighting that phrase and using the selection search.
</video>
</p>
<p>Further, there is a third workflow that is quite convenient: by default,
pressing <code>C-y</code> in the prompt inserts the current selection, ready for
further editing.</p>
<p>
<video width="100%" controls>
<source src="../images/search-showcase/search-simple-alt.webm" type="video/webm">
Showcasing the functionality described in the last paragraph.
</video>
</p>
<h3 id="adding-new-engines">Adding new engines</h3>
<p>There are quite a few search engines built-in: at the time of writing,
X.A.Search sports about 40 different ones. Thankfully, adding new
engines is easy, even in one’s own configuration; e.g., to look up
something on <a href="https://hoogle.haskell.org/">Hoogle</a>, one would simply
define</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">hoogle ::</span> <span class="dt">SearchEngine</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>hoogle <span class="ot">=</span> searchEngine <span class="st">&quot;hoogle&quot;</span> <span class="st">&quot;https://hoogle.haskell.org/?hoogle=&quot;</span></span></code></pre></div>
<p>This means that even if the module does not have a search engine you
want, it’s trivial to define it yourself—and don’t forget to upstream it
afterwards!</p>
<p>There also is the <code>searchEngineF</code> function, which instead of just a
string takes a function to also modify that string.<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a> With this, one
can build more complicated search engines; for example, the following
constitutes a very basic URL entry function, which may also work as a
sort of lightweight bookmarking system:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ot">url ::</span> <span class="dt">SearchEngine</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>url <span class="ot">=</span> searchEngineF <span class="st">&quot;url&quot;</span> \s <span class="ot">-&gt;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> url <span class="ot">=</span> <span class="st">&quot;https://&quot;</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>   <span class="kw">in</span> <span class="kw">if</span> url <span class="ot">`isPrefixOf`</span> s <span class="kw">then</span> s <span class="kw">else</span> url <span class="op">&lt;&gt;</span> s</span></code></pre></div>
<p>The whole API is quite flexible. In my personal configuration I have
defined a <code>git</code> search engine to quickly jump to certain projects on
several different forges:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ot">git ::</span> <span class="dt">SearchEngine</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>git <span class="ot">=</span> searchEngineF <span class="st">&quot;repo&quot;</span> \s <span class="ot">-&gt;</span> <span class="kw">if</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> s <span class="ot">`elem`</span> [<span class="st">&quot;change-env&quot;</span>, <span class="st">&quot;irc-bot&quot;</span>]</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    <span class="ot">-&gt;</span> <span class="st">&quot;https://gitlab.com/slotThe/&quot;</span> <span class="op">&lt;&gt;</span> s</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> s <span class="ot">`elem`</span> [<span class="st">&quot;kbd-mode&quot;</span>, <span class="st">&quot;kmonad&quot;</span>]</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>    <span class="ot">-&gt;</span> <span class="st">&quot;https://github.com/kmonad/&quot;</span> <span class="op">&lt;&gt;</span> s</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> s <span class="ot">`elem`</span> [ <span class="st">&quot;x11&quot;</span>, <span class="st">&quot;x11-xft&quot;</span>, <span class="st">&quot;xmonad&quot;</span>, <span class="st">&quot;xmonad-contrib&quot;</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>             , <span class="st">&quot;xmonad-docs&quot;</span>, <span class="st">&quot;xmonad-web&quot;</span> ]</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>    <span class="ot">-&gt;</span> <span class="st">&quot;https://github.com/xmonad/&quot;</span> <span class="op">&lt;&gt;</span> s</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> s <span class="ot">`elem`</span> [ <span class="st">&quot;vc-use-package&quot;</span>, <span class="st">&quot;arXiv-citation&quot;</span>, <span class="st">&quot;hmenu&quot;</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>             , <span class="st">&quot;slotThe.github.io&quot;</span>, <span class="st">&quot;query-replace-many&quot;</span> ]</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>    <span class="ot">-&gt;</span> <span class="st">&quot;https://github.com/slotThe/&quot;</span> <span class="op">&lt;&gt;</span> s</span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> s <span class="op">==</span> <span class="st">&quot;slotThe&quot;</span>    <span class="ot">-&gt;</span> <span class="st">&quot;https://github.com/slotThe/&quot;</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> s <span class="op">==</span> <span class="st">&quot;void-linux&quot;</span> <span class="ot">-&gt;</span> <span class="st">&quot;https://github.com/void-linux/void-packages&quot;</span></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> s <span class="op">==</span> <span class="st">&quot;xmobar&quot;</span>     <span class="ot">-&gt;</span> <span class="st">&quot;https://codeberg.org/xmobar/xmobar&quot;</span></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="fu">otherwise</span>         <span class="ot">-&gt;</span> <span class="st">&quot;&quot;</span></span></code></pre></div>
<p>It works as expected—so much so that I can enable the prompt’s
auto-complete feature, which automatically completes a query if there is
only a single candidate left.<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a></p>
<p>
<video width="100%" controls>
<source src="../images/search-showcase/search-git.webm" type="video/webm">
&lt;img class=“pure-img”
Showcasing the git search engine defined above
</video>
</p>
<h3 id="further-tweaks">Further tweaks</h3>
<p>As I said, the module is pretty flexible with how exactly one can use
it, and so here are a few more personal tweaks that I figure might also
be of interest to others. First, my setup is integrated with
<a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Actions-Prefix.html">XMonad.​Actions.​Prefix</a>—I use the prefix argument to decide whether I
want “normal” searches, or ones using the primary selection.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- | Search commands; integration with X.A.Prefix.</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="ot">searchKeys ::</span> <span class="dt">Keybindings</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>searchKeys <span class="ot">=</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>  [ (<span class="st">&quot;M-s&quot;</span>, withPrefixArgument <span class="op">$</span> submap <span class="op">.</span> searchEngineMap <span class="op">.</span> \<span class="kw">case</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>      <span class="dt">Raw</span> _ <span class="ot">-&gt;</span> <span class="co">-- normal searches</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>        selectSearchBrowser</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>      _     <span class="ot">-&gt;</span> <span class="co">-- use the primary selection</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>        \br se <span class="ot">-&gt;</span> promptSearchBrowser' (decidePrompt se) br se)</span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>  ]</span></code></pre></div>
<p>This is nice because <code>searchKeys</code> is now the only two place where this
distinction has to be made; others functions, like <code>search​Engine​Map</code>, do
not need to differentiate between a select search and a prompt search.
What I do separately match on is (i) the type of browser that I want to
open the searches in, and (ii) the type of prompt I would like to use.
This is very dependent on the engine itself; some, like <code>git</code> as defined
above, greatly benefit from keeping a history, while in others this is
more of a hinderance than anything else. The browser situation is
similar. An except of the totality of <code>searchKeys</code> looks like the
following.<a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a></p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ot">searchKeys ::</span> <span class="dt">Keybindings</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>searchKeys <span class="ot">=</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>  [ (<span class="st">&quot;M-s&quot;</span>, withPrefixArgument <span class="op">$</span> submap <span class="op">.</span> searchEngineMap <span class="op">.</span> \<span class="kw">case</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>      <span class="dt">Raw</span> _ <span class="ot">-&gt;</span> selectSearchBrowser</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>      _     <span class="ot">-&gt;</span> \br se <span class="ot">-&gt;</span> promptSearchBrowser' (decidePrompt se) br se)</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>  ]</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a> <span class="kw">where</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- | Match on the prompt type; this needs an orphan 'Eq' instance</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- for 'SearchEngine'.  @prompt@ is my prompt config.</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a><span class="ot">  decidePrompt ::</span> <span class="dt">SearchEngine</span> <span class="ot">-&gt;</span> <span class="dt">XPConfig</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>  decidePrompt se</span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> se <span class="ot">`elem`</span> [arXiv, wikipedia, github] <span class="ot">=</span> promptNoHist<span class="co">-- no history</span></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> se <span class="ot">`elem`</span> [git] <span class="ot">=</span> prompt{ autoComplete <span class="ot">=</span> (<span class="dv">5</span> <span class="ot">`ms`</span>) }</span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> <span class="fu">otherwise</span> <span class="ot">=</span> prompt</span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- | Open searches, possibly in a new window.</span></span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a><span class="ot">  searchEngineMap ::</span> (<span class="dt">Browser</span> <span class="ot">-&gt;</span> <span class="dt">SearchEngine</span> <span class="ot">-&gt;</span> <span class="dt">X</span> ())</span>
<span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a>                  <span class="ot">-&gt;</span> <span class="dt">Map</span> (<span class="dt">KeyMask</span>, <span class="dt">KeySym</span>) (<span class="dt">X</span> ())</span>
<span id="cb9-19"><a href="#cb9-19" aria-hidden="true" tabindex="-1"></a>  searchEngineMap searchIn <span class="ot">=</span> basicSubmapFromList</span>
<span id="cb9-20"><a href="#cb9-20" aria-hidden="true" tabindex="-1"></a>    [ (xK_a, sw arXiv    )</span>
<span id="cb9-21"><a href="#cb9-21" aria-hidden="true" tabindex="-1"></a>    , (xK_w, nw wikipedia)</span>
<span id="cb9-22"><a href="#cb9-22" aria-hidden="true" tabindex="-1"></a>    , (xK_g, submap <span class="op">$</span> basicSubmapFromList  <span class="co">-- submaps in submaps</span></span>
<span id="cb9-23"><a href="#cb9-23" aria-hidden="true" tabindex="-1"></a>              [ (xK_g, sw' git)</span>
<span id="cb9-24"><a href="#cb9-24" aria-hidden="true" tabindex="-1"></a>              , (xK_h, sw' github)</span>
<span id="cb9-25"><a href="#cb9-25" aria-hidden="true" tabindex="-1"></a>              ])</span>
<span id="cb9-26"><a href="#cb9-26" aria-hidden="true" tabindex="-1"></a>    ]</span>
<span id="cb9-27"><a href="#cb9-27" aria-hidden="true" tabindex="-1"></a>   <span class="kw">where</span></span>
<span id="cb9-28"><a href="#cb9-28" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- | Same window, new window.</span></span>
<span id="cb9-29"><a href="#cb9-29" aria-hidden="true" tabindex="-1"></a>    sw, sw',<span class="ot"> nw ::</span> <span class="dt">SearchEngine</span> <span class="ot">-&gt;</span> <span class="dt">X</span> ()</span>
<span id="cb9-30"><a href="#cb9-30" aria-hidden="true" tabindex="-1"></a>    sw  <span class="ot">=</span> searchIn browser</span>
<span id="cb9-31"><a href="#cb9-31" aria-hidden="true" tabindex="-1"></a>    nw  <span class="ot">=</span> searchIn <span class="st">&quot;browser-new-window.sh&quot;</span></span>
<span id="cb9-32"><a href="#cb9-32" aria-hidden="true" tabindex="-1"></a>    sw' <span class="ot">=</span> searchIn altBrowser</span>
<span id="cb9-33"><a href="#cb9-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-34"><a href="#cb9-34" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Eq</span> <span class="co">{- ORPHAN -}</span> <span class="dt">SearchEngine</span> <span class="kw">where</span></span>
<span id="cb9-35"><a href="#cb9-35" aria-hidden="true" tabindex="-1"></a><span class="ot">  (==) ::</span> <span class="dt">SearchEngine</span> <span class="ot">-&gt;</span> <span class="dt">SearchEngine</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb9-36"><a href="#cb9-36" aria-hidden="true" tabindex="-1"></a>  (<span class="dt">SearchEngine</span> n _) <span class="op">==</span> (<span class="dt">SearchEngine</span> n' _) <span class="ot">=</span> n <span class="op">==</span> n'</span></code></pre></div>
<p>For my full configuration, see <a href="https://gitlab.com/slotThe/dotfiles/-/blob/c31bc324a8cc3df5449d9ca7a50aabfcd87a7ad8/xmonad/.config/xmonad/src/xmonad.hs#L720">here</a>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>As always, even the simplest topic—that of a search—leaves a lot more
room for personalisation than one would initially think. Also as
always, XMonad delivers on the “there is already a module for that”
front.</p>
<p>For me personally, X.A.Search has really alleviated this perceived
slowness in searching, especially when using many different engines
simultaneously. So much so, in fact, that I no longer have a problem
looking up information from multiple sources mid (text) conversation.
This not only helps me, but I reckon a few users of the <code>#xmonad</code> <a href="https://web.libera.chat/#xmonad">IRC
Channel</a> are quite glad about this as well!</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>Just to name a few, I regularly look things up on
<a href="https://zbmath.org/">zbmath</a>,
<a href="https://hoogle.haskell.org/">Hoogle</a>,
<a href="https://clojuredocs.org/">ClojureDocs</a>,
<a href="https://en.wikipedia.org/">Wikipedia</a>,
<a href="https://www.openstreetmap.org/">Open­Street­Map</a>,
<a href="https://searx.github.io/searx/">searX</a>,
<a href="https://arxiv.org/">arXiv</a>,
<a href="https://noogle.dev/">noogle</a>,
forges like <a href="https://github.com/">Git­Hub</a>,
… the list goes on.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>{-} 󠀠</p>
<p>󠀠</p>
<p>This uses <a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Util-EZConfig.html">XMonad.Util.EZConfig</a> syntax.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>As an aside, this is an ideal use case for <a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Actions-Prefix.html">XMonad.​Actions.​Prefix</a>.
With that module, one could define an equivalent keybinding along the lines of</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ot">searchKeys ::</span> [(<span class="dt">String</span>, <span class="dt">X</span> ())]</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>searchKeys <span class="ot">=</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  [ (<span class="st">&quot;M-s&quot;</span>, withPrefixArgument <span class="op">$</span> \<span class="kw">case</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>      <span class="dt">Raw</span> _ <span class="ot">-&gt;</span> selectSearch     wikipedia</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>      _     <span class="ot">-&gt;</span> promptSearch def wikipedia)</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>  ]</span></code></pre></div>
<p>This is especially useful when multiple search engines are involved;
see <a href="#further-tweaks">below</a> or check out <a href="https://gitlab.com/slotThe/dotfiles/-/blob/c31bc324a8cc3df5449d9ca7a50aabfcd87a7ad8/xmonad/.config/xmonad/src/xmonad.hs#L720">my configuration</a> for a complete example.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>{-} For the following code examples, you may need to place extra
pragmas along the lines of</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE BlockArguments #-}</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE LambdaCase     #-}</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE MultiWayIf     #-}</span></span></code></pre></div>
<p>at the top of your XMonad configuration file.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>In this case here, that single candidate will be from the relevant
prompt history.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6"><p>{-} Just for completeness, an in order to improve
copy-pasteability, the definition of <code>basicSubmapFromList</code> used a
lot in this piece of code is:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>basicSubmapFromList</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> <span class="dt">Ord</span> key</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=&gt;</span> [(key, action)]</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">Map</span> (<span class="dt">KeyMask</span>, key) action</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>basicSubmapFromList <span class="ot">=</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>  fromList <span class="op">.</span> <span class="fu">map</span> \(k, a) <span class="ot">-&gt;</span> ((<span class="dv">0</span>, k), a)</span></code></pre></div>
<p>This is just creates a basic (i.e. there is no additional ‘KeyMask’ to consider)
submap from a list of <code>(key, action)</code> pairs.<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Immediately Refile Notes with X.P.OrgMode</title>
    <link href="https://tony-zorman.com/posts/orgmode-refiling.html" />
    <id>https://tony-zorman.com/posts/orgmode-refiling.html</id>
    <published>2023-01-14T00:00:00Z</published>
    <updated>2023-01-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2023-01-14
      
      
        &thinsp;·&thinsp; last modified: 2023-02-13
      
      
        &thinsp;·&thinsp; <span title="668 words">3 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>, <a title="All pages tagged 'haskell'." href="/tags/haskell.html" rel="tag">haskell</a>, <a title="All pages tagged 'xmonad'." href="/tags/xmonad.html" rel="tag">xmonad</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>In a <a href="/posts/orgmode-prompt/2022-08-27-xmonad-and-org-mode.html">previous post</a> I talked about
<a href="https://xmonad.github.io/xmonad-docs/xmonad-contrib/XMonad-Prompt-OrgMode.html">XMonad.Prompt.OrgMode</a>, an XMonad module to rapidly capture thoughts
and ideas into an Org file. The functionality that the module provides
has proven to be extremely useful to me, and really I couldn’t be
happier with it. However, a user recently contacted me by email and
told me that they’re missing but one feature: the ability to immediately
refile notes.</p>
<!--more-->
<h2 id="motivation">Motivation</h2>
<p>If you don’t know, <a href="https://orgmode.org/manual/Refile-and-Copy.html">refiling</a> is the act of moving an entry<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> <em>below</em>
another heading; i.e., such that it becomes a subheading there. This
can be useful for structuring TODOs into separate categories: one might
have projects called “work”, “life”, “XMonad”, and so on, where all
related tasks live. Quite convenient!</p>
<p>So far, X.P.OrgMode just dumped the created note at the end of the
specified file, leaving you to pick up the pieces. This aligns with my
personal workflow—while I extensively use refiling, I only do so at the
end of the day after reviewing all tasks that have accumulated.
However, it is conceivable that someone might want to refile certain
tasks straight away when it’s pretty clear that (i) they’ll be kept, and
(ii) they can be unambiguously assigned to a certain heading (e.g., an
already scheduled work meeting with X).</p>
<h2 id="showcase">Showcase</h2>
<p>Long story short, this is now built into X.P.OrgMode. There are two new
functions:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">    orgPromptRefile   ::</span> <span class="dt">XPConfig</span> <span class="ot">-&gt;</span>           <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">FilePath</span> <span class="ot">-&gt;</span> <span class="dt">X</span> ()</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="ot">    orgPromptRefileTo ::</span> <span class="dt">XPConfig</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">FilePath</span> <span class="ot">-&gt;</span> <span class="dt">X</span> ()</span></code></pre></div>
<p>The former takes the same arguments as <a href="https://hackage.haskell.org/package/xmonad-contrib-0.17.1/docs/XMonad-Prompt-OrgMode.html#v:orgPrompt">orgPrompt</a> (which see), and is
for popping up another prompt that asks for a heading. The latter
refiles everything under the specified (as the second argument) heading.</p>
<p>The way <code>orgPromptRefile</code> works is that, after querying for a TODO, it
<em>always</em> inserts the note into the file and then <em>possibly</em> refiles it
to another heading. This way, you don’t need to worry about losing
notes when you abort the refiling prompt or enter a non-existent
heading.</p>
<p><img class="pure-img" src="../images/orgmode-refiling/refiling.gif" alt="Entering a TODO, and refiling it to an appropriate place"></p>
<p>Note: Refiling is (near) instant; the delay you are seeing above is due
to <code>auto-revert-mode</code>.</p>
<h3 id="some-gory-details">Some gory details</h3>
<p>All of the refiling is actually directly done by Emacs itself! More
precisely, the EDSL that <a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Util-Run.html">XMonad.Util.Run</a> defines—which I’ve also
<a href="/posts/2022-05-25-calling-emacs-from-xmonad.html">written about</a>—shells out to Emacs. This
might intuitively <em>feel</em> horrible, but that’s just another reason to
share it:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ot">refile ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">FilePath</span> <span class="ot">-&gt;</span> <span class="dt">X</span> ()</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>refile (asString <span class="ot">-&gt;</span> parent) (asString <span class="ot">-&gt;</span> fp) <span class="ot">=</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  proc <span class="op">$</span> inEmacs</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>     <span class="op">&gt;-&gt;</span> asBatch</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>     <span class="op">&gt;-&gt;</span> eval (progn</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>                [ <span class="st">&quot;find-file&quot;</span> <span class="op">&lt;&gt;</span> fp</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>                , <span class="st">&quot;end-of-buffer&quot;</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>                , <span class="st">&quot;org-refile nil nil&quot;</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>                    <span class="op">&lt;&gt;</span> list [ parent, fp, <span class="st">&quot;nil&quot;</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>                            , saveExcursion</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>                               [<span class="st">&quot;org-find-exact-headline-in-buffer&quot;</span> <span class="op">&lt;&gt;</span> parent]</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>                            ]</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>                , <span class="st">&quot;save-buffer&quot;</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>                ])</span></code></pre></div>
<p>This—as you probably guessed already—just executes the following elisp
snippet in Emacs’s batch mode:</p>
<pre class="emacs-lisp"><code>(progn
  (find-file «fp»)
  (end-of-buffer)
  (org-refile nil nil
              (list «parent» «fp» nil
                    (save-excursion
                      (org-find-exact-headline-in-buffer «parent»))))
  (save-buffer))</code></pre>
<p>I know this seems insane, but letting Emacs do this work is actually
much less brittle than the alternative. The Org maintainers certainly
know best what refiling <em>means</em>, and thus also what it entails—if all of
this logic is already written, why not take advantage of it? Plus, I
now don’t have to keep track of subtle changes in newer versions of Org.</p>
<h2 id="closing-thoughts">Closing thoughts</h2>
<p>Writing this was actually a lot of fun, and a great opportunity to play
with the EDSL that X.U.Run exposes. I reckon there are a few places in
my own XMonad configuration in which I could use these kinds of “Emacs
scripts” to great effect!</p>
<p>One other idea I’ve had is to integrate this into the language that
plain old <code>orgPrompt</code> accepts. It could be prefixed by something like
“<code>ref:</code>”, followed by a unique substring with which to identity a
heading. This would have the disadvantage that—without the second
prompt—one would not get any suggestions for headings. However, if you
want to refile something you probably know where you want to put it;
plus, it would not involve a possibly distracting second prompt.
Actually, this sounds like a good first pull request: contributions
welcome!</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>A headline, possibly with an attached body.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>XMonad Module Showcase: X.A.TopicSpace</title>
    <link href="https://tony-zorman.com/posts/topic-spaces.html" />
    <id>https://tony-zorman.com/posts/topic-spaces.html</id>
    <published>2022-09-11T00:00:00Z</published>
    <updated>2022-09-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2022-09-11
      
      
        &thinsp;·&thinsp; last modified: 2023-02-17
      
      
        &thinsp;·&thinsp; <span title="1309 words">6 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'haskell'." href="/tags/haskell.html" rel="tag">haskell</a>, <a title="All pages tagged 'xmonad'." href="/tags/xmonad.html" rel="tag">xmonad</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>One of my favourite—and most used—modules is <code>XMonad.​Actions.​TopicSpace</code>.
However, it seems relatively unknown among the general XMonad community.
I fear this is due to the fact that the module is quite old and formerly
had a rather high barrier to entry. Despite having been given shiny
<a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Actions-TopicSpace.html">new documentation</a>, lots of people probably did not bother
revisiting it and thus still don’t really understand why they might be
interested in using topics instead of workspaces. Time to change that!</p>
<!--more-->
<h2 id="introduction">Introduction</h2>
<p>First, this post is not to be seen as a tutorial on <code>X.A.TopicSpace</code>, but
much rather as a showcase of how its functionality could be used day to
day. If you like what you see, perhaps check out the
<a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Actions-TopicSpace.html">docs</a> and give it a spin yourself! I have already written
an introduction to the module in the post about my <a href="./my-phd-workflow.html">research workflow</a>:</p>
<blockquote>
<p>XMonad has a module called TopicSpace, which upgrades the X11
workspace—virtual desktop—concept to so-called topics. These are
workspaces with a “theme” associated to them; for example, I have a
topic for every project that I’m currently working on. This results
in a clean separation of concerns. Plus, I always know where my
windows are!</p>
<p>Every topic has a directory and a “startup hook”, firing when the
topic is switched to and empty, associated to it. While most
convenient for programming related tasks—e.g., spawn <code>ghcid</code> in the
relevant directory or automatically build and open this website—it’s
also quite convenient for mathematical projects.</p>
<p>I have set up special keybindings to bring up an Emacs session in the
topic directory, or spawn a terminal there. Switching to topics is
done fuzzily via the XMonad prompt, which means I only have to type a
few characters to get to my destination. This makes it feasible to
have 30 topics, instead of the usual 9 or so, in the first place. As
a result, it’s rather fast to go from thinking about a certain problem
to working on it.</p>
</blockquote>
<p>At a glance, this probably does not sound very impressive—so one can
have a directory and some function associated to a workspace (hereafter
also called “topic”), big deal. However, we will see that with a bit of
creativity this can be used to great effect.</p>
<h2 id="examples">Examples</h2>
<h3 id="basic-topics">Basic topics</h3>
<p>The most obvious application of all of this is to have workspaces that
do one and only one thing. For example, I have a topic dedicated to
connecting to a VPN, should the need arise. Naturally, I automatically
want to execute <code>openvpn</code> and pick a random server whenever I happen to
enter that workspace and it’s empty (i.e., <code>openvpn</code> is not already
running).</p>
<p>More such use cases include having a topic dedicated to my RSS feed
reader, instant messaging, or IRC. Since I only show workspaces with
windows on them in xmobar, I can just glance at my status bar to find
out whether I currently have, for example, IRC open. No additional
program for checking the status of things necessary! Obviously, this
<em>modus operandi</em> takes a bit of discipline to uphold over the course of
the day, but I find that such a separation of concerns greatly reduces
mental load regarding what’s currently happening on my computer.
Definitely worth it.</p>
<p>In terms of code, this—as well as the following examples—heavily use the
<a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Util-Run.html#g:EDSL">new interface</a> to XMonad.Util.Run, which allows one to
spawn processes in a declarative and compositional way; I’ve <a href="./calling-emacs-from-xmonad.html">written
about this</a> in another post. For example, my RSS topic is
specified thusly:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- import XMonad.Actions.TopicSpace (inHome)</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- import XMonad.Util.Run</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  , inHome <span class="st">&quot;7:RSS&quot;</span> <span class="op">$</span> proc <span class="op">$</span> inEditor</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>                        <span class="op">&gt;-&gt;</span> setFrameName <span class="st">&quot;elfeed&quot;</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>                        <span class="op">&gt;-&gt;</span> execute (elispFun <span class="st">&quot;elfeed&quot;</span>)</span></code></pre></div>
<p>Here, <code>inHome</code> is a little helper function that takes a topic name and
an action, and creates a new topic with <code>$HOME</code> as its associated
directory.</p>
<p>You can find all of my topics (and there are a lot of them)
<a href="https://gitlab.com/slotThe/dotfiles/-/blob/master/xmonad/.config/xmonad/src/xmonad.hs#L219-L265">here</a>.</p>
<h3 id="spawning-everything-in-the-topic-directory">Spawning <em>everything</em> in the topic directory</h3>
<p>More generally, programming projects in the same language almost always
require me to open the same set of standard tools, so it’s extremely
convenient to directly spawn them upon first visit. This allows for
very little friction before starting to work on whatever I wanted to
work on.</p>
<p>For example, I want to open Emacs and <a href="https://github.com/ndmitchell/ghcid">ghcid</a> in every Haskell project
of mine—so why not automate this? Using what X.U.Run gives us, we can
quickly throw together a function that executes the given instruction
inside of a terminal:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- import XMonad.Actions.TopicSpace (currentTopicDir)</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- 'topicConfig' is my personal topic configuration.</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="co">-- | Execute a program in the topic directory (inside a terminal).</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="ot">executeInTopic ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">X</span> ()</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>executeInTopic p <span class="ot">=</span> proc <span class="op">$</span> (termInDir <span class="op">&gt;-$</span> currentTopicDir topicConfig)</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>                      <span class="op">&gt;-&gt;</span> execute p</span></code></pre></div>
<p>Similar functions can be created for spawning the terminal and editor:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- Whatever you're looking for, it's probably in X.A.TopicSpace</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- or X.U.Run.</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="co">-- | Spawn terminal in topic directory.</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="ot">spawnTermInTopic ::</span> <span class="dt">X</span> ()</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>spawnTermInTopic <span class="ot">=</span> proc <span class="op">$</span> termInDir <span class="op">&gt;-$</span> currentTopicDir topicConfig</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="co">-- | Spawn editor in the current topic directory.</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="ot">spawnEditorInTopic ::</span> <span class="dt">X</span> ()</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>spawnEditorInTopic <span class="ot">=</span> proc <span class="op">$</span> inEditor <span class="op">&gt;-$</span> currentTopicDir topicConfig</span></code></pre></div>
<p>Check the documentation of <a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Util-Run.html#g:EDSL">XMonad.Util.Run</a> to see how <code>inEditor</code> and
<code>termInDir</code> are defined and may be customised.</p>
<p>In my mathematical and other work-adjacent projects I keep it pretty
simple; an editor there is mostly sufficient.</p>
<p><img class="pure-img" src="../images/phd-workflow/topics.gif" alt="Navigating to an empty topic, Emacs pops up"></p>
<p>We can also get a little bit more fancy. Since the topic action is just
a general <code>X</code> action, we can really do anything we want in there. In
addition to spawning programs, all of my Haskell projects should default
to the <code>Hacking</code><a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> layout:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ot">spawnHaskell ::</span> <span class="dt">X</span> ()</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>spawnHaskell <span class="ot">=</span> sendMessage (<span class="dt">JumpToLayout</span> <span class="st">&quot;Hacking&quot;</span>)</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>            <span class="op">*&gt;</span> spawnEditorInTopic</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>            <span class="op">*&gt;</span> executeInTopic <span class="st">&quot;ghcid&quot;</span></span></code></pre></div>
<p>And Voilà, we can now attach this action to all the topics that we want!</p>
<p>Note that the <code>*&gt;</code> operator is—in this case—just the sequencing of
actions. If you’re more comfortable with <code>do</code> notation, you can also
write the above as</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ot">spawnHaskell ::</span> <span class="dt">X</span> ()</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>spawnHaskell <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>  sendMessage (<span class="dt">JumpToLayout</span> <span class="st">&quot;Hacking&quot;</span>)</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>  spawnEditorInTopic</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>  executeInTopic <span class="st">&quot;ghcid&quot;</span></span></code></pre></div>
<p>Furthermore, since the associated directory for a topic can easily be
made <code>$HOME</code> by default (as we’ve seen, <code>X.A.TopicSpace</code> even exports
the <code>inHome</code> function), spawning programs in certain topics can easily
be made to replace the default keybindings!</p>
<p>For the sake of completeness, I will showcase one slightly more
complicated example. My main shell environment is <code>eshell</code> and getting
sane behaviour there presents one with a few more obstacles than
<code>spawnTermInTopic</code> did. It also uses <code>inProgram</code> instead of <code>inEditor</code>,
allowing access to a different instance of the Emacs server.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- | Spawn an eshell frame in the current topic directory.</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="ot">spawnEshellInTopic ::</span> <span class="dt">X</span> ()</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>spawnEshellInTopic <span class="ot">=</span> currentTopicDir topicConfig <span class="op">&gt;&gt;=</span> \dir <span class="ot">-&gt;</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>  proc <span class="op">$</span> inProgram <span class="st">&quot;emacsclient -a '' -c -s eshell&quot;</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>     <span class="op">&gt;-&gt;</span> execute (progn [ <span class="st">&quot;eshell&quot;</span> <span class="op">&lt;&gt;</span> quote <span class="st">&quot;new-shell&quot;</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>                        , <span class="st">&quot;eshell/cd&quot;</span> <span class="op">&lt;&gt;</span> asString dir</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>                        , <span class="st">&quot;eshell/clear-scrollback&quot;</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>                        , <span class="st">&quot;eshell-send-input&quot;</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>                        ])</span></code></pre></div>
<p>All in all, we have something that looks a little bit like this:</p>
<p><img class="pure-img" src="../images/topic-space/haskell-topic.gif" alt="Switching to a Haskell topic, then using project.el to navigate the project"></p>
<h3 id="testing-this-website">Testing this website</h3>
<p>Much in the same vein as my Haskell topics, I find the <code>website</code> topic
to be extremely handy—you can probably guess what it’s used for. Its
associated function <code>spawnWebsite</code> switches to the “Tall” layout, spawns
an Emacs frame in the topic directory, builds the website, and opens a
browser window pointing to the local copy:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ot">spawnWebsite ::</span> <span class="dt">X</span> ()</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>spawnWebsite <span class="ot">=</span> switchToLayout <span class="st">&quot;Tall&quot;</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>            <span class="op">*&gt;</span> spawnEditorInTopic</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>            <span class="op">*&gt;</span> executeInTopic <span class="st">&quot;hakyll-build.sh --hold&quot;</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>            <span class="op">*&gt;</span> spawn <span class="st">&quot;browser-new-window.sh localhost:8000&quot;</span></span></code></pre></div>
<p>The whole thing looks like this:</p>
<p><img class="pure-img" src="../images/topic-space/website.gif" alt="Switching to an empty topic; various things automatically start up"></p>
<h2 id="conclusion">Conclusion</h2>
<p>Hopefully these examples have convinced you to give <code>X.A.TopicSpace</code> a spin;
perhaps you’ve even gotten some ideas of your own you’d like to try out.
Although conceptually very simple, the module can be used in a variety
of ways to automate boring tasks just that tiny bit more—definitely a
win in my book!</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>In case you are interested:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>hacking</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=</span> renamed [<span class="dt">Replace</span> <span class="st">&quot;Hacking&quot;</span>]</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  <span class="op">.</span> limitWindows <span class="dv">3</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">.</span> magnify <span class="fl">1.3</span> (<span class="dt">NoMaster</span> <span class="dv">3</span>) <span class="dt">True</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>  <span class="op">$</span> <span class="dt">ResizableTall</span> <span class="dv">1</span> (<span class="dv">3</span> <span class="op">%</span> <span class="dv">100</span>) (<span class="dv">13</span> <span class="op">%</span> <span class="dv">25</span>) []</span></code></pre></div>
<p>As the rest of my dotfiles, it’s available
<a href="https://gitlab.com/slotThe/dotfiles/-/blob/master/xmonad/.config/xmonad/src/xmonad.hs#L341">here</a>.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Rapidly Capture Ideas with XMonad and Emacs</title>
    <link href="https://tony-zorman.com/posts/xmonad-and-org-mode.html" />
    <id>https://tony-zorman.com/posts/xmonad-and-org-mode.html</id>
    <published>2022-08-27T00:00:00Z</published>
    <updated>2022-08-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2022-08-27
      
      
        &thinsp;·&thinsp; last modified: 2023-03-07
      
      
        &thinsp;·&thinsp; <span title="656 words">3 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>, <a title="All pages tagged 'xmonad'." href="/tags/xmonad.html" rel="tag">xmonad</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->


<div>
  <p>As I’ve said before, basically my entire digital life happens in either
<a href="https://www.gnu.org/software/emacs/">Emacs</a> or <a href="https://xmonad.org/">XMonad</a>. Thus, a lot of time spent on my setup either goes
towards working on the two configurations separately, or—as we’ll do
today—bringing them ever closed together.</p>
<p>Specifically, I want to showcase a new<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> XMonad module:
<a href="https://xmonad.github.io/xmonad-docs/xmonad-contrib/XMonad-Prompt-OrgMode.html">XMonad.​Prompt.​Org­Mode</a>. Building on top of XMonad’s prompt—which works
much like <a href="https://tools.suckless.org/dmenu/">dmenu</a>—it is designed to rapidly capture thoughts and ideas
whenever inspiration strikes and, importantly, to do so without
disrupting one’s current workflow. The module recently got support for
Org <a href="https://orgmode.org/manual/Priorities.html">priorities</a>, so I figured this was as good an excuse as
any to talk about it.</p>
<!--more-->
<h3 id="motivation">Motivation</h3>
<p>One theme in the post about my <a href="./my-phd-workflow.html">research workflow</a> was how it’s possible
to use org-mode (with all of its appendages, like <a href="https://www.orgroam.com/">org-roam</a>) to
organise one’s thoughts. <code>XMonad.Prompt.OrgMode</code> was created as yet
another link in that chain. Unlike when writing tiny <a href="./calling-emacs-from-xmonad.html">Emacs Lisp
scripts in XMonad</a>, this does not involve any
custom elisp code one has to run; all of it is taken care of by the
module itself.</p>
<p>The upshot of all of this is a tool to quickly and unobtrusively jot
down an idea—quiet the monkey mind—and then get back to work straight
away. For me, having something like this is very important, lest I get
distracted by some thought about another project and spend the next hour
or so working on that instead of doing what I was actually supposed to
do. Having the idea written down in a known place—perhaps even with an
automatic reminder in my <a href="https://orgmode.org/manual/Agenda-Views.html">agenda</a>—helps me get rid of that creeping
anxiety that I’m forgetting things left and right.</p>
<h3 id="functionality">Functionality</h3>
<p>The following showcases the core functionality of the module—taking
notes!</p>
<p><img class="pure-img" src="../images/orgmode-prompt/simple-task.gif" alt="capturing a single task"></p>
<p>In case you <em>really</em> don’t want to forget something, there is also the
ability to create <code>DEADLINE</code> and <code>SCHEDULED</code> tasks. Optionally, you can
also specify a <a href="https://orgmode.org/manual/Priorities.html">priority</a>, depending on the importance of the note. If
you add the org file in which the TODOs are placed to the
<code>org-agenda-files</code> variable, then this will immediately show these tasks
in your agenda!</p>
<p><img class="pure-img" src="../images/orgmode-prompt/deadline-task.gif" alt="capturing a deadline"></p>
<p>How exactly one may specify the <code>SCHEDULED</code> and <code>DEADLINE</code> keywords, as
well as a date, time, and priority is covered in detail in the
<a href="https://xmonad.github.io/xmonad-docs/xmonad-contrib/XMonad-Prompt-OrgMode.html">documentation</a> for <code>X.P.OrgMode</code>.</p>
<p>Last but not least, it’s possible to capture the current (primary)
selection and, depending on the type of thing in it, use that as either
the body or the header of the task. If it’s a URL, create a link (i.e.,
it will be of the form <code>[[link][input-text]]</code>); if not, just add the
selection to the body of the note.</p>
<p><img class="pure-img" src="../images/orgmode-prompt/selection-tasks.png" alt="visual representation of the above paragraph, showing various states of notes"></p>
<p>Of course, you can use all of this together as well—directly link to
that one paper or blog post you wanted to read, or that one YouTube
video you want to watch on the weekend!</p>
<h3 id="sample-configuration">Sample configuration</h3>
<p>To round things off—and quickly showcase another cool (and new!)
module, <a href="https://xmonad.github.io/xmonad-docs/xmonad-contrib/XMonad-Actions-Prefix.html">XMonad.Actions.Prefix</a>—here is a sample keybinding that takes
“normal” <code>TODO</code> notes on <code>M-o c</code><a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> and uses the selection when called
with a universal argument:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- uses {-# LANGUAGE LambdaCase #-}</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="ot">orgKey ::</span> (<span class="dt">String</span>, <span class="dt">X</span> ())</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>orgKey <span class="ot">=</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  (<span class="st">&quot;M-o c&quot;</span>, withPrefixArgument <span class="op">$</span> (<span class="ot">`uncurry`</span> orgSettings) <span class="op">.</span> \<span class="kw">case</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>     <span class="dt">Raw</span> _ <span class="ot">-&gt;</span> orgPromptPrimary promptNoHist</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>     _     <span class="ot">-&gt;</span> orgPrompt        promptNoHist)</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a> <span class="kw">where</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>  orgSettings <span class="ot">=</span> (<span class="st">&quot;TODO&quot;</span>, <span class="st">&quot;~/todos.org&quot;</span>)</span></code></pre></div>
<p>I’ve found <code>M-u</code> to be quite convenient for XMonad’s universal argument
key, mirroring the <code>C-u</code> convention from Emacs. In either case, simply
add the <code>usePrefix​Argument</code> combinator somewhere to your <code>main</code> function
and give it your preferred keybinding. For example:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> xmonad</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>     <span class="op">.</span> usePrefixArgument <span class="st">&quot;M-u&quot;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>     <span class="op">$</span> def{ modMask <span class="ot">=</span> mod4Mask  <span class="co">-- use &lt;Super&gt; as mod</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>          }</span></code></pre></div>
<p>If you’re anything like me, this will soon become an integral part of
your workflow and you won’t want to live without it. If not, then
perhaps you still don’t understand what all the fuss is about; in either
case, I’d like to <a href="mailto:soliditsallgood@mailbox.org">hear from you</a>!</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>Version 0.17.0 onwards.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>Note that for this post, <code>M</code> means <code>&lt;Super_L&gt;</code> and not <code>&lt;Alt_L&gt;</code>.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Calling Emacs from XMonad</title>
    <link href="https://tony-zorman.com/posts/calling-emacs-from-xmonad.html" />
    <id>https://tony-zorman.com/posts/calling-emacs-from-xmonad.html</id>
    <published>2022-05-25T00:00:00Z</published>
    <updated>2022-05-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2022-05-25
      
      
        &thinsp;·&thinsp; last modified: 2023-03-07
      
      
        &thinsp;·&thinsp; <span title="1742 words">7 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>, <a title="All pages tagged 'haskell'." href="/tags/haskell.html" rel="tag">haskell</a>, <a title="All pages tagged 'xmonad'." href="/tags/xmonad.html" rel="tag">xmonad</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>In the post about my <a href="/posts/phd-workflow/2022-05-01-my-phd-workflow.html#citations">research workflow</a>, I briefly mentioned having to
call Emacs—or other external programs—from within XMonad. I figured
that this was perhaps something that could be of use to more people than
just me. After a little bit of deliberation and coming up with a
generic enough API, I decided to turn it into an XMonad module!</p>
<p>These changes now live as part of the <a href="https://github.com/xmonad/xmonad-contrib">xmonad-contrib</a> repository and
are—from version 0.17.1 onwards—available for everyone to try out.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>
I’d like to use this opportunity to both showcase the module—how and why
one would use it—and talk a little bit about its only redeeming
implementation detail.</p>
<!--more-->
<h2 id="main-use-cases">Main use cases</h2>
<p>Wouldn’t it be neat to have some kind of <a href="https://en.wikipedia.org/wiki/Domain-specific_language">EDSL</a> for spawning external
processes? Something where one can just compose Haskell functions
together, not having to worry about the actual underlying string
manipulations? Something that’s composable, so that one does not have
to write the same <code>"emacsclient -c -a '' …"</code> or <code>"alacritty --working-directory …"</code> prefix over and over again? Well, at least
that’s what I thought on some rainy afternoon a few months ago.</p>
<h3 id="scratchpads">Scratchpads</h3>
<p>The first use case that I came up with was <a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Util-NamedScratchpad.html">scratchpad</a>s. The idea of
these things is simple: while we normally don’t like floating windows,
it’s quite convenient to have some of them around that one can bring to
the current workspace, as well as hide, with a single keybinding. This
is useful for things like email, a calendar, a daily agenda, a
calculator, etc.</p>
<p>For scratchpads to work reliably, windows need to have some unique
characteristic they can be recognised by, like a special <a href="https://tronche.com/gui/x/icccm/sec-4.html#WM_CLASS">class or
instance name</a>. Endowing an application with additional properties
sounds exactly like what our EDSL should be good at, so let’s try that!</p>
<p>Using the new features of <code>XMonad.Util.Run</code>, we could spawn an Emacs
frame with a special name for our scratchpad hooks to grab onto, and
execute <code>notmuch</code>:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">mailSession ::</span> <span class="dt">X</span> <span class="dt">String</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>mailSession <span class="ot">=</span> getInput <span class="op">$</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  inEditor <span class="op">&gt;-&gt;</span> setFrameName mailInstName</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>           <span class="op">&gt;-&gt;</span> eval (function <span class="st">&quot;notmuch&quot;</span>)</span></code></pre></div>
<p>You can read the <code>&gt;-&gt;</code> operator a little like a pipe, where you start
with what you want and thread that information through to the end: “I
want an editor with a certain frame name that also starts up notmuch”.</p>
<p>In full, the above function would produce the string (broken into a few
lines for better readability)</p>
<pre><code>&quot;emacsclient -c -a ''
             -F '(quote (name . \&quot;notmuch-scratch\&quot;))'
             --eval '(notmuch)'&quot;</code></pre>
<p>which would be quite bothersome to type indeed.</p>
<p>Because the type of <code>mailSession</code> is <code>X String</code> and not just <code>String</code>,
the setup for this is a little bit different than usual when using
scratchpads. You would use it like this:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">myScratchpads ::</span> <span class="dt">X</span> [<span class="dt">NamedScratchpad</span>]</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>myScratchpads <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- First, get the finished string.</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  mailSession <span class="ot">&lt;-</span> getInput <span class="op">$</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    inEditor <span class="op">&gt;-&gt;</span> setFrameName mailInst <span class="op">&gt;-&gt;</span> eval (elispFun <span class="st">&quot;notmuch&quot;</span>)</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Now we can insert it into our scratchpads as normal.</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>  <span class="fu">pure</span> [ <span class="dt">NS</span> <span class="st">&quot;Mail&quot;</span> mailSession (appName <span class="op">=?</span> mailInst) quake ]</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a> <span class="kw">where</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>  mailInst <span class="ot">=</span> <span class="st">&quot;notmuch-scratch&quot;</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>  quake    <span class="ot">=</span> customFloating <span class="op">$</span> <span class="dt">RationalRect</span> <span class="dv">0</span> <span class="dv">0</span> <span class="dv">1</span> (<span class="dv">4</span> <span class="op">/</span> <span class="dv">5</span>)</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a><span class="co">-- The call to @namedScratchpadManageHook@ in the manageHook also</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a><span class="co">-- needs to be slightly adjusted.</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="ot">myManageHook ::</span> <span class="dt">ManageHook</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>myManageHook <span class="ot">=</span> <span class="fu">mconcat</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>  [ …</span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>  , namedScratchpadManageHook <span class="op">=&lt;&lt;</span> liftX myScratchpads</span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>  ]</span></code></pre></div>
<p>Normally you would also add your <code>myScratchpads</code> list to all calls of
<code>namedScratchpadAction</code>; e.g., when you define the keys to call your
scratchpads. However, since the former lives in <code>X</code> now, this doesn’t
work anymore! Thankfully,
<a href="https://github.com/xmonad/xmonad-contrib/commit/3fc830aa09368dca04df24bf7ec4ac817f2de479">nowadays</a>
the first argument to <code>namedScratchpadAction</code> is actually unused and
only there for backwards compatibility. This means that it’s not
necessary to enter your scratchpads there at all if they are added to
your <code>manageHook</code>. For example, in the following I just provide the empty list:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>  (<span class="st">&quot;M-C-t&quot;</span>, namedScratchpadAction [] <span class="st">&quot;Mail&quot;</span>)</span></code></pre></div>
<p>This works all the same with the above definition of <code>myScratchpads</code>.</p>
<p>A full example of how a scratchpad setup would look using this machinery
can be found in <a href="https://gitlab.com/slotThe/dotfiles/-/blob/master/xmonad/.config/xmonad/src/xmonad.hs#L414">my config</a>.</p>
<h3 id="calling-emacs-in-scripts">Calling Emacs in scripts</h3>
<p>Spawning frames is nice and all, but how about something more
complicated, like Emacs’s batch mode so that we can use it properly in
scripts? No problem at all!</p>
<p>For example, I have the following snippet in my config to get the
currently selected text and call <a href="https://github.com/slotthe/arxiv-citation">arxiv-citation</a> with it to <a href="/posts/phd-workflow/2022-05-01-my-phd-workflow.html#citations">produce a
citation entry in my bibliography
files</a>:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ot">callArXiv ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">X</span> ()</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>callArXiv fun <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  url <span class="ot">&lt;-</span> getSelection  <span class="co">-- from X.U.XSelection</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>  proc <span class="op">$</span> inEmacs</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>     <span class="op">&gt;-&gt;</span> withEmacsLibs [ <span class="dt">ElpaLib</span> <span class="st">&quot;dash&quot;</span>, <span class="dt">ElpaLib</span> <span class="st">&quot;s&quot;</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>                       , <span class="dt">ElpaLib</span> <span class="st">&quot;arxiv-citation&quot;</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>                       , <span class="dt">Special</span> <span class="st">&quot;~/.config/emacs/private-stuff.el&quot;</span> ]</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>     <span class="op">&gt;-&gt;</span> asBatch</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>     <span class="op">&gt;-&gt;</span> eval (progn [require <span class="st">&quot;arxiv-citation&quot;</span>, fun <span class="op">&lt;&gt;</span> asString url])</span></code></pre></div>
<p>When executed, this translates to something like</p>
<pre><code>emacs -L /home/slot/.config/emacs/elpa/dash-20220417.2250
      -L /home/slot/.config/emacs/elpa/s-20210616.619
      -L /home/slot/.config/emacs/elpa/arxiv-citation-20220510.1137/
      --batch
      --eval '(progn
                (require (quote arxiv-citation))
                (arXiv-citation &quot;&lt;url-in-the-primary-selection&gt;&quot;))'</code></pre>
<p>I certainly know which one I’d rather type—especially with ELPA
directory names changing quite frequently! On that note,
<a href="https://github.com/slotthe/arxiv-citation">arxiv-citation</a> is on MELPA now; yay!</p>
<h3 id="other-programs">Other programs</h3>
<p>As this is my main use case for it, the new features of
<code>XMonad.Util.Run</code> are quite specialised for Emacs. However, even for
other programs they may well come in handy. Drawing from the point
about scratchpads again, here is a hypothetical one that spawns a ghci
session:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>  ghci <span class="ot">&lt;-</span> proc <span class="op">$</span> inTerm <span class="op">&gt;-&gt;</span> setXClass calcInstName <span class="op">&gt;-&gt;</span> execute <span class="st">&quot;ghci&quot;</span></span></code></pre></div>
<p>Further, something that’s useful when dealing with <a href="/posts/phd-workflow/2022-05-01-my-phd-workflow.html#topics">topic-based
workspaces</a>
is spawning a terminal or an editor already in the current topic
directory:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">XMonad.Actions.TopicSpace</span>  <span class="co">-- for currentTopicDir and more</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>topicConfig <span class="ot">=</span> …</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="ot">spawnTermInTopic ::</span> <span class="dt">X</span> ()</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>spawnTermInTopic <span class="ot">=</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>  proc <span class="op">$</span> termInDir <span class="op">&gt;-$</span> currentTopicDir topicConfig</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a><span class="co">-- Optionally, modify the path to the editor with a function.</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="ot">spawnEditorInTopic ::</span> (<span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span>) <span class="ot">-&gt;</span> <span class="dt">X</span> ()</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>spawnEditorInTopic with <span class="ot">=</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>  proc <span class="op">$</span> inEditor <span class="op">&gt;-$</span> with <span class="op">&lt;$&gt;</span> currentTopicDir topicConfig</span></code></pre></div>
<p>Quite convenient if you ask me.</p>
<p>If you have or know of a use case you would like to support but which is
awkward with the current set of functions and combinators do not
hesitate to open a pull request or an issue!</p>
<h2 id="implementation-considerations">Implementation considerations</h2>
<p>The implementation is actually very straightforward—no really, check out
the
<a href="https://github.com/xmonad/xmonad-contrib/blob/master/XMonad/Util/Run.hs#L303">source</a>
if you don’t believe me!</p>
<p>One concept that’s still worth touching upon is the internal use of
<a href="https://github.com/spl/dlist#references">difference list</a>s. The basic idea of these things is that, instead of
concatenating strings one by one, we create functions <code>String -&gt; String</code>
and then use function composition to do the work for us:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Ordinary string concatenation</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;string1&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string2&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string3&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string4&quot;</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Using difference lists:</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>  string1, string2, string3,<span class="ot"> string4 ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>  string1 s <span class="ot">=</span> <span class="st">&quot;string1&quot;</span> <span class="op">&lt;&gt;</span> s</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>  string2 s <span class="ot">=</span> …</span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>  string1 <span class="op">.</span> string2 <span class="op">.</span> string3 <span class="op">.</span> string4 <span class="op">$</span> <span class="st">&quot;&quot;</span></span></code></pre></div>
<p>Note how we have to apply the entire thing to <code>""</code> at the end in order
to actually get a string back. As a concrete example, assuming we have
set <code>"Emacs"</code> as our editor, the <code>inEditor</code> function would essentially
be</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="ot">inEditor ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>inEditor s <span class="ot">=</span> <span class="st">&quot; Emacs &quot;</span> <span class="op">&lt;&gt;</span> s</span></code></pre></div>
<p>There are some further considerations to be made, since we are in the
<code>X</code> monad and thus the type is actually <code>X (String -&gt; String)</code> instead
of just <code>String -&gt; String</code>, but that isn’t too important for us here.</p>
<p>Difference lists have some performance advantages over the traditional
concatenation of strings. The concatenation <code>(&lt;&gt;)</code> on strings is left
associative by default and so</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;string1&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string2&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string3&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string4&quot;</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>  ≡ ((<span class="st">&quot;string1&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string2&quot;</span>) <span class="op">&lt;&gt;</span> <span class="st">&quot;string3&quot;</span>) <span class="op">&lt;&gt;</span> <span class="st">&quot;string4&quot;</span></span></code></pre></div>
<p>However, the complexity characteristics of this operation are working
against us here; the definition of <code>(&lt;&gt;)</code> on <code>String</code><a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> is</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="ot">(&lt;&gt;) ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>[]       <span class="op">&lt;&gt;</span> ys <span class="ot">=</span>           ys</span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>(x <span class="op">:</span> xs) <span class="op">&lt;&gt;</span> ys <span class="ot">=</span> x <span class="op">:</span> xs <span class="op">&lt;&gt;</span> ys</span></code></pre></div>
<p>We are merely traversing the first string, leaving the second one
completely untouched (and unevaluated!). All in all, this means that
<code>s₁ &lt;&gt; s₂</code> is in <code>𝓞(|s₁|)</code>; given an expression of the form</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>  ((<span class="st">&quot;string1&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string2&quot;</span>) <span class="op">&lt;&gt;</span> <span class="st">&quot;string3&quot;</span>) <span class="op">&lt;&gt;</span> <span class="st">&quot;string4&quot;</span></span></code></pre></div>
<p>we will have to walk over <code>"string1"</code> three times! What we actually
want is a right-associative ordering—exactly what function compositions
gives us. Spelled out,</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>    string1 <span class="op">.</span> string2 <span class="op">.</span> string3 <span class="op">.</span> string4 <span class="op">$</span> <span class="st">&quot;&quot;</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>  ≡ string1 (string2 (string3 (string4 <span class="st">&quot;&quot;</span>)))</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>  ≡ <span class="st">&quot;string1&quot;</span> <span class="op">&lt;&gt;</span> (<span class="st">&quot;string2&quot;</span> <span class="op">&lt;&gt;</span> (<span class="st">&quot;string3&quot;</span> <span class="op">&lt;&gt;</span> (<span class="st">&quot;string4&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;&quot;</span>)))</span></code></pre></div>
<p>which yields the desired behaviour. In fact, this is so canonical that
instead of using <code>(.)</code>, we could have also—perhaps a bit
confusingly—used <code>(&lt;&gt;)</code> directly:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a>    string1  <span class="op">.</span> string2  <span class="op">.</span> string3  <span class="op">.</span> string4</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>  ≡ string1 <span class="op">&lt;&gt;</span> string2 <span class="op">&lt;&gt;</span> string3 <span class="op">&lt;&gt;</span> string4</span></code></pre></div>
<p>This is the fact that the <em>endomorphisms</em> for any type <code>a</code>—the functions
<code>a -&gt; a</code>—form a <em>monoid</em>. That is to say that they come equipped with
an associative an unital operation: function composition. In Haskell,
<code>(&lt;&gt;)</code> is, in some sense,
<a href="https://www.haskell.org/tutorial/classes.html">overloaded</a> so that it
can be used with any monoidal composition one can think of!<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a></p>
<p>The attentive reader may have concluded that the pipe operator that we
called <code>(&gt;-&gt;)</code> above is really just <code>(&lt;&gt;)</code> in disguise, and that’s
exactly right! I, however, thought that for people not familiar with
Haskell, giving it a pipe-like appearance would be more conceptually
amenable to the threading idea.</p>
<p>I haven’t benchmarked this, so it’s not entirely clear to me whether
performance is actually relevant in this situation<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a>, but using
difference lists just feels right here, and so I did.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I have to say that I’m quite satisfied with this API. In fact, if I
compare it with the old code that only resided within my personal
config, this new version is even a bit more ergonomic in a few places,
despite having essentially no user-specific strings hardcoded anywhere!
As I said before, if you try this and find something missing, do let me
know and we’ll probably find a solution! If you try this and find it
useful, also let me know :)</p>
<p>Of course, technically none of this needs to live only inside your
XMonad config at all. In combination with the excellent <a href="https://hackage.haskell.org/package/turtle">turtle</a>
library, I reckon it would be quite easy to produce Haskell versions of
cool tools like magit.sh.<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a> Go nuts!</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>Alternatively, one could use the git versions of <code>xmonad</code> and
<code>xmonad-contrib</code>; refer to
<a href="https://xmonad.org/INSTALL.html">INSTALL</a> for more information.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>Really, this is the definition of <code>(++)</code> for arbitrary lists <code>[a]</code>
and <code>(&lt;&gt;) = (++)</code> for <code>String = [Char]</code>, but let’s not get into
that here.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>Really, for any <em>semigroup</em>, which is a slightly weaker notion of
an operation that is merely associative, but doesn’t necessarily
have a unit.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>I suspect that the answer is “probably not”—that didn’t stop me,
however!<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>Available <a href="https://github.com/alphapapa/magit.sh">here</a>. I also
maintain a slightly modified and POSIX shell compatible version
<a href="https://gitlab.com/slotThe/dotfiles/-/blob/master/scripts/.scripts/magit.sh">here</a>.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>My PhD Research Workflow</title>
    <link href="https://tony-zorman.com/posts/my-phd-workflow.html" />
    <id>https://tony-zorman.com/posts/my-phd-workflow.html</id>
    <published>2022-05-01T00:00:00Z</published>
    <updated>2022-05-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2022-05-01
      
      
        &thinsp;·&thinsp; last modified: 2022-05-23
      
      
        &thinsp;·&thinsp; <span title="2284 words">10 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>, <a title="All pages tagged 'maths'." href="/tags/maths.html" rel="tag">maths</a>, <a title="All pages tagged 'xmonad'." href="/tags/xmonad.html" rel="tag">xmonad</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>After reading <a href="https://castel.dev/post/research-workflow/">Gilles Castel</a>’s excellent blog post about his research
workflow, I decided that it was as good a time as any to write about
mine—deeming it novel enough to hopefully contribute something to the
discussion.</p>
<p>Just like Castel, I’m a new PhD student in mathematics, which means no
lab work and—in my case—no code. Just you and your inability to
understand basic concepts. As such, I often scribble things down on
paper or a blackboard first and, when sufficiently convinced that the
information is worth keeping around, type it up. Typesetting something
is a surprisingly effective way to catch errors in handwritten
manuscripts!</p>
<p>As basically my entire digital life happens in either <a href="https://www.gnu.org/software/emacs/">Emacs</a> or
<a href="https://xmonad.org/">XMonad</a>, my setup is heavily skewed in that direction; I will make use
of these tools almost every step of the way.
<!--more-->
As such, there is a lot of tangential almost relevant bits that I could
cover here. However, since these aren’t directly related to my
<em>research</em> workflow—and there is a lot of great resources out there
already—I decided to not do this here.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></p>
<h2 id="high-level-structure">High level structure</h2>
<h3 id="topics">Topics</h3>
<p>XMonad has a module called <a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Actions-TopicSpace.html">TopicSpace</a>, which upgrades the X11
workspace—virtual desktop—concept to so-called topics. These are
workspaces with a “theme” associated to them; for example, I have a
topic for every project that I’m currently working on. This results in
a clean separation of concerns. Plus, I always know where my windows
are!</p>
<p>Every topic has a directory and a “startup hook”, firing when the topic
is switched to and empty, associated to it. While most convenient for
programming related tasks—e.g., spawn <code>ghcid</code> in the relevant directory
or automatically build and open this website—it’s also quite convenient
for mathematical projects.</p>
<p>I have set up special keybindings to bring up an Emacs session in the
topic directory, or spawn a terminal there. Switching to topics is done
fuzzily via the XMonad prompt, which means I only have to type a few
characters to get to my destination. This makes it feasible to have 30
topics, instead of the usual 9 or so, in the first place. As a result,
it’s rather fast to go from thinking about a certain problem to working
on it. When I’m already inside a project, I leverage Emacs’s built-in
<code>project.el</code> library to search through files and the like.</p>
<p><img class="pure-img" src="../images/phd-workflow/topics.gif" alt="Navigation example"></p>
<h3 id="files">Files</h3>
<p>Here I keep things relatively simple; I have a big “library” directory
in which essentially all books or papers that I’ve ever read reside.
This may sound a bit chaotic, but since I never interact with this
as-a-directory it is actually the easiest and cleanest solution for me.</p>
<p>To keep a bit of order, all files are named in a consistent and
descriptive way: <code>authors_title.pdf</code>, where <code>authors</code> is a list of last
names of all authors separated by hyphens and <code>title</code> is the title of
the work, also separated by hyphens. For example:</p>
<pre><code>    pastro-street_double-of-a-monoidal-category.pdf</code></pre>
<p>Also in this directory are <code>.xopp</code> files, when I scribble on the
relevant PDFs in <a href="https://xournalpp.github.io/">xournalpp</a>; more on that later.</p>
<p>Instead of navigating to it, all interaction with the library is done
via <a href="https://github.com/slotthe/hmenu">hmenu</a>, a small wrapper around <a href="https://tools.suckless.org/dmenu/">dmenu</a> to facilitate this kind of
behaviour. I merely have to press <code>M-y</code><a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> and can then fuzzy search
through the directory. Once I’ve made a choice, PDFs are automatically
opened in <a href="https://pwmt.org/projects/zathura/">zathura</a> and <code>.xopp</code> files are opened in xournalpp.</p>
<p><img class="pure-img" src="../images/phd-workflow/hmenu.gif" alt="example hmenu usage"></p>
<p>My bibliography is organised in a similar spirit; see
<a href="#citations">Citations</a>.</p>
<h2 id="note-taking">Note taking</h2>
<h3 id="handwritten-notes">Handwritten notes</h3>
<p>For handwritten notes I… use real paper! A little elaboration is
probably in order, having talked about <code>.xopp</code> files and xournalpp
above. I do have a Wacom tablet lying around and I’m quite happy
annotating PDFs with it. In lieu of printing everything out, this
alleviates a little bit of the usual pain with reading papers, like
coming back to one three weeks later and getting stuck on the same
calculation as last time. I do love those annotations!</p>
<p>However, there is just something deeply psychologically pleasing about
ordinary pen and paper—nothing beats drawing up the first version of
many ideas there. It’s a very “pure” experience: there’s no noise or
distractions, nothing that could break, no additional layer of
abstraction between you and the maths. Chalkboards—but not whiteboards,
with their ever empty markers—fall into this category as well,
especially when collaborating with others.</p>
<p>Not without my quirks (as I’m sure you’ve noticed), I’m a bit picky
about the particular writing setup. It’s either completely white A5<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>
paper, paired with a good (mechanical) pencil/a fine pen, or thick
dotted paper, paired with a fountain pen.</p>
<p>Quite enjoying the experience, I tend to write quite a lot of
manuscripts by hand first. Of course, anything that’s supposed to be
permanent should be typed up properly!</p>
<h3 id="digital-notes">Digital notes</h3>
<p>Not wanting to go insane, I use LaTeX for all of my digital note taking.
My writing setup for <code>.tex</code> files is pretty similar to <a href="https://karthinks.com/software/latex-input-for-impatient-scholars/">Karthik
Chikmagalur</a>’s—whose excellent post you should definitely check out—so I
will not belabour the point too much here. The tl;dr is <a href="https://www.gnu.org/software/auctex/">AUCTeX</a>,
<a href="https://github.com/cdominik/cdlatex">CDLaTeX</a>, and <a href="https://github.com/ymarco/auto-activating-snippets">aas</a>.</p>
<p><img class="pure-img" src="../images/phd-workflow/input.gif" alt="LaTeX input example"></p>
<p>In case you’re not used to <code>prettify-symbols-mode</code>: the inserted LaTeX
code was</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">\begin</span>{<span class="ex">definition</span>} <span class="kw">\label</span>{<span class="ex">def:day-convolution</span>}</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  The <span class="fu">\emph</span>{Day convolution} of two functors <span class="ss">$F$</span> and <span class="ss">$G$</span> is</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  <span class="ss">\[</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="ss">    F * G </span><span class="sc">\defeq</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="ss">      </span><span class="sc">\int</span><span class="ss">^{C,D </span><span class="sc">\in</span><span class="ss"> </span><span class="sc">\cc</span><span class="ss">} </span><span class="sc">\cc</span><span class="ss">(C </span><span class="sc">\otimes</span><span class="ss"> D, </span><span class="sc">\blank</span><span class="ss">) </span><span class="sc">\otimes</span><span class="ss"> FC </span><span class="sc">\otimes</span><span class="ss"> GD.</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="ss">  \]</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="kw">\end</span>{<span class="ex">definition</span>}</span></code></pre></div>
<p>I do use some smaller packages not mentioned in Chikmagalur’s article,
like <a href="https://github.com/oantolin/math-delimiters">math-delimiters</a> and <a href="https://github.com/slotthe/change-env">latex-change-env</a>. The former is for
quickly changing between inline and display math, complete with slurping
punctuation symbols into display math and barfing them out of inline
math. For example, “<code>$1 + 1$.</code>” becomes “<code>\[1 + 1.\]</code>” (with line
breaks) and back.</p>
<p>The <code>latex-change-env</code> package is for changing between different kinds
of environments, including display math, while offering to rename labels
across the project if necessary. When deleting a label from an
environment, it also remembers this for the session!<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a></p>
<p><img class="pure-img" src="../images/phd-workflow/label-renaming.gif" alt="latex-change-env showcase"></p>
<p>One neat feature of AUCTeX that I find myself using more and more often
lately is the in-buffer preview.<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a> Usually when writing a draft I’m
not that interested in how exactly something looks in the PDF—that part
comes later, believe me. In cases like these, just calling
<code>preview-buffer</code> is quite convenient and lets me use the screen real
estate that a PDF viewer would have taken up for something else.</p>
<p><img class="pure-img" src="../images/phd-workflow/preview.gif" alt="latex-preview showcase"></p>
<p>I always use pure LaTeX for writing papers, drafts, or presentations.
However, I also take lots of notes in <a href="https://orgmode.org/">org-mode</a>, which, as a crude
first approximation, is something like a markup language that’s <em>very</em>
well integrated into Emacs.</p>
<p>For the actual note-taking, I use the venerable <a href="https://www.orgroam.com/">org-roam</a>—a free
software alternative to the proprietary Roam Research program—to jot
down things that I’d like to remember for more than three days.
Org-roam describes itself as a “plain-text personal knowledge management
system”, which fits the bill pretty well. In short, it’s a note taking
system in the spirit of the <a href="https://en.wikipedia.org/wiki/zettelkasten">Zettelkasten</a> method, which is essentially
about having lots of notes with lots of backlinks to related concepts:</p>
<p><img class="pure-img" src="../images/phd-workflow/backlinks.png" alt="org-roam showcase"></p>
<p>In fact, using <a href="https://github.com/org-roam/org-roam-ui">org-roam-ui</a>, one can even visualise the entire
Zettelkasten as an interactive and pretty graph in which notes become
nodes and backlinks become edges!</p>
<div class="pure-g">
<div class="pure-u-1-2">
<img class="pure-img" src="../images/phd-workflow/org-roam-ui-close.png" alt="org-roam-ui example zoomed-in">
</div>
<div class="pure-u-1-2">
<img class="pure-img" src="../images/phd-workflow/org-roam-ui-far.png" alt="org-roam-ui example zoomed-out">
</div>
</div>
<p>Org-roam <a href="https://github.com/org-roam/org-roam#configuration">suggests
keybindings</a> for all
of the most important concepts: creating notes, inserting them, showing
all of the backlinks of a file, etc. An important extra that I’ve added
is having two “types” of notes: <code>reference</code>s, where things that I
learned but are otherwise known reside, and <code>novel</code>s, where I put my own
ideas.</p>
<p>As I’m predisposed to quite easily forget details, I regularly engage
with my Zettelkasten, so as to keep things fresh in my mind. Reading
through all of the notes that are relevant to what I’m currently working
on, creating new backlinks, filling in gaps, even deleting old
information and re-organising some local region of the graph. Indeed, I
tag every new entry as a <code>draft</code> until further notice, forcing me to go
back there especially. This results in pretty good recollection of the
most important facts, even with my brain.</p>
<h2 id="staying-up-to-date">Staying up to date</h2>
<p>I use <a href="https://github.com/skeeto/elfeed">elfeed</a> to query the <a href="https://arxiv.org/">arXiv</a> for new preprints that are of
interest to me. Thankfully, the fields I’m subscribed to tend to be
moving slow-ish and so I can manage to at least read the abstract of
every paper that pops up in my feed. There is also <a href="https://gitlab.com/slotThe/dotfiles/-/blob/afa8fd39cea2647152038e3f4dd42f1dbd66c413/emacs/.config/emacs/lisp/rss.el#L61">a little bit of
elisp</a>
involved to print arXiv entries in a more readable way than the default
formatting.</p>
<p>When the abstract interests me, I usually directly download the paper
into my library and open it with zathura. This is fully automated via
<a href="https://github.com/slotthe/arxiv-citation">arxiv-citation</a>—more on that later. I merely have to press <code>C-c d</code>
while looking at a paper and magic happens!</p>
<p><img class="pure-img" src="../images/phd-workflow/elfeed.gif" alt="elfeed showcase"></p>
<p>In the above gif, on the right-hand side you can see a score associated
to each entry. While reading every abstract has worked quite well for
me thus far, it’s nice to get the papers that are “probably interesting”
high up, so that I’m more likely to notice them sooner rather than
later. I use <a href="https://github.com/sp1ff/elfeed-score">elfeed-score</a> for this, which integrates seamlessly into
the rest of the machinery. It compares certain features of the entry
(like the title and abstract) with a list of regular expressions,
increasing the total score of the entry every time it matches something.</p>
<p>Speaking of the arXiv, in XMonad I have bound <code>M-s a</code> to look up the
given string there. Likewise, <a href="https://zbmath.org/">zbmath</a> is searched with <code>M-s z</code>. When
these commands get a “universal argument”—an Emacs concept that XMonad
borrowed—they automatically start a search with the current selection
instead. Briefly, pressing <code>M-u</code> before a command can modify it in
different ways. All of my search commands act on the <a href="https://www.jwz.org/doc/x-cut-and-paste.html">primary
selection</a> when given such an argument; <code>M-u M-s &lt;letter&gt;</code> will look up
the currently selected text on the relevant “search engine”. One
instance where this is useful is for quickly switching between the arXiv
and zbmath:</p>
<p><img class="pure-img" src="../images/phd-workflow/selected-search.gif" alt="XMonad.Actions.Search showcase"></p>
<h3 id="citations">Citations</h3>
<p>For citation management, I use a very simple system—no Zotero, JabRef,
or similar technology. Concretely, this means that I have a blessed
bibliography file somewhere within my home directory and I either
symlink (when I’m writing something alone) or copy (when working with at
least one coauthor) the file into the relevant project directory. In
case of a copy operation, I only have to update a single variable in
Emacs (<code>arxiv-citation-bibtex-files</code>), which is good enough for me and
doesn’t seem to warrant a slightly more automated, yet probably much
more complicated solution.</p>
<p>Adding new citations is done via the now aptly named Emacs package
<a href="https://github.com/slotthe/arxiv-citation">arxiv-citation</a><a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a> with <a href="https://gitlab.com/slotThe/dotfiles/-/blob/afa8fd39cea2647152038e3f4dd42f1dbd66c413/xmonad/.config/xmonad/src/xmonad.hs#L576">a bit of
plumbing</a>
on the XMonad side to get Emacs going. The basic idea is that—given an
arXiv or zbmath link—we first look up the paper on zbmath to see if it
was published and, if not, just use the arXiv data to construct our own
bibliography entry instead. By default, my keybinding for this acts on
the primary selection, so I merely have to highlight the link, press
<code>M-o a</code>, sit back, and enjoy the show. The following gif should help
drive home the point, also showcasing the format of a not yet published
paper and a published one.</p>
<p><img class="pure-img" src="../images/phd-workflow/arXiv-citation.gif" alt="arXiv-citation showcase"></p>
<h2 id="final-thoughts">Final thoughts</h2>
<p>And that’s it! If nothing else, this post helped me to nail down some
ideas that I had lying around and got me to finally clean up and publish
many of the extensions talked about here—that’s already a win in my
book.</p>
<p>I’m sure that some details will change over the course of the next three
years as I mature mathematically and my needs change, but overall I feel
pretty comfortable with this setup.</p>
<h5 id="addendum">Addendum</h5>
<p>Thanks to everyone who reached out! I received some inquiries as to my
configurations, so here are the most important bits again, for your
convenience:
<a href="https://gitlab.com/slotThe/dotfiles/-/tree/master/emacs">my Emacs config</a>,
<a href="https://gitlab.com/slotThe/dotfiles/-/tree/master/xmonad">my XMonad config</a>,
<a href="https://www.orgroam.com/">org-roam</a>, <a href="https://github.com/oantolin/math-delimiters">math-delimiters</a>, <a href="https://github.com/slotthe/arxiv-citation">arxiv-citation</a>, <a href="https://github.com/slotthe/change-env">latex-change-env</a>,
<a href="https://github.com/slotthe/hmenu">hmenu</a>.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>If you’d like some examples: being employed at a university also
means I have to worry a bit about efficiently dealing with
bureaucracy (<a href="https://notmuchmail.org/">notmuch.el</a>), keeping some sort of up-to-date
calendar and readable todo-notes (<a href="https://orgmode.org/">org-mode</a> and goodies, as well
as integration via <a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Prompt-OrgMode.html">XMonad’s OrgMode prompt</a>), accessing the
universities internal nextcloud server (<a href="https://gitlab.com/hperrey/khalel">khalel</a> and <code>davfs2</code> or
<code>TRAMP</code>), … You get the idea.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>I will be using Emacs style notation throughout the article. This
means that, for example, <code>C-x a</code> should be read as “hold down
control and press x, then release both and press a”. You can of
course safely ignore this, since the keys just serve illustrative
purposes. An important note for Emacs users, lest anyone be
confused: in XMonad, <code>M-</code> usually does <strong>not</strong> refer to the Meta
key, but to the <code>modMask</code> that the user specified. This is indeed
<code>&lt;Alt&gt;</code> by default, but many people understandably rebind this
straight away to something that’s less likely to interfere with
other programs. In my case, that’s the Super key, so <code>M-s</code> means
<code>&lt;Super&gt;-s</code> and not <code>&lt;Alt&gt;-s</code>.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>Although, admittedly, when drawing up large diagrams I’m sometimes
forced to switch to A4 paper in landscape mode.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>This is based on the hash of the contents of the environment—if
that changes, the label is “lost”; though it can of course still
be retrieved manually from the relevant hash map.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>This is, in part, due to the new <code>pixel-scroll-precision-mode</code> in
Emacs 29, making use of XInput 2.4 functionality. It makes
scrolling through buffers that are quite dense with pictures
rather smooth.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6"><p>Ostensibly, this should be an XMonad module, as it does not
necessarily have anything to do with Emacs itself. However, I had
already written the elfeed integration and so the most annoying
part (scraping the arXiv xml for certain bits) was already done.
On the other hand, there are more Emacs than XMonad users, so
perhaps doing it like this will help more people anyways.<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>

</feed>
