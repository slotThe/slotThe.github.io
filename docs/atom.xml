<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Tony Zorman · Blog</title>
    <link href="https://tony-zorman.com/atom.xml" rel="self" />
    <link href="https://tony-zorman.com" />
    <id>https://tony-zorman.com/atom.xml</id>
    <author>
        <name>Tony Zorman</name>
        
        <email>mail@tony-zorman.com</email>
        
    </author>
    <updated>2025-07-28T00:00:00Z</updated>
    <entry>
    <title>Parsing CSV in BQN</title>
    <link href="https://tony-zorman.com/posts/bqn-csv.html" />
    <id>https://tony-zorman.com/posts/bqn-csv.html</id>
    <published>2025-07-28T00:00:00Z</published>
    <updated>2025-07-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2025-07-28
      
      
      
        &thinsp;·&thinsp; <span title="1857 words">8 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'BQN'." href="/tags/BQN.html" rel="tag">BQN</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>Let’s write a CSV parser in BQN!</p>
<!--more-->
<p>Working my way towards a full blown JSON parser,
I thought it might be a good idea to start with something simpler<!--
-->—<a href="https://www.ietf.org/rfc/rfc4180.txt">RFC 4180</a> sounds like a good candidate.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>
Plus, there is also a great reference implementation available in
<a href="https://github.com/mlochbaum/bqn-libs/blob/master/csv.bqn">bqn-libs</a>.</p>
<p>This article will assume that you are already at least a little bit familiar with BQN as a language.
If not, I would recommend starting with the official <a href="https://mlochbaum.github.io/BQN/tutorial/index.html">tutorials</a>.
I’ve also written about my experience <a href="https://tony-zorman.com/posts/aoc-in-bqn.html">using BQN</a> for Advent of Code,
which certainly contains some amount of written words that talk about the language.</p>
<h2 id="the-simplest-case">The simplest case</h2>
<p>We’ll start with a subset of CSV in which we don’t have to think about escaping at all.
That is, we only allow files that look like this:</p>
<pre><code>a,b,c,d
e,f,g,h</code></pre>
<p>Let’s also permit lines of varying lengths;
this doesn’t really change the implementation much, but I find it quite convenient sometimes.
This simple case is quite straightforward to implement:
we start with finding all occurrences of newlines and commas in the input string</p>
<pre class="bqn"><code>    inp
&quot;a,b,c,d
e,f,g,h&quot;
    [c,n] ← (','∾@+10) =⌜ inp
┌─
╵ 0 1 0 1 0 1 0 0 0 1 0 1 0 1 0
  0 0 0 0 0 0 0 1 0 0 0 0 0 0 0
                                ┘</code></pre>
<p>and then split the string accordingly:</p>
<pre class="bqn"><code>    s ← n∨c                          # Where to split
⟨ 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 ⟩
    (1-˜(¬s)×1+`s) ⊔ inp
⟨ &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; ⟩</code></pre>
<p>Having all of the “tokens” ready,
one just needs to split at the newlines while keeping the shorter list of all splits in mind.</p>
<pre class="bqn"><code>    (0∾s/+`n) ⊔ (1-˜(¬s)×1+`s) ⊔ inp
⟨ ⟨ &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; ⟩ ⟨ &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; ⟩ ⟩</code></pre>
<p>Easy.</p>
<p>Now, this was probably quite fast—if not, feel free to skip to the next section.
Let’s go through that last line more carefully, as it contains lots of important concepts for array-oriented parsing.</p>
<p>First, we create a depth scan according to all characters we’d like to split the string at:<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a></p>
<pre class="bqn"><code>    inp≍ 1+`s
┌─
╵ 'a' ',' 'b' ',' 'c' ',' 'd' '\n' 'e' ',' 'f' ',' 'g' ',' 'h'
   1   2   2   3   3   4   4   5    5   6   6   7   7   8   8
                                                              ┘</code></pre>
<p>To single out all of the characters that we’d like to delete<!--
-->—i.e., the ones we are splitting at—<!--
-->we multiply the depth scan by <code>¬s</code>,
set all commas and newlines to <code>0</code>,
and then subtract one.</p>
<pre class="bqn"><code>    inp≍ 1-˜(¬s)×1+`s
┌─
╵ 'a' ',' 'b' ',' 'c' ',' 'd' '\n' 'e' ',' 'f' ',' 'g' ',' 'h'
   0  ¯1   1  ¯1   2  ¯1   3   ¯1   4  ¯1   5  ¯1   6  ¯1   7
                                                              ┘
    sl ← (1-˜(¬s)×1+`s) ⊔ inp
⟨ &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; ⟩</code></pre>
<p>This is also why we gave the depth scan above an initial argument of <code>1</code>—otherwise, we’d get</p>
<pre class="bqn"><code>    inp≍ 1-˜(¬s)×+`s
┌─
╵ 'a' ',' 'b' ',' 'c' ',' 'd' '\n' 'e' ',' 'f' ',' 'g' ',' 'h'
  ¯1  ¯1   0  ¯1   1  ¯1   2   ¯1   3  ¯1   4  ¯1   5  ¯1   6
                                                              ┘</code></pre>
<p>Next on the agenda is splitting the split list <code>sl</code> itself according to line breaks.
For that we again do a depth scan, only this time we use the newline array <code>n</code>.</p>
<pre class="bqn"><code>    +`n
⟨ 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 ⟩</code></pre>
<p>Now we replicate the appropriate cells in this array according to <code>s</code>.
This yields a grouping of the different splitting characters into their respective lines.</p>
<pre class="bqn"><code>    inp≍+`n
┌─
╵ 'a' ',' 'b' ',' 'c' ',' 'd' '\n' 'e' ',' 'f' ',' 'g' ',' 'h'
   0   0   0   0   0   0   0    1   1   1   1   1   1   1   1
                                                              ┘
    (s/inp)≍(s/+`n)
┌─
╵ ',' ',' ',' '\n' ',' ',' ','
   0   0   0    1   1   1   1
                              ┘</code></pre>
<p>Since we don’t operate on the objects directly,
but rather on their “connections”—I think of this a bit like a graph—,
we additionally have to add a starting cell for the first object.</p>
<pre class="bqn"><code>    (0∾s/+`n) ⊔ sl
⟨ ⟨ &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; ⟩ ⟨ &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; ⟩ ⟩</code></pre>
<p>Putting it all together, we have something like</p>
<pre class="bqn"><code>CSV ← {
  [c,n] ← (','∾@+10) =⌜ 𝕩
  s ← n∨c
  (0∾s/+`n) ⊔ (1-˜(¬s)×1+`s) ⊔ 𝕩
}</code></pre>
<p>which works as expected:<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a></p>
<pre class="bqn"><code>    CSV &quot;aaaa,b,c,d&quot;∾(@+10)∾&quot;e,f&quot;
⟨ ⟨ &quot;aaaa&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; ⟩ ⟨ &quot;e&quot; &quot;f&quot; ⟩ ⟩</code></pre>
<h2 id="adding-escaping">Adding escaping</h2>
<p>If a field contains commas or newlines, they need to be escaped in some way.
The way that CSV handles this is that those fields are to be enclosed in double quotes:</p>
<pre><code>a,&quot;b,c
d,e&quot;</code></pre>
<p>This is a single line with two fields, one containing <code>a</code> and one containing <code>b,c,\nd,e</code>.
Within a quoted field, a <code>"</code> can be written as <code>""</code>;
the following example consists of a single field with value <code>"a","b"</code></p>
<pre><code>&quot;&quot;&quot;a&quot;&quot;,&quot;&quot;b&quot;&quot;&quot;</code></pre>
<p>In terms of parsing,
the first thing we need is to somehow figure out which characters are escaped.
Thankfully, this turns out to be pretty easy—start in an unescaped setting,
and then every time a quote is encountered, flip some “are we quoted yet?”-bit.
In code, this can rather beautifully be expressed as a not-equal scan:<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a></p>
<pre class="bqn"><code>    inp ← &quot;a,&quot;&quot;b,&quot;&quot;&quot;&quot;b'&quot;&quot;&quot;&quot;,b''&quot;&quot;,c&quot;    # a,&quot;b,&quot;&quot;b&quot;&quot;,b''&quot;,c
&quot;a,&quot;&quot;b,&quot;&quot;&quot;&quot;b'&quot;&quot;&quot;&quot;,b''&quot;&quot;,c&quot;
    [q,c,n] ← ('&quot;'∾','∾@+10) =⌜ inp
┌─
╵ 0 0 1 0 0 1 1 0 0 1 1 0 0 0 0 1 0 0   # quotes   q
  0 1 0 0 1 0 0 0 0 0 0 1 0 0 0 0 1 0   # commas   c
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0   # newlines n
                                      ┘
    e ← ≠`q                             # escaped
⟨ 0 0 1 1 1 0 1 1 1 0 1 1 1 1 1 0 0 0 ⟩
    inp≍e
┌─
╵ 'a' ',' '&quot;' 'b' ',' '&quot;' '&quot;' 'b' ''' '&quot;' '&quot;' ',' 'b' ''' ''' '&quot;' ',' 'c'
   0   0   1   1   1   0   1   1   1   0   1   1   1   1   1   0   0   0
                                                                         ┘</code></pre>
<p>The next step is a little non obvious—at least to me.
Instead of having a single variable <code>s←n∨c</code> that controls where to split the text,
we will instead have two: one for where to split, and one for which separators to drop.
The latter is needed because we don’t actually want to keep all of the double quotes when parsing the CSV into a BQN type.
For example, the above <code>"a,""b,""""b'"""",b''"",c"</code> should parse to something like <code>⟨"a"‿"b,""b'"",b''"‿"c"⟩</code>.</p>
<p>For splitting, we can use the exact same logic as in the first version of the parser,
now additionally taking into consideration the escaped flag.
Using the definitions from above:</p>
<pre class="bqn"><code>    inp≍ s←(¬e)∧c∨n  # split
┌─
╵ 'a' ',' '&quot;' 'b' ',' '&quot;' '&quot;' 'b' ''' '&quot;' '&quot;' ',' 'b' ''' ''' '&quot;' ',' 'c'
   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0
                                                                         ┘</code></pre>
<p>Dropping is a little bit more finicky,
so let’s start with something slightly simpler.
Essentially, we want to drop double quotes that are used to start an escaped field,
and only want to keep one pair of quotes on the inside of such a field.
The above mentioned transformation</p>
<pre><code>&quot;a,&quot;&quot;b,&quot;&quot;&quot;&quot;b'&quot;&quot;&quot;&quot;,b''&quot;&quot;,c&quot;   -&gt;   ⟨&quot;a&quot;‿&quot;b,&quot;&quot;b'&quot;&quot;,b''&quot;‿&quot;c&quot;⟩</code></pre>
<p>should illustrate what I mean.
One way to achieve this is to mark all last occurrences of double quotes,
along with all separators.</p>
<pre class="bqn"><code>    inp≍ d←s∨«⊸&lt;q # what to drop
┌─
╵ 'a' ',' '&quot;' 'b' ',' '&quot;' '&quot;' 'b' ''' '&quot;' '&quot;' ',' 'b' ''' ''' '&quot;' ',' 'c'
   0   1   1   0   0   0   1   0   0   0   1   0   0   0   0   1   1   0
                                                                          ┘</code></pre>
<p>Cutting up the input string now works essentially like the first version,
just that we have to take care where to insert <code>s</code> and where to insert <code>d</code> now.
Only “real” separators should increase the depth of an expression,
while for singling them out we have to consider all characters that are to be dropped.</p>
<pre class="bqn"><code>    1-˜(¬d)×1+`s
⟨ 0 ¯1 ¯1 1 1 1 ¯1 1 1 1 ¯1 1 1 1 1 ¯1 ¯1 2 ⟩
    (1-˜(¬d)×1+`s) ⊔ inp
⟨ &quot;a&quot; &quot;b,&quot;&quot;b'&quot;&quot;,b''&quot; &quot;c&quot; ⟩</code></pre>
<p>Likewise, when grouping the fields by line we have to be careful to only talk about unescaped newlines.</p>
<pre class="bqn"><code>    +`(¬e)∧n
⟨ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ⟩
    0∾s/+`(¬e)∧n
⟨ 0 0 0 ⟩
    (0∾s/+`(¬e)∧n) ⊔ (1-˜(¬d)×1+`s) ⊔ inp
⟨ ⟨ &quot;a&quot; &quot;b,&quot;&quot;b'&quot;&quot;,b''&quot; &quot;c&quot; ⟩ ⟩
</code></pre>
<p>All in all, the second version of our CSV function looks like this:</p>
<pre class="bqn"><code>CSV ⇐ {
  [q,c,n] ← ('&quot;'∾','∾@+10) =⌜ 𝕩        # Quote, comma, LF
  e ← ≠`q                              # Escapes
  s ← (¬e)∧n∨c                         # Where to split
  d ← s∨«⊸&lt;q                           # What to drop
  (0∾s/+`(¬e)∧n) ⊔ (1-˜(¬d)×1+`s) ⊔ 𝕩  # First split all, then split lines
}</code></pre>
<hr />
<p>This works in almost all cases already,
though there is some unexpected behaviour surrounding empty fields:</p>
<pre class="bqn"><code>    CSV &quot;a,,b&quot;
┌─
· ⟨ &quot;a&quot; ⟨⟩ &quot;b&quot; ⟩
                 ┘
    CSV &quot;a,&quot;&quot;&quot;&quot;,b&quot;
⟨ ⟨ &quot;a&quot; &quot;&quot;&quot;&quot; &quot;b&quot; ⟩ ⟩</code></pre>
<p>Those two expressions should probably be equivalent.
Since we already mark the last occurrences of each quote,
we just have to make sure that we additionally mark those that are also escaped.
Changing</p>
<pre class="bqn"><code>  d ← s∨«⊸&lt;q                           # What to drop</code></pre>
<p>to</p>
<pre class="bqn"><code>  d ← s∨q∧e∨«⊸&lt;q                       # What to drop</code></pre>
<p>now parses both cases correctly:</p>
<pre class="bqn"><code>    (CSV &quot;a,,b&quot;) ≡ CSV &quot;a,&quot;&quot;&quot;&quot;,b&quot;
1</code></pre>
<hr />
<p>Here are some exercises for the interested reader:</p>
<ol type="1">
<li><p>Generalise the <code>CSV</code> function to take arbitrary separators instead of just a comma.
This can rather elegantly be achieved by making it an ambivalent function,
with the monadic case just being <code>',' CSV 𝕩</code>.</p></li>
<li><p>Add some failure states, like actually honouring</p>
<blockquote>
<p>Each line should contain the same number of fields throughout the file.</p>
</blockquote>
<p>from the RFC.
This could just use
<a href="https://mlochbaum.github.io/BQN/doc/assert.html">assert</a>
to print an error message to the user.</p></li>
<li><p>I’ve very efficiently ignored that CRLF line endings exist, so I guess that one’s still missing?</p></li>
</ol>
<h2 id="conclusion">Conclusion</h2>
<p>Q: Is writing (and reading) a parser in an array language unnecessarily hard?<br />
A: Yes.</p>
<p>Q: Is it the most fun I’ve had programming in a long time?<br />
A: Yes.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>For the sake of convenience, I will interpret the RFC somewhat loosely in places,
though hopefully still implementing the gist of it.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>{-} BQN doesn’t actually escape non-double-quote characters in strings,
but I’ve chosen to write <code>\n</code> here instead of a literal newline for readability.</p>
<p>Also, I will use
<a href="https://mlochbaum.github.io/BQN/doc/couple.html">couple</a>
quite a bit to visualise the different masks in relation to the original character array going in,
in case you were wondering what that glyph meant.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>{-} 󠀠</p>
<p>Since BQN doesn’t do escaping in strings,
I make use of
<a href="https://mlochbaum.github.io/BQN/doc/types.html#characters">character arithmetic</a>
here, to represent the line feed by its decimal value.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>{-} 󠀠</p>
<p>As you can see, escaping is… fun.
Every character save a double quote is verbatim in BQN strings,
and double quotes are also escaped using two of them in succession.
This means that to input the CSV <code>"a"</code>, one would write <code>"""a"""</code>,
and for <code>"""a"",""b"""</code> we have the wonderful
<code>"""""""a"""",""""b"""""""</code>.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Dissertation Typesetting Considerations</title>
    <link href="https://tony-zorman.com/posts/phd-typesetting.html" />
    <id>https://tony-zorman.com/posts/phd-typesetting.html</id>
    <published>2025-04-13T00:00:00Z</published>
    <updated>2025-04-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2025-04-13
      
      
        &thinsp;·&thinsp; last modified: 2025-07-21
      
      
        &thinsp;·&thinsp; <span title="1881 words">8 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'LaTeX'." href="/tags/LaTeX.html" rel="tag">LaTeX</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>I just handed in my dissertation<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>,
which is more or less the culmination of the last three and a half years of my (mathematical) life.
While the maths itself is perhaps relatively inaccessible to the general public,
some of the typesetting considerations that went into the document might not be.</p>
<!--more-->
<p>For reference, here are a few pages of how the end product looks like:</p>
<figure>
<a href="../images/phd-typesetting/look1.pdf">
<img class="pure-img" src="../images/phd-typesetting/look1.png" alt="Two pages, one features a chapter beginning.">
</a>
</figure>
<figure>
<a href="../images/phd-typesetting/look2.pdf">
<img class="pure-img" src="../images/phd-typesetting/look2.png" alt="Two pages of the preliminaries.">
</a>
</figure>
<p>While this post really is about typography,
I will say that making LaTeX
<a href="https://tony-zorman.com/posts/speeding-up-latex.html">acceptably fast</a>
for these kinds of medium-sized documents really helped preserve an epsilon of sanity.
Fiddling around with preamble precompiling and externalisation is—while painful—definitely worth it.</p>
<h2 id="the-document-class">The document class</h2>
<p>I flip-flopped between the only two relevant contenders:
<a href="https://ctan.org/pkg/memoir">memoir</a>
and
<a href="https://ctan.org/pkg/koma-script">KOMA-script</a> (which features the <code>scrbook</code> class).
In the end, memoir won solely because I found the manual more pleasant to read,
and thus had an easier time customising things.<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>
I also had the feeling that memoir laid a more heavy emphasis on typographical considerations,
but this might be because I didn’t read the KOMA-script manual as closely.
This choice did probably not matter all that much in the grand scheme of things,
but I’m quite happy with memoir and would recommend it for any kind of book-length project.</p>
<h2 id="the-page-layout">The page layout</h2>
<p>The default <code>a4paper</code> page layout that memoir has is <em>fine</em>,
though <code>\isopage</code>—inspired by page dimensions suggested by Robert Bringhurst—yields a nicer looking printout in my opinion.
This is especially true with a slightly larger font size,
which is more or less mandatory if you have to print something in as big of a format as A4.</p>
<p><a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a><img class="pure-img" src="../images/phd-typesetting/memoir-pagelayout.png" alt="The different page layouts that memoir offers: the default for a4paper, \medievalpage, \isopage, and \semiisopage."></p>
<p>Being a little bit wider, it is also good for long-ish formulas and large-ish diagrams,
of which my thesis has more than enough.
Together with my chosen fonts below,
the final page layout results in a maximum of about 72 characters per line.
This is on the higher side of what I would prefer,
but either increasing the font size or decreasing the margins
would impede too much on the actual content,
so I kept it this way.</p>
<p>Sidenotes—much more on that later—are constrained to a maximum of around 21 characters via</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="fu">\setmarginnotes</span>{17pt}{80pt}{<span class="fu">\onelineskip</span>}</span></code></pre></div>
<p>This is quite narrow,
much narrower than the sidenotes on this website for example,
but still workable.
It certainly helps me to not go overboard with them,
which is not advisable anyways given the context of a dissertation in mathematics;
their mere existence probably stretches my
<a href="https://shimweasel.com/2018/08/25/novelty-budgets">novelty budget</a>
quite a bit.</p>
<h3 id="chapter-headings">Chapter headings</h3>
<p>For chapter headings memoir features a <code>bringhurst</code> chapter style,
which however doesn’t include the chapter number besides it:</p>
<p><img class="pure-img" src="../images/phd-typesetting/no-chapter-number.png" alt="The default memoir style does not feature a chapter number."></p>
<p>The famous book <span class="citation" data-cites="bringhurst92:el-typ">[@bringhurst92:el-typ]</span> puts a rather large number in the margin,
which is also what I ended up going with (see the first double page in this post).
Thankfully, this is not difficult to fix—so much so that someone on TeX.Stack​exachange has
<a href="https://tex.stackexchange.com/questions/88895/bringhurst-chapter-style-in-memoir">already done it</a>.
The exact <code>bringhurst.sty</code> file I used is <a href="../images/phd-typesetting/bringhurst.txt">here</a>;
to use it just replace the call to <code>\chapterstyle</code> with a call to <code>\usepackage</code>:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="bu">\usepackage</span>{<span class="ex">bringhurst</span>}<span class="co">% Instead of \chapterstyle{bringhurst}</span></span></code></pre></div>
<h3 id="the-margin">The margin</h3>
As you can probably tell from this website,<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a> I <em>love</em> sidenotes.
Sadly, this is about where one hits their first bump,
in that memoir and the
<a href="https://ctan.org/pkg/sidenotes">sidenotes</a> package
are incompatible.
For example, both define a <code>\sidecaption</code> command,
and both import <code>changepage</code>, although with different options.
However, LaTeX’s error messages are actually comprehensible in these cases,
so patching the sidenotes package is straightforward.
<details>
<summary>
Here is the diff
</summary>
<div class="sourceCode" id="cb3"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">diff --git a/sidenotes.sty b/sidenotes.sty</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>index df6a772..cdb866d 100644</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="dt">--- a/sidenotes.sty</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/sidenotes.sty</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -7,7 +7,6 @@</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a> \RequirePackage{marginnote} % Provides an offset option for the marginals instead of a float</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a> \RequirePackage{caption} % Handles the captions (in the margin)</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a> \RequirePackage{xparse} % New LaTeX3 syntax to define macros and environments</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="st">-\RequirePackage[strict]{changepage} % Changepage package for symmetric twoside handling</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a> \ExplSyntaxOn</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a> \keys_define:nn { sidenotes }</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>   {</span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -88,51 +87,6 @@</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a> }</span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>     {\@sidenotes@placemarginal{#2}{\textsuperscript{#1}~#3}}</span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a> }</span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a><span class="st">-\DeclareCaptionStyle{sidecaption}{font=footnotesize}</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a><span class="st">-\NewDocumentCommand \sidecaption {s o o m}</span></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a><span class="st">-{</span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a><span class="st">-  \captionsetup{style=sidecaption}</span></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a><span class="st">-  \IfBooleanTF{#1}</span></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a><span class="st">-  { % starred</span></span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a><span class="st">-    \IfNoValueOrEmptyTF{#2}</span></span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a><span class="st">-    {\marginnote{\caption*{#4}}}</span></span>
<span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a><span class="st">-    {\marginnote{\caption*{#4}}[#2]}</span></span>
<span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a><span class="st">-  }</span></span>
<span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a><span class="st">-  { % unstarred</span></span>
<span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a><span class="st">-  \IfNoValueOrEmptyTF{#2}</span></span>
<span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a><span class="st">-    {\def\@sidenotes@sidecaption@tof{#4}}</span></span>
<span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a><span class="st">-    {\def\@sidenotes@sidecaption@tof{#2}}</span></span>
<span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a><span class="st">-  \IfNoValueOrEmptyTF{#3}</span></span>
<span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a><span class="st">-    {\marginnote{\caption[\@sidenotes@sidecaption@tof]{#4}}}</span></span>
<span id="cb3-33"><a href="#cb3-33" aria-hidden="true" tabindex="-1"></a><span class="st">-    {\marginnote{\caption[\@sidenotes@sidecaption@tof]{#4}}[#3]}</span></span>
<span id="cb3-34"><a href="#cb3-34" aria-hidden="true" tabindex="-1"></a><span class="st">-  }</span></span>
<span id="cb3-35"><a href="#cb3-35" aria-hidden="true" tabindex="-1"></a><span class="st">-}</span></span>
<span id="cb3-36"><a href="#cb3-36" aria-hidden="true" tabindex="-1"></a><span class="st">-\newsavebox{\@sidenotes@marginfigurebox}</span></span>
<span id="cb3-37"><a href="#cb3-37" aria-hidden="true" tabindex="-1"></a><span class="st">-\DeclareCaptionStyle{marginfigure}{font=footnotesize}</span></span>
<span id="cb3-38"><a href="#cb3-38" aria-hidden="true" tabindex="-1"></a><span class="st">-\NewDocumentEnvironment{marginfigure} { o }</span></span>
<span id="cb3-39"><a href="#cb3-39" aria-hidden="true" tabindex="-1"></a><span class="st">-{</span></span>
<span id="cb3-40"><a href="#cb3-40" aria-hidden="true" tabindex="-1"></a><span class="st">-  \begin{lrbox}{\@sidenotes@marginfigurebox}</span></span>
<span id="cb3-41"><a href="#cb3-41" aria-hidden="true" tabindex="-1"></a><span class="st">-    \begin{minipage}{\marginparwidth}</span></span>
<span id="cb3-42"><a href="#cb3-42" aria-hidden="true" tabindex="-1"></a><span class="st">-      \captionsetup{type=figure,style=marginfigure}</span></span>
<span id="cb3-43"><a href="#cb3-43" aria-hidden="true" tabindex="-1"></a><span class="st">-}</span></span>
<span id="cb3-44"><a href="#cb3-44" aria-hidden="true" tabindex="-1"></a><span class="st">-{</span></span>
<span id="cb3-45"><a href="#cb3-45" aria-hidden="true" tabindex="-1"></a><span class="st">-    \end{minipage}%</span></span>
<span id="cb3-46"><a href="#cb3-46" aria-hidden="true" tabindex="-1"></a><span class="st">-  \end{lrbox}%</span></span>
<span id="cb3-47"><a href="#cb3-47" aria-hidden="true" tabindex="-1"></a><span class="st">-  \@sidenotes@placemarginal{#1}{\usebox{\@sidenotes@marginfigurebox}}</span></span>
<span id="cb3-48"><a href="#cb3-48" aria-hidden="true" tabindex="-1"></a><span class="st">-}</span></span>
<span id="cb3-49"><a href="#cb3-49" aria-hidden="true" tabindex="-1"></a><span class="st">-\newsavebox{\@sidenotes@margintablebox}</span></span>
<span id="cb3-50"><a href="#cb3-50" aria-hidden="true" tabindex="-1"></a><span class="st">-\DeclareCaptionStyle{margintable}{font=footnotesize}</span></span>
<span id="cb3-51"><a href="#cb3-51" aria-hidden="true" tabindex="-1"></a><span class="st">-\NewDocumentEnvironment{margintable} { o }</span></span>
<span id="cb3-52"><a href="#cb3-52" aria-hidden="true" tabindex="-1"></a><span class="st">-{</span></span>
<span id="cb3-53"><a href="#cb3-53" aria-hidden="true" tabindex="-1"></a><span class="st">-  \begin{lrbox}{\@sidenotes@margintablebox}</span></span>
<span id="cb3-54"><a href="#cb3-54" aria-hidden="true" tabindex="-1"></a><span class="st">-    \begin{minipage}{\marginparwidth}</span></span>
<span id="cb3-55"><a href="#cb3-55" aria-hidden="true" tabindex="-1"></a><span class="st">-      \captionsetup{type=table,style=margintable}</span></span>
<span id="cb3-56"><a href="#cb3-56" aria-hidden="true" tabindex="-1"></a><span class="st">-}</span></span>
<span id="cb3-57"><a href="#cb3-57" aria-hidden="true" tabindex="-1"></a><span class="st">-{</span></span>
<span id="cb3-58"><a href="#cb3-58" aria-hidden="true" tabindex="-1"></a><span class="st">-    \end{minipage}</span></span>
<span id="cb3-59"><a href="#cb3-59" aria-hidden="true" tabindex="-1"></a><span class="st">-  \end{lrbox}</span></span>
<span id="cb3-60"><a href="#cb3-60" aria-hidden="true" tabindex="-1"></a><span class="st">-  \@sidenotes@placemarginal{#1}{\usebox{\@sidenotes@margintablebox}}</span></span>
<span id="cb3-61"><a href="#cb3-61" aria-hidden="true" tabindex="-1"></a><span class="st">-}</span></span>
<span id="cb3-62"><a href="#cb3-62" aria-hidden="true" tabindex="-1"></a> \AtBeginDocument{%</span>
<span id="cb3-63"><a href="#cb3-63" aria-hidden="true" tabindex="-1"></a> \newlength{\@sidenotes@extrawidth}</span>
<span id="cb3-64"><a href="#cb3-64" aria-hidden="true" tabindex="-1"></a> \setlength{\@sidenotes@extrawidth}{\marginparwidth}</span></code></pre></div>
</details>
<p>The <code>\sidenote</code> command now works as expected;
I wrote a small wrapper that additionally sets sidenotes ragged left or right,
depending on the parity of the page.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="bu">\usepackage</span>{<span class="ex">sidenotes</span>}  <span class="co">% Local one.</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="bu">\usepackage</span>{<span class="ex">mparhack</span>}</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="fu">\renewcommand*</span>{<span class="ex">\marginfont</span>}{<span class="fu">\scriptsize</span>}</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="fu">\renewcommand</span>{<span class="ex">\note</span>}[1]{<span class="co">%</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>  <span class="fu">\sidenote</span>{<span class="co">%</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>    <span class="fu">\scriptsize</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>    <span class="fu">\checkoddpage</span><span class="co">%</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>    <span class="fu">\ifoddpage</span><span class="co">%</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>      <span class="fu">\raggedright</span><span class="co">%</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>    <span class="fu">\else</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>      <span class="fu">\raggedleft</span><span class="co">%</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>    <span class="fu">\fi</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>    {#1}<span class="co">%</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>  }<span class="co">%</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<figure>
<a href="../images/phd-typesetting/look3.pdf">
<img class="pure-img" src="../images/phd-typesetting/look3.png" alt="Two pages with sidenotes; one set raggedright and one raggedleft.">
</a>
</figure>
<p>Interestingly, I don’t actually use the <code>\sidecaption</code> implementation of either memoir or sidenotes,
but chose to roll my own:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co">% Mandatory argument contains the label text and the label itself;</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="co">% the optional argument moves the label text around.</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="fu">\renewcommand</span>{<span class="ex">\scaption</span>}[2][0cm]{<span class="co">%</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>  <span class="fu">\marginnote</span>{<span class="co">%</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>    <span class="fu">\vspace</span>{#1}<span class="co">%</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>    <span class="fu">\caption</span>{<span class="co">%</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>      <span class="fu">\checkoddpage</span><span class="co">%</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>      <span class="fu">\ifoddpage</span><span class="co">%</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>        <span class="fu">\raggedright</span><span class="co">%</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>      <span class="fu">\else</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>        <span class="fu">\raggedleft</span><span class="co">%</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>      <span class="fu">\fi</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>      {#2}<span class="co">%</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>    }<span class="co">%</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>This is probably less code than what it would take to customise memoir’s <code>\sidecaption</code> to do what I want,
and I get more control over the actual typesetting on top of it.
The price one pays is that the usage of <code>\scaption</code> is a tad unintuitive,
in that the <code>\label</code> of the figure has to go inside of the caption:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">\begin</span>{<span class="ex">figure</span>}[htbp]</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>  <span class="fu">\centering</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>  <span class="fu">\tikzfig</span>{the-figure}</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>  <span class="fu">\scaption</span>[3cm]{<span class="co">%</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>    The caption.<span class="co">%</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">\label</span>{<span class="ex">fig:the-label</span>}<span class="co">%</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="kw">\end</span>{<span class="ex">figure</span>}</span></code></pre></div>
<p>However, I think the end result looks quite nice:<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a></p>
<p><img class="pure-img" src="../images/phd-typesetting/captions.png" alt="Sidecaptions."></p>
<hr />
<p>Another thing I did was pushing equation numbers into the margin.
Instead of</p>
<p><img class="pure-img" src="../images/phd-typesetting/equations-before.png" alt="Default LaTeX equation labels."></p>
<p>my thesis instead displays such an equation as</p>
<p><img class="pure-img" src="../images/phd-typesetting/equations-after.png" alt="Equation labels in the margin."></p>
<p>which in particular means that equation numbers are sometimes on the left of the page,
depending on where the margin is.
This is quite nice for larger diagrams or longer formulas,
which nevertheless still have to have an equation number.
Figures now neither need to intrude upon the margin,
nor be scaled quite so aggressively.</p>
<figure>
<a href="../images/phd-typesetting/equations-in-margin.pdf">
<img class="pure-img" src="../images/phd-typesetting/equations-in-margin.png" alt="Double page example of equation labels in the margin.">
</a>
</figure>
<p>The code for this is a bit more involved, but luckily TeX.Stackexchange has us covered yet again!</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="co">% Protrude equation numbers into the margin.</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="co">%</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="co">% Sources:</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="co">%   - https://tex.stackexchange.com/questions/258574/placing-the-equation-number-in-the-left-hand-margin</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a><span class="co">%   - https://www.overleaf.com/learn/latex/Page_size_and_margins</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="fu">\makeatletter</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a><span class="fu">\let\oldmaketag@@@\maketag@@@</span><span class="co">%</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a><span class="fu">\def\oldtagform@</span>#1{<span class="fu">\oldmaketag@@@</span>{(<span class="fu">\ignorespaces</span>#1<span class="fu">\unskip\@@italiccorr</span>)}}</span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="fu">\renewcommand</span>{<span class="ex">\eqref</span>}[1]{<span class="fu">\textup</span>{<span class="fu">\oldtagform@</span>{<span class="kw">\ref</span>{<span class="ex">#1</span>}}}}</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a><span class="fu">\newlength</span>{<span class="fu">\width@@</span>}</span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a><span class="fu">\def\maketag@@@</span>#1{<span class="fu">\hbox</span>{<span class="fu">\hskip</span>1sp<span class="fu">\m@th\llap</span>{<span class="co">%</span></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a>      <span class="fu">\normalfont</span>#1<span class="co">%</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>      <span class="fu">\settowidth</span>{<span class="fu">\width@@</span>}{#1}<span class="co">%</span></span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a>      <span class="fu">\checkoddpage\ifoddpage\hspace</span>{-<span class="fu">\the\width@@</span>-<span class="fu">\the\marginparsep</span>}</span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a>      <span class="fu">\else\hspace</span>{<span class="fu">\textwidth+\the\marginparsep+</span>.1cm}<span class="fu">\fi</span></span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a>    }}}</span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a><span class="fu">\makeatother</span></span></code></pre></div>
<h2 id="picking-fonts">Picking fonts</h2>
<p>For the default calligraphic font, I settled on <code>boondoxupr</code> from the excellently documented <code>mathalfa</code> package.
It changes the default Computer Modern alphabet</p>
<p><img class="pure-img" src="../images/phd-typesetting/cm-script.png" alt="Computer modern (cm) calligraphic alphabet."></p>
<p>to</p>
<p><img class="pure-img" src="../images/phd-typesetting/bx-script.png" alt="boondoxupr calligraphic alphabet. Also features lower case letters."></p>
<p>I also went ahead and chose a Fraktur font that is slightly less bold—<code>esstix</code>.</p>
<p><img class="pure-img" src="../images/phd-typesetting/esstix.png" alt="esstix fraktur alphabet. Also features lower case letters."></p>
<p>However, much more important than that is a good text font.
For me, there are two top contenders here,
which is <a href="https://github.com/alerque/libertinus">Libertinus</a>—<!--
-->provided by the <a href="https://ctan.org/pkg/libertinus">libertinus</a> package—<!--
-->on the one hand</p>
<p><img class="pure-img" src="../images/phd-typesetting/libertinus.png" alt="Writing sample of Libertinus."></p>
<p>and Palatino—or a clone of it, in the form of <a href="https://ctan.org/pkg/newpx">newpx</a>—on the other:</p>
<p><img class="pure-img" src="../images/phd-typesetting/palatino.png" alt="Writing sample of the newpx Palatino clone."></p>
<p>Libertinus has one critical flaw,
which is that the italic <em>f</em> extends way too far to the right.
This clashes quite significantly with <code>boondoxupr</code></p>
<p><img class="pure-img" src="../images/phd-typesetting/libertinus-f.png" alt="The Libertinus italic f extends too far to the right when used with the boondoxupr calligraphic font."></p>
<p>and the issue only gets exacerbated once <a href="https://ctan.org/pkg/microtype">microtype</a> comes into play and squashes those spaces even more.
Palatino, while not perfect, fairs much better here:</p>
<p><img class="pure-img" src="../images/phd-typesetting/palatino-f.png" alt="The newpx italic f is *fine*."></p>
<p>As I didn’t want to manually check every occurrence of <em>f</em> at the end of a word and potentially add a thin space after it,
the choice was forced upon me.
There are lots of knobs to turn with the <code>newpxtext</code> and <code>newpxmath</code> packages,
the full code looks like this:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="bu">\usepackage</span>[osf,scosf,theoremfont,tighter,largesc,trueslanted,p]{<span class="ex">newpxtext</span>}</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="bu">\usepackage</span>[varqu,varl,scaled=.98]{<span class="ex">zi4</span>}<span class="co">% inconsolata for mono</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="fu">\linespread</span>{1.05}<span class="co">% A bit more leading</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="bu">\usepackage</span>{<span class="ex">textcomp</span>}</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a><span class="bu">\usepackage</span>[amsthm,upint]{<span class="ex">newpxmath</span>}</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a><span class="bu">\usepackage</span>[cal=boondoxupr,frak=esstix,frakscaled=0.95]{<span class="ex">mathalfa</span>}</span></code></pre></div>
<p>Some options should be self-explanitory<!--
-->—like <code>tighter</code> or the <code>amsthm</code> compatibility—<!--
-->while other might require some further explanation.</p>
<ul>
<li><p><code>osf</code> and <code>scosf</code> make sure to enable
<a href="https://en.wikipedia.org/wiki/Text_figures">oldstyle figures</a>
everywhere-is, even within small caps,
and <code>largesc</code> slightly increases the size of small caps,
to more accurately model the size used by Linotype’s version of Palatino
(the default value here is really more petite caps than small caps).</p></li>
<li><p><code>theoremfont</code> changes the default font used for the plain theorem style of amsthm,
which I use for theorems, corollaries, and the like.
It keeps the text itself in italics, but uses upright figures, parentheses, and punctuation symbols.
For example, with this option, you get
theorem statements like this</p>
<p><img class="pure-img" src="../images/phd-typesetting/theoremfont.png" alt="theoremfont forces parentheses to be upright, even when the rest of the text is set in italics."></p>
<p>instead of (notice the parentheses surrounding the numbering or the colon)</p>
<p><img class="pure-img" src="../images/phd-typesetting/no-theoremfont.png" alt="Not supplying the theoremfont option just sets parentheses as in the surrounding text."></p></li>
<li><p><code>p</code> uses proportional figures (numbers) instead of tabular ones.</p></li>
</ul>
<p>The <a href="https://ctan.ebinger.cc/tex-archive/fonts/newpx/doc/newpxdoc.pdf">newpx manual</a>
doesn’t read quite as nicely as that of mathalfa or memoir,
but it’s still worth a read to get a feeling for all of the different options that exist.</p>
<hr />
<p>In terms of
<a href="https://ctan.org/pkg/microtype">microtype</a>
I’m actually quite happy with the default settings.
I merely added a little bit more
<a href="https://en.wikipedia.org/wiki/Letter_spacing">tracking</a>
to <span class="small-caps">small caps</span> and
<a href="https://en.wikipedia.org/wiki/Hanging_punctuation">protrusion</a>
to sub and superscripts:<a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a></p>
<div class="sourceCode" id="cb11"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="bu">\usepackage</span>[tracking=true]{<span class="ex">microtype</span>}</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="fu">\SetTracking</span>{encoding=*,shape=it*}{10}</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="fu">\SetTracking</span>{encoding=*}{10}</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="fu">\SetProtrusion</span><span class="co">%</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>  {encoding=T1,size={7,8}}</span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>  {1={ ,750},2={ ,500},3={ ,500},4={ ,500},5={ ,500},</span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>    6={ ,500},7={ ,600},8={ ,500},9={ ,500},0={ ,500}}</span></code></pre></div>
<hr />
<p>One important change has to be made to <code>biblatex</code> when using a font’s oldstyle figures:
the references in the main text should nevertheless use
<a href="https://en.wikipedia.org/wiki/Text_figures">lining figures</a>.
That is, instead of</p>
<p><img class="pure-img" src="../images/phd-typesetting/osf-citations.png" alt="Citations use oldstyle figures, even though most of the citation is all upper case letters."></p>
<p>we rather want<a href="#fn7" class="footnote-ref" id="fnref7" role="doc-noteref"><sup>7</sup></a></p>
<p><img class="pure-img" src="../images/phd-typesetting/lining-citations.png" alt="Citations using lining figures."></p>
<p>Luckily, it’s pretty easy to change the field format:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="fu">\DeclareFieldFormat</span>{labelalpha}{<span class="fu">\liningnums</span>{#1}}</span></code></pre></div>
<h2 id="miscellaneous-thoughts">Miscellaneous thoughts</h2>
<p>Small macros like the following
(inspired by <a href="https://tex.stackexchange.com/questions/422/how-do-i-repeat-a-theorem-number">this answer</a>)
were rather large quality of life improvements:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="fu">\makeatletter</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="fu">\newtheorem*</span>{rep@theorem}{<span class="fu">\rep@title</span>}</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="fu">\newenvironment</span>{reptheorem}[1]{<span class="co">%</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>  <span class="fu">\def\rep@title</span>{<span class="kw">\cref</span>{<span class="ex">#1</span>}}<span class="kw">\begin</span>{<span class="ex">rep</span><span class="er">@theorem</span>}<span class="co">%</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>}{<span class="co">%</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">\end</span>{<span class="ex">rep</span><span class="er">@theorem</span>}<span class="co">%</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a><span class="fu">\makeatother</span></span></code></pre></div>
<p>This creates an environment with an immediate reference to an already existing theorem, proposition, and so on,
which you might want to use in an introduction—much more sightly than something like <em>Theorem (Theorem x.y)</em>.
One can use it just like a regular <code>theoremstyle</code>:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="co">% Label should exist elsewhere.</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="kw">\begin</span>{<span class="ex">reptheorem</span>}{cor: pivotal_from_central_anti_central}</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>  Let <span class="ss">\(</span><span class="sc">\cat</span><span class="ss">{C}\)</span> be a rigid monoidal category.</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>  If <span class="ss">\(</span><span class="sc">\cat</span><span class="ss">{C}\)</span> admits a central Hopf monad <span class="ss">\(</span><span class="sc">\mathfrak</span><span class="ss">{D}(</span><span class="sc">\cat</span><span class="ss">{C})\)</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>  and an anti<span class="fu">\hyp</span>{}central comodule monad <span class="ss">\(</span><span class="sc">\mathfrak</span><span class="ss">{Q}(</span><span class="sc">\cat</span><span class="ss">{C})\)</span>,</span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>  then it is pivotal if and only if</span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>  <span class="ss">\(</span><span class="sc">\mathfrak</span><span class="ss">{D}(</span><span class="sc">\cat</span><span class="ss">{C}) </span><span class="sc">\cong</span><span class="ss"> </span><span class="sc">\mathfrak</span><span class="ss">{Q}(</span><span class="sc">\cat</span><span class="ss">{C})\)</span></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a>  as monads.</span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a><span class="kw">\end</span>{<span class="ex">reptheorem</span>}</span></code></pre></div>
<p>This will then be typeset like so, with a link to the actual result:</p>
<p><img class="pure-img" src="../images/phd-typesetting/reptheorem.png" alt="A reference to a later theorem by typesetting it directly as 'Theorem xx.yy', where 'xx.yy' is a link to the result."></p>
<p>This taught me a bit more about how <code>amsmath</code> environments work under the hood.
Plus, using <code>cleveref</code> saves one from having to define many different commands like <code>reptheorem</code>, <code>repcorollary</code>, and so on<!--
-->—no going around obsessively checking whether a theorem invariably became a proposition a while ago.</p>
<hr />
<p>A general advice I have—and also got from an older PhD student—is to start early.<a href="#fn8" class="footnote-ref" id="fnref8" role="doc-noteref"><sup>8</sup></a>
Even just streamlining and unifying notation takes more time than ones thinks,
especially if one also cares at least an epsilon about typography.
What thankfully cuts down on the time needed is that LaTeX has been around for a long time,
and most package manuals (that I’ve read) are quite high quality,
so chances are that someone else will probably have solved your super specific problem already.
Still, start early.</p>
<hr />
<p>Lastly, I will just leave the following <em>very important</em> bibLaTeX configuration here.</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="fu">\DeclareDelimFormat</span>{finalnamedelim}{<span class="co">% Force Oxford comma</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>  <span class="fu">\ifnumgreater</span>{<span class="fu">\value</span>{liststop}}{2}{,}{}<span class="co">%</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>  <span class="fu">\addspace\bibstring</span>{and}<span class="fu">\space</span>}</span></code></pre></div>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>The thesis is available <a href="https://tony-zorman.com/dissertation.pdf">here</a>,
and you can also check out the <a href="https://github.com/slotThe/dissertation">full source code</a>.
For more information, also check <a href="https://tony-zorman.com/research#theses">here</a>.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>It is also much more extensive. Both manuals clock in at around 600 pages,
but the memoir manual is only about one class!
There are also a bunch of concrete and extensive examples, which are very good to learn from.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>{-} The different default page layouts for A4 paper, taken from the memoir manual.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>Unless you’re on mobile, I suppose.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>Additionally setup with the <code>caption</code> package:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="bu">\usepackage</span>{<span class="ex">caption</span>}</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="fu">\captionsetup</span>{<span class="co">%</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>  style=base,<span class="co">%</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>  labelfont=footnotesize,<span class="co">%</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>  textfont=scriptsize,<span class="co">%</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></li>
<li id="fn6"><p>{-} Don’t forget the usual incantation to disable protrusion for the table of contents, though:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="fu">\newcommand</span>{<span class="ex">\TOC</span>}{</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>  <span class="fu">\microtypesetup</span>{protrusion=false}</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>  <span class="fu">\tableofcontents</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>  <span class="fu">\microtypesetup</span>{protrusion=true}</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></li>
<li id="fn7"><p>{-} Also pictured:
<a href="https://gwern.net/red">rubrication</a>
and starting sections with a few bits of small caps,
which I think I picked up from Edward Tufte.<a href="#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn8"><p>Thanks, Florian!<a href="#fnref8" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Speeding up LaTeX compilation</title>
    <link href="https://tony-zorman.com/posts/speeding-up-latex.html" />
    <id>https://tony-zorman.com/posts/speeding-up-latex.html</id>
    <published>2025-01-30T00:00:00Z</published>
    <updated>2025-01-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2025-01-30
      
      
        &thinsp;·&thinsp; last modified: 2025-02-15
      
      
        &thinsp;·&thinsp; <span title="1761 words">8 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'LaTeX'." href="/tags/LaTeX.html" rel="tag">LaTeX</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>Getting reasonable compilation times out of a medium-sized LaTeX document
that contains lots of TikZ pictures
is not as difficult as it may seem at first—at least if you know the correct ancient incantations.</p>
<!--more-->
<p>I’m feverishly writing my dissertation right now,<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>
and since I adore
string diagrams<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>,
it contains quite a number of
<abbr title="TikZ ist kein Zeichenprogramm">TikZ</abbr>
pictures, which really takes a toll on compilation times.
I’m not kidding:
my current draft<!--
-->—currently clocking in at 193 pages—<!--
-->is not doing so well.<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a></p>
<pre class="console"><code>$ time pdflatex main
…
Executed in   27.66 secs    fish           external
   usr time   27.47 secs    1.32 millis   27.47 secs
   sys time    0.10 secs    0.11 millis    0.10 secs</code></pre>
<p>This will only get worse as time goes on, so something has to be done.</p>
<p>Thankfully, LaTeX has been around for long enough that other people have felt this exact pain before,
and have even done something about it!<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a>
Time to benefit from that.</p>
<h2 id="externalising-tikz-pictures">Externalising TikZ pictures</h2>
<p>The <code>external</code> library for TikZ can be used to “externalise” pictures—that is,
they get compiled into a separate PDF once,
and are then just included into the main document,
instead of having to recompile the pictures every time.
This can save quite a bit of time.</p>
<p>Ostensibly, <code>external</code> is quite easy to use.
Just enable the library,
set a directory in which to dump all of the externalisation output, and use the <code>tikzpicture</code> environment as normal:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="bu">\usepackage</span>{<span class="ex">tikz</span>}</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="fu">\usetikzlibrary</span>{external}</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="fu">\tikzexternalize</span>[prefix=figures-ext/]</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>…</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="kw">\begin</span>{<span class="ex">tikzpicture</span>}</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>  …</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="kw">\end</span>{<span class="ex">tikzpicture</span>}</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>…</span></code></pre></div>
<p>The first compile after enabling <code>external</code> will take <em>a while</em>,
especially when the file contains a lot of pictures.
However, subsequent ones will be much faster.
Pictures will also be automatically regenerated when their contents change.</p>
<p>This works fine for normal TikZ pictures,
but we immediately hit a bump when we want to combine this with <code>tikz-cd</code>,
a TikZ library for drawing commutative diagrams.
In short, the problem is that TeX really wants to see the <code>\end{tikzpicture}</code> when externalising,
but due to the usual macro expansion hell it instead sees <code>\end{tikzcd}</code>.
Nice.</p>
<p>One could now try to use the newer <code>memoize</code> or <code>robust-externalize</code> libraries instead,
but they are flawed in other ways,<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a>
so I’m trying to fully stay within the bounds of <code>external</code> here.</p>
<p>The easiest solution seems to be to wrap the <code>tikzcd</code> environment with an outer <code>tikzpicture</code>,
so that <code>external</code> can act on the correct environment.
We can use the <a href="https://www.ctan.org/pkg/environ">environ</a> package for that,
which also takes care of inlining the newly created environment.<a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a></p>
<div class="sourceCode" id="cb4"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="fu">\NewEnviron</span>{mytikzcd}[1][]{<span class="co">%</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">\begin</span>{<span class="ex">tikzpicture</span>}[baseline=(maintikzcdnode.base)]</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    <span class="fu">\node</span> (maintikzcdnode) [inner sep=0, outer sep=0] {<span class="kw">\begin</span>{<span class="ex">tikzcd</span>}[#1]</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>        <span class="fu">\BODY</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>      <span class="kw">\end</span>{<span class="ex">tikzcd</span>}};</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">\end</span>{<span class="ex">tikzpicture</span>}<span class="co">%</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>This <em>almost</em> works, but now—again due to macro expansion shenanigans—<code>external</code>
isn’t wise to any changes being made inside of the TikZ picture.
The function that eventually computes the md5 hash only gets the contents of the unexpanded <code>\BODY</code> macro,
which will not say much more other than “here comes a graphic”.
Let’s manually expand <code>\BODY</code>, then.<a href="#fn7" class="footnote-ref" id="fnref7" role="doc-noteref"><sup>7</sup></a></p>
<div class="sourceCode" id="cb6"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="fu">\newcommand</span>{<span class="ex">\mytikzcdcontext</span>}[2]{</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">\begin</span>{<span class="ex">tikzpicture</span>}[baseline=(maintikzcdnode.base)]</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>    <span class="fu">\node</span> (maintikzcdnode) [inner sep=0, outer sep=0] {<span class="kw">\begin</span>{<span class="ex">tikzcd</span>}[#2]</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>        #1</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>      <span class="kw">\end</span>{<span class="ex">tikzcd</span>}};</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">\end</span>{<span class="ex">tikzpicture</span>}<span class="co">%</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="fu">\NewEnviron</span>{mytikzcd}[1][]{<span class="co">%</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>  <span class="fu">\def\myargs</span>{#1}<span class="co">%</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>  <span class="fu">\edef\mydiagram</span>{<span class="co">%</span></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>    <span class="fu">\noexpand\mytikzcdcontext</span>{<span class="fu">\expandonce\BODY</span>}{<span class="fu">\expandonce\myargs</span>}</span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>  }<span class="co">%</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>  <span class="fu">\mydiagram</span><span class="co">%</span></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>One thing to watch out for is that <code>&amp;</code>’s can mean different things in LaTeX,
depending on whether the current macro is being read or executed.
We could muck about with catcodes at this point,
but I found it best—and safest—to just use an <code>ampersand replacement</code> for all tikzpictures,
like so:<a href="#fn8" class="footnote-ref" id="fnref8" role="doc-noteref"><sup>8</sup></a></p>
<div class="sourceCode" id="cb7"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">\begin</span>{<span class="ex">mytikzcd</span>}[ampersand replacement=<span class="fu">\&amp;</span>]</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>  {T^3} <span class="fu">\&amp;</span> {T^2} <span class="fu">\&amp;</span> {T^2} <span class="fu">\&amp;</span> T <span class="fu">\&amp;</span> T <span class="fu">\\</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>  {T^2} <span class="fu">\&amp;</span> T <span class="fu">\&amp;\&amp;</span> T</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>  <span class="fu">\arrow</span>[&quot;T<span class="fu">\mu</span>&quot;, Rightarrow, from=1-1, to=1-2]</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>  <span class="fu">\arrow</span>[&quot;<span class="fu">\mu</span>&quot;, Rightarrow, from=1-2, to=2-2]</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>  <span class="fu">\arrow</span>[&quot;{<span class="fu">\mu</span> T}&quot;', Rightarrow, from=1-1, to=2-1]</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>  <span class="fu">\arrow</span>[&quot;<span class="fu">\mu</span>&quot;', Rightarrow, from=2-1, to=2-2]</span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>  <span class="fu">\arrow</span>[Rightarrow, no head, from=1-4, to=2-4]</span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>  <span class="fu">\arrow</span>[&quot;{<span class="fu">\eta</span> T}&quot;', Rightarrow, from=1-4, to=1-3]</span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>  <span class="fu">\arrow</span>[&quot;<span class="fu">\mu</span>&quot;', Rightarrow, from=1-3, to=2-4]</span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>  <span class="fu">\arrow</span>[&quot;{T <span class="fu">\eta</span>}&quot;, Rightarrow, from=1-4, to=1-5]</span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>  <span class="fu">\arrow</span>[&quot;<span class="fu">\mu</span>&quot;, Rightarrow, from=1-5, to=2-4]</span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a><span class="kw">\end</span>{<span class="ex">mytikzcd</span>}</span></code></pre></div>
<p>One more thing:<a href="#fn9" class="footnote-ref" id="fnref9" role="doc-noteref"><sup>9</sup></a>
right now, the name of the externalisation file is just given by the number of TikZ pictures before it.
For example, given</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ss">\[</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="ss">  </span><span class="kw">\begin</span>{<span class="ex">mytikzcd</span>}<span class="ss">[ampersand replacement=</span><span class="sc">\&amp;</span><span class="ss">]</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="ss">    one</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="ss">  </span><span class="kw">\end</span>{<span class="ex">mytikzcd</span>}</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a><span class="ss">\]</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a><span class="ss">\[</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a><span class="ss">  </span><span class="kw">\begin</span>{<span class="ex">mytikzcd</span>}<span class="ss">[ampersand replacement=</span><span class="sc">\&amp;</span><span class="ss">]</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="ss">    two</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a><span class="ss">  </span><span class="kw">\end</span>{<span class="ex">mytikzcd</span>}</span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a><span class="ss">\]</span></span></code></pre></div>
<p>we’d get <code>figure0.{md5,log,pdf}</code> and <code>figure1.{md5,log,pdf}</code> in the <code>figures-ext</code> directory.
If we now switch the pictures</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ss">\[</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="ss">  </span><span class="kw">\begin</span>{<span class="ex">mytikzcd</span>}<span class="ss">[ampersand replacement=</span><span class="sc">\&amp;</span><span class="ss">]</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="ss">    two</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="ss">  </span><span class="kw">\end</span>{<span class="ex">mytikzcd</span>}</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a><span class="ss">\]</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a><span class="ss">\[</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a><span class="ss">  </span><span class="kw">\begin</span>{<span class="ex">mytikzcd</span>}<span class="ss">[ampersand replacement=</span><span class="sc">\&amp;</span><span class="ss">]</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a><span class="ss">    one</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a><span class="ss">  </span><span class="kw">\end</span>{<span class="ex">mytikzcd</span>}</span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a><span class="ss">\]</span></span></code></pre></div>
<p>then both would have to be regenerated, as the hash for <code>two</code> does not match that of <code>figure0.md5</code>!
This is obviously horrible, but can be fixed by using <code>\tikzsetnextfilename</code> in front of a picture to explicitly set its filename.
I found it easiest to just use the hash of the figure’s body,
since that’s already at hand.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="fu">\NewEnviron</span>{mytikzcd}[1][]{<span class="co">%</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>  <span class="fu">\def\myargs</span>{#1}<span class="co">%</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>  <span class="fu">\tikzsetnextfilename</span>{<span class="fu">\pdfmdfivesum</span>{<span class="fu">\expandonce\BODY</span>}}</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>  <span class="fu">\edef\mydiagram</span>{<span class="co">%</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>    <span class="fu">\noexpand\mytikzcdcontext</span>{<span class="fu">\expandonce\BODY</span>}{<span class="fu">\expandonce\myargs</span>}</span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>  }<span class="co">%</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>  <span class="fu">\mydiagram</span><span class="co">%</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>This should actually work now!
Phew.</p>
<p>Manually nesting TikZ pictures is not particularly great,
and yet this is the most robust technique I’ve found to get externalisation working
everywhere I want it to.
Even the arXiv, I might add,
where some papers of mine otherwise compile for too long and get terminated by a hungry process killer.</p>
<p>Here are the benchmarks:</p>
<pre class="console"><code>$ time pdflatex -shell-escape main
…
________________________________________________________
Executed in   15.68 secs    fish           external
   usr time   15.21 secs    1.91 millis   15.20 secs
   sys time    0.41 secs    0.96 millis    0.41 secs</code></pre>
<p>Not bad!</p>
<h2 id="precompiling-the-preamble">Precompiling the preamble</h2>
<p>The rationale for precompiling parts of my (entirely too big) preamble is relatively obvious:
LaTeX often needs several runs to get things like references right,
which means that the preamble has to be compiled every time as well.
However, it probably doesn’t actually change that often, so why not optimise that part out?</p>
<p>There seems to be pretty good support for this across many different TeX distributions,
including <code>pdflatex</code>, which is what I’m forced to use.
We can partition our preamble into a “static” and a “dynamic” part by creating a file for the static part:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="co">% prec.tex</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="bu">\documentclass</span>[10pt, a4paper, twoside]{<span class="ex">memoir</span>}</span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="bu">\usepackage</span>[sidenotes, externalize=true, font=palatino, osf, math=fancy]{<span class="ex">styles/style</span>}</span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a><span class="fu">\pdfoutput</span>=1</span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a>…</span></code></pre></div>
<p>This can be compiled into a “format file” with</p>
<pre class="console"><code>$ pdflatex -ini -jobname=&quot;prec&quot; &quot;&amp;pdflatex prec.tex\dump&quot;</code></pre>
<p>Now we just need to tell our main file—<code>main.tex</code> in my case—to use <code>prec.fmt</code>.
This is as simple as starting the file with the magic comment <code>%&amp;prec</code>,
and advising <code>pdflatex</code> to use the format file we just compiled:</p>
<pre class="console"><code>$ pdflatex -fmt=prec.fmt main</code></pre>
<p>Of course, plugging <code>external</code> into this setup is not as plug-and-play as one would like.
The dynamic—<em>not</em> the static—part of the preamble must contain a call to <code>\tikzexternal</code>,
and we also need to pass the format file through to each <code>pdflatex</code> invocation.
As such, my <code>main.tex</code> file now starts with<a href="#fn10" class="footnote-ref" id="fnref10" role="doc-noteref"><sup>10</sup></a></p>
<div class="sourceCode" id="cb15"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="co">%&amp;prec</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a><span class="fu">\tikzexternalize</span>[</span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>  prefix=figures-ext/,</span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>  system call={pdflatex -fmt=prec.fmt <span class="fu">\tikzexternalcheckshellescape</span> -halt-on-error -interaction=batchmode -jobname &quot;<span class="fu">\image</span>&quot; &quot;<span class="fu">\texsource</span>&quot;}</span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>]</span></code></pre></div>
<p>which works seamlessly!</p>
<p>We get another sizeable drop in compilation times:</p>
<pre class="console"><code>$ hyperfine 'pdflatex -shell-escape -fmt=prec.fmt main'
Benchmark 1: pdflatex -shell-escape -fmt=prec.fmt main
  Time (mean ± σ):      7.423 s ±  0.211 s    [User: 7.156 s, System: 0.234 s]
  Range (min … max):    6.979 s …  7.627 s    10 runs</code></pre>
<hr />
<p>Packaging all of this up in a Makefile, we could naively write something like</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="ot">.ONESHELL:</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a><span class="ot">.PHONY:</span><span class="dt"> build</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a><span class="dt">COMPILE_FLAGS</span> <span class="ch">:=</span><span class="st"> -shell-escape -file-line-error -synctex=1</span></span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a><span class="dv">build:</span></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a>	pdflatex -ini <span class="ch">$(</span><span class="dt">COMPILE_FLAGS</span><span class="ch">)</span> -jobname=<span class="st">&quot;prec&quot;</span> <span class="st">&quot;&amp;pdflatex prec.tex\dump&quot;</span></span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a>	pdflatex <span class="ch">$(</span><span class="dt">COMPILE_FLAGS</span><span class="ch">)</span> -fmt=prec.fmt main</span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a>	bibtex main</span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true" tabindex="-1"></a>	pdflatex <span class="ch">$(</span><span class="dt">COMPILE_FLAGS</span><span class="ch">)</span> -fmt=prec.fmt main</span>
<span id="cb17-10"><a href="#cb17-10" aria-hidden="true" tabindex="-1"></a>	pdflatex <span class="ch">$(</span><span class="dt">COMPILE_FLAGS</span><span class="ch">)</span> -fmt=prec.fmt main</span></code></pre></div>
<p>and in Emacs one can simply set</p>
<pre><code>TeX-command-extra-options: &quot;-shell-escape -fmt=prec.fmt -file-line-error -synctex=1&quot;</code></pre>
<p>as a local variable,
and execute <code>TeX-command-master</code> or <code>TeX-command-run-all</code>,
depending on the situation.</p>
<p>I invoke the Makefile only very sparingly—executing <code>pdflatex</code> three times still takes quite some time,
but even the current speedup makes it reasonably acceptable.</p>
<h2 id="draft-and-batch-mode">Draft and batch mode</h2>
<p>One thing we can do to make a single run of <code>make build</code><!--
-->—though not necessarily a single <code>pdflatex</code> invocation—<!--
-->faster is to use the <code>-draftmode</code> option.
This does not generate an output PDF—thereby wasting precious time, since that file gets overwritten anyways—but still writes to auxiliary files,
in order to update positional information.</p>
<p>Adding <code>-draftmode</code> to the first two invocations of <code>pdflatex</code> in the Makefile above
results in another small speedup when
completely rebuilding the entire file from scratch with all bibliographical information.<a href="#fn11" class="footnote-ref" id="fnref11" role="doc-noteref"><sup>11</sup></a></p>
<p>Before:</p>
<pre class="console"><code>$ make clean; time make
…
Executed in   25.91 secs    fish           external
   usr time   25.00 secs  201.00 micros   25.00 secs
   sys time    0.80 secs   92.00 micros    0.80 secs</code></pre>
<p>After:</p>
<pre class="console"><code>$ make clean; time make
…
________________________________________________________
Executed in   20.92 secs    fish           external
   usr time   20.38 secs  211.00 micros   20.38 secs
   sys time    0.46 secs   95.00 micros    0.46 secs</code></pre>
<p>Finally, by default, <code>pdflatex</code> compiles its documents in interactive mode,
to seemingly provide some kind of error recovery.
I pretty much never want this,
so enabling <code>-interaction=batchmode</code> seems like a no-brainer.<a href="#fn12" class="footnote-ref" id="fnref12" role="doc-noteref"><sup>12</sup></a>
It also makes <code>pdflatex</code> very quiet when it comes to output—and a bit faster still.
With the Makefile</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="dt">COMPILE_FLAGS</span> <span class="ch">:=</span><span class="st"> -file-line-error -interaction=batchmode -fmt=prec.fmt</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a><span class="ot">.PHONY:</span><span class="dt"> clean</span></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a><span class="dv">main.pdf:</span><span class="dt"> main.tex figures chapters prec.fmt</span></span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a>	pdflatex -shell-escape <span class="ch">$(</span><span class="dt">COMPILE_FLAGS</span><span class="ch">)</span> main  <span class="co"># might create figures</span></span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true" tabindex="-1"></a>	bibtex main</span>
<span id="cb21-7"><a href="#cb21-7" aria-hidden="true" tabindex="-1"></a>	pdflatex <span class="ch">$(</span><span class="dt">COMPILE_FLAGS</span><span class="ch">)</span> -draftmode main</span>
<span id="cb21-8"><a href="#cb21-8" aria-hidden="true" tabindex="-1"></a>	pdflatex <span class="ch">$(</span><span class="dt">COMPILE_FLAGS</span><span class="ch">)</span> -synctex=1 main</span>
<span id="cb21-9"><a href="#cb21-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-10"><a href="#cb21-10" aria-hidden="true" tabindex="-1"></a><span class="dv">prec.fmt:</span><span class="dt"> prec.tex styles</span></span>
<span id="cb21-11"><a href="#cb21-11" aria-hidden="true" tabindex="-1"></a>	pdflatex -ini -file-line-error -jobname=<span class="st">&quot;prec&quot;</span> <span class="st">&quot;&amp;pdflatex prec.tex\dump&quot;</span></span>
<span id="cb21-12"><a href="#cb21-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-13"><a href="#cb21-13" aria-hidden="true" tabindex="-1"></a><span class="dv">clean:</span></span>
<span id="cb21-14"><a href="#cb21-14" aria-hidden="true" tabindex="-1"></a>	…</span></code></pre></div>
<p>I get</p>
<pre class="console"><code>$ make clean; time make
…
______________________________________________________
Executed in   17.59 secs    fish           external
   usr time   17.14 secs  148.00 micros   17.14 secs
   sys time    0.39 secs   55.00 micros    0.39 secs</code></pre>
<p>As a bonus, this also has an effect when invoking <code>pdflatex</code> only once,
which is my usual <em>modus operandi</em> when writing:</p>
<pre class="console"><code>$ hyperfine 'pdflatex -interaction=batchmode -fmt=prec.fmt main'
Benchmark 1: pdflatex -interaction=batchmode -fmt=prec.fmt main
  Time (mean ± σ):      5.098 s ±  0.015 s    [User: 5.015 s, System: 0.062 s]
  Range (min … max):    5.074 s …  5.130 s    10 runs</code></pre>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>As you can see, I’m also feverishly procrastinating.
Somewhere between
<a href="https://phdcomics.com/comics/archive.php?comicid=149">this</a>,
<a href="https://phdcomics.com/comics/archive.php?comicid=1785">this</a>,
<a href="https://phdcomics.com/comics/archive.php?comicid=1832">and this</a>,
I suppose.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>See for example <a href="https://arxiv.org/abs/2312.13074">this paper</a>.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>{-} 󠀠</p>
<pre><code>󠀠</code></pre>
<p>You will excuse me for not doing a proper <code>hyperfine</code> benchmark,
but I just couldn’t be asked to wait that long.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>In other words, none of this information is new, really, but I haven’t seen it amalgamated all in one place yet.
If anything, this post will help <em>me</em> remember how and why to do certain things, and that’s more than enough.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>For example, <code>robust-externalize</code> does not support references inside of externalised pictures,
and you have no hope to use <code>memoize</code> with something like the <a href="https://arxiv.org/">arXiv</a>.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6"><p>Otherwise, we would run into the very same problem we are trying to solve.<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn7"><p>{-} 󠀠</p>
<pre><code>󠀠</code></pre>
<p>The implementation presented here is mostly lifted from
<a href="https://tex.stackexchange.com/questions/171931/are-the-tikz-libraries-cd-and-external-incompatible-with-one-another/362104#362104">here</a>
and
<a href="https://tex.stackexchange.com/questions/15595/problem-with-environment-expansion-and-the-tikz-external-library">here</a>;
all credit goes to the brave people on the TeX.stackexchange
who actually know what they’re doing.<a href="#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn8"><p><a href="https://q.uiver.app/">q.uiver</a> even has that as one of its export options!<a href="#fnref8" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn9"><p>Notice a pattern?<a href="#fnref9" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn10"><p>{-} 󠀠</p>
<p>Thanks to
<a href="https://tex.stackexchange.com/questions/16734/precompiled-preamble-with-tikz-externalize">this answer</a>
on TeX.stackexchange for figuring all that out so I didn’t have to.<a href="#fnref10" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn11"><p>Not that this is something I do particularly often,
but it’s still nice to speed this part of the process up.<a href="#fnref11" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn12"><p>Yes, debugging is a lot more difficult in batch mode,
but Emacs will do all the one-off compiling while I’m writing the thesis anyways.
Even if not, just firing off a one-off <code>pdflatex main</code> is very fast.<a href="#fnref12" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Integer Volutes in BQN</title>
    <link href="https://tony-zorman.com/posts/volutes-in-bqn.html" />
    <id>https://tony-zorman.com/posts/volutes-in-bqn.html</id>
    <published>2024-11-08T00:00:00Z</published>
    <updated>2024-11-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2024-11-08
      
      
        &thinsp;·&thinsp; last modified: 2024-11-13
      
      
        &thinsp;·&thinsp; <span title="3094 words">13 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'BQN'." href="/tags/BQN.html" rel="tag">BQN</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>On <a href="https://tony-zorman.com/posts/aoc-in-bqn.html#day-3">day 3</a>
of my post about doing some
<a href="https://tony-zorman.com/posts/aoc-in-bqn.html">Advent of Code problems in BQN</a>,
the task was to walk along some <em>integer volutes</em>:
spirals, either spiralling inwards—involutes—or outwards—evolutes—in either direction.
While the specific problem didn’t require it,
I think it’s a pretty neat exercise to think about how to generate these things.
Let’s talk about that.</p>
<!--more-->
<p>For example, the following is a left-spiraling evolute.</p>
<pre class="bqn"><code>    Evolute 9
┌─
╵ 64 63 62 61 60 59 58 57 56
  65 36 35 34 33 32 31 30 55
  66 37 16 15 14 13 12 29 54
  67 38 17  4  3  2 11 28 53
  68 39 18  5  0  1 10 27 52
  69 40 19  6  7  8  9 26 51
  70 41 20 21 22 23 24 25 50
  71 42 43 44 45 46 47 48 49
  72 73 74 75 76 77 78 79 80
                             ┘</code></pre>
<p>Quite pretty, isn’t it?</p>
<p>Before we start, a big disclaimer:
this is neither my work, nor did I come up with any of the novel insights presented here.
Rather, there is an article by Eugene McDonnell (available
<a href="https://code.jsoftware.com/wiki/Doc/Articles/Play132">here</a>
or <a href="https://www.jsoftware.com/papers/play132.htm">here</a>)
who talks about a solution to this problem by Joey Tuttle.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>
Both of the links above are not entirely satisfactory digitisations of the original article,
so in writing this post I’m trying to contribute a perhaps more palatable version.<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a></p>
<p>This post is written in the REPL-like fashion that I’ve already used above:
input is indented by four spaces,
and output is flush to the left.
As such, there will be lots of examples that highlight certain aspects of the current sub-problem to be solved.</p>
<p>Finally, the article probably won’t make much sense unless you know a little bit of BQN already,
the basics of which are probably best learned from the
<a href="https://mlochbaum.github.io/BQN/">official website</a>.</p>
<h2 id="the-coordinate-based-solution">The coordinate based solution</h2>
<p>Let’s initially produce a coordinate-based solution.
Our first sub-goal is to generate the correct indices in order.
Put the origin <code>⟨0 0⟩</code> into the middle, at the number <code>0</code>.
Our coordinate system will be that of indexing into the array; i.e.,
<code>0‿1</code>, <code>¯1‿0</code>, <code>0‿¯1</code>, and <code>1‿0</code> represent east, north, west, and south, respectively.
Looking at the 9×9 spiral above,
let’s think about what kind of steps we’re taking:</p>
<pre><code>0  -E-&gt;  1  -N-&gt;  2  -W-&gt;  3  -W-&gt;  4  -S-&gt;  5  -S-&gt;  6  -E-&gt;  7  -E-&gt;  8 …</code></pre>
<p>Just writing out the directions yields something like <code>ENWWSSEEENNNWWWWSSSS…</code>.
We alternate between east, north, west, and south in that order,
and always bunch up two of them with the same frequency—first one, then two, etc.
In particular, we “break into” a new iteration in the spiralling
every time a number is increased:</p>
<pre><code>0     0 1       2     4 3 2     4 3 2     4 3 2
              0 1       0 1     5 0 1     5 0 1
                                6         6 7 8 9</code></pre>
<p>If we want to end up with a square,
our sequence would look like <span class="math inline">1, 1, 2, 2, … k-1, k-1, k, k, k</span>;
repeating the last number three times instead of continuing with <span class="math inline">k+1</span>.</p>
<p>All in all, we need to generate two sequences of numbers:
the coordinates, and their associated frequencies.
Given a grid of size <span class="math inline">n</span>, some quick maths tells us that
we have to generate a sequence with <span class="math inline">2n - 1</span> directions.<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a></p>
<pre class="bqn"><code>    { (1-˜𝕩×2)⥊⟨0‿1,¯1‿0,0‿¯1,1‿0⟩ } 3 # Generate this many indices
⟨ ⟨ 0 1 ⟩ ⟨ ¯1 0 ⟩ ⟨ 0 ¯1 ⟩ ⟨ 1 0 ⟩ ⟨ 0 1 ⟩ ⟩
    {(𝕩-1)∾˜2/1+↕𝕩-1} 3 # Double with an extra bit at the end
⟨ 1 1 2 2 2 ⟩</code></pre>
<p>For doubling a given vector of numbers,
we can conveniently use
<em>replicate</em> (<a href="https://mlochbaum.github.io/BQN/doc/replicate.html"><code>/</code></a>),
and then manually add the number that should be repeated three times to the end.</p>
<pre class="bqn"><code>    { 𝕊n: # Smush everything together.
      ((n-1)∾˜2/1+↕n-1){&lt;˘𝕨‿2⥊𝕩}¨(1-˜n×2)⥊⟨0‿1,¯1‿0,0‿¯1,1‿0⟩
    } 3
┌─
· ⟨ ⟨ 0 1 ⟩ ⟩ ⟨ ⟨ ¯1 0 ⟩ ⟩ ⟨ ⟨ 0 ¯1 ⟩ ⟨ 0 ¯1 ⟩ ⟩ ⟨ ⟨ 1 0 ⟩ ⟨ 1 0 ⟩ ⟩ ⟨ ⟨ 0 1 ⟩ ⟨ 0 1 ⟩ ⟩
                                                                                         ┘
    { 𝕊n: # Flatten.
      ∾((n-1)∾˜2/1+↕n-1){&lt;˘𝕨‿2⥊𝕩}¨(1-˜n×2)⥊⟨0‿1,¯1‿0,0‿¯1,1‿0⟩
    } 3
⟨ ⟨ 0 1 ⟩ ⟨ ¯1 0 ⟩ ⟨ 0 ¯1 ⟩ ⟨ 0 ¯1 ⟩ ⟨ 1 0 ⟩ ⟨ 1 0 ⟩ ⟨ 0 1 ⟩ ⟨ 0 ⟩ ⟩</code></pre>
<p>Smushing everything together works by
<em>reshaping</em> (<a href="https://mlochbaum.github.io/BQN/doc/reshape.html"><code>⥊</code></a>)
the vector of length two into an array with two columns,
and as many rows as the desired frequency.
Flattening everything is done by calling
<em>enclose</em> (<a href="https://mlochbaum.github.io/BQN/doc/enclose.html"><code>&lt;</code></a>)
on each major cell.</p>
<pre class="bqn"><code>    3 {𝕨‿2⥊𝕩} ¯1‿0
┌─
╵ ¯1 0
  ¯1 0
  ¯1 0
       ┘
    3 {&lt;˘𝕨‿2⥊𝕩} ¯1‿0
⟨ ⟨ ¯1 0 ⟩ ⟨ ¯1 0 ⟩ ⟨ ¯1 0 ⟩ ⟩</code></pre>
<p>This yields the function to generate a vector of directions.</p>
<pre class="bqn"><code>    Dirs ← { 𝕊n: # Directions for an n×n grid
      ∾((𝕩-1)∾˜2/1+↕𝕩-1){&lt;˘𝕨‿2⥊𝕩}¨(1-˜n×2)⥊⟨0‿1,¯1‿0,0‿¯1,1‿0⟩
    }
(function block)</code></pre>
<p>To get the coordinates, we just have to “walk the path”—that is,
compute the
<code>+</code>-<em>scan</em> (<a href="https://mlochbaum.github.io/BQN/doc/scan.html"><code>`</code></a>)
and add the origin.</p>
<pre class="bqn"><code>    Coords ← { (&lt;0‿0)∾ +` Dirs𝕩 }
(function block)
    Coords 3
⟨ ⟨ 0 0 ⟩ ⟨ 0 1 ⟩ ⟨ ¯1 1 ⟩ ⟨ ¯1 0 ⟩ ⟨ ¯1 ¯1 ⟩ ⟨ 0 ¯1 ⟩ ⟨ 1 ¯1 ⟩ ⟨ 1 0 ⟩ ⟨ 1 1 ⟩ ⟩</code></pre>
<p>These coordinates are associated to the numbers that their respective index represents:
<code>0</code> for <code>⟨0 0⟩</code>, <code>1</code> for <code>⟨0 1⟩</code>, and so on.</p>
<pre class="bqn"><code>    (↕9) ≍ Coords 3
┌─
╵ 0       1       2        3        4         5        6        7       8
  ⟨ 0 0 ⟩ ⟨ 0 1 ⟩ ⟨ ¯1 1 ⟩ ⟨ ¯1 0 ⟩ ⟨ ¯1 ¯1 ⟩ ⟨ 0 ¯1 ⟩ ⟨ 1 ¯1 ⟩ ⟨ 1 0 ⟩ ⟨ 1 1 ⟩
                                                                                ┘</code></pre>
<p>All that’s left to do is to <em>reshape</em> the argument into the correct form.
This uses the fact that coordinates have a nice lexicographic ordering.</p>
<pre class="bqn"><code>    ↕3‿3          # Origin top left
┌─
╵ ⟨ 0 0 ⟩ ⟨ 0 1 ⟩ ⟨ 0 2 ⟩
  ⟨ 1 0 ⟩ ⟨ 1 1 ⟩ ⟨ 1 2 ⟩
  ⟨ 2 0 ⟩ ⟨ 2 1 ⟩ ⟨ 2 2 ⟩
                          ┘
    (↕3‿3) - &lt;1‿1 # Origin in the middle, where we want it
┌─
╵ ⟨ ¯1 ¯1 ⟩ ⟨ ¯1 0 ⟩ ⟨ ¯1 1 ⟩
  ⟨ 0 ¯1 ⟩  ⟨ 0 0 ⟩  ⟨ 0 1 ⟩
  ⟨ 1 ¯1 ⟩  ⟨ 1 0 ⟩  ⟨ 1 1 ⟩
                              ┘</code></pre>
<p>We first order the coordinates by their columns (the first number), and then by their rows (the second).
A verbose way of doing that would be the following:<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a></p>
<pre class="bqn"><code>    (Coords 3) ⋈¨ ↕9        # Zip coordinates to indices
┌─
· ⟨ ⟨ 0 0 ⟩ 0 ⟩ ⟨ ⟨ 0 1 ⟩ 1 ⟩ ⟨ ⟨ ¯1 1 ⟩ 2 ⟩ ⟨ ⟨ ¯1 0 ⟩ 3 ⟩ ⟨ ⟨ ¯1 ¯1 ⟩ 4 ⟩
  ⟨ ⟨ 0 ¯1 ⟩ 5 ⟩ ⟨ ⟨ 1 ¯1 ⟩ 6 ⟩ ⟨ ⟨ 1 0 ⟩ 7 ⟩ ⟨ ⟨ 1 1 ⟩ 8 ⟩
                                                                            ┘
    ∧ (Coords 3) ⋈¨ ↕9      # Sort
┌─
· ⟨ ⟨ ¯1 ¯1 ⟩ 4 ⟩ ⟨ ⟨ ¯1 0 ⟩ 3 ⟩ ⟨ ⟨ ¯1 1 ⟩ 2 ⟩ ⟨ ⟨ 0 ¯1 ⟩ 5 ⟩ ⟨ ⟨ 0 0 ⟩ 0 ⟩
  ⟨ ⟨ 0 1 ⟩ 1 ⟩ ⟨ ⟨ 1 ¯1 ⟩ 6 ⟩ ⟨ ⟨ 1 0 ⟩ 7 ⟩ ⟨ ⟨ 1 1 ⟩ 8 ⟩
                                                                            ┘
    1⊑¨ ∧ (Coords 3) ⋈¨ ↕9  # Get indices
⟨ 4 3 2 5 0 1 6 7 8 ⟩
    3‿3⥊1⊑¨∧(Coords 3)⋈¨↕9  # Reshape
┌─
╵ 4 3 2
  5 0 1
  6 7 8
        ┘</code></pre>
<p>This works, but feels a bit unsatisfactory.
We seem to be doing a lot of extra work just to get the correct ordering of the indices.
Luckily, BQN has a primitive function—two, actually—that exactly encapsulates operations like the above:
a <em>grade</em>.
Briefly,
given an array with major cells <span class="math inline">(c_1, \dots, c_n)</span>,
<em>grade up</em> (<a href="https://mlochbaum.github.io/BQN/doc/order.html#grade"><code>⍋</code></a>)
returns a permutation <span class="math inline">(i_1, \dots, i_n)</span> of the indices,
which yields the order that would sort the cells:
<span class="math inline">c_{i_1}</span> is the smallest element, <span class="math inline">c_{i_2}</span> is the second smallest, and so on.
This can be used to sort the vector by <em>picking</em> each <span class="math inline">i_j</span> in order.<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a></p>
<pre class="bqn"><code>    a ← ⟨3,1,0,4,4,6,7,19,16⟩
⟨ 3 1 0 4 4 6 7 19 16 ⟩
    g ← ⍋a
⟨ 2 1 0 3 4 5 6 8 7 ⟩
    (⊑g)⊑a    # smallest element
0
    (¯1⊑g)⊑a  # Largest element
19
    g⊏a       # Sort: g is a vector of indices into a
⟨ 0 1 3 4 4 6 7 16 19 ⟩
    # Grading is the same as sorting and getting the indices
    (⍋a) ≡ 1⊑¨∧a⋈¨↕9
1</code></pre>
<p>Putting everything together, we can write the first version of <code>Evolute</code>.</p>
<pre class="bqn"><code>    Evolute ← { 𝕩‿𝕩⥊ ⍋ Coords𝕩 }
(function block)
    Evolute 3
┌─
╵ 4 3 2
  5 0 1
  6 7 8
        ┘
    Evolute 5
┌─
╵ 16 15 14 13 12
  17  4  3  2 11
  18  5  0  1 10
  19  6  7  8  9
  20 21 22 23 24
                 ┘</code></pre>
<p>Nice.</p>
<h2 id="a-flat-solution">A flat solution</h2>
<p>While I think <code>Evolute</code> is quite neat,
a fun aspect of array programming is to come up with
<a href="https://saltysylvi.github.io/blog/flat1.html">completely</a>
<a href="https://saltysylvi.github.io/blog/flat2.html">flat</a>
solutions to problems.
That is, solutions that do not use any nested arrays—like vectors of coordinates—whatsoever.
This is often much more efficient,
and may yield new insights in how the problem actually works.
Plus, working in a more constrained setting can be fun just in and of itself.</p>
<p>Let’s start with the flat version of the completed spiral.</p>
<pre class="bqn"><code>    spiral ← ⥊Evolute 3
⟨ 4 3 2 5 0 1 6 7 8 ⟩</code></pre>
<p>Naively, the general strategy is this:
throw transformations <code>fᵢ</code> at <code>spiral</code>
until we arrive at some vector <code>v</code> that is reasonably easy to generate;
i.e., <code>v ≡ f₁ … fₙ spiral</code>.
Then, invert all of the <code>fᵢ</code> to re-generate the original vector:
<code>spiral ≡ fₙ⁻¹ … f₁⁻¹ v</code>.<a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a>
As far as I can tell, one just needs enough intuition about these flat arrays to guess nice enough functions.</p>
<p>Now, from the first solution we already know that <code>spiral</code> is the <em>grade</em> of some list of coordinates,
which we however have no hope of recovering.
After enough staring, one notices that <code>spiral</code> itself looks like a permutation<!--
-->—why not try to find the inverse of that?
Thankfully this is very easy, as <em>grade up</em> is self-inverse in this case:<a href="#fn7" class="footnote-ref" id="fnref7" role="doc-noteref"><sup>7</sup></a></p>
<pre class="bqn"><code>    ⍋⍋spiral
⟨ 4 3 2 5 0 1 6 7 8 ⟩
    spiral≡⍋⍋spiral
1
    ⍋spiral # This is the permutation we want.
⟨ 4 5 2 1 0 3 6 7 8 ⟩</code></pre>
<p>I think that <code>⍋spiral</code> doesn’t look any less random than <code>spiral</code>,
but Tuttle evidently saw something,
and instead checked whether this list was the running sum of a good one;
i.e., whether there exists some nice <code>y</code> such that <code>(⍋spiral) ≡ +`y</code>.
This in particular means that we have to compute the inverse of <code>+`</code>:
subtract each element from its predecessor, or <code>-⟜»</code> for short.</p>
<pre class="bqn"><code>    -⟜» ⍋spiral
⟨ 4 1 ¯3 ¯1 ¯1 3 3 1 1 ⟩
    +` -⟜» ⍋spiral
⟨ 4 5 2 1 0 3 6 7 8 ⟩
    (⍋spiral) ≡ (+`-⟜»⍋spiral)
1</code></pre>
<p>In fact, we can even ask BQN to do this for us by means of
<em>undo</em> (<a href="https://mlochbaum.github.io/BQN/doc/undo.html"><code>⁼</code></a>).</p>
<pre class="bqn"><code>    +`⁼ ⍋spiral
⟨ 4 1 ¯3 ¯1 ¯1 3 3 1 1 ⟩</code></pre>
<p>Finally, this looks like something we can generate!
Let’s take a look at a 5×5 grid, so the structure becomes even more obvious:</p>
<pre class="bqn"><code>    +`⁼⍋⥊Evolute 5
⟨ 12 1 ¯5 ¯1 ¯1 5 5 1 1 1 ¯5 ¯5 ¯5 ¯1 ¯1 ¯1 ¯1 5 5 5 5 1 1 1 1 ⟩</code></pre>
<p>Ignoring the number at the start, we have an alternation of <code>1 ¯n ¯1 n</code>, where <code>n</code> is the size of the evolute.
Disregarding multiple occurrences and the first number,
there are exactly <code>(2×n)-1</code> “primitive” numbers
to which we need to associate frequencies,
which matches with the coordinate generation from before.</p>
<pre class="bqn"><code>    { (1-˜2×𝕩)⥊⟨1,-𝕩,¯1,𝕩⟩ } 3
⟨ 1 ¯3 ¯1 3 1 ⟩
    { (1-˜2×𝕩)⥊⟨1,-𝕩,¯1,𝕩⟩ } 5
⟨ 1 ¯5 ¯1 5 1 ¯5 ¯1 5 1 ⟩</code></pre>
<p>These numbers grow in their frequency in blocks of two; first one of each, then two, and so on.
Everything here is entirely analogous to the coordinate case,
including the fact that we need to repeat the last number three times in order to obtain a square grid.</p>
<pre class="bqn"><code>    { 2/1+↕𝕩-1 } 5
⟨ 1 1 2 2 3 3 4 4 ⟩
    { (𝕩-1)∾˜2/1+↕𝕩-1 } 5 # Need correcting term at the end
⟨ 1 1 2 2 3 3 4 4 4 ⟩
    { ((𝕩-1)∾˜2/1+↕𝕩-1)/(1-˜2×𝕩)⥊⟨1,-𝕩,¯1,𝕩⟩ } 3
⟨ 1 ¯3 ¯1 ¯1 3 3 1 1 ⟩</code></pre>
<p>As for the first number that we ignored so far: it’s not actually important!
What we do with this list is a <code>+</code>-<em>scan</em>, followed by a <em>grade up</em> to sort the indices.
This means that only the relative value of the <em>scan</em> is important for the following <em>grade</em>,
so outside of special cases like <code>∞</code>, the first number could be almost anything.</p>
<pre class="bqn"><code>    { 0∾((𝕩-1)∾˜2/1+↕𝕩-1)/(1-˜2×𝕩)⥊⟨1,-𝕩,¯1,𝕩⟩ } 5
⟨ 0 1 ¯5 ¯1 ¯1 5 5 1 1 1 ¯5 ¯5 ¯5 ¯1 ¯1 ¯1 ¯1 5 5 5 5 1 1 1 1 ⟩</code></pre>
<p>In particular, this opens up a nice shortcut.
Instead of manually adding <code>𝕩-1</code> to the back and <code>0</code> to the front,
we can just add <code>𝕩</code> itself to the back,
and then <em>nudge</em> the whole array to the right,
inserting the filler <code>0</code> as the first element.</p>
<pre class="bqn"><code>    { 0∾((𝕩-1)∾˜2/1+↕𝕩-1) } 5
⟨ 0 1 1 2 2 3 3 4 4 4 ⟩
    { »(𝕩∾˜2/1+↕𝕩-1) } 5
⟨ 0 1 1 2 2 3 3 4 4 ⟩
    { »(¯1↓2/1+↕𝕩) } 5
⟨ 0 1 1 2 2 3 3 4 4 ⟩
    { »(¯1↓2/1+↕𝕩)/(1-˜2×𝕩)⥊⟨1,-𝕩,¯1,𝕩⟩ } 5
⟨ 0 1 ¯5 ¯1 ¯1 5 5 1 1 1 ¯5 ¯5 ¯5 ¯1 ¯1 ¯1 ¯1 5 5 5 5 1 1 1 1 ⟩</code></pre>
<p>We obtain a completely flat version of <code>Evolute</code>,
which works just like the original function.</p>
<pre class="bqn"><code>    EvoluteFlat ← { 𝕩‿𝕩⥊⍋+`»(¯1↓2/1+↕𝕩)/(1-˜2×𝕩)⥊⟨1,-𝕩,¯1,𝕩⟩ }
(function block)
    EvoluteFlat 3
┌─
╵ 4 3 2
  5 0 1
  6 7 8
        ┘
    EvoluteFlat 5
┌─
╵ 16 15 14 13 12
  17  4  3  2 11
  18  5  0  1 10
  19  6  7  8  9
  20 21 22 23 24
                 ┘</code></pre>
<p>Getting a rightwards spiral just involves
twiddling with the vector <code>⟨1,-𝕩,¯1,𝕩⟩</code> a little bit.
I’ll leave that as an exercise for the interested reader.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Here are complete definitions of both solutions.</p>
<pre class="bqn"><code>E1 ← {𝕩‿𝕩⥊⍋(&lt;0‿0)∾+`∾((2/1+↕𝕩-2)∾3⥊𝕩-1){&lt;˘𝕨‿2⥊𝕩}¨(1-˜𝕩×2)⥊⟨0‿1,¯1‿0,0‿¯1,1‿0⟩}
E2 ← {𝕩‿𝕩⥊⍋+`»(¯1↓2/1+↕𝕩)/(1-˜2×𝕩)⥊⟨1,-𝕩,¯1,𝕩⟩}</code></pre>
<p>I certainly think that <code>E2</code> is much prettier than <code>E1</code>;
not only because it’s shorter, but also because there seems to be less wrangling to get everything to line up correctly.<a href="#fn8" class="footnote-ref" id="fnref8" role="doc-noteref"><sup>8</sup></a>
Seeing these side by side does reveal that they use a lot of the same techniques,
however, which I think is interesting.</p>
<hr />
<p>As a bonus, here is the mandatory golfed solution,
this time as an involute.</p>
<pre class="bqn"><code>    G ← {(⊒˜∾⍉∘⌽+≠)⍟2⍟𝕩↕0‿0}
(function block)
    SLG ← {(↕∘≠∾⍉∘⌽+≠)⍟(2×𝕩)↕0‿0} # Slighly less golfed
(function block)
    G 5
┌─
╵  0  1  2  3 4
  15 16 17 18 5
  14 23 24 19 6
  13 22 21 20 7
  12 11 10  9 8
                ┘
    (SLG 5) ≡ G 5
1</code></pre>
<p>I will leave it to the interested reader to figure out that one—or to consult the
<a href="https://codegolf.stackexchange.com/questions/241803/print-a-nxn-integer-involute">relevant StackExchange thread</a>,
which I perhaps should have looked up before writing this whole thing.
Still, all of this transposing and reversing the matrix means that this solution is on the slower side.
Here’s a quick an dirty comparison:</p>
<pre class="bqn"><code>    )time G   1000  # Golfed version
1.0114s
    )time G   2000
13.885s
    )time SLG 1000  # Slightly less golfed version
651.3ms
    )time SLG 2000
8.1603s
    )time E1  1000  # Using indices
218ms
    )time E1  2000
950.2ms
    )time E2  1000  # Flat
4.197ms
    )time E2  2000
12.98ms</code></pre>
<p>While both are cubic and thus degrade fast,
<code>SLG</code> is faster than <code>G</code> because <code>↕≠</code> to generate a list of integers is much quicker than some <em>progressive index of</em> shenanigans to do the same thing.
At the end of the day, I think I prefer the flat solution :)</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>Special thanks to Marshall Lochbaum for providing these links.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>Plus, I don’t know any J, so reading the article in detail is a lot more work than just writing it in BQN myself.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>The frequencies have to add up to <span class="math inline">n^2 - 1</span>, covering all points but the origin.
A given sequence <span class="math inline">1, 1, 2, 2, \dots, k-1, k-1, k, k, k</span> has <span class="math inline">2k + 1</span> members
and sums up to <span class="math inline">k^2 + 2k</span>.
Solving <span class="math inline">k^2 + 2k = n^2 - 1</span> for <span class="math inline">k</span> has sensible roots,
<span class="math inline">\pm n - 1</span>, of which we of course pick <span class="math inline">n-1</span>.
Substituting <span class="math inline">k=n-1</span>,
we have to generate <span class="math inline">2n - 1</span> frequencies,
the values of which indeed sum up to <span class="math inline">(n-1)^2 + 2(n-1) = n^2 - 1</span>.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>{-} Line breaks in the output for clarity.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>In fact, in APL this is the only way to do this—there is no other sorting primitive!<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6"><p>Note that, in particular, we are interested in left inverses of all the <code>fᵢ</code>.
This is a bit in opposition to the facilities that BQN provides by default, like
<em>undo</em> to find the right inverse.
However, we’ll manage.<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn7"><p>A quick justification:
suppose that we have a vector <span class="math inline">n \defeq (n_1, \dots, n_k)</span> of natural numbers,
such that every number from <span class="math inline">0</span> to <span class="math inline">k-1</span> appears exactly once.
Using <em>grade up</em>, we obtain a permutation <span class="math inline">\sigma \defeq (i_1, \dots, i_k)</span>.
If one <em>grades</em> that permutation in the same direction,
then whatever index <span class="math inline">i_j</span> has value <span class="math inline">0</span>
will be the very first element of the new permutation <span class="math inline">\tau \defeq (i_j, \dots, i_\ell)</span>,
and likewise for the other numbers.
Thus, <span class="math inline">\tau \sigma (n) = n</span>.</p>
<p>Of course, <code>⍋⍋</code> it not the identity in general, but it is a useful operation nonetheless:
it “ranks” the elements of the input,
with <code>0</code> corresponding to the smallest element, and so on.
This is known as the
<a href="https://mlochbaum.github.io/BQN/doc/order.html#ordinals">ordinal idiom</a>.<a href="#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn8"><p>Looking at <a href="https://mlochbaum.github.io/bqncrate/">BQNcrate</a>,
one could even shorten <code>E2</code> a little further:</p>
<pre class="bqn"><code>E3 ← {𝕩‿𝕩⥊⍋+`»(¯1↓2/1+↕𝕩)(⊣/≠⊸⥊)⟨1,-𝕩,¯1,𝕩⟩}</code></pre>
<p>This <em>reshapes</em> the list <code>⟨1,-𝕩,¯1,𝕩⟩</code> according to the length of <code>¯1↓2/1+↕𝕩</code>,
without us having to explicitly specify that it will be <code>1-˜2×𝕩</code>.
I think, however, that arriving at this number yields some insights that one would otherwise not have had,
so I prefer leaving it in the final solution.<a href="#fnref8" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>BQNing Advent of Code</title>
    <link href="https://tony-zorman.com/posts/aoc-in-bqn.html" />
    <id>https://tony-zorman.com/posts/aoc-in-bqn.html</id>
    <published>2024-10-27T00:00:00Z</published>
    <updated>2024-10-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2024-10-27
      
      
        &thinsp;·&thinsp; last modified: 2024-10-28
      
      
        &thinsp;·&thinsp; <span title="22378 words">90 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'BQN'." href="/tags/BQN.html" rel="tag">BQN</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>I did all of Advent of Code 2017 in BQN so you don’t have to.
Let me tell you about that in as few as 20’000 words.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></p>
<!--more-->
<h2 id="the-setup">The setup</h2>
<p>Advent of Code is a yearly puzzle-coding-challenge-thing,
in which one has to solve two riddles every day from the 1st until the 25th of December,
with the second part of each puzzle being unknown until one solves the first one.
I’ve found it to be a great way to learn the basics of a language—how it “feels”.</p>
<p>The puzzles are accompanied by an endearing—and at times pretty funny—story.
I will, however, leave out most of it for this post,
as I feel like it would distract too much from the point I’m trying to make.</p>
<h3 id="conventions-throughout-the-article">Conventions throughout the article</h3>
<p>One thing I will not leave out is the full solution for every day.
Normally this would result in a rather large amount of code having to be shown for the later days,
but BQN’s terseness saves us here:
excluding comments and empty lines, all days combined are just under 300 lines of code!
I will be a tiny bit economical with the different parts, though;
think of every heading as introducing its own namespace.
For example,
in the code block solving the first part of every day I will generally include parsing the input.</p>
<pre class="bqn"><code>inp ← …
# Hypothetical solution for first part
inp - 1</code></pre>
<p>The second part will then freely refer to <code>inp</code> without me having to define it again.</p>
<pre class="bqn"><code># Second part
inp + 1</code></pre>
<h3 id="who-reads-all-of-this-anyways">Who reads all of this anyways?</h3>
<p>A surprisingly hard question is who this article is for.
Someone new to Advent of Code, but familiar with BQN?
The other way around?
New to both?
Familiar with both?
The answer—as is so often the case—is that I don’t know.
Realistically, I’m actually talking to my present and future self here<!--
-->—writing about things is a great way to solidify understanding—<!--
-->so the article will be structured accordingly:
I will talk about BQN’s core concepts and language features,
but put the more dreary parts of that exposition in collapsible boxes,
for people who either already know, or don’t care.</p>
<p>Keep in mind that I started solving these puzzles to learn the language.
Further, BQN is my very first array programming language,<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>
so my understanding of a lot of concepts is still quite shallow.
The official documentation is really quite good, so I will link to it a lot.
As mentioned, the tangents in which I talk about language features are more for my own understanding.
Still, perhaps they are useful in case someone who does not know BQN has somehow found their way here,
and didn’t run away after seeing the Unicode characters.
As such, the focus of this post should be on how I<!--
-->—as a total newcomer to this kind of thing—<!--
-->approach solving problems in such an unusual language;
what works and what doesn’t, that kind of thing.
In short, I want to impart the <em>vibe</em> of the language to the reader<!--
-->—and that AOC is actually a lot of fun!<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a></p>
<h3 id="acknowledgements">Acknowledgements</h3>
<p>I want to explicitly thank the super welcoming
<a href="https://mlochbaum.github.io/BQN/community/index.html">community</a>
that this language has!
Next to fantastic sites such as <a href="https://mlochbaum.github.io/bqncrate/">BQNcrate</a><!--
-->—a great way to pick up on idiomatic ways to write certain things—<!--
-->there is a
<a href="https://app.element.io/#/room/%23bqn:matrix.org">#bqn:matrix.org</a>
matrix room, which is part of the larger
<a href="https://app.element.io/#/room/%23array:matrix.org">#array:matrix.org</a> space.
Someone knowledgeable is always there to answer your stupid questions.
Special thank to
Marshall Lochbaum (the creator of the language!),
dzaima, and
brian_e.
Without them a lot of solutions presented here would be even uglier than they already are.
A separate big thanks goes out to dzaima (again!)
for sending me lots of code improvements and suggestions for this post.</p>
<h2 id="a-crash-course-on-syntax">A crash course on syntax</h2>
<p>Here is an entirely too short crash course on the syntax of the language,
with a bit of semantics sprinkled in here and there.
Throughout, I will present most examples in a REPL-esque fashion;
input is indented by 4 spaces, and output is flush to the left.
Line comments in BQN start with <code>#</code>.</p>
<pre class="bqn"><code>    1+4+6 # Everything normal so far…
11
    2×4+6 # …but actually not!
20</code></pre>
<p>That last one probably already needs explanation.
First, multiplication is <code>×</code>, instead of <code>*</code> as in most other languages.
More importantly, however: there is no precedence for mathematical operators!
BQN is evaluated (strictly) from right to left,
and most of the time this is also the direction you should read expressions in.</p>
<p>Assigning values to variables works with <em>define</em> (<code>←</code>):</p>
<pre class="bqn"><code>    v ← 2×4+6
20</code></pre>
<p>A block is something in between curly braces,
containing several assignments and expressions separated by line breaks, or, alternatively, the <code>⋄</code> character.
Further, a block starts its own <a href="https://mlochbaum.github.io/BQN/doc/namespace.html">namespace</a>;
nothing all that surprising coming from almost any other language.</p>
<pre class="bqn"><code>    v ← 2×4+6
20
    {v←0 ⋄ v}
0
    v
20</code></pre>
<p>I will talk a little bit more about namespaces later,
but let’s not get too hung up on that right now.
Instead, let’s talk about functions.
A user-defined function is something in curly braces that mentions the special names <code>𝕨</code> and <code>𝕩</code>,
standing in for the left and right argument to it.<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a>
Functions are always infix, and can only be called with either one or two arguments.
In the former case, the function takes its argument on the right and <code>𝕨</code> will be given a special value:
<em>nothing</em> (<a href="https://mlochbaum.github.io/BQN/doc/expression.html#nothing"><code>·</code></a>)!.</p>
<pre class="bqn"><code>    1 {𝕨+𝕩} 2
3
    1 {𝕨-𝕩} 2
¯1
    2 {𝕨⋆𝕩} 8  # Careful: exponentiation!
256
    {√𝕩} 9     # Could also just write √9
3</code></pre>
<p>I should note that the <code>⋆</code> above is the Unicode code point <code>0x22C6</code> (STAR OPERATOR),
and not just a normal asterisk.</p>
<p>Because Greek is much cooler than Latin,
BQN calls functions taking one argument <em>monadic</em>,<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a>
and ones taking two arguments <em>dyadic</em>.
When in doubt, just substitute “unary” and “binary” in your head.
One thing that might seem very confusing at the start is that
many functions are actually overloaded depending on whether they are called monadically or dyadically<!--
-->—often with seemingly unrelated (or only barely so) functions!</p>
<pre class="bqn"><code>    # Dyadic ×; N.b. we use the upper minus ¯ here because ¯2 is its own
    # number literal. We could also use the function -, but then (because
    # remember everything is evaluated right to left) we would have to
    # use parentheses: (-2)×4. Otherwise, the expression would be parsed
    # as -(2×4).
    ¯2×4
¯8
    ×¯2 # Monadic × is the signum function!
¯1
    ×2
1
    ×0
0</code></pre>
<p>The signum function hints at a fundamental design decision that basically all array languages share:
instead of a name,
all builtin functions are given a unique symbol.
However, the documentation of each of them does mention a pronounceable name as well,
so that it’s easier to talk to other people about a given piece of code.</p>
<pre class="bqn"><code>    ↕9                 # Monadic ↕: Range. Gives you the integer range [0, 𝕩-1].
⟨ 0 1 2 3 4 5 6 7 8 ⟩
    7↕(↕9)             # Dyadic ↕: Windows. Create all windows of size 𝕨 in 𝕩.
                       # N.b: the parentheses are not technically needed.
┌─
╵ 0 1 2 3 4 5 6
  1 2 3 4 5 6 7
  2 3 4 5 6 7 8
                ┘</code></pre>
<p>In particular, the above examples showcase how BQN displays <em>vectors</em> (or <em>lists</em>) and <em>arrays</em>.
Definitionally, vectors are “rank 1 arrays”—we will talk about what exactly this means when we talk about major cells.<a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a>
We can define our own arrays in a few different ways,
the two most important ones being</p>
<pre class="bqn"><code>    ⟨1,2,3,4⟩ # Using list notation
⟨ 1 2 3 4 ⟩
    1‿2‿3‿4   # Using strand notation
⟨ 1 2 3 4 ⟩</code></pre>
<p>Here’s another example of monadic and dyadic uses of functions:</p>
<pre class="bqn"><code>    r←↕9
⟨ 0 1 2 3 4 5 6 7 8 ⟩
    ⌽r                 # Monadic ⌽: Reverse.
⟨ 8 7 6 5 4 3 2 1 0 ⟩
    3⌽r                # Dyadic ⌽: Rotate. Rotates 𝕩 by 𝕨 places to the
                       # left (to the right if 𝕨 is negative).
⟨ 3 4 5 6 7 8 0 1 2 ⟩</code></pre>
<p>This takes some time getting used to.
However, after a while you really start to think that
<a href="https://dl.acm.org/doi/pdf/10.1145/1283920.1283935">notation as a tool for thought</a>
has a point.<a href="#fn7" class="footnote-ref" id="fnref7" role="doc-noteref"><sup>7</sup></a>
I believe BQN’s creator once called the syntax “scribbles on a whiteboard”, and honestly that’s my feeling about it too<!--
-->—with the slight addendum that blackboards are obviously vastly superior to whiteboards.</p>
<p>One more piece of syntax that we have to discuss before diving into day 1: modifiers.
These are <em>things</em> that take either one or two functions, and spit out a new, modified, one.
I would imagine that this comes from the APL tradition and is actually not strictly needed,
given that BQN supports <a href="https://mlochbaum.github.io/BQN/doc/functional.html">higher order functions</a>.
However, since these things have their own precedence and binding rules, the separate concept may nonetheless be useful.</p>
<p>We can write our own modifiers by using <code>𝔽</code> and <code>𝔾</code> inside of a block,
but for most of this article we will only use the builtin ones.
Monadic modifiers take their function argument <em>to the left</em>,
and are not called monadic any longer,
but 1-modifiers.
Likewise, modifiers taking two functions are called 2-modifiers.</p>
<pre class="bqn"><code>    1 - 3  # Normal subtraction
¯2

    1 -˜ 3 # ˜ is the *flip* or *swap* 1-modifier:
           # it takes a dyadic function and returns
           # one with its arguments flipped.
2
    3 - 1
2

    -˜ 3  # If a flipped function is called with
          # only one argument, it gets duplicated.
0
    3 - 3
0

    {𝕩+1}∘{𝕩-3} 4 # ∘ is the function composition 2-modifier called *atop*.
                  # Called monatically, 𝔽∘𝔾 𝕩 is just 𝔽𝔾𝕩
2
    1 {𝕩+1}∘{𝕩-𝕨} 4 # Called dyadically, 𝕨 𝔽∘𝔾 𝕩 transforms to 𝔽(𝕨𝔾𝕩)
4
    1 +⟜1∘- 4     # ⟜ is *after*: 𝔽⟜𝔾 𝕩 evaluates to 𝕩𝔽(𝔾𝕩).
                  # If a constant or variable is given as 𝔽 or 𝔾,
                  # it is promoted to its constant function.
                  # The whole expression associates as 1 (+⟜1)∘- 4,
                  # and so evaluates to (+⟜1) (1-4) = (1-4)+1.
¯2</code></pre>
<p>Besides this being quite a lot to take in,
you might have already noticed something strange in the last example:
how come <code>+⟜1∘-</code> is parsed like <code>(+⟜1)∘-</code> when I previously said everything is evaluated right to left?
While there are no precedence rules among functions or among modifiers,
the latter does <a href="https://mlochbaum.github.io/BQN/doc/syntax.html#precedence">bind tighter</a> than the former.
Additionally, modifiers associate left to right, instead of right to left:
given functions <code>F</code>, <code>G</code>, and <code>H</code>, then <code>F∘G∘H</code> is parsed as <code>(F∘G)∘H</code> instead of <code>F∘(G∘H)</code>.
As you can imagine, getting used to reading BQN expressions takes quite some time.
It gets better, though, I promise.</p>
<p>Something to ease the pain:
there is a purely syntactic way to decide whether a given symbol is a (builtin) function, 1-, or 2-modifier!<a href="#fn8" class="footnote-ref" id="fnref8" role="doc-noteref"><sup>8</sup></a>
Thankfully, someone thought about this, and there is a consistent morphology to the chosen symbols:</p>
<ul>
<li>1-modifiers are always superscripts;</li>
<li>2-modifiers always contain an <em>unbroken</em> circle; and</li>
<li>everything else is a function.</li>
</ul>
<p>For example, <code>× + - ⋆ ⌽ ⍉ ⊔ ≢</code> are functions (remember the unbroken part),
<code>˘ ¨ ⁼ ´</code> are 1-modifiers,
and <code>∘ ⍟ ⚇ ◶ ⌾</code> are 2-modifiers.
Quite neat, I think.</p>
<p>This should be plenty to get a feeling for the language.
Anything more will be introduced as needed.<a href="#fn9" class="footnote-ref" id="fnref9" role="doc-noteref"><sup>9</sup></a></p>
<h2 id="days-15">Days 1–5</h2>
<h3 id="day-1"><a href="https://github.com/slotThe/advent/blob/master/aoc2017/bqn/day01.bqn">Day 1</a></h3>
<p>Let’s get into the swing of things!
Day 1 starts with us getting sucked into Santa’s computer,
where we have to solve a captcha, proving we’re not human.</p>
<p>For part one,
we are given a (circular) list of numbers,
and are asked to identify repeating digits, starting from the beginning
(i.e., all digits that match the next element).
For example, in <code>311223</code> this would be <code>1</code>, <code>2</code>, and <code>3</code> (in that order).
Our input is a long string of digits
that we first have to convert to a long string of numbers:</p>
<pre class="bqn"><code>inp ← '0'-˜ ⊑ •FLines&quot;../inputs/day01.txt&quot;</code></pre>
<p>Reading the input line-by-line and converting it to a vector works via the builtin <code>•FLines</code> function.<a href="#fn10" class="footnote-ref" id="fnref10" role="doc-noteref"><sup>10</sup></a>
The only other function we haven’t see so far is
<em>first</em> <a href="https://mlochbaum.github.io/BQN/doc/pick.html"><code>⊑</code></a>,
which gives us the first element in the list—our input is on a single long line.
Much more interesting is the <code>'0'-˜</code> part,
which immediately gives me a chance to talk about character–number conversions in BQN.</p>
<details>
<summary>
Affine characters in BQN
</summary>
<p>The <a href="https://mlochbaum.github.io/BQN/tutorial/expression.html#character-arithmetic">documentation</a>
says that characters reside in an affine space,<a href="#fn11" class="footnote-ref" id="fnref11" role="doc-noteref"><sup>11</sup></a>
which is a good guide on what kinds of operations we have access to:</p>
<ol type="1">
<li><p><code>(+) : Num  → Char → Char</code>, adding a number to a character gives a character:</p>
<pre class="bqn"><code>    97+@   # @ is the literal &quot;null&quot; character;
           # i.e., '\0' in most other languages.
'a'</code></pre></li>
<li><p><code>(-) : Char → Num  → Char</code>, subtracting a number from a character gives a character:</p>
<pre class="bqn"><code>    'a'-32
'A'</code></pre></li>
<li><p><code>(-) : Char → Char → Num</code>, subtracting two characters gives a number:</p>
<pre class="bqn"><code>    'a'-@
97
    '0'-@
48
    'a'-'0'
49</code></pre></li>
</ol>
<p>Since the numbers from 0 to 9 are ordered sequentially in UTF-8,
this in particular gives a neat way to transform a vector of characters<!--
-->—also known as a string—<!--
-->into a vector of digits:
simply subtract <code>'0'</code> from them!</p>
<pre class="bqn"><code>    '9'-'0'
9
    &quot;1939102&quot;-'0'
⟨ 1 9 3 9 1 0 2 ⟩</code></pre>
The last example shows another important feature of pretty much all array oriented languages:
<a href="https://mlochbaum.github.io/BQN/doc/arithmetic.html#pervasion">scalar pervasion</a>.
Simply put, arithmetic functions like <code>-</code> know how to “penetrate” arrays,
in that they apply to each element individually, instead of to the whole thing as one.
In this case, the scalar <code>'0'</code> is “duplicated” and supplied to all elements of the string <code>"1939102"</code>.
</details>
<p>After the input is parsed, the solution is not so complicated:<a href="#fn12" class="footnote-ref" id="fnref12" role="doc-noteref"><sup>12</sup></a></p>
<pre class="bqn"><code>+´ inp/˜ inp= ¯1⌽inp</code></pre>
<p>We <em>rotate</em> (<a href="https://mlochbaum.github.io/BQN/doc/reverse.html#rotate"><code>⌽</code></a>)
the whole list by 1 to the right,
and then compare it with its original (<code>inp= -1⌽inp</code>).
This creates a <em>Boolean mask</em>: a list with the same length as <code>inp</code>, only consisting of zeros and ones.
We can use this to pick the elements of the list corresponding to 1 with
<em>replicate</em> (<a href="https://mlochbaum.github.io/BQN/doc/replicate.html#replicate"><code>/</code></a>).</p>
<pre class="bqn"><code>    # &quot;Only give me the elements of 𝕩
    # that correspond to 1's in 𝕨&quot;.
    ⟨1,1,0,1,1,0⟩ / ↕6
⟨ 0 1 3 4 ⟩</code></pre>
<p>All that’s left is to sum up the numbers by using
+-<em>fold</em> (<a href="https://mlochbaum.github.io/BQN/doc/fold.html#fold"><code>`</code></a>),
which is just a right fold over the list.
A few more notes:</p>
<ol type="1">
<li><p>Boolean masks are an important concept to internalise,
and will often be used to filter results, or serve as control flow<!--
     -->—BQN does not have a builtin if-then-else expression!</p></li>
<li><p><em>Swap</em> (<a href="https://mlochbaum.github.io/BQN/doc/swap.html"><code>˜</code></a>),
as seen in the <a href="#a-crash-course-on-syntax">crash course on syntax</a> makes an appearance again.
Recall that this 1-modifier simply takes a function, and returns a function with its arguments flipped,
so <code>X f˜ Y</code> is the same as <code>Y f X</code>.
When given only one argument, <em>swap</em> becomes <em>self</em> and duplicates its argument: <code>f˜ Y</code> is <code>Y f Y</code>.
The modifier mostly exists to allow the reading order to flow more naturally from right to left.
Without it, we would have to write the above expression as <code>+´(inp=-1⌽inp)/inp</code>.<a href="#fn13" class="footnote-ref" id="fnref13" role="doc-noteref"><sup>13</sup></a></p></li>
</ol>
<hr />
<p>Part two is basically the same,
only a number doesn’t consider its first successor,
but the one that’s exactly halfway around the list.
Adjusting for this just means that we have to adjust how much we shift before comparing:</p>
<pre class="bqn"><code>+´ inp/˜ inp= (¯2÷˜≠inp)⌽inp</code></pre>
<p>Even in this simple example,
one can already see what goes into writing code in this language:
aim for branchless, array-based, solutions rather than iterating through elements.
However, if you ever miss <code>if-then-else</code> or <code>while</code> constructs,
<a href="https://mlochbaum.github.io/BQN/doc/control.html">you can make your own</a>.</p>
<h3 id="day-2"><a href="https://github.com/slotThe/advent/blob/master/aoc2017/bqn/day02.bqn">Day 2</a></h3>
<p>Today we have to help some programs repair a corrupted spreadsheet.
Our puzzle input is a table of numbers, like so:</p>
<pre><code>5 9 2 8
9 4 7 3
3 8 6 5</code></pre>
<p>For part one we have to calculate the smallest and largest values of all rows in the table.
This is easy enough once we have the data in a usable format;
however, getting to that format is actually the much more interesting part of the day.
For one, we have to learn how to split strings!
For these kinds of partitioning tasks, BQN sports the very general
<em>group</em> (<a href="https://mlochbaum.github.io/BQN/doc/group.html"><code>⊔</code></a>)
function.
Briefly, <code>X⊔Y</code> groups <code>Y</code> according to the indices supplied by <code>X</code>,
while omitting elements that are associated to <code>¯1</code>.
For example, in</p>
<pre class="bqn"><code>    1‿0‿¯1‿1 ⊔ &quot;abcd&quot;
⟨ &quot;b&quot; &quot;ad&quot; ⟩</code></pre>
<p>both <code>a</code> and <code>d</code> are associated to the same index, <code>1</code>, so they are grouped together;
<code>b</code> is alone (and in front of <code>a</code> and <code>d</code> because it is associated to index <code>0</code>);
and <code>c</code> is omitted.
The strategy is, then, to somehow associate <code>¯1</code> to the separator in the input, and have all digits of a number be associated to the same index.
If you want you can black box that such a <code>Split</code> function exists;
if not, feel free to peruse the insert below.</p>
<details>
<summary>
The long and painful walkthrough
</summary>
<p>We start by checking which elements of the given string match the separator,
and call it <code>ws</code>.
I will use a string with a space separator for illustrative purposes, but the function itself is really quite general.</p>
<pre class="bqn"><code>    ' ' { ws←𝕨=𝕩 } &quot;13 259 39999 4&quot;
⟨ 0 0 1 0 0 0 1 0 0 0 0 0 1 0 ⟩</code></pre>
<p>Now, a
+-<em>scan</em> (<a href="https://mlochbaum.github.io/BQN/doc/scan.html"><code>`</code></a>)
yields a running sum, indicating when we encounter a separator.</p>
<pre class="bqn"><code>    ' ' { +`ws←𝕨=𝕩 } &quot;13 259 39999 4&quot;
⟨ 1 1 2 2 2 2 3 3 3 3 3 3 4 4 ⟩</code></pre>
<p>This looks a bit weird, but the <code>ws←𝕨=𝕩</code> is an inline assignment—we do the comparison <code>𝕨=𝕩</code>, call the result <code>ws</code>, and then scan over it.
In this way, we can refer to <code>ws</code> again at a later point.
It’s not the best style to write code this way, but here it kind of fits.
If we just <em>group</em>ed the string now, we
would get the separators “attached” to the word that follows them:</p>
<pre class="bqn"><code>    ' ' { 𝕩⊔˜+`ws←𝕨=𝕩 } &quot;13 259 39999 4&quot;
⟨ &quot;13&quot; &quot; 259&quot; &quot; 39999&quot; &quot; 4&quot; ⟩</code></pre>
<p>One thing we can do,
since <code>ws</code> gives us the positions of the separators,
is to
<em>negate</em> (<a href="https://mlochbaum.github.io/BQN/doc/logic.html"><code>¬</code></a>)
the entire vector and multiply it with what we already have.
This would turn all separators into zeros in the output:</p>
<pre class="bqn"><code>    ' ' { (¬ws)×+`ws←𝕨=𝕩 } &quot;13 259 39999 4&quot;
⟨ 0 0 0 1 1 1 0 2 2 2 2 2 0 3 ⟩</code></pre>
<p>Now we can’t differentiate between the separators and our first word!
However, there is an easy fix for this;
we just take the original <code>ws</code>, which—remember—contains the positions of the separators,
and subtract it from the result that we have:</p>
<pre class="bqn"><code>    ' ' { ws-˜(¬ws)×+`ws←𝕨=𝕩 } &quot;13 259 39999 4&quot;
⟨ 0 0 ¯1 1 1 1 ¯1 2 2 2 2 2 ¯1 3 ⟩</code></pre>
<p>And that’s it!</p>
<pre class="bqn"><code>    ' ' { 𝕩⊔˜ws-˜(¬ws)×+`ws←𝕨=𝕩 } &quot;13 259 39999 4&quot;
⟨ &quot;13&quot; &quot;259&quot; &quot;39999&quot; &quot;4&quot; ⟩</code></pre>
<p>If you wanted to make it unreadable (see the bit on trains below), you could also write it as</p>
<pre class="bqn"><code>    ' ' ((⊢-˜¬×+`)∘=⊔⊢) &quot;13 259 39999 4&quot;
⟨ &quot;13&quot; &quot;259&quot; &quot;39999&quot; &quot;4&quot; ⟩</code></pre>
We can bind that to a function <code>Split</code> and be on our way!<a href="#fn14" class="footnote-ref" id="fnref14" role="doc-noteref"><sup>14</sup></a>
</details>
<p>The input separates each number by a tab,
so we just need <code>'\t' Split input</code>, right?</p>
<p>Wrong!</p>
<p>BQN’s characters and strings are almost completely void of any kind of escaping mechanism.
That is to say, besides for double quotes, which are inserted by duplicating them,
every character entered into a string it interpreted verbatim.
Indeed, <code>'\t'</code> is not even a valid character,
as it actually comprises two characters: <code>'\'</code> and <code>'t'</code>!
To write a tab we either need to actually insert a tab character,<a href="#fn15" class="footnote-ref" id="fnref15" role="doc-noteref"><sup>15</sup></a>
or make use of the “affine” part of affine characters:</p>
<pre class="bqn"><code>    '	'
'	'
    @+9
'	'</code></pre>
<p>Because both <code>Split</code> and <code>tab←@+9</code> will be needed quite a few times this year,
let’s put it into a small utility file.
We can use BQN’s system function <code>•Import</code> to import a namespace<!--
-->—which I don’t want to get into right now, but it works as one would expect—<!--
-->from somewhere.
Parsing the input and solving part one is straightforward:</p>
<pre class="bqn"><code>⟨Split, tab⟩ ← •Import &quot;../../util/bqn_util/util.bqn&quot;
inp ← &gt;(•ParseFloat¨ tab⊸Split)¨ •FLines &quot;../inputs/day02.txt&quot;

+´ (⌈´-⌊´)˘ inp</code></pre>
<p>…except that this solution uses two new concepts that we haven’t seen before:
multidimensional arrays, and tacit programming!</p>
<details>
<summary>
Arrays
</summary>
<p>The fateful day has come that we need to talk about arrays in this array language.
I will probably not do this topic justice here, so <a href="https://mlochbaum.github.io/BQN/doc/array.html">have a link</a> to the BQN array docs.
For now, let’s look at an array as a blob with the following properties:</p>
<ul>
<li><p>It has a <em>rank</em>, which is its number of axes.
Pictorially, it is the number of dimensions one can walk in.
The <em>leading axis</em> is the first one.</p></li>
<li><p>It has a <em>shape</em>, which is the number of positions that it has along each of its axes.</p></li>
<li><p>It has <em>elements</em>, which are the values at every position.</p></li>
</ul>
<p>One can query the <em>rank</em> of an array with monadic
<a href="https://mlochbaum.github.io/BQN/doc/shape.html"><code>=</code></a>
and the <em>shape</em> with monadic
<a href="https://mlochbaum.github.io/BQN/doc/shape.html"><code>≢</code></a>.</p>
<p>For example,</p>
<pre class="bqn"><code>    10+↕9
⟨ 10 11 12 13 14 15 16 17 18 ⟩</code></pre>
<p>is an array of <em>rank</em> <code>1</code> with <em>shape</em> <code>⟨9⟩</code>.
At every possible position (0–9), we find a corresponding element: <code>10</code> for 0, <code>11</code> for 1, etc.</p>
<p>We can use <em>reshape</em> to create a higher-dimensional array from a flat vector:</p>
<pre class="bqn"><code>    3‿3⥊↕9
┌─
╵ 0 1 2
  3 4 5
  6 7 8
        ┘</code></pre>
<p>This is an array of <em>rank</em> <code>2</code> with <em>shape</em> <code>⟨3 3⟩</code>.
The element at position <code>1‿1</code> (notice how we have two indices to specify) is <code>4</code>.</p>
<p>Why am I blabbering on about this when everyone intuitively knows what an array is?
Because this is <em>really</em> important:
arrays are an intrinsic concept.
Many things that seem intuitive at first,
coming from another language, are just not true in BQN.</p>
<ul>
<li><p>Lists of lists are not equivalent to higher-dimensional arrays:</p>
<pre class="bqn"><code>    a ← ⟨⟨1,2⟩,⟨3,4⟩⟩
⟨ ⟨ 1 2 ⟩ ⟨ 3 4 ⟩ ⟩
    b ← &gt;a              # monadic &gt; is called *merge*
                        # and creates an array from a list
┌─
╵ 1 2
  3 4
      ┘
   b≡a
0</code></pre></li>
<li><p>Piggybacking off of that: “depth is not rank”.
The type of the elements is not at all important in determining the arrays rank.</p>
<pre class="bqn"><code>   =1‿2‿3‿4‿5 # vector
1
   =3‿3⥊↕9    # matrix
2
   m←1‿(3‿4)‿(2‿2⥊↕4) # Nested array
┌─
· 1 ⟨ 3 4 ⟩ ┌─
            ╵ 0 1
              2 3
                  ┘
                    ┘
   =m # The rank of the elements does
      # *not* affect the rank of the array.
1</code></pre></li>
</ul>
<p>A <em>cell</em> of an array is just a subarray of any size.
Now, a <em>major cell</em> of an array of rank <code>n</code> is a cell of rank <code>n-1</code> that leaves out the leading axis.
For example, <code>3‿3⥊↕9</code> has three major cells, <code>⟨0 1 2⟩</code>, <code>⟨3 4 5⟩</code>, and <code>⟨6 7 8⟩</code>.</p>
<p>This concept is quite central to the way a lot of array primitives work,
in that they often only apply to the first axis of the argument.
The 1-modifier
<em>cells</em> (<a href="https://mlochbaum.github.io/BQN/doc/rank.html"><code>˘</code></a>)
changes a function to instead operate on the major cells of its argument.
For example, we already saw that <em>reverse</em> reverses lists.
If we have more dimensions, we instead reverse along the leading axis:</p>
<pre class="bqn"><code>    m←3‿3⥊↕9
┌─
╵ 0 1 2
  3 4 5
  6 7 8
        ┘
    ⌽m   # Reverse the first axis of m
┌─
╵ 6 7 8
  3 4 5
  0 1 2
        ┘
    ⌽˘m  # Reverse each major cell separately
┌─
╵ 2 1 0
  5 4 3
  8 7 6
        ┘</code></pre>
</details>
<details>
<summary>
Tacit programming
</summary>
<p>If you, after reading this far,
thought that BQN was really a little too verbose for you,
<a href="https://mlochbaum.github.io/BQN/doc/tacit.html">you’re in luck</a>!</p>
<p>The basic idea of trains is deceptively simple.
Pick your favourite algebraic structure with a binary operation, say an abelian monoid.
Given two morphisms <span class="math inline">f, g \colon M \to N</span> of such structures, we can define another map
<span class="math display">
  f \cdot g \colon M \to N, \qquad (f \cdot g)(x) \defeq f(x) \cdot_N g(x).
</span>
It is an easy exercise to prove that this is again a morphism of abelian monoids.<a href="#fn16" class="footnote-ref" id="fnref16" role="doc-noteref"><sup>16</sup></a></p>
<p>What BQN now does is twofold:
first, it takes the expression <span class="math inline">f \cdot g</span>, and allows it to be called both monadically and dyadically.
Second, it allows one to replace the operation in the middle with any dyadic function whatsoever.</p>
<p>Train syntax is essentially just “writing functions after each other”.<a href="#fn17" class="footnote-ref" id="fnref17" role="doc-noteref"><sup>17</sup></a>
This in particular does not use any blocks, so you can’t refer to named arguments at all.
More explicitly, we have the following two relationships:</p>
<pre><code>(FGH)y  ≡  (Fy)G(Hy)   and   x(FGH)y  ≡  (xFy)G(xHy)</code></pre>
<p>Replace <code>G</code> with <span class="math inline">\cdot</span> in the first of these and you essentially have the above mathematical notation.</p>
<p>Since this train is composed of three functions, it is called a <em>3-train</em>.
Naturally, <em>2-trains</em> also exist; these are just 3-trains in which the function <code>F</code> is <em>nothing</em>
(<a href="https://mlochbaum.github.io/BQN/doc/expression.html#nothing"><code>·</code></a>):</p>
<pre><code>(GH)y  ≡  GHy   and   x(GH)y  ≡  G(xHy)</code></pre>
<p>For example, suppose we wanted to write a function that takes two arrays <code>X</code> and <code>Y</code> and gives us back only those major cells of <code>X</code> that do not exist in <code>Y</code>.<a href="#fn18" class="footnote-ref" id="fnref18" role="doc-noteref"><sup>18</sup></a>
Sort of like a set difference for arrays.
We just need a few functions for this purpose:
<em>negate</em> (<a href="https://mlochbaum.github.io/BQN/doc/logic.html"><code>¬</code></a>) and
<em>member of</em> (<a href="https://mlochbaum.github.io/BQN/doc/search.html#member-of"><code>∊</code></a>),
which do what you would expect them to.</p>
<p>Additionally, we will make use of the scalar pervasion of <em>member of</em>,
where for every element in <code>𝕨</code>, we test whether it is in <code>𝕩</code>.</p>
<pre class="bqn"><code>    &quot;.b#d.#zz#&quot; ∊ &quot;.#&quot;
⟨ 1 0 1 0 1 1 0 0 1 ⟩</code></pre>
<p>Let’s now write the function with and without trains:</p>
<pre class="bqn"><code>    W1 ← {(¬𝕨∊𝕩)/𝕨}   # no trains at all
    W2 ← (¬∊)/⊣       # A 3-train whose left argument is a 2-train
    W3 ← ¬∘∊/⊣        # A single 3-train because of precedence

    3‿1⥊⟨(↕9)W1⟨2,5,1⟩, (↕9)W2⟨2,5,1⟩, (↕9)W3⟨2,5,1⟩⟩
┌─
╵ ⟨ 0 3 4 6 7 8 ⟩
  ⟨ 0 3 4 6 7 8 ⟩
  ⟨ 0 3 4 6 7 8 ⟩
                  ┘</code></pre>
<p>That last example used the
<em>atop</em> (<a href="https://mlochbaum.github.io/BQN/doc/compose.html#atop"><code>∘</code></a>)
2-modifier; one of several
<a href="https://mlochbaum.github.io/BQN/doc/tacit.html#combinators">combinators</a>
that BQN sports to complement this syntax.
I will generally introduce them on a call by need basis;
<em>atop</em> is basically a 2-train as a modifier:</p>
<pre><code>F∘G𝕩  ≡  FG𝕩   and   𝕨F∘G𝕩  ≡  F(𝕨G𝕩)</code></pre>
<p>The <code>(¬∊)/⊣</code> example above shows that trains can “stack”.
Parentheses are really important here, by the way, since
depending on whether the overall length of an expression is even or odd
things may get parsed as a 2- or 3- train!
This is horribly confusing at first, but thankfully BQN has an <code>)explain</code> system function that prints the parse tree of an expression:</p>
<pre><code>    )explain (¬∊)/⊣
 (¬∊)/⊣
   │  │
  ¬∊  │
  └──/⊣
╶────┘

    )explain ¬∘∊/⊣
 ¬∘∊/⊣
 │ │ │
 ¬∘∊ │
  └─/⊣
╶───┘</code></pre>
Playing around with this was immensely helpful for me in the beginning.
</details>
<p>The 1-modifier
<em>each</em> (<a href="https://mlochbaum.github.io/BQN/doc/map.html"><code>¨</code></a>)
does what it says on the tin—it’s comparable to <code>map</code> in many other languages.
Parsing the input works as expected,
in that we split each line on the tab character,
and parse all the resulting sequences of digits as numbers.
All that’s left to do is to assembly the table in to a rank two array.
By means of <em>cells</em> we get the maximum and minimum for every row<!--
-->—using the <code>⌈´-⌊´</code> train, which is a great one to reason through—<!--
-->and sum up the resulting vector to get our answer.</p>
<hr />
<p>Part two asks a bit of a different question:
instead of the smallest and largest number in each row,
we instead need to find the two (unique) numbers such that one evenly divides the other,
and take the result of that division.</p>
<p>I didn’t think too hard about this and just decided to brute-force a solution.
The idea is to proceed row-wise and first create a division table for each row with <code>÷⌜˜</code>.
This uses the 1-modifier
<em>table</em> (<a href="https://mlochbaum.github.io/BQN/doc/map.html#table"><code>⌜</code></a>),
which is essentially a generalised outer product in the sense of linear algebra.
Written out explicitly, this definition is equivalent to <code>{ 𝕩÷⌜𝕩 }</code>:
it applies the given function to every element of <code>𝕩</code> on the left and all of <code>𝕩</code> on the right
and makes that one row in a new matrix (or, table, hence the name).
Since arithmetic functions support scalar pervasion,
this ends up giving us the division table we want:</p>
<pre><code>    (÷⌜˜) ⟨2, 4, 8, 16⟩
┌─
╵ 1 0.5 0.25 0.125    # 2÷2  2÷4  2÷8  2÷16
  2   1  0.5  0.25    # 4÷2  …
  4   2    1   0.5    # 8÷2  …
  8   4    2     1    # 16÷2 …
                   ┘</code></pre>
<p>As the problem explicitly says,
there will be exactly one pair of <em>different</em> numbers where one evenly divides the other.
As such, we just need to select an integer<!--
-->—e.g., some number that’s equal to its floor—<!--
-->that is not one:</p>
<pre class="bqn"><code>Two ← {
  t ← ÷⌜˜𝕩            # Division table
  ⊑((1≠t)∧t=⌊t)(/○⥊)t # Select integer that is not 1
}
+´ Two˘ inp</code></pre>
<p>As before, selection is done with <code>/</code> (<em>replicate</em>).
We use <em>over</em>, <code>○</code>, which is one of the combinators mentioned earlier, to
<em>deshape</em> (<a href="https://mlochbaum.github.io/BQN/doc/reshape.html#deshape"><code>⥊</code></a>)
the array beforehand,
as <em>replicate</em> only operates on vectors and not arrays.<a href="#fn19" class="footnote-ref" id="fnref19" role="doc-noteref"><sup>19</sup></a>
Briefly, one has that <code>𝕨(𝔽○𝔾)𝕩</code> is <code>(𝔾𝕨)𝔽(𝔾𝕩)</code>.
We then just have to pick the first element of the array,
which we know will have exactly one match.
All that’s left to do is to apply the function <code>Two</code> to all rows of <code>inp</code>,
which is but a <em>cells</em> away, and sum up the result.</p>
<h3 id="day-3"><a href="https://github.com/slotThe/advent/blob/master/aoc2017/bqn/day03.bqn">Day 3</a></h3>
<p>Day 3 asks us to implement an experimental memory layout: an infinite spiral grid.</p>
<pre><code>17  16  15  14  13
18   5   4   3  12
19   6   1   2  11
20   7   8   9  10
21  22  23---&gt; ...</code></pre>
<p>Part one is all about calculating the
<a href="https://en.wikipedia.org/wiki/Taxicab_geometry">Manhattan distance</a><a href="#fn20" class="footnote-ref" id="fnref20" role="doc-noteref"><sup>20</sup></a>
between the start point <code>1</code> in the middle of the grid, and wherever we end up with after taking
as many steps as our puzzle input demands.
As such, parsing is straightforward.</p>
<pre class="bqn"><code>inp ← •ParseFloat⊑•FLines&quot;../inputs/day03.txt&quot;</code></pre>
<p>I found no good array solution for this,
so I just stared hard at the spiral until noticing the general pattern in which we are moving:
<code>R U 2L 2D 3R 3U 4L 4D 5R 5U…</code>.
The function that outputs all of the coordinates we’ve been to looks like this:</p>
<pre class="bqn"><code>Coords ← { # 2×𝕩: Number of steps to go.
  dirs ← (2×𝕩)⥊⟨0‿1, 1‿0, 0‿¯1, ¯1‿0⟩ # r u l d
  natnat ← ∾(↕⋈¨↕)𝕩                   # 0 0 1 1 2 2 3 3 …
  +`∾natnat{&lt;˘𝕨‿2⥊𝕩}¨dirs             # expand
}</code></pre>
<p>We create the <code>R U 2L 2D…</code> pattern in two steps,
first assembling the directions and then the associated numbers.
Notice that if <code>𝕨</code> is larger than the length of <code>𝕩</code>, <em>reshape</em> duplicates <code>𝕩</code> until it fits:</p>
<pre class="bqn"><code>    5⥊⟨1,2,3⟩
⟨ 1 2 3 1 2 ⟩
    {(2×≠𝕩)⥊𝕩} ↕5       # Monadic ≠ is *length*
⟨ 0 1 2 3 4 0 1 2 3 4 ⟩
    (2×≠)⊸⥊ ↕5          # Bonus: the same thing tacitly
⟨ 0 1 2 3 4 0 1 2 3 4 ⟩</code></pre>
<p>The train <code>↕⋈¨↕</code> is interesting because of the middle component, <code>⋈¨</code>.
It’s what one might call <code>zip</code> in other languages.<a href="#fn21" class="footnote-ref" id="fnref21" role="doc-noteref"><sup>21</sup></a>
In the last line, we first use <em>reshape</em> to replicate the vector <code>𝕩</code> exactly <code>𝕨</code> times:</p>
<pre class="bqn"><code>    3 {𝕨‿2⥊𝕩} 0‿1
┌─
╵ 0 1
  0 1
  0 1
      ┘</code></pre>
<p>Then, since we actually want a nested vector instead of a rank two array,
<em>enclosing</em> (<a href="https://mlochbaum.github.io/BQN/doc/enclose.html"><code>&lt;</code></a>)
every major cell creates
<a href="https://mlochbaum.github.io/BQN/doc/enclose.html">unit arrays</a>
out of the individual cells.
Each of these is an array of shape <code>⟨⟩</code> containing the thing we enclosed as its only element.
This reduces the rank of the outer array by one, yielding the desired flat structure.</p>
<pre class="bqn"><code>    3 {&lt;˘𝕨‿2⥊𝕩} 0‿1
⟨ ⟨ 0 1 ⟩ ⟨ 0 1 ⟩ ⟨ 0 1 ⟩ ⟩
    = 3 {&lt;˘𝕨‿2⥊𝕩} 0‿1         # rank
1
    ≢ 3 {&lt;˘𝕨‿2⥊𝕩} 0‿1         # shape
⟨ 3 ⟩
    ≡ 3 {&lt;˘𝕨‿2⥊𝕩} 0‿1         # depth
2</code></pre>
<p>Walking around the grid can now be simulated by summing up every individual move.
Scanning over the array keeps all intermediate steps,
which is useful since we are looking for a specific index:</p>
<pre class="bqn"><code>    steps ← ∾ 3‿2 {&lt;˘𝕨‿2⥊𝕩}¨ ⟨0‿1, ¯1‿0⟩
⟨ ⟨ 0 1 ⟩ ⟨ 0 1 ⟩ ⟨ 0 1 ⟩ ⟨ ¯1 0 ⟩ ⟨ ¯1 0 ⟩ ⟩
   +`steps
⟨ ⟨ 0 1 ⟩ ⟨ 0 2 ⟩ ⟨ 0 3 ⟩ ⟨ ¯1 3 ⟩ ⟨ ¯2 3 ⟩ ⟩</code></pre>
<p>All that’s left is to <em>pick</em> the right coordinate
(keeping in mind we skip the starting position),
and calculate the Manhattan distance.</p>
<pre class="bqn"><code>+´| (inp-2) ⊑ Coords 1000 # ⇒ 552</code></pre>
<p>The <code>1000</code> above is a magic number,
because the whole thing is really naturally a lazy infinite stream,<a href="#fn22" class="footnote-ref" id="fnref22" role="doc-noteref"><sup>22</sup></a>
but that’s not how BQN works.</p>
<hr />
<p>Part two modifies how the spiral is constructed.
Instead of just being the ascending natural numbers,
a more elaborate iterative process is given:
for every number,
sum up the values of all the neighbours of a cell at the time of its creation.
With an initial seed of <code>1</code>, this would look like</p>
<pre><code>    147  142  133  122   59
    304    5    4    2   57
    330   10    1    1   54
    351   11   23   25   26
    362  747  806---&gt;   ...</code></pre>
<p>Our task is to find the first number that’s bigger than our input.</p>
<p>Again, no array-oriented solution presented itself to me,
so I just did the obvious thing: for the point under consideration,
generate a list of all neighbours,
see whether they appear in the grid already,
sum the values of those that do,
and associate the point with that value in the grid.</p>
<p>In this case, “grid” actually means hash map—yup, we have those.
BQN exposes a simple interface under the <code>•HashMap</code> system value.
The function names—<code>Has</code>, <code>Get</code>, <code>Set</code>, and so on—are relatively self-explanatory.</p>
<pre class="bqn"><code>N ← { x‿y: ⥊(x+⟨¯1, 0, 1⟩)⋈⌜(y+⟨¯1, 0, 1⟩) }</code></pre>
<p>We first calculate all of the neighbours of a given point,
represented as a vector with two elements.
The <code>x‿y:</code> part at the start of the function is a
<a href="https://mlochbaum.github.io/BQN/doc/block.html#block-headers">header</a>,
which I guess I should go into now.</p>
<details>
<summary>
Headers
</summary>
<p>At the most basic level,
headers can be used to name the arguments of, say, a function,
instead of using the special names <code>𝕨</code> and <code>𝕩</code>:</p>
<pre class="bqn"><code>    17 {left_arg 𝕊 right_arg: left_arg} 42
17
    17 {left_arg 𝕊 right_arg: right_arg} 42
42</code></pre>
<p>The colon ends the header, and begins the body of the block.
The <code>𝕊</code> here is just a way to signal that the block is a function, instead of something else.
Recursion can then be done by calling <code>𝕊</code> with some arguments, the same as with “anonymous” blocks.
We can also give the function a name:</p>
<pre class="bqn"><code>    { Fib n: n&lt;2? n;
      Fib n: (Fib n-1) + Fib n-2
    } 17
1597</code></pre>
<p>This example already highlights a few more features—and shortcomings—of blocks.
First, a block can contain multiple bodies, separated by <code>;</code>, as well as multiple headers associated to them.
When such a block is called,
its headers are checked for compatibility with the arguments,
until something appropriate is found (otherwise you get an error).</p>
<p>Additionally, predicates in the form of <code>n&lt;2?</code> appear.
Basically, this only evaluates the rest of the body if the predicate is true; otherwise, it jumps to the next header.
Control flow!
This is at the same time syntactically nice (chaining is quite concise: <code>𝕩&lt;2? 6=+´𝕩? …</code>),
but also forces us to repeat the header in the “else” branch,
as everything after <code>;</code> is in a new scope.
This is especially annoying with more elaborate headers,
but even here it feels unnecessarily verbose.</p>
<p>Headers can also do some light destructuring:</p>
<pre class="bqn"><code>    {x‿y: x} ⟨1, 2⟩    # Ok, vector should have exactly two elements
1
    {x‿y: x} ⟨1, 2, 3⟩ # Too long
Error: No header matched argument
    {x‿y: x} ⟨1⟩       # Too short
Error: No header matched argument</code></pre>
</details>
<p>The rest of <code>N</code> is straightforward.
Add all possible directions to every coordinate individually,
pair them up again in a table,
and flatten everything down to a vector with coordinate entries.</p>
<pre class="bqn"><code>    ⥊(2+⟨¯1, 0, 1⟩)⋈⌜(3+⟨¯1, 0, 1⟩)
⟨ ⟨ 1 2 ⟩ ⟨ 1 3 ⟩ ⟨ 1 4 ⟩ ⟨ 2 2 ⟩ # Line break for clarity
  ⟨ 2 3 ⟩ ⟨ 2 4 ⟩ ⟨ 3 2 ⟩ ⟨ 3 3 ⟩ ⟨ 3 4 ⟩ ⟩</code></pre>
<p>Let’s get to simulating!</p>
<pre class="bqn"><code>Sim ← { # 𝕨 = grid = (x‿y)→n, …; 𝕩 = coords = ⟨x‿y, …⟩
  (¯1⊑𝕨.Values@)&gt;inp?           # Newest value larger than input?
    ¯1⊑𝕨.Values@;
  grid 𝕊 coords:
    p‿cs ← 1(↑⋈↓)coords ⋄ p⊑↩   # Point and rest
    p grid.Set +´0⊸grid.Get¨N p # Get neighbour sums and set for point
    grid 𝕊 cs                   # Recurse
}</code></pre>
<p>We smuggle a bit of control flow into <code>Sim</code> via the header <code>(¯1⊑𝕨.Values@)&gt;inp?</code>
that checks whether the value added last is larger than the input,
in which case we are done.
Otherwise, we divide the list into a head and a tail with <code>1(↑⋈↓)</code>,
compute the neighbours for the head,
look each of them up in the grid,
sum the results together,
and assign that to the point under consideration.
Then we just recurse to handle the other coordinates.</p>
<p>All that’s left to do is to supply a source of coordinates, and a fresh hash map with <code>1</code> at index <code>0‿0</code>.</p>
<pre class="bqn"><code>{h←⟨⟩•HashMap⟨⟩ ⋄ 0‿0 h.Set 1 ⋄ h} Sim Coords 10 # ⇒ 330785</code></pre>
<h3 id="day-4"><a href="https://github.com/slotThe/advent/blob/master/aoc2017/bqn/day04.bqn">Day 4</a></h3>
<p>Today we are asked to validate some passphrases (our puzzle input).
One such phrase comprises some completely lowercase words separated by spaces: <code>x y</code>, <code>aa bb eix</code>, and so on.
Our input is a list of these things</p>
<pre><code>sayndz zfxlkl attjtww cti sokkmty brx fhh suelqbp
xmuf znkhaes pggrlp zia znkhaes znkhaes
nti rxr bogebb zdwrin
sryookh unrudn zrkz jxhrdo gctlyz</code></pre>
<p>Part one wants us to calculate how many passphrases do not contain duplicate words.
BQN essentially gives us everything we need for this: we
<em>sort</em> (<a href="https://mlochbaum.github.io/BQN/doc/order.html#sort"><code>∧</code></a>)
each passphrase,
use
<em>mark firsts</em> (<a href="https://mlochbaum.github.io/BQN/doc/selfcmp.html#mark-firsts"><code>∊</code></a>)
to mark the first occurrences of every element,
and then check that the resulting vector we get is all ones:</p>
<pre class="bqn"><code>⟨Split⟩ ← •Import &quot;../../util/bqn_util/util.bqn&quot;
+´ ∧´∘∊∘(' '⊸Split)¨ •FLines&quot;../inputs/day04.txt&quot; # ⇒ 383</code></pre>
<p>Easy.</p>
<hr />
<p>Part two slightly expands on this;
instead of being unique, words in a passphrase now only have to be unique up to permutation.
This means that no word may be the anagram of another word.
Solving this only requires a small adjustment to the above solution,
in that we now have to sort every word before using <em>mark firsts</em>:</p>
<pre class="bqn"><code>+´ ∧´∘∊∘(∧¨)∘(' '⊸Split)¨ •FLines&quot;../inputs/day04.txt&quot; # ⇒ 265</code></pre>
<p>The actually interesting bit about this day was how to combine these two solutions,
which involved writing my first real 1-modifier:</p>
<pre class="bqn"><code>_Sol ← { +´ (∧´∊∘𝔽∘(' '⊸Split))¨ •FLines &quot;../inputs/day04.txt&quot; }
⊢  _Sol # ⇒ 383
∧¨ _Sol # ⇒ 265</code></pre>
<details>
<summary>
The underscore in the name is syntactically relevant.
</summary>
<p>I’ve not mentioned this until now,
but BQN has a pretty cute system in order to achieve its
<a href="https://mlochbaum.github.io/BQN/doc/context.html">context free grammar</a>;
namely, <a href="https://mlochbaum.github.io/BQN/doc/expression.html#syntactic-role">syntactic roles</a>.
Think of it sort of like a language enforced version of
<a href="https://en.wikipedia.org/wiki/Hungarian_notation">Hungarian notation</a><!--
-->—trust me, it’s not as horrendous as it sounds!</p>
<p>First, here’s a fun one:
the following variants all refer to <em>the same</em> identifier: <code>foo</code>, <code>fOo</code>, <code>FOO</code>, <code>___f_o____o</code>, <code>_foo_</code>.
Quite outrageous, but the only way this system can work.</p>
<p>There are just a few roles one needs to keep track of:
subjects like variables, spelled with an initial lower case letter;
functions, featuring an initial upper case letter;
1-modifiers, starting with an underscore;
and 2-modifiers, starting and ending with an underscore.
Keep in mind that builtin functions, 1-modifiers, and 2-modifiers also have consistent syntactic features.
This means that you can decide to which role any identifier belongs by just looking at it,
which can be very useful when trying to decide how an expression should be parenthesised.</p>
<p>The roles themselves are pretty self-explanatory;
functions take variables as their right and left inputs,
modifiers operate on functions, and so on.
The fact that roles can change is how
<a href="https://mlochbaum.github.io/BQN/doc/functional.html">functional programming</a>
works in BQN:</p>
<pre class="bqn"><code>    ⟨×˜,√⟩ {𝕎𝕩}⌜ 1‿4‿9
┌─
╵ 1 16 81
  1  2  3
          ┘</code></pre>
<p>The function <code>{𝕎𝕩}</code> a priori takes two subjects—as all functions do—but then just turns around and treats the left one as a function.
Since we give it a list of functions, this works and we can apply it to the right arguments.
It’s important that we supplied a list here, btw; <code>×˜ {𝕎𝕩} 4</code> would not work, since <code>×˜</code> has a function role.
In that case, we need to work with variables:</p>
<pre class="bqn"><code>    Square ← ×˜
×˜
    square {𝕎𝕩} 4
16</code></pre>
<p>Honestly, I find this system super interesting,
and quite expressive.
It might be a bit confusing at first,
so I would encourage the reader who made it this far to peruse BQN’s entire
<a href="https://mlochbaum.github.io/BQN/doc/expression.html">expression syntax article</a>.</p>
</details>
<p>We can supply a function to <code>_Sol</code> that additionally transforms the individual words, before doing the uniqueness check.
Then, for part one the supplied function may simply be
<em>identity</em> (<a href="https://mlochbaum.github.io/BQN/doc/identity.html"><code>⊢</code></a>),
which does what it says on the tin.</p>
<h3 id="day-5"><a href="https://github.com/slotThe/advent/blob/master/aoc2017/bqn/day05.bqn">Day 5</a></h3>
<p>Day 5 asks us to walk through a maze of self-rewriting jump instructions.
Concretely, this means that we are given a vector of numbers,
indicating how far (and in which direction) the jump is; for example,</p>
<pre><code>2
0
0
1
2
0
1
-4</code></pre>
<p>After having jumped, the number at the last instruction is increased by one.
For part one we have to find out when we would exit the vector.
There is no real algorithm to speak of here, so we can just verbatim do what the instructions ask of us:</p>
<pre class="bqn"><code>inp ← •ParseFloat¨ •FLines &quot;../inputs/day05.txt&quot;
¯1⊑{ 𝕊i‿s: # index‿step
  inp (1⊸+)⌾(i⊸⊑)↩  # Increase offset
  ⟨1-˜i+i⊑inp, s+1⟩ # Subtract one from new index; we just increased the offset
}•_while_{ 𝕊i‿s: (i&lt;≠inp)∧i≥0 } 0‿0   # ⇒ 351282</code></pre>
<p>There are nevertheless a few interesting things about the solution:
<code>inp F↩︎</code> <em>modifies</em> <code>inp</code> with the result of calling <code>F inp</code>.<a href="#fn23" class="footnote-ref" id="fnref23" role="doc-noteref"><sup>23</sup></a>
Much more interestingly, however, we can use
<em>under</em> (<a href="https://mlochbaum.github.io/BQN/doc/under.html"><code>⌾</code></a>)
to change only a part of the input vector.
How it works in this “structural mode”<a href="#fn24" class="footnote-ref" id="fnref24" role="doc-noteref"><sup>24</sup></a> is that <code>𝔽⌾𝔾 𝕩</code>
replaces the part of <code>𝕩</code> that’s picked out by <code>𝔾𝕩</code>
with the result of <code>𝔽𝔾𝕩</code>.
As such, it first focuses in on the structure with <code>𝔾</code>, applies <code>𝔽</code>,
and then somehow “undoes” the first transformation,
such that the result of <code>𝔽</code> gets embedded into the original array.</p>
<p>The <code>•_while_</code> 2-modifier is used for iteration:
<code>𝔽•_while_𝔾 𝕩</code> checks <code>𝔾v</code>, where <code>v</code> is initially <code>𝕩</code>, to see if it should keep iterating;
if yes, it essentially does <code>v 𝔽↩︎</code> and goes back to <code>𝔾v</code> (where <code>v</code> is now updated!).
I have to say that I would much rather think in terms of recursive functions,
but—alas—the standard implementation of BQN, <code>cbqn</code>, does not support tail call optimisation.</p>
<hr />
<p>With that done, we have part two waiting for us.
Now, how an instruction changes after we jumped depends on its value:
if it’s three or more, we decrease it by one;
otherwise, we proceed as before and increase it by one.</p>
<pre class="bqn"><code>¯1⊑ {𝕊 i‿s: # index‿step
  n ← i+i⊑inp
  inp ((3≤i⊑inp)⊑⟨1⊸+, ¯1⊸+⟩)⌾(i⊸⊑)↩
  ⟨ n, s+1 ⟩
}•_while_{ 𝕊i‿s: (i&lt;≠inp)∧i≥0 } 0‿0  # ⇒ 24568703</code></pre>
<p>This is another neat example of how to use Boolean expressions for control flow:
depending on the result of <code>3≤i⊑inp</code>, we <em>pick</em> the correct function to apply.</p>
<p>Wrapping this in a function that works for both days is not super interesting,
only that we need to find a value <code>t</code> such that <code>t≤i⊑inp</code> will always be false.
BQN has the aptly named <code>∞</code> for that,
which is an infinity according to IEEE 754—BQN really only deals with <code>f64</code>’s.
While we’re at it, we can add the instruction set as an additional argument to <code>Sim</code>,
so that we don’t have to mutate the input directly.</p>
<pre class="bqn"><code>Sim ← { thresh 𝕊 ins‿i‿s: # instructions‿index‿step
  n ← i+i⊑ins
  ins ((thresh ≤ i⊑ins)⊑⟨1⊸+, ¯1⊸+⟩)⌾(i⊸⊑)↩
  ins‿n‿(s+1)
}
¯1⊑ ∞ Sim •_while_ { ·𝕊ins‿i‿s: (i&lt;≠ins)∧i≥0 } inp‿0‿0 # ⇒ 351282
¯1⊑ 3 Sim •_while_ { ·𝕊ins‿i‿s: (i&lt;≠ins)∧i≥0 } inp‿0‿0 # ⇒ 24568703</code></pre>
<h2 id="days-610">Days 6–10</h2>
<h3 id="day-6"><a href="https://github.com/slotThe/advent/blob/master/aoc2017/bqn/day06.bqn">Day 6</a></h3>
<p>Today we are tasked with redistributing blocks in a memory bank.
Concretely, we are given a vector like <code>⟨0, 2, 7, 0⟩</code> and,
in every step,
we look for the maximal element <code>m</code>, and “redistribute” its value by adding one to each successor in the circular list until <code>m</code> steps have been taken.
For example, the first few redistributions with the above start look like this:</p>
<pre class="bqn"><code>⟨0, 2, 7, 0⟩  →  ⟨2, 4, 1, 2⟩  →  ⟨3, 1, 2, 3⟩</code></pre>
<p>Notice in particular that the redistribution starts by “emptying” the bank with the highest value,
so <code>⟨0, 2, 7, 0⟩</code> is first transformed into <code>⟨0, 2, 0, 0⟩</code>, then into <code>⟨0, 2, 0, 1⟩</code>, then into <code>⟨1, 2, 0, 1⟩</code>, and so on.
At some point, we will—so the problem says—reach a configuration that we were already in before,
and part one asks us to find the number of cycles before that happens.</p>
<p>Parsing is the easy part, as the input just comprises a bunch of numbers on the first line:</p>
<pre class="bqn"><code>⟨Split, tab⟩ ← •Import &quot;../../util/bqn_util/util.bqn&quot;
inp ← •ParseFloat¨ tab Split ⊑•FLines &quot;../inputs/day06.txt&quot;</code></pre>
<p>The only interesting part of the solution is, I guess,
the encoding of the redistribution.
The basic idea is to take a number <code>n</code> at position <code>i</code>,
create a vector of 1’s of length <code>n</code>,
pad with <code>i</code> zeros on the left,
and then press that into the length of the vector.</p>
<pre class="bqn"><code>    v←⟨0,2,7,0⟩         # Test vector with max 7 at position 2
⟨ 0 2 7 0 ⟩
    ¯7∾7⥊1              # Shape of 1's and ¯7
⟨ ¯7 1 1 1 1 1 1 1 ⟩
    (2⥊0)∾¯7∾7⥊1        # Pad with zeros up to index
⟨ 0 0 ¯7 1 1 1 1 1 1 1 ⟩
    ↑‿4⥊(2⥊0)∾¯7∾7⥊1    # Reshape to dimensions of v, and use fills
┌─
╵ 0 0 ¯7 1
  1 1  1 1
  1 1  0 0
           ┘
   +˝↑‿4⥊(2⥊0)∾¯7∾7⥊1   # Sum up columns
⟨ 2 2 ¯6 2 ⟩
    v + ⟨ 2, 2, ¯6, 2 ⟩ # And we get the second step!
⟨ 2 4 1 2 ⟩</code></pre>
<details>
<summary>
Fills and special symbols for <em>reshape</em>
</summary>
<p>As you may have noticed, we gave the symbol <code>↑</code> to <em>reshape</em> above.
Ordinarily, this is the <em>take</em> (or <em>prefixes</em>) function, but here it stands in as a special symbol to alter the behaviour of <em>reshape</em>.
This, as well as various other values, is documented
<a href="https://mlochbaum.github.io/BQN/doc/reshape.html#computed-lengths">here</a>,
the relevant excerpt being</p>
<blockquote>
<p><code>↑</code> rounds the length up, but uses the argument’s fill for the needed extra elements.</p>
</blockquote>
<hr />
<p><a href="https://mlochbaum.github.io/BQN/doc/fill.html">Fill elements</a>
are basically certain “default” values of a given array.
Operations on the array might make use of them if the array would otherwise end up having holes in it.
Atomically, they are either <code>0</code> (for numbers) or <code>' '</code> (for characters),
and higher dimensional arrays—being inductively defined in BQN—can inherit from this.
A canonical example is <em>take</em> when the number of elements to be taken is longer than the length of the argument:</p>
<pre class="bqn"><code>    3‿3⥊↕9
┌─
╵ 0 1 2
  3 4 5
  6 7 8
        ┘
   4↑3‿3⥊↕9
┌─
╵ 0 1 2
  3 4 5
  6 7 8
  0 0 0
        ┘</code></pre>
<p>This is also how things like <em>nudge</em> decide what to pad the array with.</p>
<pre class="bqn"><code>    1+↕9
⟨ 1 2 3 4 5 6 7 8 9 ⟩
    »1+↕9
⟨ 0 1 2 3 4 5 6 7 8 ⟩
    «1+↕9
⟨ 2 3 4 5 6 7 8 9 0 ⟩</code></pre>
<hr />
<p>Reshaping may also use a fill element,
if the dimensions of the reshape are not exactly divisible by the shape of the original array:</p>
<pre class="bqn"><code>  3‿↑ ⥊ 7⥊1 # After running out of 1's, use 0's for padding
┌─
╵ 1 1 1
  1 1 1
  1 0 0
        ┘</code></pre>
</details>
<p>To keep track of the already seen configurations,
we could again use a hash map as in <a href="#day-3">day 3</a>.
However, the number of configurations isn’t actually that large, so a normal list suffices.
Appropriately generalising the above construction nets us the result for part one:</p>
<pre class="bqn"><code>s‿d ← { seen‿xs:
    m ← ⌈´xs              # max elements -&gt; to be redistributed
    ⟨ seen∾&lt;xs, xs+ +˝↑‿(≠xs)⥊(0⥊˜⊑xs⊐m)∾⟨-m⟩∾m⥊1 ⟩
    #                 reshape  before     at  after
  } •_while_ {
    seen‿xs: ⊑¬(&lt;xs)∊seen # while not seen
  } ⟨⟩‿inp
≠s                        # ⇒ 7864</code></pre>
<hr />
<p>Part two is just a slight variation on this idea:
we now also have to calculate the exact cycle length.
Since <code>•_while_</code> does not actually add the last memory bank state <code>d</code> to the vector <code>s</code>,
this just involves checking for <code>d</code>‘s index in <code>s</code>
and subtracting that from the vectors’ length:</p>
<pre class="bqn"><code>⊑(≠s)-s⊐&lt;d # ⇒ 1695</code></pre>
<p>Notice how we need to <em>enclose</em> <code>d</code> before using
<em>index of</em> (<a href="https://mlochbaum.github.io/BQN/doc/search.html#index-of"><code>⊐</code></a>).
Since <code>d</code> is a vector itself, the pervasive aspect of <em>index of</em> would otherwise ruin our day.</p>
<h3 id="day-7"><a href="https://github.com/slotThe/advent/blob/master/aoc2017/bqn/day07.bqn">Day 7</a></h3>
<p>This day has us study a tree of programs.
To every program, one associates a weight and a (possibly empty) number of children.
Our input is in the form of an adjacency list:</p>
<pre><code>ktlj (57)
fwft (72) -&gt; ktlj, cntj, xhth
qoyq (66)
padx (45) -&gt; pbga, havc, qoyq</code></pre>
<p>More visually, such a tree can be written as</p>
<pre><code>                gyxo
              /
         ugml - ebii
       /      \
      |         jptl
      |
      |         pbga
     /        /
tknk --- padx - havc
     \        \
      |         qoyq
      |
      |         ktlj
       \      /
         fwft - cntj
              \
                xhth</code></pre>
<p>Part one asks us for the root node.
Parsing is a bit ad-hoc, but not all that complicated:
for a single line of the form <code>a (7) -&gt; b, c</code>,
we first split every line by whitespace,
use the first and second entry in the resulting vector verbatim,
drop the <code>-&gt;</code>, and
split the rest on <code>,</code>.</p>
<pre class="bqn"><code>⟨Split⟩ ← •Import &quot;../../util/bqn_util/util.bqn&quot;
inp ← {
  ws ← ' ' Split 𝕩
  ⟨ ⊑ws, •BQN 1⊑ws, ','Split∾3↓ws ⟩ # name‿weight‿children
}¨ •FLines&quot;../inputs/day07.txt&quot;
# ⇒ ⟨ ⟨&quot;mmqyju&quot; 156 ⟨&quot;rjzvwv&quot; &quot;noybkx&quot;⟩⟩ … ⟩</code></pre>
<p>The <code>•BQN</code> function is something like <code>eval</code> in lisps, or <code>⍎</code> in APL:
it evaluates the given string
(though, unlike APL, it does so in an isolated environment)
and returns the result, whatever it may be.
This is how we get away with parsing <code>"(8)"</code> to <code>8</code>,
which is something that an ordinary <code>•ParseFloat</code> would fail at.</p>
<p>The root node can be found without thinking about the tree at all:
just check which node does not appear as a child of another one.</p>
<pre class="bqn"><code>root ← ⊑ (⊑¨inp)(¬∘∊/⊣)(∾¯1⊑¨inp) # ⇒ &quot;svugo&quot;
#        nodes  not-in  children</code></pre>
<p>Recall the “not-in” idiom <code>¬∘∊/⊣</code> from when we talked about trains.</p>
<hr />
<p>Part two now makes use of the weights, which we haven’t at all needed so far.
Our goal is to balance the tower of programs, so that the children of every node sum up to the same value.
For example, given the input</p>
<pre><code>pbga (66)
xhth (57)
ebii (61)
havc (66)
ktlj (57)
fwft (72) -&gt; ktlj, cntj, xhth
qoyq (66)
padx (45) -&gt; pbga, havc, qoyq
tknk (41) -&gt; ugml, padx, fwft
jptl (61)
ugml (68) -&gt; gyxo, ebii, jptl
gyxo (61)
cntj (57)</code></pre>
<p>for the root, <code>tknk</code>, we would get the following sums of children:</p>
<ul>
<li><code>ugml</code> + (<code>gyxo</code> + <code>ebii</code> + <code>jptl</code>) = 68 + (61 + 61 + 61) = 251</li>
<li><code>padx</code> + (<code>pbga</code> + <code>havc</code> + <code>qoyq</code>) = 45 + (66 + 66 + 66) = 243</li>
<li><code>fwft</code> + (<code>ktlj</code> + <code>cntj</code> + <code>xhth</code>) = 72 + (57 + 57 + 57) = 243</li>
</ul>
<p>The problem tells us that, actually, only one program has the wrong weight.
Above, that’d be <code>ugml</code>, which would have to change from weight <code>68</code> to <code>60</code>—the answer.</p>
<pre class="bqn"><code>h ← ⟨⟩•HashMap⟨⟩ ⋄ { n‿w‿ch: n h.Set w‿ch }¨inp # name -&gt; weight, children
M ← =´2↑⊑¨ # Do the first two elements have matching cumulative weights?
SpotOutlier ← {
  w‿ch ← h.Get 𝕩
  sums ← ∧𝕊¨ch       # Sort by ascending w+wc
  { 𝕊⟨⟩: w‿w;        # No children
    𝕊s : M s? M⌽s?   # All child nodes's weights match
      ⟨w++´⊑¨s, w⟩;
    𝕊s : M s?        # Last weight is higher than the [o]ther[w]eights
      wwc‿mw←¯1⊑s ⋄ ow‿·←  ⊑s ⋄ (mw-wwc-ow)!0;
    𝕊s : M⌽s?        # First weight is lower than the [o]ther[w]eights
      wwc‿mw←  ⊑s ⋄ ow‿·←¯1⊑s ⋄ (mw-wwc-ow)!0
  } sums
}

SpotOutlier⎊•CurrentError root # ⇒ 1152</code></pre>
<p>This looks like a lot of code, but the underlying recursive algorithm is not so complicated:</p>
<ul>
<li>For all children of the given node,
create tuples of the total weight of each child <code>c</code> (including <code>c</code>’s children) and <code>c</code>’s own weight,
and sort the resulting list in ascending order.
This split of “weight” and “weight with children” is necessary,
since we want to adjust the weight of the node at the end.</li>
<li>Then, we check for the only conditions that can occur.<a href="#fn25" class="footnote-ref" id="fnref25" role="doc-noteref"><sup>25</sup></a>
<ul>
<li>If the list is empty that means there are no children and the node is leaf,
so we hit the base case.</li>
<li>If the weights of all children match,
then we return the weight of the node and its children.</li>
<li>Otherwise, the weight that doesn’t match is singled out,
and the correct weight the node should have is thrown as an exception.</li>
</ul></li>
</ul>
<p>Yes, feeling like a Python programmer, exceptions are used for control flow!
Since we immediately want to exit the function, no questions asked,
this seems as good a time as any to do something like that.
The <em>assert</em> function <a href="https://mlochbaum.github.io/BQN/doc/assert.html#assert"><code>!</code></a>
throws an exception if its right argument is not <code>1</code>.
In case it’s supplied a left argument, this is the value of the exception.
In the call to <code>SpotOutlier</code>, we can use the
<em>catch</em> (<a href="https://mlochbaum.github.io/BQN/doc/assert.html#catch"><code>⎊</code></a>) 2-modifier to catch the exception.
Since <em>catch</em> doesn’t actually know anything about the error<!--
-->—only that one occurred—<!--
-->we need the system value <code>•CurrentError</code> to access it.</p>
<h3 id="day-8"><a href="https://github.com/slotThe/advent/blob/master/aoc2017/bqn/day08.bqn">Day 8</a></h3>
<p>Today we have to help the CPU simulate a small language,
consisting of simple register instructions like the following:</p>
<pre><code>b inc 5 if a &gt; 1
a inc 1 if b &lt; 5
c dec -10 if a &gt;= 1
c inc -20 if c == 10</code></pre>
<p>The instructions are given in a pretty rigid form;
abstractly, one has something like</p>
<pre><code>«register» «operation» «number» if «register» «comparison» «number»</code></pre>
<p>where <code>«operation»</code> is one of <code>inc dec</code>, and <code>«comparison»</code> is one of <code>&gt; &lt; &gt;= == &lt;= !=</code>.
Part one asks us what the largest value in any register is after executing each instruction once.</p>
<p>Perhaps unexpectedly, there is a relatively obvious bijection between the instruction syntax and the relevant BQN code!</p>
<ul>
<li>A number is a number.
Due to the right hand side only being zero or one,
we don’t even need to change <code>-20</code> into <code>¯20</code>,
but can keep <code>-</code> as a function.</li>
<li>A register is a variable holding a number.</li>
<li>A register operation is a call to <em>modify</em> for that register.</li>
<li>A comparison is a comparison.</li>
<li>An <code>if</code> instruction is a multiplication of the condition with the “then branch”.
Since BQN is evaluated right to left,
this works on-the-nose and no extra parentheses are needed.</li>
</ul>
<p>Here are some sample translations:</p>
<pre><code>b inc 5   if a  &gt; 1   ↔  b+↩5   × a&gt;1
a inc 1   if b  &lt; 5   ↔  a+↩1   × b&lt;5
c dec -10 if a &gt;= 1   ↔  c-↩-10 × a≥1
c inc -20 if c == 10  ↔  c+↩-20 × c=10</code></pre>
<p>Pretty neat, huh?
The plan is clear: transform every line into its equivalent BQN code,
and evaluate everything with <code>•BQN</code>.
We have previously seen this function on <a href="#day-7">day 7</a>,
where it’s essentially used as a shorthand for <code>•ParseFloat</code>—now we really want it to execute some code!
Let’s first split every instruction into a list of its constituent words.</p>
<pre class="bqn"><code>⟨Split⟩←•Import&quot;../../util/bqn_util/util.bqn&quot;
inp ← ' '⊸Split¨ •FLines&quot;../inputs/day08.txt&quot;
# e.g., &quot;c inc -20 if c == 10&quot; → ⟨&quot;c&quot;, &quot;inc&quot;, &quot;-20&quot;, &quot;if&quot;, &quot;c&quot;, &quot;==&quot;, &quot;10&quot;⟩</code></pre>
<p>Now we can replace every element with its BQN equivalent.</p>
<pre class="bqn"><code>C ← { # Convert instruction 𝕩 to BQN code
  from ← ⟨&quot;if&quot;, &quot;dec&quot;, &quot;inc&quot;, &quot;&gt;=&quot;, &quot;==&quot;, &quot;&lt;=&quot;, &quot;!=&quot;⟩
  to   ← ⟨&quot;×&quot; , &quot;-↩&quot; , &quot;+↩&quot; , &quot;≥&quot; , &quot;=&quot; , &quot;≤&quot; , &quot;≠&quot; , ⊢⟩ # last is fallthrough
  {⊑from⊐&lt;𝕩}◶to¨𝕩
}</code></pre>
<p>This can be conveniently done with the
<em>choose</em> (<a href="https://mlochbaum.github.io/BQN/doc/choose.html"><code>◶</code></a>) 2-modifier.
Abstractly, <code>𝔽◶𝕘 𝕩</code> applies <code>𝔽</code> to <code>𝕩</code>, which should return an index.
It then <em>picks</em> that index from the list <code>𝕘</code> (remember syntactic roles?).
This should result in a function <code>G</code>, which is then applied to <code>𝕩</code>, yielding the final result:</p>
<pre class="bqn"><code>_choose_ ← {
  g ← (𝔽𝕩)⊑𝕘
  G𝕩
}</code></pre>
<p>In this specific example, for each string in <code>𝕩</code>,
we first get its index in the <code>from</code> vector.
If the element is not found, then <em>index of</em> returns the length of the vector—an invalid index—instead.
Then, we apply the picked function in <code>to</code> to the element we started with.
In almost all cases, what’s being picked from <code>to</code> is actually a string, which is interpreted as the constant function on that value, so nothing happens.
In case the element is not found, however, we apply <em>identity</em>, in order to not lose any information.</p>
<pre class="bqn"><code>    {⊑from⊐&lt;𝕩}¨⟨ &quot;d&quot;, &quot;dec&quot;, &quot;683&quot;, &quot;if&quot;, &quot;qn&quot;, &quot;==&quot;, &quot;0&quot; ⟩
⟨ 7 1 7 0 7 4 7 ⟩
    {⊑from⊐&lt;𝕩}◶to¨⟨ &quot;d&quot;, &quot;dec&quot;, &quot;683&quot;, &quot;if&quot;, &quot;qn&quot;, &quot;==&quot;, &quot;0&quot; ⟩
⟨ &quot;d&quot; &quot;-↩&quot; &quot;683&quot; &quot;×&quot; &quot;qn&quot; &quot;=&quot; &quot;0&quot; ⟩</code></pre>
<p>Let’s get to simulating!
As I said before, <code>•BQN</code> evaluates everything in a rather sandboxed environment.
While it’s possible to inject some variable definitions into the namespace it uses,
it seemed easiest to me to just shove everything we need into a single invocation of the function.
That means lots of tasty string manipulation.</p>
<pre class="bqn"><code>r ← ∊⊸/ ⊑¨inp        # all registers   ⇒ ⟨ &quot;d&quot; &quot;rak&quot; … ⟩
•BQN ∾⟨
  ∾ ∾⟜&quot;←0⋄&quot;¨r        # zero everything ⇒ &quot;d←0 ⋄ rak←0 ⋄ …&quot;
  (∾⟜&quot;⋄&quot;⊸∾)´(∾C)¨inp # instructions    ⇒ &quot;d-↩683×qn=0 ⋄ d-↩-220×h=0 ⋄ …&quot;
  &quot;⋄⌈´&quot;∾(∾⟜&quot;‿&quot;⊸∾)´r  # get max         ⇒ &quot;⋄⌈´d‿rak‿…&quot;
⟩ # ⇒ 4416</code></pre>
<hr />
<p>Part two instead asks us for the largest value that is ever held in any register during the execution of the program.
This introduces some notational, if not conceptual, difficulties—but nothing we can’t manage!
Simply introduce an additional register that contains this information,
and update it after every “normal” instruction.</p>
<pre class="bqn"><code>•BQN ∾⟨
  &quot;h_r←0⋄&quot;∾∾∾⟜&quot;←0⋄&quot;¨r # zero everything ⇒ &quot;h_r←0 ⋄ d←0 ⋄ rak←0 ⋄ …&quot;
  (∾⟜&quot;⋄&quot;⊸∾)´({∾𝕩∾&quot;⋄h_r⌈↩&quot;∾⊑𝕩}C)¨inp
                      # Check highest after every instruction
                      # ⇒ &quot;d-↩683×qn=0 ⋄ h_r⌈↩d ⋄ d-↩-220×h=0 ⋄ h_r⌈↩d…&quot;
  &quot;⋄ h_r&quot;
⟩ # ⇒ 5199</code></pre>
<h3 id="day-9"><a href="https://github.com/slotThe/advent/blob/master/aoc2017/bqn/day09.bqn">Day 9</a></h3>
<p>Today, we need to clean up garbage from a stream of characters like <code>{&lt;{o"i!a,&lt;{i&lt;a&gt;e}</code>.
There are a few special characters that one needs to watch out for:
<code>{</code> and <code>}</code> delimit a group,
<code>&lt;</code> and <code>&gt;</code> start and end garbage,
and <code>!</code> ignores the next symbol.
We are given a few examples of self-contained pieces of garbage:</p>
<blockquote>
<ul>
<li><code>&lt;&lt;&lt;&lt;&gt;</code>, because the extra &lt; are ignored.</li>
<li><code>&lt;{!&gt;}&gt;</code>, because the first &gt; is canceled.</li>
<li><code>&lt;!!&gt;</code>, because the second ! is canceled, allowing the &gt; to terminate the garbage.</li>
<li><code>&lt;!!!&gt;&gt;</code>, because the second ! and the first &gt; are canceled.</li>
</ul>
</blockquote>
<p>By assumption, the whole input is one big group;
part one asks how many small groups are contained in it.
Groups are counted according to their depth, so <code>{{{}}}</code> gets a score of <code>1+2+3</code>,
and <code>{{},{}}</code> gets a score of <code>1+2+2</code>.</p>
<p>My solution here is actually quite crude and not all that interesting.
My first idea was to use regular expressions to clean up the stream<!--
-->—seems like a good fit—<!--
-->but, alas, <code>cbqn</code> does not support any sort of regexp, as far as I can tell.
Oh well.
Doing it in a single pass would be nice, though,
so let’s do what any psychopath would,
and simply pattern match on the hard-coded invariants:</p>
<pre class="bqn"><code>Solve ← {
  𝕩⊑ 0‿0‿0‿0‿0 { # char 𝕊 inGarbage?‿ignored?‿depth‿score‿garbageCount
    '{' 𝕊 0‿i‿d‿s‿c: 0‿0‿(d+¬i)‿s‿c;
    '}' 𝕊 0‿i‿d‿s‿c: 0‿0‿(d-¬i)‿(s+d×¬i)‿c;
    '!' 𝕊 g‿0‿d‿s‿c: g‿1‿d‿s‿c;
    '&lt;' 𝕊 0‿0‿d‿s‿c: 1‿0‿d‿s‿c;
    '&gt;' 𝕊 1‿i‿d‿s‿c: i‿0‿d‿s‿c;
    cr  𝕊 g‿i‿d‿s‿c: g‿0‿d‿s‿(c+g∧¬i)
  }´ ⌽•FChars&quot;../inputs/day09.txt&quot;
}
Solve ¯2 # ⇒ 16869</code></pre>
<p>It works, I guess.
Some of the invariants are packed inside of one clause;
e.g., the line</p>
<pre class="bqn"><code>'{' 𝕊 0‿i‿d‿s‿c: 0‿0‿(d+¬i)‿s‿c;</code></pre>
<p>adds one to the depth only if the character is not ignored
(<code>d+¬i</code> evaluates to <code>d</code> for <code>i=1</code>, and to <code>d+1</code> in case <code>i=0</code>).</p>
<hr />
<p>Part two asks us to find all non-cancelled characters hiding within the garbage.
There are some special rules in that we don’t want to count the enclosing <code>&lt;&gt;</code>’s,
but other than that this is pretty straightforward (and already included in <code>Solve</code>):</p>
<pre class="bqn"><code>Solve ¯1 # ⇒ 7284</code></pre>
<h3 id="day-10"><a href="https://github.com/slotThe/advent/blob/master/aoc2017/bqn/day10.bqn">Day 10</a></h3>
<p>On day 10 we are asked to implement a custom hashing algorithm, based on knots.
The basis of the algorithm is a “pinch and twist” move.</p>
<pre><code>  4--5   pinch   4  5           4   1
 /    \  5,0,1  / \/ \  twist  / \ / \
3      0  --&gt;  3      0  --&gt;  3   X   0
 \    /         \ /\ /         \ / \ /
  2--1           2  1           2   5</code></pre>
<p>Rather bravely, the problem… just gives us the instructions on how to do this with a flat list.</p>
<blockquote>
<p>To achieve this, begin with a list of numbers from 0 to 255, a current position which begins at 0 (the first element in the list), a skip size (which starts at 0), and a sequence of lengths (your puzzle input). Then, for each length:</p>
<ul>
<li>Reverse the order of that length of elements in the list, starting with the element at the current position.</li>
<li>Move the current position forward by that length plus the skip size.</li>
<li>Increase the skip size by one.</li>
</ul>
</blockquote>
<p>Part one essentially asks us to simulate our input,
and to multiply the first two numbers in the resulting list.
As written above, the puzzle input looks like <code>3, 4, 1, 5</code>, and represents the sequence of lengths.
We can (ab)use <code>•BQN</code> again to directly parse this into a vector.</p>
<pre class="bqn"><code>inp ← •BQN '⟨'∾'⟩'∾˜ ⊑•FLines&quot;../inputs/day10.txt&quot;</code></pre>
<p>Simulating one round works as described above.</p>
<pre class="bqn"><code># One round; 𝕨: one length; 𝕩: ⟨list of marks, position, skip size⟩
R ← { n 𝕊 xs‿p‿ss:
  l←≠xs
  ⟨ ⌽⌾((l|p+↕n)⊸⊏)xs , l|p+n+ss , ss+1 ⟩
}
×´ 2↑ ⊑ (↕256)‿0‿0 R´ ⌽inp # ⇒ 13760</code></pre>
<p>The only thing we have to keep in mind is that indexing has to be circular.
Due to the fantastic <em>under</em> 2-modifier, this is all pretty ergonomic.</p>
<hr />
<p>Part two now wants us to implement the whole hashing algorithm.
Here’s essentially what we have to do:</p>
<ul>
<li>Treat our input a bit differently, to get a different “length” vector;</li>
<li>repeat the algorithm from part one exactly 64 times, keeping the index and skip size intact across runs;</li>
<li>from the 256 numbers in the vector, create blocks of 16 numbers each and XOR them together; and</li>
<li>convert each of the resulting 16 bytes into their hex representation.</li>
</ul>
<p>Regarding the first point: we now treat every character—including the commas—of the input string as a separate input number.
So given <code>1,2,3</code> as an input, we would first transform it to <code>49 44 50 44 51</code> before continuing.
Additionally, we have to append the magic numbers <code>17 31 73 47 23</code> to the input.
This neatly showcases one of the many uses for affine characters:<a href="#fn26" class="footnote-ref" id="fnref26" role="doc-noteref"><sup>26</sup></a></p>
<pre class="bqn"><code>inp2 ← ⌽ ⟨17, 31, 73, 47, 23⟩∾˜ @-˜ ⊑•FLines&quot;../inputs/day10.txt&quot;</code></pre>
<p>Since BQN does not have any format strings,
one has to implement base conversions from scratch.
Here is one from decimal to hexadecimal, specialised to one byte—always two characters, padded with <code>0</code> if need be:<a href="#fn27" class="footnote-ref" id="fnref27" role="doc-noteref"><sup>27</sup></a></p>
<pre class="bqn"><code>DecToHex ← { &quot;0123456789abcdef&quot; ⊏˜ 16(⌊∘÷˜ ⋈ |)𝕩 }</code></pre>
<p>Finally, we get to XORing!
One thing that bit me here is that BQN does not support bit operations on unsigned types, only signed and float.
As such, even though all of the numbers are 8-bit unsigned integers, we have to operate on 16-bit <em>signed</em> integers instead.</p>
<pre class="bqn"><code>X ← ⊑⋈⊸(16•bit._xor)´ # XOR two 16 bit signed ints together</code></pre>
<p><em>Enlist</em>
(<a href="https://mlochbaum.github.io/BQN/doc/pair.html"><code>⋈</code></a>)
is needed here because at least one of the inputs to <code>•bit.xor</code> should have rank larger than zero
(no, I don’t know why).
We can now assemble all the pieces together:</p>
<pre class="bqn"><code>∾ DecToHex∘X¨ 16(/⥊˜)⊸⊔ ⊑ R´⟜inp2⍟64 (↕256)‿0‿0
# ⇒ &quot;2da93395f1a6bb3472203252e3b17fe5&quot;</code></pre>
<p>I think the <code>n (/⥊˜)⊸⊔ xs</code> is quite cute.
We first <em>reshape</em> the number <code>n</code> into a vector <code>n n …</code> of length <code>n</code>,
and then use <em>indices</em> to create a list like <code>0 0 0 … 1 1 1 … n n n …</code>,
with each number appearing exactly <code>n</code> times.
Then we can use the vanilla <em>group</em> function to partition the given list into that many chunks.
This obviously only makes sense in this specific scenario; still, cute.</p>
<h2 id="days-1115">Days 11–15</h2>
<h3 id="day-11"><a href="https://github.com/slotThe/advent/blob/master/aoc2017/bqn/day11.bqn">Day 11</a></h3>
<p>This day wants us to walk some steps on a <a href="https://en.wikipedia.org/wiki/Hexagonal_tiling">hexagonal grid</a>.
The coordinate system is defined like this:</p>
<pre><code>  \ n  /
nw +--+ ne
  /    \
-+      +-
  \    /
sw +--+ se
  / s  \</code></pre>
<p>Part one asks us to follow our input<!--
-->—which is a string of instructions where to walk, like <code>ne,sw,ne,s,…</code>—<!--
-->and then calculate a Manhattan-type distance from from the origin to the stopping point.</p>
<p>The difficult part here would be to find a comprehensible coordinate system to represent hexagonal grids.
Thankfully—or sadly?—I remember doing the exact same thing in a previous year.
I wanted to use
<a href="https://en.wikipedia.org/wiki/Hexagonal_Efficient_Coordinate_System">HECS</a>
just for the name, but since all we really do is to calculate neighbours,
an <a href="https://www.redblobgames.com/grids/hexagons/#coordinates-axial">axial</a><a href="#fn28" class="footnote-ref" id="fnref28" role="doc-noteref"><sup>28</sup></a> coordinate system seems like a safer bet.
Basically, since a hex grid has three major axes that one can walk along,
we embed the grid in a cube with standard Cartesian coordinates <code>x y z</code>, with the additional constraint that <code>0=x+y+z</code>.
This in particular means that we don’t actually have to care about <code>z</code> at all.
Given any coordinate, it’s neighbours have the following offsets:</p>
<pre><code>    \ 0,¯1 /
     \    /
¯1,0  +--+  1,¯1
     /    \
 ---+      +---
     \    /
¯1,1  +--+  1,0
     /    \
    / 0, 1 \</code></pre>
<p>The Manhattan distance in this encoding is just the sum of the two coordinates.</p>
<pre class="bqn"><code>⟨Split⟩ ← •Import &quot;../../util/bqn_util/util.bqn&quot;
dirs ← &quot;n&quot;‿&quot;ne&quot;‿&quot;se&quot;‿&quot;s&quot;‿&quot;sw&quot;‿&quot;nw&quot;
movs ← ⟨ 0‿¯1, 1‿¯1, 1‿0, 0‿1, ¯1‿1, ¯1‿0 ⟩
pts ← {⊑movs/˜(&lt;𝕩)⍷dirs}¨ ','Split ⊑•FLines &quot;../inputs/day11.txt&quot;
+´| +´pts # ⇒ 707</code></pre>
<p>We immediately translate each direction into a coordinate using a combination of <em>find</em>
(<a href="https://mlochbaum.github.io/BQN/doc/find.html"><code>⍷</code></a>)
and <em>replicate</em>,
and that’s basically it.</p>
<hr />
<p>Part two is a slight variation of this idea:
what is the furthest away we have ever been during this process?
This just means that, instead of a <em>fold</em> over the list,
we use a <em>scan</em> and take the maximum distance.</p>
<pre class="bqn"><code>⌈´ +´∘|¨ +`pts # ⇒ 1490</code></pre>
<h3 id="day-12"><a href="https://github.com/slotThe/advent/blob/master/aoc2017/bqn/day12.bqn">Day 12</a></h3>
<p>It’s another graph problem!
Today, we have to help a village of processes to communicate via pipes.
The input datum is an adjacency list of nodes and their neighbours.</p>
<pre><code>0 &lt;-&gt; 2
1 &lt;-&gt; 1
2 &lt;-&gt; 0, 3, 4
3 &lt;-&gt; 2, 4
4 &lt;-&gt; 2, 3, 6
5 &lt;-&gt; 6
6 &lt;-&gt; 4, 5</code></pre>
<p>Parsing this is not terribly difficult:</p>
<pre class="bqn"><code>inp ← (⊑⋈2⊸↓)∘(•BQN¨)∘(' '⊸Split)¨•FLines&quot;../inputs/day12.txt&quot;
# ⇒ ⟨ ⟨0,⟨2⟩⟩, ⟨1,⟨1⟩⟩, ⟨2,⟨0,3,4⟩⟩, … ⟩</code></pre>
<p>We first split each line on spaces, and then <code>•BQN</code> the whole thing.
This is convenient for two reasons:
it parses numbers followed by commas, like <code>10,</code>, as numbers,
and interprets the <code>&lt;-&gt;</code> part as a train, so we don’t even have to do any further filtering.</p>
<p>The first part wants us to find the path-component of <code>0</code>.
One could now think hard about how to efficiently encode a graph in BQN for these path finding types of problems…
or one could brute force the solution.
Since the input graph is not that big,
let’s just do the latter.
Starting from <code>0</code>, maintain a list of neighbours that are known to connect to it.
Then fold over the adjacency list and add the neighbours of every vertex we’ve already seen along the way.
In code (monadic <code>⍷</code> is called <em>deduplicate</em> and does what it says on the tin):</p>
<pre class="bqn"><code>Group ← { # 𝕩: adjacency list: ⟨ ⟨n, neighbours⟩, … ⟩
  ⟨0⟩ { v‿ns 𝕊 seen: ⊑v∊seen? ⍷seen∾ns; 𝕩 }´ 𝕩
}</code></pre>
<p>Now, the above snippet does not work at all, because obviously the list does not have to be in order.
Consider</p>
<pre><code>3 &lt;-&gt; 1
2 &lt;-&gt; 0, 1
1 &lt;-&gt; 1, 3
0 &lt;-&gt; 2</code></pre>
<p>Calling <code>Group</code> on this input would result in <code>⟨ 0 2 1 ⟩</code>,<a href="#fn29" class="footnote-ref" id="fnref29" role="doc-noteref"><sup>29</sup></a> even though <code>3</code> is also part of the group!
To fix this we could… just run the algorithm until nothing changes?
Yes, that sounds perfectly sensible.</p>
<p>We need a helper 1-modifier <code>Fix</code>, which performs the iteration for us.<a href="#fn30" class="footnote-ref" id="fnref30" role="doc-noteref"><sup>30</sup></a></p>
<pre class="bqn"><code>_Fix ← { 𝔽∘⊢⍟≢⟜𝔽_𝕣∘⊢⍟≢⟜𝔽𝕩 }</code></pre>
<details>
<summary>
I’m sure you wanted to see another gory walkthrough by someone who has no idea what they’re talking about.
</summary>
<p>Let’s first start with the simpler expression</p>
<pre class="bqn"><code>_Fix ← { 𝕊∘⊢⍟≢⟜𝔽𝕩 }</code></pre>
<p>the rest is just some icing on top.
The parse tree for this does not look so bad:</p>
<pre><code>    )explain {𝕊∘⊢⍟≢⟜𝔽𝕩}
{𝕊∘⊢⍟≢⟜𝔽𝕩}
{│ │ │ ││
 𝕊∘⊢ │ ││
  └─⍟≢ ││
    └─⟜𝔽│
      ├─𝕩
──────┘
</code></pre>
<p>Thus, fully parenthesised and without <em>after</em>, it looks like</p>
<pre class="bqn"><code>{ 𝕩((𝕊∘⊢)⍟≢)𝔽𝕩 }</code></pre>
<p>at which point even a simpleton like me may guess that it will execute something like
<code>𝕊𝔽𝕩 if 𝕩≢𝔽𝕩 else 𝕩</code> (remember that using Boolean expression for control flow is a thing).</p>
<p>The problem with this code is, again, that BQN does not support tail recursion.
Let’s now look at the real deal.</p>
<pre class="bqn"><code>_Fix ← { 𝔽∘⊢⍟≢⟜𝔽_𝕣∘⊢⍟≢⟜𝔽𝕩 }</code></pre>
<p>Fully parenthesised this is</p>
<pre class="bqn"><code>_Fix ⇐ { (((((((𝔽∘⊢)⍟≢)⟜𝔽)_𝕣)∘⊢)⍟≢)⟜𝔽)𝕩 }</code></pre>
<p>In particular, notice how we already understand almost all of this modifier!
The <code>𝔽∘⊢⍟≢⟜𝔽</code> part is the same as before, only we now don’t recurse,
but build up another level of “apply <code>𝔽</code>”.
The rest sort of also works as before—the outer <em>after</em> has the same shape—so
we are looking at</p>
<pre class="bqn"><code>_D ← {𝔽∘⊢⍟≢⟜𝔽} # Double F
_Fix ← {𝕩(((𝔽_D _𝕣)∘⊢)⍟≢)𝔽𝕩}</code></pre>
So if <code>𝕩≢𝔽𝕩</code>, we change the function <code>𝔽</code> to essentially <code>𝔽𝔽</code>, and then recurse.
This happens on every iteration, so we actually go from <code>𝔽</code> to <code>𝔽𝔽</code> to <code>𝔽𝔽𝔽𝔽</code>, and so on.
In short, we bring down the stack size to <span class="math inline">\log n</span> instead of <span class="math inline">n</span>.
Neat.
</details>
<p>Equipped with <code>_Fix</code>,
we can swiftly change the definition of <code>Group</code> to solve part one:</p>
<pre class="bqn"><code>Group ← {
  { v‿ns 𝕊 seen: ⊑v∊seen? ⍷seen∾ns; 𝕩 }´⟜𝕩 _Fix ⟨0⟩
}
≠Group inp # ⇒ 380</code></pre>
<p>Because we fold over the same list every time,
we can glue it to the right side of the function using <em>after</em>.</p>
<hr />
<p>Part two tasks us with finding all of the connected components of the graph,
instead of just the one containing <code>0</code>.
For that we first need to adjust our <code>Group</code> function a little; instead of the hard-coded <code>0</code>,
let’s search for the group of the first node in the given adjacency list.</p>
<pre class="bqn"><code>Group ← { # 𝕩 = ⟨ ⟨0,⟨2⟩⟩, ⟨1,⟨1⟩⟩, ⟨2,⟨0,3,4⟩⟩, … ⟩
  { v‿ns 𝕊 seen: ⊑v∊seen? ⍷seen∾ns; 𝕩 }´⟜𝕩 _Fix ⟨⊑⊑𝕩⟩
}</code></pre>
<p>Now, we can successively obtain a single connected component, and delete it from the graph.
Since the graph is undirected, this just means looking for the nodes in our list.
For iteration, <code>•_while_</code> can be used as before:</p>
<pre class="bqn"><code>c ← 0
{ c +⟜1↩ ⋄ (⊑¨⊸(¬∊)/⊣)⟜Group 𝕩 } •_while_ (⟨⟩⊸≢) inp
c            # ⇒ 181</code></pre>
<p>The result of <code>Group</code> applied to <code>𝕩</code>
is a single connected component,
so we want to throw out all of these nodes.
After that, just increment the counter and move on.
The whole thing stops when the list is empty—easy!</p>
<h3 id="day-13"><a href="https://github.com/slotThe/advent/blob/master/aoc2017/bqn/day13.bqn">Day 13</a></h3>
<p>We need to make our way across a firewall without being detected by packet scanners.
The firewall is represented by layers, each of which has a certain depth to it.
For example, given the input</p>
<pre><code>0: 3
1: 2
4: 4
6: 4</code></pre>
<p>one can visualise the firewall like this:</p>
<pre><code> 0   1   2   3   4   5   6
[ ] [ ] ... ... [ ] ... [ ]
[ ] [ ]         [ ]     [ ]
[ ]             [ ]     [ ]
                [ ]     [ ]</code></pre>
<p>In each layer, there is a scanner starting at the top.
Every tick, it moves one layer down, bouncing off the bottom and coming up again.
We start in an imagined layer <code>¯1</code> at the very top.
Part one asks us to calculate how often we are <em>caught</em>—that is, overlap with a scanner.
Let’s quickly go through the first few steps of the simulation for the above input:</p>
<pre><code>Initial state:
     0   1   2   3   4   5   6
 () [S] [S] ... ... [S] ... [S]
    [ ] [ ]         [ ]     [ ]
    [ ]             [ ]     [ ]
                    [ ]     [ ]

Tick 1 (not caught):
 0   1   2   3   4   5   6
( ) [ ] ... ... [ ] ... [ ]
[S] [S]         [S]     [S]
[ ]             [ ]     [ ]
                [ ]     [ ]

Tick 2 (caught):
 0   1   2   3   4   5   6
[ ] (S) ... ... [ ] ... [ ]
[ ] [ ]         [ ]     [ ]
[S]             [S]     [S]
                [ ]     [ ]</code></pre>
<p>You get the idea.
For every layer <span class="math inline">l</span> of size <span class="math inline">n</span>,
the question whether the probe is caught in step <span class="math inline">l</span> is equivalent to <span class="math inline">2(n - 1) \equiv 0 \mod l</span>,
where we need to subtract <span class="math inline">2</span> due to the bouncing off mechanic.
To get the score of a collision, multiply <span class="math inline">l</span> and <span class="math inline">n</span> together.
We can just verbatim copy this to BQN.</p>
<pre class="bqn"><code>⟨Split⟩ ← •Import &quot;../../util/bqn_util/util.bqn&quot;
inp ← (•BQN¨':'⊸Split)¨ •FLines &quot;../inputs/day13.txt&quot;
+´{l‿n: l×n×0=l|˜2×n-1}¨inp # ⇒ 1316</code></pre>
<hr />
<p>Part two wants us to not get caught;
however, the only thing we can control is our starting time.
This would be a pretty cool problem if it were not brute forcable.
Alas, it is.</p>
<pre class="bqn"><code>+⟜1 •_while_ {𝕊d: ⊑0∊{l‿n: (l+d)|˜2×n-1}¨inp} 0 # ⇒ 3840052</code></pre>
<p>The algorithm is the same as above,
only that we now have an additional delay to factor into the equation.
We iterate until we find a delay <code>d</code> such that <code>0</code> is not a member of <code>{l‿n: (l+d)|˜2×n-1}¨inp</code>;
i.e., such that we are not caught by any sensor.</p>
<h3 id="day-14"><a href="https://github.com/slotThe/advent/blob/master/aoc2017/bqn/day14.bqn">Day 14</a></h3>
<p>Today we are asked to defragment a disk,
represented by a 128×128 grid,
with each square being either used or free.
It’s built like this:
given our input, e.g., <code>"abc"</code>,
create strings <code>"abc-0"</code> through <code>"abc-127"</code>.
For each of them, run the knot hash function from <a href="#day-10">day 10</a>,
convert every single hex
<a href="https://en.wikipedia.org/wiki/Nibble">nibble</a>
to its 4-digit binary representation—e.g., for <code>"0f"</code> we would get <code>"00001111"</code>—<!--
-->and merge things together into a big 128×128 matrix.
The finished grid might look a little bit like this:</p>
<pre><code>##.#.#..--&gt;
.#.#.#.#
....#.#.
#.#.##.#
.##.#...
##..#..#
.#...#..
##.#.##.--&gt;
|      |
V      V</code></pre>
<p>To get the grid representation, we first need to rewrite our solution for day 10,
and export a function to compute the knot hash of the given argument.</p>
<pre class="bqn"><code>KnotHash ⇐ {
  ls ← ⌽ ⟨17, 31, 73, 47, 23⟩∾˜ 𝕩-@
  ∾ DecToHex∘X¨ 16(/⥊˜)⊸⊔ ⊑ R´⟜ls⍟64 (↕256)‿0‿0
}
•Show KnotHash inp2 # ⇒ &quot;2da93395f1a6bb3472203252e3b17fe5&quot;</code></pre>
<p>Nothing too unusual here,
only that exporting from a namespace works by binding with <em>export</em>
(<a href="https://mlochbaum.github.io/BQN/doc/namespace.html"><code>⇐</code></a>)
instead of <em>define</em>.
We can now import this function as we did for ones in the utility file,<a href="#fn31" class="footnote-ref" id="fnref31" role="doc-noteref"><sup>31</sup></a></p>
<pre class="bqn"><code>⟨Split,_Fix⟩ ← •Import &quot;../../util/bqn_util/util.bqn&quot;
⟨KnotHash⟩ ← •Import &quot;./day10.bqn&quot;</code></pre>
<p>and translate the recipe above into BQN code.</p>
<pre class="bqn"><code>grid ← {
  HexToBin ← {  𝕊p: p𝕊⟨⟩;              # Start
               0𝕊r: r«4⥊0;             # End: pad with zeros
               p𝕊r: (⌊p÷2)𝕊(r∾˜2|p)    # Conversion
             }¨∘(&quot;0123456789abcdef&quot;⊸⊐) # Convert hex to decimal, then to binary
  Start ← (⊑•FLines&quot;../inputs/day14.txt&quot;)∾&quot;-&quot;∾•Fmt
  Row ← ∾∘HexToBin∘KnotHash
  &gt;Row∘Start¨↕128
}</code></pre>
<p>Not too many new things here.
<code>HexToBin</code> essentially runs on the same logic as a more verbose version of <code>DecToHex</code> from day 10,<a href="#fn32" class="footnote-ref" id="fnref32" role="doc-noteref"><sup>32</sup></a>
and the <code>•Fmt</code> function just pretty-prints the given value to a string.
This is, however, the first time that we see an ambivalent function definition<!--
-->—one that can be called both monadically and dyadically.
The monadic case is used in lieu of an internal worker function,
like what Haskell people often call <code>go</code>.
This could have also been achieved with a construct like <code>{…}⟜⟨⟩¨…</code>, but I feel like that wouldn’t read as nicely.</p>
<p>Part one just asks us how many cells are alive:</p>
<pre class="bqn"><code>+´⥊grid # ⇒ 8222</code></pre>
<p>We need to convert the matrix into a vector first, because <em>fold</em> only works on vectors.
Alternatively, we could have also summed up all major cells separately with <em>insert</em>
(<a href="https://mlochbaum.github.io/BQN/doc/fold.html"><code>˝</code></a>),
and then summed up the resulting vector.</p>
<pre class="bqn"><code>+´+˝grid # ⇒ 8222</code></pre>
<hr />
<p>Part two is more interesting, and is probably among the top three parts for me in terms of fun.
Instead of simply counting the number of alive cells, we now need to find the number of distinct <em>regions</em>—<!--
-->live cells adjacent to each other in any of the four cardinal directions.
For example, the grid shown above would have the following regions<a href="#fn33" class="footnote-ref" id="fnref33" role="doc-noteref"><sup>33</sup></a></p>
<pre><code>11.2.3..--&gt;
.1.2.3.4
....5.6.
7.8.55.9
.88.5...
88..5..8
.8...8..
88.8.88.--&gt;
|      |
V      V</code></pre>
<p>So, what do we do?
This question reminds me a little bit of a game of life–type situation,
only that we don’t have to evolve the grid.
Starting with</p>
<pre class="bqn"><code>    m ← 3‿3⥊0‿0‿1‿1‿1‿0‿1‿0‿0
┌─
╵ 0 0 1
  1 1 0
  1 0 0
        ┘</code></pre>
<p>the first step is to associate a unique number with each <code>1</code> in the grid.
One way of doing this is to <em>deshape</em> the array into a vector, and then take a +-<em>scan</em> of it.
This will only increase when another <code>1</code> is encountered:</p>
<pre class="bqn"><code>    +`⥊m
⟨ 0 0 1 2 3 3 4 4 4 ⟩
   3‿3⥊+`⥊m
┌─
╵ 0 0 1
  2 3 3
  4 4 4
        ┘</code></pre>
<p>If we now multiply with the original matrix,
all of the zeros will kill the redundant numbers in that representation.</p>
<pre class="bqn"><code>    um ← m×3‿3⥊+`⥊m
┌─
╵ 0 0 1
  2 3 0
  4 0 0
        ┘</code></pre>
<p>Packing this up into its own function,
a clever user of <em>under</em> takes care of all of the de- and reshaping for us.</p>
<pre class="bqn"><code>+`⊸×⌾⥊</code></pre>
<p>Now, the idea is to proceed in the following way:
take the maximum of every cell with its four neighbours<!--
-->—to get group the cell should belong to if it’s alive—<!--
-->and then multiply by the original value of the cell, to again make sure we only care about live cells.
Now, because BQN is an array language, we can do all of this for the whole array at the same time!
We can use <em>nudge</em> in either direction to get the North and South neighbour (remember that first axis stuff?),
and <em>nudge</em> <em>cells</em> to get the East and West one:</p>
<pre class="bqn"><code>    m ← 3‿3⥊1
┌─
╵ 1 1 1
  1 1 1
  1 1 1
        ┘
   ⟨«,»,«˘,»˘⟩{𝕎𝕩}¨&lt;m
┌─
· ┌─        ┌─        ┌─        ┌─
  ╵ 1 1 1   ╵ 0 0 0   ╵ 1 1 0   ╵ 0 1 1
    1 1 1     1 1 1     1 1 0     0 1 1
    0 0 0     1 1 1     1 1 0     0 1 1
          ┘         ┘         ┘         ┘
                                          ┘</code></pre>
<p>There are a few things going on here.
First, we use BQN’s
<a href="https://mlochbaum.github.io/BQN/doc/functional.html">functional programming capabilities</a>,
which work just about as one would expect.<a href="#fn34" class="footnote-ref" id="fnref34" role="doc-noteref"><sup>34</sup></a>
Second, we need to <em>enclose</em> <code>m</code> and make it a
<a href="https://mlochbaum.github.io/BQN/doc/enclose.html">unit array</a>,
as otherwise <em>each</em> is trying to match up the major cells of <code>m</code> with the elements of our vector (the functions).
We don’t want that, and making <code>m</code> a unit will correctly “duplicate” it to each function instead.
Finally, <em>nudge</em> correctly inserts the fill elements for the edge cases;
our grid is only 128×128 and we are not on a torus.<a href="#fn35" class="footnote-ref" id="fnref35" role="doc-noteref"><sup>35</sup></a></p>
<p>Now, we can just compare every neighbour with the original value,
and kick out the zeros.
Using our <code>um</code> array from above:</p>
<pre class="bqn"><code>    (×um)×⌈´⟨«,»,«˘,»˘,⊢⟩{𝕎𝕩}¨&lt;um
┌─
╵ 0 0 1
  4 3 0
  4 0 0
        ┘</code></pre>
<p>For kicking out the zeros we have to use
<em>signum</em> (<a href="https://mlochbaum.github.io/BQN/doc/arithmetic.html"><code>×</code></a>),
so as to not falsify the group.
Now, you may notice that this process hasn’t converged yet; <code>3</code> is in the same group as <code>4</code>,
but there wasn’t enough time for it to be swallowed up yet.
But we have a <code>_Fix</code> for that, don’t we?</p>
<pre class="bqn"><code>    { (×𝕩)×⌈´⟨«,»,«˘,»˘,⊢⟩{𝕎𝕩}¨&lt;𝕩 }_Fix um
┌─
╵ 0 0 1
  4 4 0
  4 0 0
        ┘</code></pre>
<p>To get the number of regions,
we just have to pull everything together<!--
-->—and remember to subtract one, for <code>0</code>’s region.</p>
<pre class="bqn"><code>{ 𝕊g:
  g (+`⊸×⌾⥊)↩
  g {(×𝕩)×⌈´⟨»˘,«˘,»,«,⊢⟩{𝕎𝕩}¨&lt;𝕩}_Fix↩
  1-˜+´∊⥊g # Count all unique numbers minus 0
} grid     # ⇒ 1086</code></pre>
<h3 id="day-15"><a href="https://github.com/slotThe/advent/blob/master/aoc2017/bqn/day15.bqn">Day 15</a></h3>
<p>For day 15 we have to help a pair of duelling generators decide which of them is malfunctioning.
Each generator produces a value in the following way:
take the previous value, multiply it by <code>16807</code> (generator A) or <code>48271</code> (generator B),
and then keep the remainder of dividing the resulting product by <code>2147483647</code>.<a href="#fn36" class="footnote-ref" id="fnref36" role="doc-noteref"><sup>36</sup></a>
Our puzzle input comprises the initial seeds whence this process starts.
The task for part one is to check whether the lowest 16 bits of both of these numbers match up,
and count the number of times this happens after 40 million pairs.</p>
<p>Parsing is simple.</p>
<pre class="bqn"><code>⟨Split⟩ ← •Import &quot;../../util/bqn_util/util.bqn&quot;
a‿b ← •ParseFloat∘(¯1⊸⊑)∘(' '⊸Split)¨ •FLines &quot;../inputs/day15.txt&quot;</code></pre>
<p>The rest is similarly straightforward.
One could drop down to bit-wise operations again,
but the lowest 16 bits of <span class="math inline">x</span> and <span class="math inline">y</span> matching up is equivalent to <span class="math inline">x \equiv y \mod 2^{16}</span>;
let’s do that instead.</p>
<pre class="bqn"><code>S ← { 𝕊a‿b‿n:
  na ← 2147483647|a×16807
  nb ← 2147483647|b×48271
  nn ← na =○(65536⊸|) nb
  ⟨na,nb,n+nn⟩
}
S⍟40e6 a‿b‿0 # ⇒ 631</code></pre>
<p>We use <em>over</em>
(<a href="https://mlochbaum.github.io/BQN/doc/compose.html"><code>○</code></a>)
to apply this transformation to the two arguments,
and then check for equality (i.e., <code>𝕨𝔽○𝔾𝕩</code> is <code>(𝔾𝕨)𝔽(𝔾𝕩)</code>).</p>
<hr />
<p>Part two asks us to change up the algorithm, so that generator A only considers multiples of 4,
and generator B only cares about multiples of 8.
That is, both generators independently generate numbers until these conditions are met,
and only then are these numbers compared.
We also only have to check 5 million pairs, instead of the 40 million of part one.
First and foremost, this means that we have to decouple the comparison aspect from the generation of the numbers.</p>
<pre class="bqn"><code>Gen ← { fac 𝕊 n:
  res ← ⟨⟩
  {res∾↩2147483647|(¯1⊑⥊𝕩)×fac}⍟40e6 n
  res 65536⊸|↩
}
as ← 16807 Gen a
bs ← 48271 Gen b</code></pre>
<p>The calculations are the same as in part one, only now we use <em>change</em> to build a list that we can return.
Luckily, simply generating 40 million pairs as above and filtering for the right properties works out for us here.</p>
<pre class="bqn"><code>F ← 5e6↑(0⊸=|)/⊢
+´(8 F bs)=(4 F as) # ⇒ 279</code></pre>
<h2 id="days-1620">Days 16–20</h2>
<h3 id="day-16"><a href="https://github.com/slotThe/advent/blob/master/aoc2017/bqn/day16.bqn">Day 16</a></h3>
<p>This day involves analysing the dance of a few programs.
Part one is about mutating a small vector—characters <code>'a'</code> through <code>'p'</code>—according to the puzzle input,
which is a single line that looks a bit like this:</p>
<pre><code>s11,x10/2,pl/d,…</code></pre>
<p>The valid moves are:</p>
<ul>
<li><code>sA</code> rotates the vector <code>A</code> positions to the right.</li>
<li><code>xA/B</code> exchanges the positions <code>A</code> and <code>B</code>.</li>
<li><code>pA/B</code> exchanges the characters <code>A</code> and <code>B</code>.</li>
</ul>
<p>So starting with just <code>abcd</code>, the sequence <code>s1,x3/4,pe/b</code> would go</p>
<pre><code>abcd  →  eabcd  →  eabdc  →  baedc</code></pre>
<p>Parsing the moves is not terribly complicated.
The cool thing is that we can use BQN’s functional programming facilities again
and immediately translate the instructions above into functions to be applied!</p>
<pre class="bqn"><code>⟨Split⟩ ← •Import &quot;../../util/bqn_util/util.bqn&quot;
P ← {
  a‿&quot;s&quot;: (-•ParseFloat a)⊸⌽;                # sA
  a‿&quot;x&quot;: ⌽⌾((•ParseFloat¨'/'Split a)⊸⊏);    # xA/B
  a‿&quot;p&quot;: { 𝕊xs: ⌽⌾((xs⊐∾'/'Split a)⊸⊏) xs } # pA/B
}
inp ← ⌽ P∘(1⊸(↓⋈↑))¨ ','Split ⊑•FLines&quot;../inputs/day16.txt&quot;
# Reverse because we want to fold over the list later.</code></pre>
<p>Since the format of the instructions is so predictable,
we can just match on the first character and decide where to go from there.
Also, the <code>1(↓⋈↑)</code> idiom returns as a useful tool yet again.
Do note the <code>xs⊐∾…</code> in the third line; we want to get the indices of the <em>characters</em>
in the string, and not the indices of a substring of length one; compare:</p>
<pre class="bqn"><code>    '/'Split&quot;a/b&quot;
⟨ &quot;a&quot; &quot;b&quot; ⟩
    ∾'/'Split&quot;a/b&quot;
&quot;ab&quot;
    &quot;abcde&quot;⊐'/'Split&quot;a/b&quot; # ⊐ returns ≠𝕨 if it can't find 𝕩 in 𝕨
⟨ 5 5 ⟩
    &quot;abcde&quot;⊐∾'/'Split&quot;a/b&quot;
⟨ 0 1 ⟩</code></pre>
<p>With all of that in place,
we can successively apply all the functions to the seed value <code>abcdefghijklmnop</code>.</p>
<pre class="bqn"><code>('a'+↕16){𝕎𝕩}´inp # ⇒ &quot;eojfmbpkldghncia&quot;</code></pre>
<hr />
<p>Part two asks us to keep the result of part one, <code>"eojfmbpkldghncia"</code>,
and repeat the whole dance one billion times.
Now, that number is obviously much too large to simulate the whole thing.
Instead, let’s try to find a loop.</p>
<pre class="bqn"><code>h  ← ⟨⟩•HashMap⟨⟩
d  ← {𝕎𝕩}´⟜inp•_while_{ (𝕩h.Set@) ⊢ ¬h.Has𝕩 } ('a'+↕16) # dup
di ← ⊑(h.Keys@)⊐&lt;d                                      # dup index
{𝕎𝕩}´⟜inp⍟(di+(h.Count@)|10e9-di) d # ⇒ &quot;iecopnahgdflmkjb&quot;</code></pre>
<p>I used a hash map here since I figured the loop was still going to be substantial
(it wasn’t—oh well).
The test function supplied to while <code>•_while_</code> (ab)uses the fact that,
while <code>⊢</code> only ever returns <code>𝕩</code>,
it actually evaluates both of its arguments.
Remember that evaluation happens right-to-left, though;
<code>(¬h.Has𝕩) ⊣ 𝕩h.Set@</code> wouldn’t work!</p>
<p>At the end, the loop returns the first duplicate it found,
so all that’s left to do is to simulate that many steps upfront,
and then whatever we have left over.<a href="#fn37" class="footnote-ref" id="fnref37" role="doc-noteref"><sup>37</sup></a>
The little <code>@</code>’s after the function calls to <code>h.Count</code> and <code>h.Keys</code>
(but not to <code>h.Set</code>, as we need to associate some kind of value to the keys—that value just happens to be the null character)
function as dummy arguments.
To return something,
the upper case (function) variants need to be called,
but the argument is actually ignored.
This is a bit ugly, but sort of how BQN’s “object system”<!--
-->—which really rather seems like an accident of having a module system and syntactic roles—<!--
-->works.</p>
<h3 id="day-17"><a href="https://github.com/slotThe/advent/blob/master/aoc2017/bqn/day17.bqn">Day 17</a></h3>
<p>Today we have to escape a deadly spinlock!
To do that, we have to simulate a circular buffer with the following rules:</p>
<blockquote>
<p>[The spinlock] starts with a circular buffer containing only the value 0, which it marks as the current position.
It then steps forward through the circular buffer some number of steps (your puzzle input) before inserting the first new value, 1, after the value it stopped on.
The inserted value becomes the current position.
Then, it steps forward from there the same number of steps, and wherever it stops, inserts after it the second new value, 2, and uses that as the new current position again.</p>
</blockquote>
<p>All in all, we have to insert the numbers 0 to 2017 in this way.
For example, suppose our puzzle input was <code>3</code>.
Using <code>()</code> to indicate the current position, the list would grow thusly:</p>
<pre><code>(0)  →  0 (1)  →  0 (2) 1  →  0 2 (3) 1  →  …</code></pre>
<p>Part one asks us for the value after 2017 in the final buffer.</p>
<p>With a puzzle input of <span class="math inline">n</span> and a position <span class="math inline">p</span> in step <span class="math inline">i</span>,
the stepping forward process is just <span class="math inline">1 + (p + n \mod i)</span><!--
-->—the list is exactly of length <span class="math inline">i</span> in that step—<!--
-->and inserting after the element means adding one.
As such, a straightforward solution for part one looks like this:</p>
<pre class="bqn"><code>n ← •ParseFloat⊑•FLines&quot;../inputs/day17.txt&quot;
((1+⊑)⊐⟜2017)⊸⊑ ¯1⊑ { 𝕊i‿p‿b:         # index, position, buffer
  np←1+i|p+n ⋄ ⟨i+1,np,(np↑b)∾i∾np↓b⟩
}⍟2017 1‿0‿⟨0⟩                        # ⇒ 1487</code></pre>
<p>However, this feel immensely unsatisfactory to me.
Repeatedly breaking apart an array and assembling it again (<code>(np↑b)∾i∾np↓b</code>) sort of signals that something must be amiss.
Instead, it would be much better to not have to care about the position at all,
always insert the element at the front, and rotate the array instead.
After entirely too much thinking, something pops up.
Say we only looked at the small example above of going from <code>(0)</code> to <code>0 2 (3) 1</code>.
Again starting with <code>⟨0⟩</code>,
we can do the following:</p>
<pre class="bqn"><code>    Rot ← { xs𝕊i: i∾(3+1)⌽xs }
(function block)
    ⟨0⟩ Rot 1
⟨ 1 0 ⟩
    (⟨0⟩ Rot 1) Rot 2
⟨ 2 1 0 ⟩
    ((⟨0⟩ Rot 1) Rot 2) Rot 3
⟨ 3 1 0 2 ⟩</code></pre>
<p>The final result, <code>3 1 0 2</code> is indeed—up to circular permutation—the same as <code>0 2 3 1</code>!
The <code>3+1</code> comprises the step size <code>3</code>, and keeps track of the fact that we need to insert the value after the index.
Even more, the final inserted value will be the head of the vector,
so getting the element at index <code>1</code> is what we want—no more <em>select</em>ing stuff.
Do note that walking to the <em>right</em> in terms of indices translates to rotating the buffer to the <em>left</em> (i.e., using positive numbers).
We can pack this function up in a fold, yielding an alternative solution for part one:<a href="#fn38" class="footnote-ref" id="fnref38" role="doc-noteref"><sup>38</sup></a></p>
<pre class="bqn"><code>1⊑⟨0⟩{𝕨∾(n+1)⌽𝕩}´⌽1+↕2017 # ⇒ 1487</code></pre>
<hr />
<p>Part two now wants us to identify the value following <code>0</code>—after fifty million iterations!
This is much too big to simulate in the same way as the first part.
Instead, we can come back to the formula <span class="math inline">1 + (p + n \mod i)</span>
that predicts the index at which a given number is going to be inserted.
We can use a <em>scan</em> over the vector to get that index for each insertion.
Since the steps are increasing, the solution looks for the last time a <code>1</code> was inserted.</p>
<pre class="bqn"><code>⊑ (≠-⊐⟜1∘⌽) 0{1+𝕩|n+𝕨}`1+↕50e6 # ⇒ 25674054</code></pre>
<details>
<summary>
This is the first time that we use a non-associative scan, so a few words of warning.
</summary>
<p>While <em>fold</em> is consuming its input array in the same direction as BQN’s evaluation model—right-to-left—<em>scan</em> is evaluating its argument left-to-right!</p>
<pre class="bqn"><code>    ⟨10, 10-15, (10-15)-9⟩ ≡ -`⟨10,15,9⟩
1
    ⟨10, 10-15, 10-15-9⟩   ≡ -`⟨10,15,9⟩
0</code></pre>
<p>As such, the default argument in a scan is given as the initial <em>left</em> argument,
instead of the initial right one as in a fold:</p>
<pre class="bqn"><code>    ⟨20-10, (20-10)-15, ((20-10)-15)-9⟩ ≡ 20-`⟨10,15,9⟩
1
    (10-(15-(9-20))) = 20-´⟨10,15,9⟩
1</code></pre>
<p>The reason this is done is more of a pragmatic one,
from what I can tell:
left scans are simply more common than right ones.</p>
One may argue the same for left over right folds, actually,
but I suppose the æsthetics of having <code>20-´⟨10,15,9⟩</code> be <code>10-15-9-20</code> won out there.
</details>
<p>Other than that, the train <code>≠-⊐⟜1∘⌽</code> computes the first occurrence of <code>1</code> in the reversed vector,
and then corrects the index by subtracting it from the length of the vector.</p>
<h3 id="day-18"><a href="https://github.com/slotThe/advent/blob/master/aoc2017/bqn/day18.bqn">Day 18</a></h3>
<p>Today we have to simulate some assembly in order to play music!
The computer has 16 registers, all starting at 0,
with the instructions being as follows:</p>
<blockquote>
<ul>
<li><code>snd X</code> plays a sound with a frequency equal to the value of <code>X</code>.</li>
<li><code>set X Y</code> sets register <code>X</code> to the value of <code>Y</code>.</li>
<li><code>add X Y</code> increases register <code>X</code> by the value of <code>Y</code>.</li>
<li><code>mul X Y</code> sets register <code>X</code> to the result of multiplying the value contained in register <code>X</code> by the value of <code>Y</code>.</li>
<li><code>mod X Y</code> sets register <code>X</code> to the remainder of dividing the value contained in register <code>X</code> by the value of <code>Y</code> (that is, it sets <code>X</code> to the result of <code>X</code> modulo <code>Y</code>).</li>
<li><code>rcv X</code> recovers the frequency of the last sound played, but only when the value of <code>X</code> is not zero. (If it is zero, the command does nothing.)</li>
<li><code>jgz X Y</code> jumps with an offset of the value of <code>Y</code>, but only if the value of <code>X</code> is greater than zero. (An offset of <code>2</code> skips the next instruction, an offset of <code>-1</code> jumps to the previous instruction, and so on.)</li>
</ul>
</blockquote>
<p>Our input consists of one instruction on each line; for example:</p>
<pre><code>set a 1
add a 2
mul a a
mod a 5
…</code></pre>
<p>Part one asks us what value is recovered the first time an <code>rcv</code> instruction is actually executed
(i.e., called with a non-zero argument).
Let’s first to some parsing.</p>
<pre class="bqn"><code>⟨Split⟩←•Import&quot;../../util/bqn_util/util.bqn&quot;
inp ← •ParseFloat⎊⊢¨∘(' '⊸Split)¨•FLines &quot;../inputs/day18.txt&quot;</code></pre>
<p>Note the <code>•ParseFloat⎊⊢</code>.
We’ve used <em>catch</em> before on <a href="#day-7">day 7</a>, but for a different reason.
Here, we use it as a shorthand to parse a number if possible, and return the argument as-is otherwise.</p>
<pre class="bqn"><code>    •ParseFloat⎊⊢¨ ' 'Split&quot;set a 102&quot;
⟨ &quot;set&quot; &quot;a&quot; 102 ⟩</code></pre>
<p>Simulating an instruction is easy—if verbose—for the most part;
the only slight challenge is that we have instructions along the lines of <code>mul a 2</code>, as well as <code>mul a a</code>;
in the latter case, we first need to get the current value out of register <code>a</code> before execution.
An easy way to do this is to match on the
<a href="https://mlochbaum.github.io/BQN/spec/system.html#operation-properties"><code>•Type</code></a>
of the argument.
The function returns <code>1</code> for integers,
in which case we just take the value;
otherwise, we can look it up as a register.</p>
<pre class="bqn"><code>V ← { 1=•Type 𝕩? 𝕩; (⊑𝕩-&quot;a&quot;)⊑𝕨 } # [V]alue, 𝕨=arr, 𝕩=el</code></pre>
<p>The registers <code>a…p</code> are translated into indices <code>0…15</code> in the usual way.
All that’s left to do is to write a change modifier.
It takes the vector of registers, a function <code>F</code>, and an <code>x‿y</code> pair,
and changes <code>x</code> to <code>x F y</code>.
<em>Under</em> is quite nice for these sorts of things.</p>
<pre class="bqn"><code>_C ← { regs F _𝕣 x‿y: F⟜(regs V y)⌾((⊑x-&quot;a&quot;)⊸⊑) regs } # [C]hange</code></pre>
<p>Finally, here is the rest of the simulation.</p>
<pre class="bqn"><code>snd ← 0
SD ← { 𝕊⟨ix,regs,ins‿x‿y⟩:
  { 𝕊&quot;set&quot;: ⟨ix+1, regs  ⊢_C x‿y⟩;
    𝕊&quot;add&quot;: ⟨ix+1, regs  +_C x‿y⟩;
    𝕊&quot;mul&quot;: ⟨ix+1, regs  ×_C x‿y⟩;
    𝕊&quot;mod&quot;: ⟨ix+1, regs |˜_C x‿y⟩;
    𝕊&quot;jgz&quot;: 0&lt;regs V x? ⟨ix+regs V y, regs⟩;
    𝕊&quot;jgz&quot;: ⟨ix+1, regs⟩
  } ins
}
One ← {
  𝕊⟨ix,regs,ins‿x⟩:
    { 𝕊&quot;snd&quot;: snd↩regs V x ⋄ ⟨ix+1, regs⟩;
      𝕊&quot;rcv&quot;: snd!0=regs V x ⋄ ⟨ix+1, regs⟩
    } ins;
  SD 𝕩
}</code></pre>
<p>Quite a lot of code!<a href="#fn39" class="footnote-ref" id="fnref39" role="doc-noteref"><sup>39</sup></a>
However, nothing very interesting happening here;
we use <em>assert</em> (<code>!</code>) in the same way as in <a href="#day-7">day 7</a>,
only that we now have a genuine condition to test.
Recall that <code>𝕨!𝕩</code> checks whether <code>𝕩</code> is 1.
If it is, nothing happens;
if it’s not, an exception with value <code>𝕨</code> is thrown.
We use it here so that we immediately exit upon receiving<a href="#fn40" class="footnote-ref" id="fnref40" role="doc-noteref"><sup>40</sup></a> our first recovery signal.
As in any other “simulate indexing into this array”–type situations,
<code>•_while_</code> is used for iteration,
only this time we have to wrap the whole thing inside of <em>catch</em>.</p>
<pre class="bqn"><code>{ 𝕊i‿r: One⟨i,r,i⊑inp⟩
}•_while_{
  𝕊i‿·: (i≥0)∧i&lt;≠inp
}⎊•CurrentError ⟨0,16⥊0⟩ # ⇒ 9423</code></pre>
<hr />
<p>Part two informs us that we actually completely misunderstood the instructions.
In reality, the assembly is about simulating a concurrent system comprising of program <code>0</code> and program <code>1</code>.
The simulations run completely separately,
save for the “send” and “receive”—instead of “sound” and “recover”—instructions they use to communicate:</p>
<blockquote>
<ul>
<li>snd X sends the value of X to the other program. These values wait in a queue until that program is ready to receive them. Each program has its own message queue, so a program can never receive a message it sent.</li>
<li>rcv X receives the next value and stores it in register X. If no values are in the queue, the program waits for a value to be sent to it. Programs do not continue to the next instruction until they have received a value. Values are received in the order they are sent.</li>
</ul>
</blockquote>
<p>Further, program <code>1</code> starts with a <code>1</code> in its last register.
Our task is to simulate both programs until they deadlock<!--
-->—both are stuck on <code>rcv</code> calls but both send queues are empty—<!--
-->and count the number of times program <code>1</code> pushed something to program <code>0</code>’s queue.</p>
<p>Are you ready to simulate concurrency in an array language?
I wasn’t.
Anyways, my idea was to run both programs in lockstep, with two lists of additional state that we have to keep track of.
This is only important for <code>snd</code> and <code>rcv</code>—the other instructions don’t have to change.</p>
<pre class="bqn"><code>Two ← { # my queue, other queue, index, registers, instruction
  # Push to other queue.
  𝕊⟨my,ot,ix,rs,&quot;snd&quot;‿x⟩: ot∾↩rs V x ⋄ ⟨my, ot, ix+1, rs⟩;
  # Don't advance on empty queue.
  𝕊⟨⟨⟩,ot,ix,rs,&quot;rcv&quot;‿x⟩: ⟨⟨⟩,ot,ix,rs⟩;
  # Pop from my queue.
  𝕊⟨my,ot,ix,rs,&quot;rcv&quot;‿x⟩: q‿qs ← 1(↑⋈↓)my ⋄ ⟨qs, ot, ix+1, rs⊢_C⟨x,⊑q⟩⟩;
  𝕊⟨my,ot,ix,rs,ins⟩    : ⟨my,ot⟩∾SD⟨ix,rs,ins⟩
}</code></pre>
<p>Now all we have to do is take a deep breath and write the following code.</p>
<pre class="bqn"><code># Concurrency at home:
⊑{ 𝕊s1‿q0‿q1‿i1‿r1‿i2‿r2‿xs:
  ⟨q0,q1,i1,r1⟩ ↩ Two⟨q0,q1,i1,r1,i1⊑xs⟩
  old0 ← ≠q0
  ⟨q1,q0,i2,r2⟩ ↩ Two⟨q1,q0,i2,r2,i2⊑xs⟩ # q0 and q1 swap here
  ⟨s1+old0&lt;≠q0,q0,q1,i1,r1,i2,r2,xs⟩
}•_while_{ 𝕊·‿q0‿q1‿i1‿·‿i2‿·‿xs:
  ∨´⟨ q0≢⟨⟩, q1≢⟨⟩, &quot;rcv&quot;≢⊑i1⊑xs, &quot;rcv&quot;≢⊑i2⊑xs ⟩
} ⟨0, ⟨⟩,⟨⟩, 0,(15⥊0)∾0, 0,(15⥊0)∾1, inp⟩ # ⇒ 7620</code></pre>
<p><code>s1</code> keeps track of how many times program <code>1</code> sent a signal;
the two <code>q</code>’s are the queues; and
the two <code>i</code>’s and <code>r</code>’s correspond to the respective indices and registers.
We simulate the whole thing until a deadlock occurs as per the above considerations.
Technically, I guess, both programs could also run to completion,
so there would have to be some extra index shenanigans in the check,
but this doesn’t happen for my input so I’m going to pretend it never does.</p>
<h3 id="day-19"><a href="https://github.com/slotThe/advent/blob/master/aoc2017/bqn/day19.bqn">Day 19</a></h3>
<p>For day 19 we have to help a network packet traverse a routing diagram.
The diagram we get is pretty self-explanatory; an example
(the real path is much more complicated)
looks like this:</p>
<pre><code>     |
     |  +--+
     A  |  C
 F---|----E|--+
     |  |  |  D
     +B-+  +--+</code></pre>
<p>The question lets us know that there will be a unique line connected to the top,
which is our starting point.
This in particular means that we will start out going down.
Letters are simply passed through, and the path we can take is always unique;
we only change directions when absolutely necessary.</p>
<p>Part one asks what letters we see in order.
This is a straightforward simulation, so let’s get to it;
first, parsing and massaging the input:</p>
<pre class="bqn"><code>⟨Split⟩←•Import&quot;../../util/bqn_util/util.bqn&quot;
inp ← ⌽⍉∘({(' '⥊˜≠𝕩)∾⌽⍉𝕩}⍟3) &gt;•FLines&quot;../inputs/day19.txt&quot;</code></pre>
<p>We pad the input matrix with spaces on the right, bottom, and left, in order to make changing directions easier.
This way, we only have to check if the next cell is a space character;
since we never move into that space, we don’t have to special case indexing around the edges of the array.</p>
<details>
<summary>
The <code>⌽⍉</code> bit is a neat trick to compute all rotations of a matrix.
</summary>
<p>When padding the input,
we essentially want to rotate the matrix by 90 degrees three times,
and add spaces afterwards.
It is well known that every rotation is merely the product of two reflections,
like
<em>reverse</em> (<a href="https://mlochbaum.github.io/BQN/doc/reverse.html#reverse"><code>⌽</code></a>) and
<em>transpose</em> (<a href="https://mlochbaum.github.io/BQN/doc/transpose.html"><code>⍉</code></a>).</p>
<pre class="bqn"><code>    m ← 3‿3⥊↕9
┌─
╵ 0 1 2
  3 4 5
  6 7 8
        ┘
    ⍉m
┌─
╵ 0 3 6
  1 4 7
  2 5 8
        ┘
    ⌽m
┌─
╵ 6 7 8
  3 4 5
  0 1 2
        ┘</code></pre>
<p>Depending on whether we rotate or transpose first,
we turn either right or left.</p>
<pre class="bqn"><code>    m
┌─
╵ 0 1 2
  3 4 5
  6 7 8
        ┘
    ⌽⍉ m
┌─
╵ 2 5 8
  1 4 7
  0 3 6
        ┘
    ⍉⌽ m
┌─
╵ 6 3 0
  7 4 1
  8 5 2
        ┘</code></pre>
<p>Doing this four times gives us every rotation of the matrix:</p>
<pre class="bqn"><code>    (⍉⌽)⍟(↕4) m
┌─
· ┌─        ┌─        ┌─        ┌─
  ╵ 0 1 2   ╵ 6 3 0   ╵ 8 7 6   ╵ 2 5 8
    3 4 5     7 4 1     5 4 3     1 4 7
    6 7 8     8 5 2     2 1 0     0 3 6
          ┘         ┘         ┘         ┘
                                          ┘</code></pre>
<p>Padding all of the sides can be done during this rotation
by just adding the elements with which to pad in the right quantity (the number of major cells) to every side:</p>
<pre class="bqn"><code>    {((≠𝕩)⥊0)∾⌽⍉𝕩}⍟4 m  # Pad every side
┌─
╵ 0 0 0 0 0
  0 0 1 2 0
  0 3 4 5 0
  0 6 7 8 0
  0 0 0 0 0
            ┘</code></pre>
</details>
<p>Changing direction involves picking the unique (per the question) next direction to go in.
In particular, we never want to turn around.</p>
<pre class="bqn"><code>ND ← { pos 𝕊 dir:
  ds ← (&lt;¯1×dir)(¬∘⍷/⊢)⟨1‿0, 0‿1, ¯1‿0, 0‿¯1⟩ # Not where we came from
  ds/˜' '≠inp⊑˜ds+&lt;pos                        # Not empty space
}</code></pre>
<p>Notice how the result of <code>ND</code> is still a list—when it’s empty,
we know that we have reached the end.
Getting the path now simply involves simulating what we need to simulate.</p>
<pre class="bqn"><code>path ← {
  ·‿pth‿pos ← { 𝕊dir‿pth‿pos:
      {' '=inp⊑˜dir+pos? dir(⊑pos⊸ND)↩;@} # Change direction if necessary
      ⟨dir, pth∾pos⊑inp, pos+dir⟩
  }•_while_{
    𝕊dir‿·‿pos: 0&lt; ≠pos ND dir   # While we can move somewhere
  } ⟨1‿0, &quot;&quot;, ⟨1, ⊑'|'⊐˜1⊏inp⟩⟩  # Unique start
  pth∾pos⊑inp                    # Add last position to final path
}</code></pre>
<p>We just continue going into the same direction until the next cell would be a space.
In that case, we correct and move on until we can’t move anymore.
As said above, the start is the unique <code>|</code> connected to the top;
the index is quickly obtained with <em>index of</em> after a <em>first cell</em>,
to get the first major cell (row, in this case).</p>
<p>All that’s left to do is to get all letters from the path:</p>
<pre class="bqn"><code>∊⟜('A'+↕26)⊸/ path # ⇒ &quot;RUEDAHWKSM&quot;</code></pre>
<hr />
<p>Part two is short and sweet—probably a breather from yesterday—and asks us for the length of the path.</p>
<pre class="bqn"><code>≠path # ⇒ 17264</code></pre>
<h3 id="day-20"><a href="https://github.com/slotThe/advent/blob/master/aoc2017/bqn/day20.bqn">Day 20</a></h3>
<p>Today, we have to help the GPU simulate particles.
Our input consists of the particle positions,
together with their velocity and acceleration.</p>
<pre><code>p=&lt;-3770,-455,1749&gt;, v=&lt;-4,-77,53&gt;, a=&lt;11,7,-9&gt;
p=&lt;1430,195,-903&gt;, v=&lt;-123,60,20&gt;, a=&lt;5,-5,1&gt;
p=&lt;-2964,-3029,2594&gt;, v=&lt;-8,157,7&gt;, a=&lt;9,-3,-8&gt;
…</code></pre>
<p>Part one asks us the following, slightly handwavy, question.</p>
<blockquote>
<p>Which particle will stay closest to position &lt;0,0,0&gt; in the long term?</p>
</blockquote>
<p>Before thinking about this too much, let’s first parse the input.</p>
<pre class="bqn"><code>P←{p‿r←3(↑⋈↓)𝕩 ⋄ v‿a←3(↑⋈↓)r ⋄ ⟨p,v,a⟩}
inp←{P•BQN'⟨'∾𝕩∾'⟩'}∘(∊⟜(&quot;-,&quot;∾'0'+↕10)⊸/)¨•FLines&quot;../inputs/day20.txt&quot;</code></pre>
<p>Very dirty!
We first filter every line, only keeping the important bits for processing,
and then parse the whole thing as a list.</p>
<pre class="bqn"><code>    (∊⟜(&quot;-,&quot;∾'0'+↕10)⊸/) &quot;p=&lt;-3770,-455,1749&gt;, v=&lt;-4,-77,53&gt;, a=&lt;11,7,-9&gt;&quot;
&quot;-3770,-455,1749,-4,-77,53,11,7,-9&quot;</code></pre>
<p>Now, “in the long term” is a bit of a flexible formulation,
but what the question essentially wants us to recognise is that a higher acceleration always wins<!--
-->—doesn’t matter how fast the other particle started.
In particular, if we want to find out which particle will stay closest to the origin,
we need to find the one that has the smallest acceleration.
I will discuss two ways of doing this, each slightly flawed in its own way.</p>
<p>First, my input has the neat property that there is a unique particle with a smallest total acceleration.
In such cases, part one just amounts to picking that.</p>
<pre class="bqn"><code>⊑∘(⊢⊐⌊´) {+´|¯1⊑𝕩}¨ inp # ⇒ 376</code></pre>
<p><code>{+´|¯1⊑𝕩}</code> computes the maximal acceleration,
and <code>(⊢⊐⌊´)</code> is a neat train to pick the index of the minimal element.</p>
<p>In the absence of a unique particle with smallest total acceleration,
things get a bit more complicated.
One would have to include velocity and direction of travel into the equation,
which is much harder than to just simulate everything “for a bit”.</p>
<pre class="bqn"><code>U←{p‿v‿a: ⟨p+v+a, v+a, a⟩}
⊑(⊢⊐⌊´)(+´|)∘⊑∘(U⍟1000)¨inp # ⇒ 376</code></pre>
<p>Get the absolute value of each position after 1000 steps,
and then compute the minimum as before.</p>
<hr />
<p>Part two wants us to take care of “colliding” particles—those whose positions match up at any point in time.
Since I’m not going to solve quadratic equations, let’s also just simulate this one “long enough”.</p>
<pre class="bqn"><code>≠{(∊∧1⌽∊)∘(⊑¨)⊸/ ∨U¨𝕩}⍟1000 inp # ⇒ 574</code></pre>
<p>We advance every particle in the input by one,
sort the resulting list by position,
and kick out all particles that are equal to any adjacent ones.</p>
<details>
<summary>
The <code>∊∧1⌽∊</code> part is probably reasonably obfuscated, so let’s go through it.
</summary>
<p>First, one could write that piece of code in a slightly different—perhaps more understandable—way:<a href="#fn41" class="footnote-ref" id="fnref41" role="doc-noteref"><sup>41</sup></a></p>
<pre class="bqn"><code>(≢˘⟜«)∧(≢˘⟜»)</code></pre>
<p>This very symmetrical looking expression checks which elements in a given vector
are unequal to their successor and predecessor:</p>
<pre class="bqn"><code>    (≢˘⟜«) ⟨1,1,3,⟨4⟩,⟨4⟩⟩
⟨ 0 1 1 0 1 ⟩
    (≢˘⟜») ⟨1,1,3,⟨4⟩,⟨4⟩⟩
⟨ 1 0 1 1 0 ⟩
    ((≢˘⟜«)∧(≢˘⟜»)) ⟨1,1,3,⟨4⟩,⟨4⟩⟩
⟨ 0 0 1 0 0 ⟩</code></pre>
<p>The first thing to notice is that, in a sorted list,
a number not being equal to its predecessor just means that it’s the first occurrence of that number in the vector:</p>
<pre class="bqn"><code>    (≢˘⟜») ⟨1,1,3,4,4,4,5,6,6⟩
⟨ 1 0 1 1 0 0 1 1 0 ⟩
    ∊ ⟨1,1,3,4,4,4,5,6,6⟩
⟨ 1 0 1 1 0 0 1 1 0 ⟩
    ∊ ⟨1,1,3,4,4,5,6,6⟩
⟨ 1 0 1 1 0 1 1 0 ⟩
   (≢˘⟜») ⟨1,1,3,4,4,5,6,6⟩
⟨ 1 0 1 1 0 1 1 0 ⟩</code></pre>
<p>The more interesting questions is how to capture that a number is not equal to its successor.
For that, one can still use <em>mark firsts</em> and then simply <em>rotate</em> the vector by one to the left.
This will instead give you the last occurrence of every element in the vector.</p>
<pre class="bqn"><code>    (≢˘⟜«) ⟨1,1,3,4,4,4,5,6,6,7⟩
⟨ 0 1 1 0 0 1 1 0 1 1 ⟩
   1⌽∊ ⟨1,1,3,4,4,4,5,6,6,7⟩
⟨ 0 1 1 0 0 1 1 0 1 1 ⟩</code></pre>
<p>Thus, to get the unique elements of our sorted list, <code>∊∧1⌽∊</code> will do!<a href="#fn42" class="footnote-ref" id="fnref42" role="doc-noteref"><sup>42</sup></a></p>
</details>
<h2 id="days-2125">Days 21–25</h2>
<h3 id="day-21"><a href="https://github.com/slotThe/advent/blob/master/aoc2017/bqn/day21.bqn">Day 21</a></h3>
<p>In today’s very array-oriented problem,
we have to help a program create art by repeatedly enhancing an image.
The following is our starting pattern:</p>
<pre><code>.#.
..#
###</code></pre>
<p>The task says to apply the following two simple rules over and over again.</p>
<blockquote>
<ul>
<li>If the size [of the array] is evenly divisible by 2, break the pixels up into 2x2 squares, and convert each 2x2 square into a 3x3 square by following the corresponding enhancement rule.</li>
<li>Otherwise, the size is evenly divisible by 3; break the pixels up into 3x3 squares, and convert each 3x3 square into a 4x4 square by following the corresponding enhancement rule.</li>
</ul>
</blockquote>
<p>An “enhancement rule” look like <code>../.# =&gt; ##./#../...</code>, where <code>/</code> signals a line break.
An important part of the problem is that not only does <code>../.#</code> match this pattern, but also any rotation or flip of it,
which means the following configurations are all matches:</p>
<pre><code>..     .#     #.     ..
.#     ..     ..     #.</code></pre>
<p>Note that regardless of how the match is formed, the output pattern is never rotated or flipped.</p>
<p>Beginning with the above starting configuration and applying enhancement rule <code>.#./..#/### =&gt; #..#/..../..../#..#</code>,
we end up with</p>
<pre><code>#..#
....
....
#..#</code></pre>
<p>Applying rule <code>../.# =&gt; ##./#../...</code> to each of the four 2×2 squares, we get</p>
<pre><code>##.##.
#..#..
......
##.##.
#..#..
......</code></pre>
<p>and so on.</p>
<p>Part one asks us to simulate the whole thing five times,
and determine how many <code>#</code>’s are in the resulting grid.
Let’s start by parsing a single enhancement line:</p>
<pre class="bqn"><code>⟨Split⟩ ← •Import &quot;../../util/bqn_util/util.bqn&quot;
P ← { # Parse a line into from‿to pairs
  f‿t ← '='Split𝕩 ⋄ f ¯1⊸↓↩ ⋄ t 2⊸↓↩
  &gt;∘(&quot;.#&quot;⊸⊐¨)∘('/'⊸Split)¨ f‿t
}</code></pre>
<p>This isn’t too surprising; we first essentially split on <code>" =&gt; "</code> in an awkward way,<a href="#fn43" class="footnote-ref" id="fnref43" role="doc-noteref"><sup>43</sup></a>
split every individual array on <code>/</code>,
change the dots and hashes to zeros and ones,
and <em>merge</em> each of the vectors into a proper array.</p>
<pre class="bqn"><code>    P &quot;.../.../... =&gt; ...#/#.##/.##./#..#&quot;
┌─
· ┌─        ┌─
  ╵ 0 0 0   ╵ 0 0 0 1
    0 0 0     1 0 1 1
    0 0 0     0 1 1 0
          ┘   1 0 0 1
                      ┘
                        ┘</code></pre>
<p>Since all rotations and flips are valid for the pattern match,
we might as well immediately “expand” each of the substitutions into all eight possibilities.
This essentially boils down to applying every transformation of the
<a href="https://en.wikipedia.org/wiki/Dihedral_group#Matrix_representation">dihedral group</a>
<span class="math inline">D_4</span> of the square to our array.
One way to do this is to compute all of the rotations,
and all of the rotations with reversed rows.
We already saw that we can use <code>(⍉⌽)⍟(↕4)</code> to obtain all rotations on <a href="#day-19">day 19</a>,
and reversing the rows is easy enough to do with <code>⌽˘</code>:</p>
<pre class="bqn"><code>    ⟨⌽˘,⊢⟩{𝕎𝕩}⌜(⍉⌽)⍟(↕4) &gt;⟨⟨1,2⟩,⟨3,4⟩⟩
┌─
╵ ┌─      ┌─      ┌─      ┌─
  ╵ 2 1   ╵ 1 3   ╵ 3 4   ╵ 4 2
    4 3     2 4     1 2     3 1
        ┘       ┘       ┘       ┘
  ┌─      ┌─      ┌─      ┌─
  ╵ 1 2   ╵ 3 1   ╵ 4 3   ╵ 2 4
    3 4     4 2     2 1     1 3
        ┘       ┘       ┘       ┘
                                  ┘</code></pre>
<p>We now just have to do some plumbing to associate every one of the resulting eight input patterns to the same output.</p>
<pre class="bqn"><code>E ← { 𝕊 f‿t: (⥊⟨⌽˘,⊢⟩{𝕎𝕩}⌜(⍉⌽)⍟(↕4)f)⋈¨&lt;t }</code></pre>
<details>
<summary>
For example (line wrapped for readability):
</summary>
<pre class="bqn"><code>┌─
· ┌─
  · ┌─      ┌─
    ╵ 1 0   ╵ 0 0 1
      0 1     1 0 0
          ┘   1 1 0
                    ┘
                      ┘
  ┌─
  · ┌─      ┌─
    ╵ 1 0   ╵ 0 0 1
      0 1     1 0 0
          ┘   1 1 0
                    ┘
                      ┘
  ┌─
  · ┌─      ┌─
    ╵ 0 1   ╵ 0 0 1
      1 0     1 0 0
          ┘   1 1 0
                    ┘
                      ┘
  ┌─
  · ┌─      ┌─
    ╵ 0 1   ╵ 0 0 1
      1 0     1 0 0
          ┘   1 1 0
                    ┘
                      ┘
  ┌─
  · ┌─      ┌─
    ╵ 1 0   ╵ 0 0 1
      0 1     1 0 0
          ┘   1 1 0
                    ┘
                      ┘
  ┌─
  · ┌─      ┌─
    ╵ 0 1   ╵ 0 0 1
      1 0     1 0 0
          ┘   1 1 0
                    ┘
                      ┘
  ┌─
  · ┌─      ┌─
    ╵ 1 0   ╵ 0 0 1
      0 1     1 0 0
          ┘   1 1 0
                    ┘
                      ┘
                        ┘</code></pre>
</details>
<p>Now, as you can imagine by either thinking about or looking at the output,
there are usually a lot of duplicates in this list.
We can fix this by using
<em>deduplicate</em> (<a href="https://mlochbaum.github.io/BQN/doc/selfcmp.html#deduplicate"><code>⍷</code></a>)
to only keep the first occurrence of every major cell.</p>
<pre class="bqn"><code>E ← { 𝕊 f‿t: (⍷⥊⟨⌽˘,⊢⟩{𝕎𝕩}⌜(⍉⌽)⍟(↕4)f)⋈¨&lt;t }
inp ← ∾ E∘P¨ •FLines&quot;../inputs/day21.txt&quot;</code></pre>
<p>Next up is enhancing the grid as described.
Let’s do this generically:
given an array, a target <code>k</code> (for <code>k×k</code> subarrays),
and a list of <code>k×k → (k+1)×(k+1)</code> substitutions,
perform one enhancement step.<a href="#fn44" class="footnote-ref" id="fnref44" role="doc-noteref"><sup>44</sup></a></p>
<pre class="bqn"><code>Widen ← { k‿substs 𝕊 grid:
  ∾{ 𝕊sg: # A k×k submatrix of `grid'
    1⊑⊑ (sg≡⊑)¨⊸/substs
  }¨ (2⥊&lt;⌊k÷˜↕≠grid)⊔grid
}</code></pre>
<p><em>Group</em> is used to partition the grid into the necessary <code>k×k</code> subarrays:
<code>⌊k÷˜↕≠grid</code> creates a vector like <code>⟨0,…,0, 1,…,1 …, n,…,n⟩</code>,
where <code>n = ((≠grid)÷k)-1</code> and each number appears exactly <code>k</code> times:</p>
<pre class="bqn"><code>    (⌊3÷˜↕21)
⟨ 0 0 0 1 1 1 2 2 2 3 3 3 4 4 4 5 5 5 6 6 6 ⟩
    (⌊7÷˜↕21)
⟨ 0 0 0 0 0 0 0 1 1 1 1 1 1 1 2 2 2 2 2 2 2 ⟩</code></pre>
<p>We can then use the fact that the left argument to <em>group</em> can be a nested vector,
where each element corresponds to one axis of the right argument;
see <a href="https://mlochbaum.github.io/BQN/doc/group.html#multidimensional-grouping">multidimensional grouping</a>.
For the simple partition that we want, doubling the vector suffices.</p>
<pre class="bqn"><code>    2⥊&lt;⌊3÷˜↕6
⟨ ⟨ 0 0 0 1 1 1 ⟩ ⟨ 0 0 0 1 1 1 ⟩ ⟩
    (2⥊&lt;⌊3÷˜↕6)⊔(6‿6⥊↕36)
┌─
╵ ┌─           ┌─
  ╵  0  1  2   ╵  3  4  5
     6  7  8      9 10 11
    12 13 14     15 16 17
             ┘            ┘
  ┌─           ┌─
  ╵ 18 19 20   ╵ 21 22 23
    24 25 26     27 28 29
    30 31 32     33 34 35
             ┘            ┘
                            ┘</code></pre>
<p>The rest of the code is kind of straightforward;
in <code>{𝕊sg: 1⊑⊑ (sg≡⊑)¨⊸/substs}</code> we look for the substitution that fits the current subset of the grid<!--
-->—we are guaranteed by the question that we have exactly one such match—<!--
-->and take the enhancement (<code>1⊑</code>).
This already has the right shape in that the resulting array consists of <code>(k+1)×(k+1)</code> blocks in the right order,
so we just need to <em>join</em> everything together.</p>
<pre class="bqn"><code>    t ← ⟨2, {2=≠⊑𝕩}¨⊸/inp⟩ {
      k‿ss𝕊g: {𝕊sg: 1⊑⊑ (sg≡⊑)¨⊸/ss}¨ (2⥊&lt;⌊k÷˜↕≠g)⊔g
    } [[1,1,0,1],[0,1,1,0],[1,1,0,1],[0,0,0,1]]
┌─
╵ ┌─        ┌─
  ╵ 1 1 0   ╵ 0 0 1
    0 0 1     1 0 0
    1 0 1     1 1 0
          ┘         ┘
  ┌─        ┌─
  ╵ 0 1 0   ╵ 0 1 0
    1 1 0     1 1 0
    1 1 1     1 1 1
          ┘         ┘
                      ┘
    ∾t
┌─
╵ 1 1 0 0 0 1
  0 0 1 1 0 0
  1 0 1 1 1 0
  0 1 0 0 1 0
  1 1 0 1 1 0
  1 1 1 1 1 1
              ┘</code></pre>
<p>When plugging everything together we just need to make sure to pass the right substitutions to <code>Widen</code>
(and to have the case for <code>2</code> come before that for <code>3</code>).</p>
<pre class="bqn"><code>Sim ← { # Only take valid substitutions.
  0=2|≠𝕩? ⟨2, {2=≠⊑𝕩}¨⊸/inp⟩ Widen 𝕩;
  0=3|≠𝕩? ⟨3, {3=≠⊑𝕩}¨⊸/inp⟩ Widen 𝕩
}

start ← &gt;&quot;.#&quot;⊸⊐¨⟨&quot;.#.&quot;, &quot;..#&quot;, &quot;###&quot;⟩
+´⥊ Sim⍟5  start # ⇒ 155</code></pre>
<hr />
<p>Part two asks us to instead simulate 18 enhancement steps.</p>
<pre class="bqn"><code>+´⥊ Sim⍟18 start # ⇒ 2449665</code></pre>
<h3 id="day-22"><a href="https://github.com/slotThe/advent/blob/master/aoc2017/bqn/day22.bqn">Day 22</a></h3>
<p>Today we are tasked with helping a computer cluster fend off a virus.
Our puzzle input is a populated part of an infinite grid:</p>
<pre><code>..#
#..
...</code></pre>
<p>The virus starts square in the middle, looking up.</p>
<p>Part one has two types of cells, clean (<code>.</code>) and infected (<code>#</code>),
and wants us to count the number of cells that have been infected (at any point) after 10’000 steps.
A single step in the simulation proceeds according to the following rules:</p>
<blockquote>
<ul>
<li>If the current node is infected, it turns to its right. Otherwise, it turns to its left. (Turning is done in-place; the current node does not change.)</li>
<li>If the current node is clean, it becomes infected. Otherwise, it becomes cleaned. (This is done after the node is considered for the purposes of changing direction.)</li>
<li>The virus carrier moves forward one node in the direction it is facing</li>
</ul>
</blockquote>
<p>We will use a hash map to simulate the infinite grid.
Parsing is easy this time:</p>
<pre class="bqn"><code>inp ← &gt;•FLines &quot;../inputs/day22.txt&quot;
Start ← {⟨(⥊↕≢inp)•HashMap𝕩, 0, ⌊(≢inp)÷2, ¯1‿0⟩}</code></pre>
<p>Note the unusual coordinates:
since I don’t want to change the “direction” in the array itself,
up, right, down, and left are <code>¯1‿0</code>, <code>0‿1</code>, <code>1‿0</code>, and <code>0‿¯1</code>, respectively.
For the simulation, we also need the ability to change direction.
The idea is to get the index of <code>𝕩</code> in a list of directions,
add <code>𝕨</code> mod 4 (to turn <code>𝕨</code> steps to the right),
and <em>pick</em> the element at that index.</p>
<pre class="bqn"><code>Turn ← { # Given direction 𝕩, turn 𝕨 steps to the right.
  ts ← ⟨¯1‿0, 0‿1, 1‿0, 0‿¯1⟩
  (⊑4|𝕨+ts⊐&lt;𝕩)⊑ts
}</code></pre>
<p>The simulation now just does what the rules say.</p>
<pre class="bqn"><code>Sim ← { 𝕊g‿i‿p‿d:     # grid, index, position, direction
  pv ← 0 g.Get p      # Don't keep track of clean (= 0) cells.
  nd ← ({𝕊0:¯1;𝕩}pv) Turn d
  p g.Set ¬pv         # New value for p.
  ⟨g, i+0=pv, p+nd, nd⟩
}

1⊑ Sim⍟10_000 Start(⥊&quot;.#&quot;⊐inp) # ⇒ 5460</code></pre>
<p>Since we want to turn left when we see a clean cell,
we have to have a substitution like <code>0→¯1</code>,
which is what <code>{𝕊0:¯1;𝕩}</code> accomplishes.
We again don’t keep track of additional clean cells by supplying a default argument to <code>Get</code>, in case <code>p</code> is not found.</p>
<hr />
<p>Part two wants us to simulate the same thing, but instead of two we now have four states to keep track of:
clean, weakened, infected, and flagged—in that order.
We also have to simulate everything for 10’000’000 instead of only 10’000 steps,
and the rules are a bit different:</p>
<blockquote>
<ul>
<li>Decide which way to turn based on the current node:
<ul>
<li>If it is clean, it turns left.</li>
<li>If it is weakened, it does not turn, and will continue moving in the same direction.</li>
<li>If it is infected, it turns right.</li>
<li>If it is flagged, it reverses direction, and will go back the way it came.</li>
</ul></li>
<li>Modify the state of the current node, as described above [clean → weakened → infected → flagged → clean …].</li>
<li>The virus carrier moves forward one node in the direction it is facing.</li>
</ul>
</blockquote>
<p>After some staring one figures out that while the infected state has moved from <code>1</code> to <code>2</code>, the whole thing just switches out numbers mod 2 for numbers mod 4.
Looking at our <code>Sim</code> function,
we only need to change a few things to make it more generic:</p>
<pre class="bqn"><code># mod‿infectedTarget‿TurnOffset 𝕊 grid‿infectCount‿position‿direction
Sim ← { m‿t‿TO 𝕊 g‿i‿p‿d:
  pv ← 0 g.Get p      # Don't keep track of clean (= 0) cells.
  nd ← (TO pv) Turn d
  p g.Set m|pv+1      # New value for p.
  ⟨g, i+t=pv, p+nd, nd⟩
}

# Part one still works:
1⊑ ⟨2, 0, {𝕊0:¯1;𝕩}⟩ Sim⍟10_000 Start(⥊&quot;.#&quot;⊐inp) # ⇒ 5460</code></pre>
<p>Some bits of additional state, like the modulus used or which number we want to count in the end, are needed.
Other than that, though, it’s the same function as before.</p>
<pre class="bqn"><code>1⊑ ⟨4, 1, -⟜1⟩ Sim⍟10_000_000 Start(⥊&quot;. #&quot;⊐inp) # ⇒ 2511702</code></pre>
<h3 id="day-23"><a href="https://github.com/slotThe/advent/blob/master/aoc2017/bqn/day23.bqn">Day 23</a></h3>
<p>Today we have to help an experimental coprocessor to not halt and catch fire.
This again boils down to simulating some small assembly language—or so one would think.
The instruction set is similar to that of <a href="#day-18">day 18</a>:</p>
<blockquote>
<ul>
<li><code>set X Y</code> sets register <code>X</code> to the value of <code>nY</code>.</li>
<li><code>sub X Y</code> decreases register <code>X</code> by the value of <code>Y</code>.</li>
<li><code>mul X Y</code> sets register <code>X</code> to the result of multiplying the value contained in register <code>X</code> by the value of <code>Y</code>.</li>
<li><code>jnz X Y</code> jumps with an offset of the value of <code>Y</code>, but only if the value of <code>X</code> is not zero. (An offset of 2 skips the next instruction, an offset of -1 jumps to the previous instruction, and so on.)</li>
</ul>
<p>Only the instructions listed above are used. The eight registers here, named <code>a</code> through <code>h</code>, all start at 0.</p>
</blockquote>
<p>Part one asks us how many times the <code>mul</code> instruction is invoked.
My solution is this one:</p>
<pre class="bqn"><code>63×63 # ⇒ 3969</code></pre>
<p>Oh yeah.</p>
<hr />
<p>So what’s that all about?
Well, originally the code looked very different<!--
-->—almost an exact copy-paste of what we did for day 18—<!--
-->but part two reveals what the task actually wants us to do.</p>
<blockquote>
<p>You flip the switch, which makes register <code>a</code> now start at <code>1</code> when the program is executed.</p>
<p>Immediately, the coprocessor begins to overheat. Whoever wrote this program obviously didn’t choose a very efficient implementation. You’ll need to optimize the program if it has any hope of completing before Santa needs that printer working.
The coprocessor’s ultimate goal is to determine the final value left in register <code>h</code> once the program completes. Technically, if it had that… it wouldn’t even need to run the program.</p>
</blockquote>
<p>This is a very big nudge into the direction of “go and read the assembly”.
There are, I suppose, several ways to go about finding the solution.
The sane one might be to translate the assembly into a more human readable form,<a href="#fn45" class="footnote-ref" id="fnref45" role="doc-noteref"><sup>45</sup></a>
and then try to see patterns in this simpler representation (remember notation as a tool for thought?).
Instead, I employed a trusted method that I learned from studying maths for too long:
stare at it until it makes sense.</p>
<details>
<summary>
Here’s the input if you want to give it a try.
</summary>
<pre><code>set b 65
set c b
jnz a 2
jnz 1 5
mul b 100
sub b -100000
set c b
sub c -17000
set f 1
set d 2
set e 2
set g d
mul g e
sub g b
jnz g 2
set f 0
sub e -1
set g e
sub g b
jnz g -8
sub d -1
set g d
sub g b
jnz g -13
jnz f 2
sub h -1
set g b
sub g c
jnz g 2
jnz 1 3
sub b -17
jnz 1 -23</code></pre>
</details>
<p><a href="#fn46" class="footnote-ref" id="fnref46" role="doc-noteref"><sup>46</sup></a>
After quite a lot of staring, one figures out that <code>h</code> will fill up with all non-primes between <code>106500</code> and <code>123500</code> in steps of <code>17</code>.</p>
<pre class="bqn"><code>+´{1≠+´0=𝕩|˜↕⌈√𝕩}¨+⟜17⍟(↕1+17÷˜123500-106500) 106500 # ⇒ 917</code></pre>
<h3 id="day-24"><a href="https://github.com/slotThe/advent/blob/master/aoc2017/bqn/day24.bqn">Day 24</a></h3>
<p>The penultimate day wants us to build a bridge to get across a
<a href="https://knowyourmeme.com/memes/bottomless-pit-supervisor">bottomless pit</a>.
Our puzzle input comprises components that we have to connect to each other:</p>
<pre><code>0/2
2/2
2/3
3/4
3/5
0/1
10/1
9/10</code></pre>
<p>We start at <code>0</code>; the “ports” of connected components have to match up, but only up to rotation:
<code>0/2—2/3—4/3</code> is a valid bridge.
The only restriction we have in that regard is that a port can only be used once,
so <code>0/2—2/3—2/4</code> is not valid.
Part one asks us for the strongest bridge we can make of our input (without replacement),
where the strength is just all ports added together.
Parsing is trivial:</p>
<pre class="bqn"><code>⟨Split,_Fix⟩ ← •Import&quot;../../util/bqn_util/util.bqn&quot;
inp ← •ParseFloat¨∘('/'⊸Split)¨ •FLines&quot;../inputs/day24.txt&quot;</code></pre>
<p>This creates a nested vector like <code>⟨⟨0 2⟩ ⟨2 2⟩ ⟨2 3⟩ …⟩</code>.
For selecting a part, we want to match a number against that list and pick all ports where at least one port matches that number:</p>
<pre class="bqn"><code>    Sel ← (&gt;∊¨)/⊢
(function block)
    0 Sel inp      # Starting states
⟨ ⟨ 50 0 ⟩ ⟨ 28 0 ⟩ ⟨ 0 33 ⟩ ⟩</code></pre>
<p>For each of these starting states, we can formulate a naturally recursive algorithm:
given a target value <code>t</code> and a list <code>xs</code> of components, do the following:</p>
<ul>
<li>if no components match <code>t</code>, return <code>0</code>;</li>
<li>otherwise, recurse on each match
(using the value that <code>t</code> didn’t match as the new target),
pick the maximum over all branches,
and add the value of the current match to it.</li>
</ul>
<pre class="bqn"><code>SM ← ¬∘∊/⊣ # Set minus
Sim ← { t Rec xs:
  {(+´𝕩)+ 0⌈´ (𝕩⊑˜t=⊑𝕩)Rec xs SM⟨𝕩⟩}¨ t Sel xs
}</code></pre>
<p>We use our old friend <code>¬∘∊/⊣</code> to take care of the “without replacement” part of the whole thing,
<code>𝕩⊑˜t=⊑𝕩</code> picks the number that did not match <code>t</code> for the recursion, and
the maximum over all branches has a default value of <code>0</code>, which is supplied in case the list is empty.</p>
<p>To complete part one we just have to pick the maximum over all starting values:</p>
<pre class="bqn"><code>⌈´∾{𝕊0‿b: b+ b Sim inp SM⟨0‿b,b‿0⟩}∘∧¨0 Sel inp # ⇒ 1656</code></pre>
<p>We sort the starting values for easier pattern matching,
and then just have to take some extra care of actually removing it from the list.</p>
<hr />
<p>Part two wants us to get the strongest bridge only amongst those that are longest overall.
For example, given the bridges</p>
<ul>
<li><code>0/1—10/1—9/10</code></li>
<li><code>0/2</code></li>
<li><code>0/2—2/3—3/5</code></li>
<li><code>0/2—2/2—2/3—3/4</code></li>
<li><code>0/2—2/2—2/3—3/5</code></li>
</ul>
<p>for part one <code>0/1—10/1—9/10</code> would win with a score of <code>31</code>,
and for part two <code>0/2—2/2—2/3—3/5</code> would win with a score of <code>19</code>.
Conceptually, this is sort of the same code, only with more bookkeeping.</p>
<pre class="bqn"><code>Sim2 ← { i‿t Rec xs: # Step i, target value t, list xs
  {i‿(+´𝕩)+ ⊑∨ (&lt;0‿0)∾ ⟨i+1, 𝕩⊑˜t=⊑𝕩⟩ Rec xs SM ⟨𝕩⟩}¨t Sel xs
}
1⊑⌈´∾{𝕊0‿b: 0‿b⊸+¨ 1‿b Sim2 inp SM ⟨0‿b,b‿0⟩}∘∧¨0 Sel inp # ⇒ 1642</code></pre>
<p>Instead of just the current strength, we also keep track of the depth.
The maximum thus has to prefer the first index of that tuple to the second one.
Thankfully, the default
<em>sort down</em> (<a href="https://mlochbaum.github.io/BQN/doc/order.html#sort"><code>∨</code></a>)
already does this,
which gives us our answer for part two.</p>
<p>If we really wanted to, we could now combine these two solutions,
and even get rid of the <code>SM</code> and <code>Sel</code> functions, because why have human readable names if you could use funny symbols?</p>
<pre class="bqn"><code>_sol ← { Mx _𝕣:               # Max function Mx
  ⌈´∾{ 𝕊0‿b:
    b+ 1⊑¨ 1‿b { i‿t Rec xs:  # Step i, Target value t, list xs
      {⟨i,+´𝕩⟩+ Mx ⟨i+1, 𝕩⊑˜t=⊑𝕩⟩Rec xs(¬∘∊/⊣)⟨𝕩⟩}¨t((&gt;∊¨)/⊢)xs
    } inp(¬∘∊/⊣)⟨0‿b,b‿0⟩
  }∘∧¨0((&gt;∊¨)/⊢)inp
}

{0⌈´1⊑¨𝕩}    _sol # ⇒ 1656
{⊑∨(&lt;0‿0)∾𝕩} _sol # ⇒ 1642</code></pre>
<h3 id="day-25"><a href="https://github.com/slotThe/advent/blob/master/aoc2017/bqn/day25.bqn">Day 25</a></h3>
<p>Appropriately, for the final day we have to simulate a Turing machine!
Actually, it starts with a parsing problem:
the transition function of the Turing machine is given in the following format:</p>
<pre><code>In state A:
  If the current value is 0:
    - Write the value 1.
    - Move one slot to the right.
    - Continue with state B.
  If the current value is 1:
    - Write the value 0.
    - Move one slot to the left.
    - Continue with state C.</code></pre>
<p>Some additional information,
like the starting state and the number of iterations we should simulate the machine for,
is also given.
Frankly, on the last day I have no intention of doing a bunch of parsing in a language which is, in my opinion, not at all suited for that kind of task.
Since the transition function is small enough, however, we can do what we did two days ago and just… inspect the input.</p>
<pre class="bqn"><code>tape←⟨⟩•HashMap⟨⟩
G←0⊸tape.Get   # Get
W←tape.Set     # Write
A←B←C←D←E←F←⊢  # Forward declarations!
A↩{ix𝕊0: ix W 1 ⋄ ⟨ix+1,B⟩; ix𝕊1: ix W 0 ⋄ ⟨ix-1,C⟩}
B↩{ix𝕊0: ix W 1 ⋄ ⟨ix-1,A⟩; ix𝕊1: ix W 1 ⋄ ⟨ix+1,D⟩}
C↩{ix𝕊0: ix W 1 ⋄ ⟨ix+1,A⟩; ix𝕊1: ix W 0 ⋄ ⟨ix-1,E⟩}
D↩{ix𝕊0: ix W 1 ⋄ ⟨ix+1,A⟩; ix𝕊1: ix W 0 ⋄ ⟨ix+1,B⟩}
E↩{ix𝕊0: ix W 1 ⋄ ⟨ix-1,F⟩; ix𝕊1: ix W 1 ⋄ ⟨ix-1,C⟩}
F↩{ix𝕊0: ix W 1 ⋄ ⟨ix+1,D⟩; ix𝕊1: ix W 1 ⋄ ⟨ix+1,A⟩}</code></pre>
<p>The tape is just a hash map that only keeps track of the non-zero entries.
Each of the states is a separate function that takes the current index and the value at that index,
and gives back the next index and state.
To solve part one, we just have to simulate this for the appropriate amount of time and then count the number of ones still on the tape.</p>
<pre class="bqn"><code>{𝕊i‿Sim: i Sim G i}⍟12_919_244 0‿A
+´tape.Values@ # ⇒ 4287</code></pre>
<p>There is probably a more array-oriented solution to this:
the transition function of this Turing machine is something like
<span class="math display">
  \delta\colon Q \times \Gamma \to Q \times \Gamma \times \{ \mathrm{L}, \mathrm{R} \},
</span>
where <span class="math inline">Q \defeq \{\, \mathrm{A,B,C,D,E,F} \,\}</span> and <span class="math inline">\Gamma \defeq \{\, 0, 1 \,\}</span>.
In particular,
for any of the 12 possible inputs, one obtains a single 3-tuple as an output.
This means that one should be able to use an array of shape <code>⟨6, 2⟩</code> to solve this problem,
where every element would be a vector of length <code>3</code>, indicating the new state, tape cell, and direction.
Alternatively, I suppose, an array of shape <code>⟨6, 2, 3⟩</code> also works
(and <a href="https://saltysylvi.github.io/blog/flat1.html">would be flat</a>).
I haven’t explored this further, but it would probably be fun to implement—I will leave it as an exercise for the eager reader.</p>
<hr />
<p>As every year, part two is a freebie if one has completed all of the puzzles up until now,
as it asks for the 49 stars collected so far to reboot the printer.
Nice.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>If you’re impatient, I think I had the most fun on days
<a href="https://tony-zorman.com/posts/aoc-in-bqn.html#day-8">8</a>,
<a href="https://tony-zorman.com/posts/aoc-in-bqn.html#day-14">14</a>,
<a href="https://tony-zorman.com/posts/aoc-in-bqn.html#day-17">17</a>, and
<a href="https://tony-zorman.com/posts/aoc-in-bqn.html#day-21">21</a>.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>I flirted with APL for about a week before picking up BQN,
but the dialect that everyone seems to use is Dyalog APL,
and I didn’t have the guts to commit to a proprietary language implementation.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>This sentence is also true for the axiom of choice;
jokes on you, constructivists!<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>Depending on your font, <code>𝕨</code> and <code>𝕩</code> might not look so different from <code>w</code> and <code>x</code>:
the former really are the blackboard bold variants of the respective letters.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>No relation.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6"><p>Perhaps it is unwise to postpone actually talking about arrays in an array language,
but I feel like if this gets even longer I will lose the one reader who gets this far.<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn7"><p>Beyond the headline that is;
the fact that notation influences one’s thoughts seems obviously true to me.
Please indulge me for a second (or don’t and go back to the main text) and let me derail this post about BQN with maths.
There is an abundance of different notations one might use to talk about Hopf-ish objects in monoidal categories.
Don’t worry about actually understanding the maths, btw, just look at the notation.
Suppose we have maps
<span class="math inline">\mu \colon H \otimes H \to H</span>, <span class="math inline">\Delta\colon H \to H \otimes H</span>, <span class="math inline">S\colon  H\to H</span>, and <span class="math inline">\varepsilon \colon H \to \Bbbk</span>, for <span class="math inline">H \in \mathsf{Vect}_{\Bbbk}</span>.
Assume that this map satisfies
<span class="math display">
       \mu \circ (S \otimes \mathrm{id}) \circ \Delta
       = \eta \circ \varepsilon
       = \mu \circ (\mathrm{id} \otimes S) \circ \Delta.
   </span>
First of all, notice how there are already lots of notational decisions that could have been written up differently!
One might omit all of the <span class="math inline">\circ</span>’s, and just write <span class="math inline">\mu(S \otimes \mathrm{id})\Delta</span>,
or highlight the symmetry between two of the maps and write <span class="math inline">\nabla</span> instead of <span class="math inline">\mu</span>.</p>
<p>Even more extreme, however, are the following alternative ways of writing the same equation.
One might also express it</p>
<ul>
<li>in <em>Sweedler notation</em> by
<span class="math display">
  S(a_{(1)})a_{(2)} = \varepsilon(a) 1 =  a_{(1)}S(a_{(2)});
</span></li>
<li>with <em>commutative diagrams</em>:
<img class="pure-img" src="../images/bqn-aoc/commutative-diagram.png" alt="A commutative diagram for the above equation.">
and</li>
<li>with <em>string diagrams</em>:
<img class="pure-img" src="../images/bqn-aoc/string-diagram.png" alt="A string diagram for the above equation."></li>
</ul>
<p>Needless to say, these all look <em>vastly</em> different,
each—in my opinion—enabling a certain mode of thought better than the others.
For example, I happen to like the string diagrammatic version the best,
and try to use it as often as possible.
However, try doing that when you have to juggle 10+ strings!
At that point, Sweedler notation becomes extremely concise and much easier to reason about.</p>
<p>Let’s get back to that array programming thing, though.<a href="#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn8"><p>This is actually also true for the respective user-defined analogues,
but let’s talk about <a href="https://mlochbaum.github.io/BQN/doc/expression.html#syntactic-role">that</a> later.<a href="#fnref8" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn9"><p>{-} The grouping of days is mostly done so the TOC doesn’t completely explode,
while retaining some sort of directional aid.
In either case, it’s probably fastest to just <code>C-f</code> for the respective day.<a href="#fnref9" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn10"><p>The <code>•</code> is not a separate function, but really part of the name <code>•FLines</code>.
All names starting with that symbol are [system values]—<!--
   -->things provided by the BQN interpreter that are not the builtin primitives.
We will see other important system values, like <code>•HashMap</code> or <code>•Type</code>, a bit later.<a href="#fnref10" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn11"><p>The “reside in” is crucial.
There are many definitions of affine space, here is a simple one:
an <em>affine space</em> comprises a set <span class="math inline">A</span> and a vector space <span class="math inline">V</span>,
such that the underlying abelian group of <span class="math inline">V</span> acts freely and transitively on <span class="math inline">A</span>.</p>
<p>What I actually want to say now is that <span class="math inline">A</span> the set of Unicode codepoints,
and <span class="math inline">V</span> is the field of “numbers”.
This, however, falls quite flat almost immediately.
Even leaving aside all the “floating points are evil” rhetoric,
we can only reasonably act on a character with an integer.
Now, ℤ is just a ring, not a field, and indeed has no hope of being a vector space over any field.
Rather, one should talk about characters forming an affine <em>module</em> over ℤ,
which would at least be a bit more formal.</p>
<p>“Reside in” can now mean that we embed both ℤ and the set of Unicode codepoints into bigger structures,
such that the restriction to them yields the action we care about.
This could, for example, be the regular action of ℝ on itself,
but I personally don’t think that this helps much with reasoning about the original action.</p>
<p>I swear I will stop with the maths at some point.<a href="#fnref11" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn12"><p>{-} All whitespace here, and indeed in most places, is completely redundant.
I choose to still include it, to “logically group” certain operations.
It helps me with reading the code, anyways.<a href="#fnref12" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn13"><p>Or, if you wanted to make it extra confusing,
as <code>+´⊢/⊢=¯1⊸⌽</code>,
but we’ll get to that later on.<a href="#fnref13" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn14"><p>Note that the actual implementation of <code>Split</code> I’m using is</p>
<pre class="bqn"><code>Split ⇐ (¬-˜⊢×·+`»⊸&gt;)∘≠⊔⊢</code></pre>
<p>which is subtly different in its behaviour.
I leave it as an exercise for the reader—or my future self—to figure out how exactly this version differs to the one I just explained,
and what problem it fixes.<a href="#fnref14" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn15"><p>E.g., Emacs supports this by means of <code>quoted-insert</code> (<code>C-q</code>).<a href="#fnref15" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn16"><p>The abelian assumption is important here; otherwise, you won’t get that
<span class="math inline">(f \cdot g)(x \cdot_M y) = (f\cdot g)(x) \cdot_N (f\cdot g)(y)</span>.<a href="#fnref16" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn17"><p>Technically, it’s
<a href="https://mlochbaum.github.io/BQN/doc/train.html#longer-trains">“any function expression with multiple functions or subjects in it”</a>,
which means a string of functions and subjects that ends with a function.<a href="#fnref17" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn18"><p>This is a primitive in APL, dyadic <code>~</code>,
but it’s easy enough to remember that it doesn’t feel all that bothersome to write it out in BQN.<a href="#fnref18" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn19"><p>Don’t want to somehow end up with an array that has holes in it!<a href="#fnref19" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn20"><p>In two dimensions this is <span class="math inline">|x_1 - x_2| + |y_1 - y_2|</span>;
or, as <span class="math inline">y</span> is always the origin, just <span class="math inline">|x_1|+|x_2|</span>.<a href="#fnref20" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn21"><p>Dzaima alerted me to the fact that <code>∾(↕⋈¨↕)𝕩</code> as a whole is probably better written as <code>2/↕𝕩</code>,
using the magic of
<em>replicate</em> (<a href="https://mlochbaum.github.io/BQN/doc/replicate.html#replicate"><code>/</code></a>).</p>
<pre class="bqn"><code>    2/↕6
⟨ 0 0 1 1 2 2 3 3 4 4 5 5 ⟩</code></pre>
<p>However, since I wanted to showcase <code>zip</code>,
I will keep the slightly longer version in the main text.<a href="#fnref21" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn22"><p>Guess which other language I like to program in!<a href="#fnref22" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn23"><p>I mean, not really—arrays in BQN are immutable.
But we can at least pretend it does that.<a href="#fnref23" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn24"><p>There is also a “computational” <em>under</em>,
in which the BQN implementation tries to find a right inverse to the given function.
It’s a pretty interesting modifier.<a href="#fnref24" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn25"><p>That’s actually false: this algorithm doesn’t provide a general solution,
as it banks on the fact that a node never contains two children
(in which case we would have to try both branches).
It works for my input, though, so I figured this was good enough.
Let’s say that tree manipulations are not necessarily my favourite thing to do in an array language.<a href="#fnref25" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn26"><p>{-} I’m reversing the list because we have to right fold over it later.<a href="#fnref26" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn27"><p>{-} For example,</p>
<pre class="bqn"><code>    DecToHex 15
&quot;0f&quot;
    DecToHex 32
&quot;20&quot;</code></pre>
<a href="#fnref27" class="footnote-back" role="doc-backlink">↩︎</a></li>
<li id="fn28"><p>This is a phenomenal article, btw, definitely give it a read.<a href="#fnref28" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn29"><p>Or <code>⟨0 2⟩</code>, depending in which direction your list points.<a href="#fnref29" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn30"><p>Unlike APL, BQN’s <em>repeat</em> operator does not support this out of the box.<a href="#fnref30" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn31"><p>Indeed, <code>utils.bqn</code> just looks like</p>
<pre class="bqn"><code>Split ⇐ (¬-˜⊢×·+`»⊸&gt;)∘≠⊔⊢
_Fix  ⇐ { 𝔽∘⊢⍟≢⟜𝔽_𝕣∘⊢⍟≢⟜𝔽𝕩 }
tab   ⇐ @+9
lf    ⇐ @+10</code></pre>
<a href="#fnref31" class="footnote-back" role="doc-backlink">↩︎</a></li>
<li id="fn32"><p>That is, the first version of that code, before dzaima told me how to clean it up:</p>
<pre class="bqn"><code>DecToHex←{
  𝕩{ 0𝕊n: n∾˜(2-≠n)⥊'0';
     x𝕊n: (⌊x÷16)𝕊(n∾˜&quot;0123456789abcdef&quot;⊑˜16|x)
  }&quot;&quot;
}</code></pre>
<a href="#fnref32" class="footnote-back" role="doc-backlink">↩︎</a></li>
<li id="fn33"><p>{-} Region <code>8</code> just extends beyond the bounds of the part of the grid that we see and loops back around.<a href="#fnref33" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn34"><p>We can’t just use <code>⟨«,»,«˘,»˘⟩¨&lt;x</code>
because the <a href="https://mlochbaum.github.io/BQN/doc/expression.html#syntactic-role">syntactic role</a> of a list is a subject,
which can’t be applied as a function.<a href="#fnref34" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn35"><p>In that case, using <em>rotate</em> would be more appropriate.<a href="#fnref35" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn36"><p>Notice that <span class="math inline">2147483647 = 2^{31} - 1</span>
so this challenge was doable even for esolangs
that only support signed 32bit integers.
Nice touch.<a href="#fnref36" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn37"><p>My loop happens to start with at 0,
but I don’t know if this is universal across all inputs.<a href="#fnref37" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn38"><p>I suppose inserting <code>i</code> in the back of the array would be cheaper:</p>
<pre class="bqn"><code>¯2⊑⟨0⟩{𝕨∾˜(-n+1)⌽𝕩}´⌽1+↕2017</code></pre>
<p>However, this doesn’t really matter;
we need a different solution for part two either way.<a href="#fnref38" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn39"><p>In fact, since simulating these instructions is so verbose,
the file contains 36 lines of pure code (without comments or empty lines)!
This is not only 15 more lines than the second place, <a href="#day-7">day 7</a>,
but a big anomaly in general;
the average is around 12 lines, and the median is 11:</p>
<pre class="bqn"><code>    ((+´÷≠)⋈{(⌊2÷˜≠𝕩)⊑∨𝕩}){•BQN&quot;⟨&quot;∾𝕩∾&quot;⟩&quot;}1⊑•SH⟨
      &quot;/bin/sh&quot;
      &quot;-c&quot;
      &quot;tokei -f «path» \
        | awk '{ print $3 }' \
        | head -n-3 | tail -n25&quot;
    ⟩
⟨ 11.6 11 ⟩</code></pre>
<a href="#fnref39" class="footnote-back" role="doc-backlink">↩︎</a></li>
<li id="fn40"><p>Foreshadowing.<a href="#fnref40" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn41"><p>This is modulo some shenanigans when <code>0</code> is the first element of the list,
but let’s completely ignore that case for the purposes of this exposition.
Indeed, since we are dealing with a vector of three numbers and the fill element is still <code>0</code>,
this does not affect the actual solution.<a href="#fnref41" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn42"><p>After writing this, I saw that <a href="https://mlochbaum.github.io/bqncrate/">BQNcrate</a> suggests <code>∊∧∊⌾⌽</code>,
which should also work for non-sorted lists.<a href="#fnref42" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn43"><p>A version of <code>Split</code> that splits on subarrays would have probably been useful here.
Certainly something to write before this year’s event.<a href="#fnref43" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn44"><p>Note that this is all under the assumption that <code>k</code> divides <code>n</code>.<a href="#fnref44" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn45"><p>There’s a great (apocryphal) anecdote about John von Neumann
shouting at his PhD students because they were writing assembly.
Obviously, this just wasted resources because it was much too high-level,
and they should have written their programs directly in binary instead.
A more civilised age.<a href="#fnref45" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn46"><p>{-} There always seems to be at least one day each year where inspecting one’s input is the expected way to solve the problem.
Honestly, I’m not sure what to think of that;
I used to really dislike these days, but this one was unexpectedly fun.
It <em>is</em> a breath of fresh air after over 20 days of solving puzzles, I guess.
However, it also helps that doing these problems “out of season”
is a lot more relaxed than trying to bash out both parts before work every day.<a href="#fnref46" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Integrating KaTeX Into Hakyll</title>
    <link href="https://tony-zorman.com/posts/katex-with-hakyll.html" />
    <id>https://tony-zorman.com/posts/katex-with-hakyll.html</id>
    <published>2024-07-20T00:00:00Z</published>
    <updated>2024-07-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2024-07-20
      
      
        &thinsp;·&thinsp; last modified: 2025-02-01
      
      
        &thinsp;·&thinsp; <span title="1208 words">5 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'haskell'." href="/tags/haskell.html" rel="tag">haskell</a>, <a title="All pages tagged 'hakyll'." href="/tags/hakyll.html" rel="tag">hakyll</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>
</p>
<p>Being quite into mathematics,
I sometimes blog about it.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>
There are very capable solutions for rendering LaTeX in HTML documents out there,
which in particular solve the problem of properly aligning the fragments with the rest of the text.
One of them is KaTeX,
advertising itself to be easily executed on the server-side,
avoiding the use of extraneous client-side JavaScript.
Integrating it with Hakyll turned out to be relatively straightforward,
yet I haven’t seen an actual implementation anywhere;
this post is supposed to fill that gap.</p>
<!--more-->
<h2 id="my-dark-mathjax-past">My dark MathJax past</h2>
<p>One of my quite strongly held opinions is that,
for static websites such as this one,
client-side LaTeX rendering is completely unnecessary,
and actually just a waste of resources.
As a result, I’ve been using MathJax
to insert LaTeX fragments into the HTML after it’s compiled from Markdown.
This setup<!--
-->—stolen essentially verbatim from <a href="https://github.com/gwern/gwern.net/blob/c3d90bf1d6248d5e80dc030304c72b3f4a234455/build/sync.sh#L421">Gwern</a>—<!--
-->uses the now deprecated <a href="https://github.com/pkra/mathjax-node-page">mathjax-node-page</a>
to crawl through the already rendered HTML pages, and, upon recognising a math fragment,
replaces that text with the rendered formula.
The call to <code>mathjax-node-page</code> is trivial to parallelise on a per-file level with something like <a href="https://www.gnu.org/software/parallel/">GNU parallel</a>,
and so the whole thing actually works quite well.</p>
<p>However, the fact that this is “external” to Pandoc’s pipeline
and requires a separate <code>build.sh</code> file to be created has always felt a bit awkward to me.<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>
Plus, Hakyll is already capable of using GHC’s parallel runtime<!--
-->—why outsource a part of that to an external tool?
At some point, the annoyance I felt at this became stronger than the inertia my old setup had, so here we are.</p>
<h2 id="a-brighter-future-with-katex">A brighter future with KaTeX</h2>
<p>Naturally, when you change something you <em>really</em> want to change something<!--
-->—at least I do—<!--
-->so instead of using MathJax v3’s native support for these kinds of things,
why not try something new?
An often cited alternative to MathJax is <a href="https://katex.org/">KaTeX</a>,
yet another JavaScript library that promises decent maths rendering on the web.
This one is pretty good, though;
it’s supposed to be faster than MathJax,
and has “server side rendering” as a big bullet point on its landing page.
Sounds exactly like what I’m looking for.</p>
<p>KaTeX has a CLI of the same name,
but booting up the node runtime for every single maths fragment sounds perfectly dreadful to me,
so let’s not do that.
As such, one probably can’t avoid writing at least a little bit of JavaScript.
Thankfully, integrating KaTeX into Pandoc itself seems to be a well-trodden path,
so other people have already done this for me.
For example,
<a href="https://github.com/jgm/pandoc/issues/6651">pandoc#6651</a>
has a tiny script—essentially just calling <code>katex.​render​To​String</code>—that
is fed maths on stdin,
and then produces HTML on stdout.
Slightly adjusted to support inline and display maths, it looks like this:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> { readLines } <span class="im">from</span> <span class="st">&quot;https://deno.land/std@0.224.0/io/mod.ts&quot;</span><span class="op">;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> katex <span class="im">from</span> <span class="st">&quot;https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/katex.mjs&quot;</span><span class="op">;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> <span class="cf">await</span> (<span class="kw">const</span> line <span class="kw">of</span> <span class="fu">readLines</span>(Deno<span class="op">.</span><span class="at">stdin</span>)) {</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>  <span class="cf">try</span> {</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> DISPLAY    <span class="op">=</span> <span class="st">&quot;:DISPLAY &quot;</span><span class="op">;</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> useDisplay <span class="op">=</span> line<span class="op">.</span><span class="fu">startsWith</span>(DISPLAY)<span class="op">;</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> cleanLine  <span class="op">=</span> useDisplay <span class="op">?</span> line<span class="op">.</span><span class="fu">substring</span>(DISPLAY<span class="op">.</span><span class="at">length</span>) <span class="op">:</span> line<span class="op">;</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    <span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(katex<span class="op">.</span><span class="fu">renderToString</span>(cleanLine<span class="op">,</span> {</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>      displayMode<span class="op">:</span> useDisplay<span class="op">,</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>      strict<span class="op">:</span> <span class="st">&quot;error&quot;</span><span class="op">,</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>      throwOnError<span class="op">:</span> <span class="kw">true</span><span class="op">,</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>    }))<span class="op">;</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>  } <span class="cf">catch</span> (error) {</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>    <span class="cf">throw</span> <span class="kw">new</span> <span class="bu">Error</span>(<span class="vs">`Input: </span><span class="sc">${</span>line<span class="sc">}\n\n</span><span class="vs">Error: </span><span class="sc">${</span>error<span class="sc">}</span><span class="vs">`</span>)<span class="op">;</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Having this in place,
all that’s left is to crawl through Pandoc’s AST,
and feed each maths fragment to KaTeX.
Transforming its AST is something that Pandoc does
<a href="./pygmentising-hakyll.html">very</a> <a href="./hakyll-and-bibtex.html">well</a>,
so the code is usually swiftly written.
Indeed, both the <a href="https://hackage.haskell.org/package/pandoc-types/docs/Text-Pandoc-Definition.html#t:Block">Block</a> and <a href="https://hackage.haskell.org/package/pandoc-types/docs/Text-Pandoc-Definition.html#t:Inline">Inline</a> types
have a <code>Math</code> constructor which we can match on.<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a></p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Text</span>    <span class="kw">qualified</span> <span class="kw">as</span> <span class="dt">T</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Text.IO</span> <span class="kw">qualified</span> <span class="kw">as</span> <span class="dt">T</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">GHC.IO.Handle</span> (<span class="dt">BufferMode</span> (<span class="dt">NoBuffering</span>), <span class="dt">Handle</span>, hSetBuffering)</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Hakyll</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">System.Process</span> (runInteractiveCommand)</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Text.Pandoc.Definition</span> (<span class="dt">Block</span> (..), <span class="dt">Inline</span> (..), <span class="dt">MathType</span> (..), <span class="dt">Pandoc</span>)</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Text.Pandoc.Walk</span> (walk, walkM)</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="ot">hlKaTeX ::</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> <span class="dt">Pandoc</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>hlKaTeX pandoc <span class="ot">=</span> recompilingUnsafeCompiler <span class="kw">do</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>  (hin, hout, _, _) <span class="ot">&lt;-</span> runInteractiveCommand <span class="st">&quot;deno run scripts/math.ts&quot;</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>  hSetBuffering hin  <span class="dt">NoBuffering</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>  hSetBuffering hout <span class="dt">NoBuffering</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>  (<span class="ot">`walkM`</span> pandoc) \<span class="kw">case</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Math</span> mathType (T.unwords <span class="op">.</span> T.lines <span class="op">.</span> T.strip <span class="ot">-&gt;</span> text) <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>      <span class="kw">let</span><span class="ot"> math ::</span> <span class="dt">Text</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>            <span class="ot">=</span> foldl' (\str (repl, with) <span class="ot">-&gt;</span> T.replace repl with str)</span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>                     <span class="kw">case</span> mathType <span class="kw">of</span></span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>                       <span class="dt">DisplayMath</span><span class="co">{-s-}</span> <span class="ot">-&gt;</span> <span class="st">&quot;:DISPLAY &quot;</span> <span class="op">&lt;&gt;</span> text</span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>                       <span class="dt">InlineMath</span><span class="co">{-s-}</span>  <span class="ot">-&gt;</span>                text</span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>                     macros</span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a>      T.hPutStrLn hin math</span>
<span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a>      <span class="dt">RawInline</span> <span class="st">&quot;html&quot;</span> <span class="op">&lt;$&gt;</span> getResponse hout</span>
<span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a>    block <span class="ot">-&gt;</span> <span class="fu">pure</span> block</span>
<span id="cb2-26"><a href="#cb2-26" aria-hidden="true" tabindex="-1"></a> <span class="kw">where</span></span>
<span id="cb2-27"><a href="#cb2-27" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- KaTeX might sent the input back as multiple lines if it involves a</span></span>
<span id="cb2-28"><a href="#cb2-28" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- matrix of coordinates. The big assumption here is that it does so only</span></span>
<span id="cb2-29"><a href="#cb2-29" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- when matrices—or other such constructs—are involved, and not when it</span></span>
<span id="cb2-30"><a href="#cb2-30" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- sends back &quot;normal&quot; HTML.</span></span>
<span id="cb2-31"><a href="#cb2-31" aria-hidden="true" tabindex="-1"></a><span class="ot">  getResponse ::</span> <span class="dt">Handle</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Text</span></span>
<span id="cb2-32"><a href="#cb2-32" aria-hidden="true" tabindex="-1"></a>  getResponse handle <span class="ot">=</span> go <span class="st">&quot;&quot;</span></span>
<span id="cb2-33"><a href="#cb2-33" aria-hidden="true" tabindex="-1"></a>   <span class="kw">where</span></span>
<span id="cb2-34"><a href="#cb2-34" aria-hidden="true" tabindex="-1"></a><span class="ot">    go ::</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Text</span></span>
<span id="cb2-35"><a href="#cb2-35" aria-hidden="true" tabindex="-1"></a>    go <span class="op">!</span>str <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb2-36"><a href="#cb2-36" aria-hidden="true" tabindex="-1"></a>      more <span class="ot">&lt;-</span> (str <span class="op">&lt;&gt;</span>) <span class="op">&lt;$&gt;</span> T.hGetLine handle</span>
<span id="cb2-37"><a href="#cb2-37" aria-hidden="true" tabindex="-1"></a>      <span class="kw">if</span> <span class="st">&quot;&gt;&quot;</span> <span class="ot">`T.isSuffixOf`</span> more  <span class="co">-- end of HTML snippet</span></span>
<span id="cb2-38"><a href="#cb2-38" aria-hidden="true" tabindex="-1"></a>      <span class="kw">then</span> <span class="fu">pure</span> more</span>
<span id="cb2-39"><a href="#cb2-39" aria-hidden="true" tabindex="-1"></a>      <span class="kw">else</span> go   more</span>
<span id="cb2-40"><a href="#cb2-40" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-41"><a href="#cb2-41" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- I know that one could supply macros to KaTeX directly, but where is the</span></span>
<span id="cb2-42"><a href="#cb2-42" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- fun in that‽</span></span>
<span id="cb2-43"><a href="#cb2-43" aria-hidden="true" tabindex="-1"></a><span class="ot">  macros ::</span> [(<span class="dt">Text</span>, <span class="dt">Text</span>)]</span>
<span id="cb2-44"><a href="#cb2-44" aria-hidden="true" tabindex="-1"></a>  macros <span class="ot">=</span></span>
<span id="cb2-45"><a href="#cb2-45" aria-hidden="true" tabindex="-1"></a>    [ (<span class="st">&quot;≔&quot;</span>       , <span class="st">&quot;\\mathrel{\\vcenter{:}}=&quot;</span>)</span>
<span id="cb2-46"><a href="#cb2-46" aria-hidden="true" tabindex="-1"></a>    , (<span class="st">&quot;\\defeq&quot;</span> , <span class="st">&quot;\\mathrel{\\vcenter{:}}=&quot;</span>)</span>
<span id="cb2-47"><a href="#cb2-47" aria-hidden="true" tabindex="-1"></a>    , (<span class="st">&quot;\\to&quot;</span>    , <span class="st">&quot;\\longrightarrow&quot;</span>)</span>
<span id="cb2-48"><a href="#cb2-48" aria-hidden="true" tabindex="-1"></a>    , (<span class="st">&quot;\\mapsto&quot;</span>, <span class="st">&quot;\\longmapsto&quot;</span>)</span>
<span id="cb2-49"><a href="#cb2-49" aria-hidden="true" tabindex="-1"></a>    , (<span class="st">&quot;\\cat&quot;</span>   , <span class="st">&quot;\\mathcal&quot;</span>)</span>
<span id="cb2-50"><a href="#cb2-50" aria-hidden="true" tabindex="-1"></a>    , (<span class="st">&quot;\\kVect&quot;</span> , <span class="st">&quot;\\mathsf{Vect}_{\\mathtt{k}}&quot;</span>)</span>
<span id="cb2-51"><a href="#cb2-51" aria-hidden="true" tabindex="-1"></a>    ]</span></code></pre></div>
<p>The <code>(T.unwords . T.lines . T.strip -&gt; text)</code>
<a href="https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/view_patterns.html">view pattern</a>
is because KaTeX <em>really</em> does not seem to like it when there is a line break<!--
-->—even a semantically irrelevant one—<!--
-->in a formula.
Perhaps this is a setting I’ve overlooked.
Other than that the code should be reasonably self-explanatory;
there are a few macro definitions that are copied from the now deleted
<a href="https://github.com/slotThe/slotThe.github.io/blob/6cd02aab18e63a42a4b889e3cf4bba951277cad4/build.sh#L15">build.sh</a>
and some fiddling to make the stdout handle actually output the full response.<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a></p>
<p>The <code>hlKaTeX</code> function,
having a <code>Pandoc -&gt; Compiler Pandoc</code> signature,
can be given to <a href="https://hackage.haskell.org/package/hakyll/docs/Hakyll-Web-Pandoc.html#v:pandocCompilerWithTransformM">pandocCompilerWithTransformM</a> like any other function:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">myPandocCompiler ::</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>myPandocCompiler <span class="ot">=</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  pandocCompilerWithTransformM</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    defaultHakyllReaderOptions</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    defaultHakyllWriterOptions</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    hlKaTeX</span></code></pre></div>
<p>And that’s pretty much it!</p>
<h3 id="adding-css">Adding CSS</h3>
<p>All that’s left is to include the custom CSS and special fonts that KaTeX relies upon.
The former can be downloaded from <a href="https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css">their CDN</a>,
and the latter are easily obtained from
<a href="https://github.com/KaTeX/KaTeX/releases/">the latest release</a>
by copying the <code>fonts</code> directory.
The fonts are both reasonably small and loaded on demand,
such that the website does not blow up in size with this switch.</p>
<h2 id="conclusion">Conclusion</h2>
<p>The whole affair was much easier than I<!--
-->—not knowing any JavaScript—<!--
-->expected it to be, and actually turned out to be quite fun.
Of course, nothing at all has changed on the user-side of things,
which is to say that the new KaTeX fragments look pretty much exactly the same as the old MathJax maths.
Still, the warm feeling I had when deleting that <code>build.sh</code> shell script tells me that this was not solely an exercise in futility.
Or perhaps I’ve fully embraced rolling the boulder up the hill by now.</p>
<p>If you’re interested,
the commit adding it to my setup can be found
<a href="https://github.com/slotThe/slotThe.github.io/commit/6114e0e2a568122c01236dee38e2bf772efbf1e5">here</a>.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>Not as much as I should,
I guess,
but nowadays when I write maths it feels like a waste to not have it go into either
<a href="/posts/anki-latex.html">Anki</a>, <a href="/posts/my-phd-workflow.html#digital-notes">Org Roam</a>, or a paper,
and these notes are not necessarily written/ready for public consumption.
Oh well.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>Especially because, unlike in Gwern’s case, this site is not super complex to build;
there aren’t any other moving parts that would require me to leave Haskell.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>{-} 󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>Mind the <code>BlockArguments</code>—and the “s”.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>Seemingly as always when subprocesses are involved,
the hardest thing is to actually get all of the incantations right
such that buffering does not deadlock your program indefinitely.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Leveraging LaTeX in Anki</title>
    <link href="https://tony-zorman.com/posts/anki-latex.html" />
    <id>https://tony-zorman.com/posts/anki-latex.html</id>
    <published>2024-05-11T00:00:00Z</published>
    <updated>2024-05-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2024-05-11
      
      
        &thinsp;·&thinsp; last modified: 2025-06-02
      
      
        &thinsp;·&thinsp; <span title="1044 words">5 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'anki'." href="/tags/anki.html" rel="tag">anki</a>, <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>, <a title="All pages tagged 'maths'." href="/tags/maths.html" rel="tag">maths</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>
</p>
<p>Recently, I’ve been quite invested in learning maths with <a href="https://apps.ankiweb.net/index.html">Anki</a>.
Sadly, there are relatively few good resources out there on how to
twist Anki’s LaTeX pipeline into something generally acceptable,
without having to rely on MathJax.
As such, this post collects some bits and pieces from all over,
hoping to weave them together into something coherent.</p>
<!--more-->
<p><a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>Note that I will only concerns myself with
“how to make LaTeX work to an acceptable degree”,
instead of
“how to write mathematics notes”.
The latter is extremely dependent on the desired outcome,
types of maths that one studies,
experience of the person writing the notes, and so on.
Too many facets for me—or anyone, really—to give blanket recommendations.</p>
<p>A lot of things here are rehashes of <a href="https://unhewn-thoughts.org/anki/guide-on-using-latex-xetex-luatex-with-anki.html">Unhewn Thought’s</a>
post about the same thing,
as well as the official <a href="https://docs.ankiweb.net/math.html#latex">Anki documentation</a>
on the matter.
As always, this post is mostly about reminding myself about some details in two months’ time.</p>
<h2 id="mathjax-is-not-enough">MathJax is not enough</h2>
<p>Anki fully supports MathJax as a backend for its LaTeX previewing system.
This is great for most users:
MathJax is trivial to set up, and fits snugly into the generated HTML<!--
-->—there’s a reason it’s used so widely all over the internet!</p>
<p>However,
especially for personal notes like these,
MathJax might be amongst the worst solutions for me:
its <a href="https://docs.mathjax.org/en/latest/input/tex/extensions.html">macro support</a>
is awkward at best,
and since it only implements maths macros,
many of the packages that I’m using on a daily basis are not available at all.
I for one am certainly not going to rewrite my bespoke <a href="https://github.com/slotThe/latex-styles">style file</a>,
just so I get something that half-works with MathJax,
when I could be using the real thing instead!</p>
<h2 id="actually-writing-latex">Actually writing LaTeX</h2>
<p>To get this out of the way:
I have absolutely no opinions on how to <em>write</em> LaTeX with Anki.
I haven’t ever actually composed a note inside of the program,
and I’m doubtful that I ever will.</p>
<p>Instead, I write all of my notes in Org and then export them via <a href="https://github.com/anki-editor/anki-editor">anki-editor</a>.
This is very convenient,
as it means that I have all of the key bindings and snippets available that I normally write LaTeX with.<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>
Plus, rough edges that one would otherwise have to care about,
like <code>}}</code> inside of maths closing the current cloze deletion,
are solved completely by <code>anki-editor</code> without me even having to think about them.<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>
As an added bonus,
Org mode’s <a href="https://www.youtube.com/watch?v=n-AfvuV-bYo">new LaTeX preview functionality</a> is just fantastic,
and makes crafting notes quite fun!</p>
<h2 id="aligning-fragments-vertically">Aligning fragments vertically</h2>
<p><em>Update from 2025-06-02</em>:
I’ve written Anki add-on <a href="https://ankiweb.net/shared/info/1721577833">1721577833</a>
to perfectly align images to their respective baseline.
If you’re using this, you can ignore the rest of this section.</p>
<hr />
<p>One thing that MathJax does <em>very</em> well is its pixel-perfect alignment of LaTeX fragments.
In contrast, the default alignment is really rather bad.
It can, however, be somewhat improved by using CSS to vertically centre the image:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>img<span class="ex">[</span><span class="ss">src</span><span class="op">*=</span><span class="st">&quot;latex&quot;</span><span class="ex">]</span> {</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">vertical-align</span><span class="ch">:</span> <span class="dv">middle</span><span class="op">;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>It looks like this:<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a></p>
<p><img class="pure-img" src="../images/anki-latex/centered.png" alt="A note with approrimately centred LaTeX"></p>
<p>Very far from perfect, but readable.
Since this seems to be the only drawback with not using MathJax,
I’ll take it.
Content over form—at least in this case.</p>
<h2 id="preview-generation-with-preview.sty">Preview generation with <code>preview.sty</code></h2>
<p>The <code>preview</code> package is specifically designed for these kinds of previews.
Originally written for <a href="https://www.gnu.org/software/auctex/">AUCTeX</a>,
it has made its way into all TeX distributions that I know of.
In addition to being used all over Emacs,
<code>preview</code> is being employed by quite a few other programs as well.</p>
<p>Amongst intangible benefits such as familiarity,
I chose <code>preview</code> mostly because
it “correctly” tightens display maths environments not just to the maths itself,
but to the whole line.
Operationally this means that display maths is automatically centred on my Anki card,
even if the rest of the text is left-aligned.<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a></p>
<p>To use <code>preview.sty</code> in this way,
one simply has to include it Anki’s LaTeX preamble—<code>C-S-n</code> and then “Options”—and wrap the whole document (i.e., the formula being rendered) with the <code>preview</code> environment:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">%%% Header</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="bu">\documentclass</span>{<span class="ex">article</span>}</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="bu">\usepackage</span>[active,tightpage]{<span class="ex">preview</span>}</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="kw">\begin</span>{<span class="ex">document</span>}</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="co">% Remove extra space above display maths.</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="fu">\setlength</span>{<span class="fu">\abovedisplayskip</span>}{0pt}</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="kw">\begin</span>{<span class="ex">preview</span>}</span></code></pre></div>
<div class="sourceCode" id="cb3"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">%%% Footer</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="kw">\end</span>{<span class="ex">preview</span>}</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="kw">\end</span>{<span class="ex">document</span>}</span></code></pre></div>
<p>For this to work smoothly, I also highly recommend to enable SVG support,
and to tweak Anki’s LaTeX compilation pipeline.
The handy <a href="https://ankiweb.net/shared/info/937148547">Edit LaTeX build process</a> addon can be used for that purpose.
My <code>svgCommands</code> settings look like this:<a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a></p>
<pre><code> &quot;svgCommands&quot;: [
      [
          &quot;latex&quot;,
          &quot;-interaction=nonstopmode&quot;,
          &quot;tmp.tex&quot;
      ],
      [
          &quot;dvisvgm&quot;,
          &quot;--page=1-&quot;,
          &quot;--optimize&quot;,
          &quot;--clipjoin&quot;,
          &quot;--relative&quot;,
          &quot;--bbox=preview&quot;,
          &quot;--no-fonts&quot;,
          &quot;tmp.dvi&quot;,
          &quot;-o&quot;,
          &quot;tmp.svg&quot;
      ]
  ]</code></pre>
<p>The generated LaTeX might be too small,
though fixing this just involves a small CSS modification to the <code>latex</code> class:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="fu">.latex</span> {</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  zoom<span class="ch">:</span> <span class="dv">160</span><span class="dt">%</span><span class="op">;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>If you want to dig deeper into how Anki generates maths, I recommend looking at
<a href="https://github.com/ankitects/anki/blob/c29125939db1dbb9ef48d42f425eb70abaee53ad/pylib/anki/latex.py">latex.py</a>,
<a href="https://github.com/ankitects/anki/blob/c29125939db1dbb9ef48d42f425eb70abaee53ad/rslib/src/latex.rs">latex.rs</a>,
and the
<a href="https://unhewn-thoughts.org/anki/guide-on-using-latex-xetex-luatex-with-anki.html#tex-generation"><code>.tex</code> Generation</a>
section in Unhewn Thought’s blog post.<a href="#fn7" class="footnote-ref" id="fnref7" role="doc-noteref"><sup>7</sup></a></p>
<h3 id="complete-preamble">Complete preamble</h3>
<p>My complete preamble is not much larger than what I have shown above;
it merely also includes my <a href="https://github.com/slotThe/latex-styles">personal style file</a>.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="co">%%% Header</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="bu">\documentclass</span>{<span class="ex">article</span>}</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="bu">\usepackage</span>[type=org,math=fancy]{<span class="ss">$HOME/.tex/styles/style}</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="sc">\usepackage</span><span class="ss">[active,tightpage]{preview}</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="sc">\usepackage</span><span class="ss">{xcolor}</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="kw">\begin</span>{<span class="ex">document</span>}</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="sc">\setlength</span><span class="ss">{</span><span class="sc">\parindent</span><span class="ss">}{0in}</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="sc">\setlength</span><span class="ss">{</span><span class="sc">\abovedisplayskip</span><span class="ss">}{0pt}</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="kw">\begin</span>{<span class="ex">preview</span>}</span></code></pre></div>
<div class="sourceCode" id="cb7"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="co">%%% Footer</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="kw">\end</span>{<span class="ex">preview</span>}</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="kw">\end</span>{<span class="ex">document</span>}</span></code></pre></div>
<h2 id="conclusion">Conclusion</h2>
<p>With these relatively straightforward tweaks,
Anki’s LaTeX integration is really plug and play—I can just use my whole style file as-is,
no extra care needed.
Nice.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>{-} I will not waste the reader’s time with an introduction of what Anki is or why spaced repetition is useful;
<a href="https://gwern.net/spaced-repetition">other</a>
<a href="https://augmentingcognition.com/ltm.html">people</a>
have done a much better job at that than I ever could.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>See, for example,
<a href="https://tony-zorman.com/posts/my-phd-workflow.html#digital-notes">here</a>,
<a href="https://tony-zorman.com/posts/emacs-potpourri.html#latex">here</a>,
<a href="https://tony-zorman.com/posts/pretty-latex.html">here</a>,
or
<a href="https://gitlab.com/slotThe/dotfiles/-/blob/master/emacs/lisp/hopf-latex-math.el?ref_type=heads">here</a>.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>For the specific example of maths and cloze deletions,
one needs to set <code>anki-editor-break-consecutive-braces-in-LaTeX</code>.
This should probably be the default—and perhaps it will be in the future!<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>{-} As you can see, I haven’t bothered with fancy CSS to make the cards pretty. Content over form.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>One could solve this by making <code>anki-editor</code> output an extra <code>div</code> that it only wraps display maths with<!--
  -->—and I have done that in the past—but using <code>preview.sty</code> feels much cleaner to me.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6"><p>{-} For compatibility reasons with all of my papers (and other notes) I use <code>latex</code> here.
In case you are not bound by these restrictions—or more adventurous than me—I would recommend you use lualatex instead.<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn7"><p>{-} It should be noted that Anki—thankfully—caches previews by hashing their contents,
and reuses the same SVG every time it encounters a LaTeX fragment with the same hash.
Thus, if you want to completely regenerate everything, just delete the respective directory.
For me, this is <code>~/.local/share/Anki2/User 1/collection.media/</code>.<a href="#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Announcing: rq Version 0.1.0</title>
    <link href="https://tony-zorman.com/posts/rq.html" />
    <id>https://tony-zorman.com/posts/rq.html</id>
    <published>2024-03-23T00:00:00Z</published>
    <updated>2024-03-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2024-03-23
      
      
        &thinsp;·&thinsp; last modified: 2024-05-01
      
      
        &thinsp;·&thinsp; <span title="1251 words">6 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'rust'." href="/tags/rust.html" rel="tag">rust</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>
</p>
<p>I’ve just released version 0.1.0 of <a href="https://github.com/slotThe/rq"><code>rq</code></a>,<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>
a small functional language to manipulate JSON—and my excuse to learn Rust!
This seems as good a time as any to talk about it,
so let’s do that.</p>
<!--more-->
<h2 id="overview">Overview</h2>
<p>As the name suggests,
<code>rq</code> is heavily inspired by the venerable <code>jq</code>,<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>
and looks quite similar in action:</p>
<p><img class="pure-img" src="../images/rq/rq.png" alt="rq in action"></p>
<p>Another example,
printing out the name of <code>rq</code>s direct and transitive dependencies.</p>
<pre class="console"><code>$ cargo metadata | rq '.packages | map .name | filter (!= &quot;rq&quot;)'
[ahash, allocator-api2, anyhow, ariadne, cc, cfg-if, chumsky, hashbrown,
libc, once_cell, proc-macro2, psm, quote, stacker, syn, unicode-ident,
unicode-width, version_check, winapi, winapi-i686-pc-windows-gnu,
winapi-x86_64-pc-windows-gnu, yansi, zerocopy, zerocopy-derive]</code></pre>
<p>I will try to give a coarse overview of the language,
adding some design considerations,
without repeating too much of what is already in the projects
<a href="https://github.com/slotThe/rq?tab=readme-ov-file#the-expression-language">README</a>.
I would advise you to consult that if you’re interested in a more comprehensive description of <code>rq</code>.</p>
<h2 id="the-language">The language</h2>
<p>The tl;dr is that <code>rq</code>—as advertised—is a small functional language with the usual idioms.
There is a small REPL to try out the language,
which can be accessed by executing <code>rq</code> with a <code>repl</code> argument.<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a></p>
<pre><code>$ rq repl
λ&gt;

λ&gt; const 1 2
1

λ&gt; (\x -&gt; x + 1) 41
42

λ&gt; map (+ 1) [1, 2, 3, 4, 5]
[2, 3, 4, 5, 6]

λ&gt; foldl (+) 0 [9, 3, 13, 17]
42

# `get` gets the i'th index or key from a collection.
λ&gt; get 1 [0, 2, 3, 4]
2
λ&gt; get &quot;name&quot; { name: &quot;Name&quot; }
Name</code></pre>
<p>The language has some <code>jq</code>-inspired syntactic sugar for working with JSON,
like <code>x.1</code> desugaring to <code>get 1 x</code>, and <code>.1</code> meaning <code>λx → get 1 x</code>.
Additionally, <code>|</code> designates covariant function composition.<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a></p>
<pre><code>λ&gt; (filter (get &quot;age&quot; | (&gt;= 42)) | map (\x -&gt; { x.name: x.age })) \
     [{&quot;name&quot;: &quot;John Doe&quot;, &quot;age&quot;: 43, &quot;phone&quot;: &quot;+44 1234567&quot;},{&quot;name&quot;:&quot;Alice&quot;},{&quot;name&quot;:&quot;Bob&quot;, &quot;age&quot;:42}]
[{John Doe: 43}, {Bob: 42}]</code></pre>
<h3 id="type-system">Type system</h3>
<p>I like statically typed languages,
so why not make <code>rq</code> one as well?
For a program whose sole purpose is to receive a one-line expression,
this might seem overkill—and it is!</p>
<p>Currently, the type system is a bit rudimentary and only features the most essential pieces:
universally quantified type variables,
arrows,
as well as <code>Num</code> and <code>JSON</code> as “basic types”,
where the former is a subtype of the latter.
The <code>JSON</code> type is to be seen as a black hole of sorts,
swallowing everything and
enabling our statically typed language to come across as quite dynamic indeed.<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a></p>
<p>In the REPL, types can be queried with <code>:t</code>.</p>
<pre><code>λ&gt; :t const
∀a. ∀b. a → b → a

λ&gt; :t get
JSON → JSON → JSON

λ&gt; :t \f g x -&gt; f x (g x)
∀j. ∀i. ∀g. (g → i → j) → (g → i) → g → j

λ&gt; :t id
∀a. a → a

λ&gt; :t id 1
Num

λ&gt; :t id 1 :: JSON
JSON

λ&gt; :t &quot;a&quot; :: Num
JSON is not a subtype of Num</code></pre>
<p>Implementation wise, one needs something that supports both polymorphism and subtyping.
Sadly, this rules out any Hindley–Milner-inspired type system (at least to my knowledge).
I settled on Dunfield and Krishnaswami’s bidirectional
type checking algorithm from their paper<a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a> “Complete and easy
bidirectional type checking for higher-rank polymorphism”
<span class="citation" data-cites="dunfield13:higher">[@dunfield13:higher]</span>,
as it seemed to be the most straightforward description of exactly what I needed.
The paper is quite readable, actually,
so I encourage you to check it out!</p>
<p>And that’s <code>rq</code>, pretty much.
besides <code>map</code>, <code>filter</code>, <code>foldl</code>, <code>get</code>, and <code>set</code>
there are relatively few builtin functions that do interesting things right now.
Someone should definitely do something about that…!</p>
<h2 id="performance">Performance</h2>
<p>Performance is “fine”;
a bit slower than <code>jq</code>,
though probably not enough to notice very often in practice.
There currently is no streaming parser,
though, so please don’t pump gigabytes of JSON through <code>rq</code> :)</p>
<p>As a “real world” example,
I ran <code>cargo metadata</code> on the
<a href="https://github.com/rust-lang/rust-analyzer">rust-analyzer GitHub repository</a>,
which produces ~1mb of JSON.
On that data, <code>jq</code> takes 144ms and <code>rq</code> needs around 186ms.</p>
<pre class="console"><code>$ hyperfine &quot;cargo metadata --format-version=1 | jq '.packages | map (.name)'&quot;
Benchmark 1: cargo metadata --format-version=1 | jq '.packages | map (.name)'
  Time (mean ± σ):     144.0 ms ±   3.6 ms    [User: 112.3 ms, System: 36.2 ms]
  Range (min … max):   136.5 ms … 149.5 ms    19 runs

$ hyperfine &quot;cargo metadata --format-version=1 | rq '.packages | map .name'&quot;
Benchmark 1: cargo metadata --format-version=1 | rq '.packages | map .name'
  Time (mean ± σ):     185.7 ms ±   4.0 ms    [User: 139.2 ms, System: 46.6 ms]
  Range (min … max):   178.6 ms … 194.8 ms    16 runs</code></pre>
<p><a href="#fn7" class="footnote-ref" id="fnref7" role="doc-noteref"><sup>7</sup></a>A cursory analysis reveals that parsing takes about 10ms,
with the type checker and evaluator needing around 20ms each.
The bulk of the time, 130ms, is spent invoking <code>cargo metadata</code> and reading its output.</p>
<p>Still, overall I’m quite happy with this,
as I haven’t really tried optimising for performance at all,
and yet the result is quite acceptable.</p>
<h2 id="future-work">Future work</h2>
<ul>
<li><p>We need more functions to actually do useful things!
This is both the most important
and least exciting
direction,
so let’s see which feeling ends up winning :)</p></li>
<li><p>Guessing at performance improvements,
I suppose a case could be made to more closely look at the evaluator;
currently conversion between the semantic and syntactic representation of the expression is done by copious amounts of copying.
Perhaps a bit of this could be alleviated by making certain functions take mutable references instead,
though I haven’t completely thought this through yet.</p></li>
<li><p>I was initially thinking about implementing the standard library
using
<a href="https://en.wikipedia.org/wiki/Higher-order_abstract_syntax">higher-order abstract syntax</a>
instead of
<a href="https://github.com/slotThe/rq/blob/4ff7bb1e35dbbde201a069f5e2c588059c79149b/src/eval.rs#L148">hard coding</a>
them into the evaluator itself.
This would essentially involve a change in the expression type from</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">enum</span> Expr <span class="op">{</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>  <span class="co">// …</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>  Builtin(Builtin)<span class="op">,</span> <span class="co">// Builtin is a big enum of names</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>to something along the lines of</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">enum</span> Expr <span class="op">{</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>  <span class="co">// …</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>  Builtin(<span class="kw">dyn</span> <span class="bu">Fn</span>(Expr) <span class="op">-&gt;</span> Expr)<span class="op">,</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>I reckon hard coding the builtin functions into the evaluator might be a net speed gain,
though this seems like a fun exercise,
so perhaps I will explore this on a separate branch.</p></li>
<li><p>Implementing a more complete type system seems advisable;
in particular list and object types should not be very difficult to add.
I’m not totally sure how union types<a href="#fn8" class="footnote-ref" id="fnref8" role="doc-noteref"><sup>8</sup></a> would fit into the current algorithm,
but this is definitely something I’d like to implement.
Having a type signature like</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>get <span class="ot">:</span> <span class="ot">(</span>Num <span class="ot">|</span> Str<span class="ot">)</span> <span class="ot">→</span> <span class="ot">(</span>Arr <span class="ot">|</span> Obj<span class="ot">)</span> <span class="ot">→</span> JSON</span></code></pre></div>
<p>or even</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a>get <span class="ot">:</span> <span class="ot">(</span>Num <span class="ot">→</span> Arr <span class="ot">→</span> JSON<span class="ot">)</span> <span class="ot">|</span> <span class="ot">(</span>Str <span class="ot">→</span> Obj <span class="ot">→</span> JSON<span class="ot">)</span></span></code></pre></div>
<p>would please me.</p></li>
<li><p>I’m also interested to find other (bidirectional) type checking algorithms that may be worth studying more closely.</p></li>
</ul>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>{-} I would <em>never</em> have made a release solely to have an excuse to write about <code>rq</code>;
what are you talking about‽<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>Though obviously it—right now—only covers a meagre subset of what <code>jq</code> can do.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>{-} 󠀠</p>
<p>󠀠</p>
<p>To appease… someone reading this,
lambdas can also be written in Rust-esque notation,
and can take multiple arguments:</p>
<pre><code>|x, y| x y  ≡  λx y → x y  ≡  \x -&gt; \y -&gt; x y</code></pre>
<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></li>
<li id="fn4"><p>As in, <code>(f | g)(x)</code> means <code>g(f(x))</code>,
to mirror how shells use pipes.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>After all, a dynamically typed language is just a statically typed one with a single base type.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6"><p>{-} The paper is freely available <a href="https://arxiv.org/abs/1306.6032">on the arXiv</a>.<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn7"><p>{-} I’m quite surprised—though happy—by the type checker being this fast!
Likewise, I’m glad that all of the praise I’ve read about
<a href="https://en.wikipedia.org/wiki/Normalisation_by_evaluation">normalisation by evaluation</a>
was justified.<a href="#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn8"><p>As in, not coproducts but the other ones.<a href="#fnref8" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Smartly join comments with join-line</title>
    <link href="https://tony-zorman.com/posts/join-lines-comments.html" />
    <id>https://tony-zorman.com/posts/join-lines-comments.html</id>
    <published>2024-03-02T00:00:00Z</published>
    <updated>2024-03-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2024-03-02
      
      
        &thinsp;·&thinsp; last modified: 2024-08-15
      
      
        &thinsp;·&thinsp; <span title="1018 words">5 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->


<div>
  <p>Emacs’s <code>join-line</code> function,
upon execution,
joins the current line onto the previous one,
deleting any extraneous whitespace.
Alternatively, it can also sensibly act on a whole region of text.
This is quite useful,
though sadly the function does not handle comments very gracefully by default;
let’s fix that.</p>
<!--more-->
<p>Actually an alias for <code>delete-indentation</code>,
<code>join-line</code>’s behaviour is perhaps more easily seen
rather than explained.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></p>
<p><img class="pure-img" src="../images/join-line/join-line.gif" alt="Original join-line behaviour"></p>
<p>However, the default implementation of that function is quite oblivious to comments—in the sense that it doesn’t care about them at all!</p>
<p><img class="pure-img" src="../images/join-line/join-line-comment.gif" alt="Original join-line behaviour with respect to comments."></p>
<p>This is a bit annoying, though thankfully it’s not difficult to fix!
<code>delete-indentation</code> already has some code that removes a possibly-present <code>fill-prefix</code><a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> variable:</p>
<pre class="emacs-lisp"><code>(defun delete-indentation (&amp;optional arg beg end)
  …
  (let ((prefix (and (&gt; (length fill-prefix) 0)
                     (regexp-quote fill-prefix))))
    (while (and (&gt; (line-beginning-position) beg)
                (forward-line 0)
                (= (preceding-char) ?\n))
      (delete-char -1)
      ;; If the appended line started with the fill prefix,
      ;; delete the prefix.
      (if (and prefix (looking-at prefix))
          (replace-match &quot;&quot; t t))
      (fixup-whitespace))))</code></pre>
<p>Adjusting this to my idiosyncratic preferences is quite straightforward:
just set <code>fill-prefix</code> to the current comment syntax<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>, and let the function do the rest.</p>
<pre class="emacs-lisp"><code>(advice-add 'delete-indentation :around
  (lambda (old-fun &amp;optional arg beg end)
    (let ((fill-prefix comment-start))
      (funcall old-fun arg beg end))))</code></pre>
<p>Pretty neat, huh?
Sadly, this does not quite work yet!</p>
<p><img class="pure-img" src="../images/join-line/join-line-advise.gif" alt="Advised join-line behaviour with respect to comments."></p>
<p>The point is that <code>comment-start</code> for <code>emacs-lisp-mode</code> is simply <code>"; "</code>,
but by convention comments on their own line get two such semicolons instead.
This is also not difficult to fix,
but requires <a href="https://en.wikipedia.org/wiki/Monkey_patch">monkey-patching</a> <code>delete-indentation</code> itself,
rather than just having to advise it.
Ostensibly all we have to do is to change<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a></p>
<pre class="emacs-lisp"><code>(if (and prefix (looking-at prefix))
  …)</code></pre>
<p>to</p>
<pre class="emacs-lisp"><code>(while (and prefix (looking-at prefix))
  …)</code></pre>
<p>While we’re at it,
we might as well remove the advice and hard-code the <code>fill-prefix</code> into the function.
Modulo some minor details,
this gives us the finished product,
which works as expected in all situations I’ve cared to try it in!<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a></p>
<pre class="emacs-lisp"><code>(defun delete-indentation (&amp;optional arg beg end)
  &quot;Join this line to previous and fix up whitespace at join.
If there is a fill prefix, delete it from the beginning of this
line.
With prefix ARG, join the current line to the following line.
When BEG and END are non-nil, join all lines in the region they
define.  Interactively, BEG and END are, respectively, the start
and end of the region if it is active, else nil.  (The region is
ignored if prefix ARG is given.)

When joining lines, smartly delete comment beginnings, such that one
does not have to do this by oneself.&quot;
  (interactive
   (progn (barf-if-buffer-read-only)
          (cons current-prefix-arg
                (and (use-region-p)
                     (list (region-beginning) (region-end))))))
  ;; Consistently deactivate mark even when no text is changed.
  (setq deactivate-mark t)
  (if (and beg (not arg))
      ;; Region is active.  Go to END, but only if region spans
      ;; multiple lines.
      (and (goto-char beg)
           (&gt; end (line-end-position))
           (goto-char end))
    ;; Region is inactive.  Set a loop sentinel
    ;; (subtracting 1 in order to compare less than BOB).
    (setq beg (1- (line-beginning-position (and arg 2))))
    (when arg (forward-line)))
  (let* ((comment (string-trim-right comment-start))
         (prefix-start (and (&gt; (length comment-start) 0)
                            (regexp-quote comment)))
         ;; A continuation of a comment. This is important for
         ;; languages such as Haskell, where -- starts a comment
         ;; and --- still is one.
         (prefix-cont (and prefix-start
                           (regexp-quote (substring comment 0 1))))
         (prev-comment?                 ; Comment on previous line?
          (save-excursion
            (forward-line -1)
            (back-to-indentation)
            (search-forward prefix-start (pos-eol) 'no-error))))
    (while (and (&gt; (line-beginning-position) beg)
                (forward-line 0)
                (= (preceding-char) ?\n))
      (delete-char -1)
      (unless (save-excursion (forward-line -1) (eolp))
        (delete-horizontal-space)
        ;; Delete the start of a comment once.
        (when (and prev-comment? prefix-start (looking-at prefix-start))
          (replace-match &quot;&quot; t t)
          ;; Look for continuations.
          (while (and prefix-cont (looking-at prefix-cont))
            (replace-match &quot;&quot; t t)))
        (fixup-whitespace)))))</code></pre>
<p>If you’re interested in a diff with the original function, you can find that below.</p>
<details>
<summary>
Click
</summary>
<div class="sourceCode" id="cb6"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -6,7 +6,10 @@</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a> When BEG and END are non-nil, join all lines in the region they</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a> define.  Interactively, BEG and END are, respectively, the start</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a> and end of the region if it is active, else nil.  (The region is</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="st">-ignored if prefix ARG is given.)&quot;</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="va">+ignored if prefix ARG is given.)</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="va">+When joining lines, smartly delete comment beginnings, such that one</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="va">+does not have to do this by oneself.&quot;</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>   (interactive</span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>    (progn (barf-if-buffer-read-only)</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>           (cons current-prefix-arg</span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -24,14 +27,28 @@</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>     ;; (subtracting 1 in order to compare less than BOB).</span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a>     (setq beg (1- (line-beginning-position (and arg 2))))</span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a>     (when arg (forward-line)))</span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a><span class="st">-  (let ((prefix (and (&gt; (length fill-prefix) 0)</span></span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a><span class="st">-                     (regexp-quote fill-prefix))))</span></span>
<span id="cb6-19"><a href="#cb6-19" aria-hidden="true" tabindex="-1"></a><span class="va">+  (let* ((comment (string-trim-right comment-start))</span></span>
<span id="cb6-20"><a href="#cb6-20" aria-hidden="true" tabindex="-1"></a><span class="va">+         (prefix-start (and (&gt; (length comment-start) 0)</span></span>
<span id="cb6-21"><a href="#cb6-21" aria-hidden="true" tabindex="-1"></a><span class="va">+                            (regexp-quote comment)))</span></span>
<span id="cb6-22"><a href="#cb6-22" aria-hidden="true" tabindex="-1"></a><span class="va">+         ;; A continuation of a comment. This is important for</span></span>
<span id="cb6-23"><a href="#cb6-23" aria-hidden="true" tabindex="-1"></a><span class="va">+         ;; languages such as Haskell, where -- starts a comment</span></span>
<span id="cb6-24"><a href="#cb6-24" aria-hidden="true" tabindex="-1"></a><span class="va">+         ;; and --- still is one.</span></span>
<span id="cb6-25"><a href="#cb6-25" aria-hidden="true" tabindex="-1"></a><span class="va">+         (prefix-cont (and prefix-start (regexp-quote (substring comment 0 1))))</span></span>
<span id="cb6-26"><a href="#cb6-26" aria-hidden="true" tabindex="-1"></a><span class="va">+         (prev-comment?                 ; Comment on previous line?</span></span>
<span id="cb6-27"><a href="#cb6-27" aria-hidden="true" tabindex="-1"></a><span class="va">+          (save-excursion</span></span>
<span id="cb6-28"><a href="#cb6-28" aria-hidden="true" tabindex="-1"></a><span class="va">+            (forward-line -1)</span></span>
<span id="cb6-29"><a href="#cb6-29" aria-hidden="true" tabindex="-1"></a><span class="va">+            (back-to-indentation)</span></span>
<span id="cb6-30"><a href="#cb6-30" aria-hidden="true" tabindex="-1"></a><span class="va">+            (search-forward prefix-start (pos-eol) 'no-error))))</span></span>
<span id="cb6-31"><a href="#cb6-31" aria-hidden="true" tabindex="-1"></a>     (while (and (&gt; (line-beginning-position) beg)</span>
<span id="cb6-32"><a href="#cb6-32" aria-hidden="true" tabindex="-1"></a>                 (forward-line 0)</span>
<span id="cb6-33"><a href="#cb6-33" aria-hidden="true" tabindex="-1"></a>                 (= (preceding-char) ?\n))</span>
<span id="cb6-34"><a href="#cb6-34" aria-hidden="true" tabindex="-1"></a>       (delete-char -1)</span>
<span id="cb6-35"><a href="#cb6-35" aria-hidden="true" tabindex="-1"></a><span class="st">-      ;; If the appended line started with the fill prefix,</span></span>
<span id="cb6-36"><a href="#cb6-36" aria-hidden="true" tabindex="-1"></a><span class="st">-      ;; delete the prefix.</span></span>
<span id="cb6-37"><a href="#cb6-37" aria-hidden="true" tabindex="-1"></a><span class="st">-      (if (and prefix (looking-at prefix))</span></span>
<span id="cb6-38"><a href="#cb6-38" aria-hidden="true" tabindex="-1"></a><span class="st">-          (replace-match &quot;&quot; t t))</span></span>
<span id="cb6-39"><a href="#cb6-39" aria-hidden="true" tabindex="-1"></a><span class="st">-      (fixup-whitespace))))</span></span>
<span id="cb6-40"><a href="#cb6-40" aria-hidden="true" tabindex="-1"></a><span class="va">+      (unless (save-excursion (forward-line -1) (eolp))</span></span>
<span id="cb6-41"><a href="#cb6-41" aria-hidden="true" tabindex="-1"></a><span class="va">+        (delete-horizontal-space)</span></span>
<span id="cb6-42"><a href="#cb6-42" aria-hidden="true" tabindex="-1"></a><span class="va">+        ;; Delete the start of a comment once.</span></span>
<span id="cb6-43"><a href="#cb6-43" aria-hidden="true" tabindex="-1"></a><span class="va">+        (when (and prev-comment? prefix-start (looking-at prefix-start))</span></span>
<span id="cb6-44"><a href="#cb6-44" aria-hidden="true" tabindex="-1"></a><span class="va">+          (replace-match &quot;&quot; t t)</span></span>
<span id="cb6-45"><a href="#cb6-45" aria-hidden="true" tabindex="-1"></a><span class="va">+          ;; Look for continuations.</span></span>
<span id="cb6-46"><a href="#cb6-46" aria-hidden="true" tabindex="-1"></a><span class="va">+          (while (and prefix-cont (looking-at prefix-cont))</span></span>
<span id="cb6-47"><a href="#cb6-47" aria-hidden="true" tabindex="-1"></a><span class="va">+            (replace-match &quot;&quot; t t)))</span></span>
<span id="cb6-48"><a href="#cb6-48" aria-hidden="true" tabindex="-1"></a><span class="va">+        (fixup-whitespace)))</span></span></code></pre></div>
</details>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>{-} 󠀠</p>
<p>In daily usage, I have this bound to <code>C-u C-w</code>,
where <code>C-w</code> itself is bound to what’s essentially <code>backward-kill-word</code>;
see <a href="https://gitlab.com/slotThe/dotfiles/-/blob/5929dc10bcbdf0d3531bd6f9940f54f8294a27a3/emacs/lisp/hopf-keybindings.el#L131">here</a>
for the full function.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>This is a “String for filling to insert at front of new line, or nil for none.”<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>This is helpfully provided by the <code>comment-start</code> variable.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>{-} 󠀠</p>
<p>Notice that the <code>if</code> in the code is really a <code>when</code>.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>{-} 󠀠</p>
<p>It is in moments like these that I’m extremely glad about<!--
  -->—albeit a bit scared of—<!--
  -->Emacs’s infinite customisability.
If something doesn’t work to your liking,
just overwrite a builtin function;
what’s the worst that could happen?</p>
<p>In case you don’t want to copy the whole function,
you can find a small package for it
on <a href="https://github.com/slotThe/delete-indentation-comments">Microsoft GitHub</a>.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Parentheses-Aware Yanking</title>
    <link href="https://tony-zorman.com/posts/yanking.html" />
    <id>https://tony-zorman.com/posts/yanking.html</id>
    <published>2024-01-03T00:00:00Z</published>
    <updated>2024-01-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2024-01-03
      
      
        &thinsp;·&thinsp; last modified: 2024-01-05
      
      
        &thinsp;·&thinsp; <span title="885 words">4 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>
</p>
<p>Copying, killing, and yanking<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> text in Emacs is quite straightforward,
and very little is done to manipulate the contents of the string during these operations.
Rightfully so, of course,
as this might yield pretty surprising behaviour to many people.
To me, however, inserting unbalanced expressions is even more surprising
than not preprocessing anything at all, so let’s change that.</p>
<!--more-->
<h2 id="the-problem">The problem</h2>
<p>Say you have the following s-expression:</p>
<pre class="emacs-lisp"><code>(insert-for-yank
 (current-kill
  (cond
   ((listp arg) 0)
   ((eq arg '-) -2)
   (t (1- arg)))))</code></pre>
<p>Now, for whatever reason,
you might want to copy the <code>(t (1- arg))</code> on the last line.
One way to do that would be to navigate to it,
set the mark with <code>M-SPC</code>,
jump to its end with <code>M-C-f</code>,
and save everything to the kill ring with <code>M-w</code>.<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>
This works, but it feels a bit slow sometimes,
even when navigating to the expression is fast thanks to
<a href="https://paredit.org/">paredit</a>.</p>
<p>There is the wonderful
<a href="https://github.com/purcell/whole-line-or-region">whole-line-or-region</a>
package,
which makes many commands act on the current line if no region is selected.
With that, copying the last line of the above expression just involves navigating to it and pressing <code>M-w</code>.
Alas, when yanking the line into the buffer again, we are greeted with</p>
<pre class="emacs-lisp"><code>(t (1- arg)))))</code></pre>
<p>Lots of unbalanced parentheses!
This is especially troublesome when one uses
<a href="https://github.com/Malabarba/aggressive-indent-mode">aggressive-indent-mode</a><!--
-->—as I do—since then you run the chance of your buffer shifting around you.</p>
<p>All of this would be fixed with a version of <code>yank</code> that correctly trims off these extraneous parentheses
before yanking the killed text into the buffer.
Let’s make one.<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a></p>
<h2 id="an-approximate-solution">An approximate solution</h2>
<p>We first create a small function that gives us some info about how many
open delimiters<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a> there are in the current buffer.
The implementation is straightforward,
we just need to make sure to take care of a few special cases<!--
-->—and I almost certainly missed one—<!--
-->like delimiters appearing inside of strings or comments.<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a></p>
<pre class="emacs-lisp"><code>(defun slot/get-delimiters ()
  &quot;Return delimiter count in current buffer.
Returns a list, each element being of the form (OPEN CLOSE AMNT),
where OPEN and CLOSE are the respective opening and closing
delimiters, and AMNT is an integer; a positive (negative) number
signalling that there are that many extraneous opening (closing)
delimiters.  Thus, a value of 0 signifies a balanced buffer.

Do not count a delimiter towards the global total if it is
escaped (prefixed by a backslash), part of a string, or part of a
comment.&quot;
  (goto-char (point-min))
  (let-alist '((paren . 0) (square . 0) (curly . 0))
    (while-let ((char (char-after)))
      (unless (or (-intersection (text-properties-at (point))
                                 '(font-lock-string-face
                                   font-lock-comment-face))
                  (eq ?\\ (char-before)))
        (pcase char
          (?\( (cl-incf .paren)) (?\[ (cl-incf .square)) (?\{ (cl-incf .curly))
          (?\) (cl-decf .paren)) (?\] (cl-decf .square)) (?\} (cl-decf .curly))))
      (forward-char))
    `((&quot;(&quot; &quot;)&quot; ,.paren)
      (&quot;[&quot; &quot;]&quot; ,.square)
      (&quot;{&quot; &quot;}&quot; ,.curly))))</code></pre>
<p>Having <code>slot/get-delimiters</code>, which does most of the actual work,
all that’s left to get this running is to actually trim the string before yanking it.
No tricks needed here.</p>
<pre class="emacs-lisp"><code>(defun slot/trim-delimiter (open close n)
  &quot;Trim delimiter in current buffer.
OPEN and CLOSE are the respective opening and closing delimiters.
The number N indicates how many—and which—delimiters to trim.  If
it is positive, trim CLOSE; otherwise, trim OPEN.&quot;
  (-let (((pt del) (if (&lt; n 0)          ; More closing than opening?
                       `(point-max (when (search-backward ,close (point-min) t)
                                     (delete-forward-char 1)))
                     `(point-min (when (search-forward ,open (point-max) t)
                                   (delete-backward-char 1))))))
    (goto-char (funcall pt))
    (dotimes (_ (abs n))
      (eval del))))

(defun slot/trim-delimiters (str)
  &quot;Trim delimiters in current buffer.
See `slot/get-delimiters' for a list of all relevant delimiters,
and `slot/trim-delimiter' for how delimiters are actually
trimmed.&quot;
  (with-temp-buffer
    (insert str)
    (--each (slot/get-delimiters)
      (apply #'slot/trim-delimiter it))
    (buffer-string)))

;; Implementation copied verbatim from `yank', except for the insertion
;; of `slot/trim-delimiters'.
(defun slot/yank (&amp;optional arg)
  &quot;Delimiter-aware yanking.
Like `yank' (which see), but trim non-matching delimiters from
the string before actually yanking it into the current buffer.
The kill-ring itself remains untouched.&quot;
  (interactive &quot;*P&quot;)
  (setq yank-window-start (window-start))
  ;; If we don't get all the way through, make `last-command' indicate
  ;; that for the following command.
  (setq this-command t)
  (push-mark)
  (insert-for-yank (slot/trim-delimiters        ; &lt;- HERE
                    (current-kill
                     (cond
                      ((listp arg) 0)
                      ((eq arg '-) -2)
                      (t (1- arg))))))
  (when (consp arg)
    ;; This is like `exchange-point-and-mark', but doesn't activate
    ;; the mark.  It is cleaner to avoid activation, even though the
    ;; command loop would deactivate the mark because we inserted text.
    (goto-char (prog1 (mark t)
                 (set-marker (mark-marker) (point) (current-buffer)))))
  ;; If we do get all the way through, make `this-command' indicate that.
  (when (eq this-command t)
    (setq this-command 'yank))
  nil)</code></pre>
<p>Instead of defining <code>slot/yank</code>,
one might also just override <code>yank</code> with the new definition.
That, however, seems a bit uncouth,
and it’s not terribly difficult to assign the same key to the new function:</p>
<pre class="emacs-lisp"><code>(bind-key &quot;C-y&quot; #'slot/yank)</code></pre>
<p>Killing <code>(t (1- arg)))))</code> and yanking it again yields <code>(t (1- arg))</code>,
as desired.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>Also known as copying, cutting, and pasting in every other context ever.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>One might also use <code>C-k C-y</code> (<code>paredit-kill</code> followed by <code>yank</code>) instead of <code>M-SPC M-C-f M-w</code>,
but that only works at the end of an expression.
Plus, what <code>paredit-kill</code> kills might be more than the current line.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>Doing it this way also has the added benefit of working for every major mode,
not just ones where I happen to use paredit
(or <a href="https://github.com/AmaiKinono/puni">puni</a>).<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>By “delimiter” I mean parentheses, square brackets, and curly braces.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>{-} 󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>This code now also lives <a href="https://github.com/slotThe/yank-delimiters">here</a>.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Integrating Zsh's History Into Eshell</title>
    <link href="https://tony-zorman.com/posts/eshell-zsh-history.html" />
    <id>https://tony-zorman.com/posts/eshell-zsh-history.html</id>
    <published>2023-11-27T00:00:00Z</published>
    <updated>2023-11-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2023-11-27
      
      
      
        &thinsp;·&thinsp; <span title="416 words">2 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->


<div>
  <p>I use eshell as my main shell.
Still,
a terminal emulator with zsh is kept around for longer running processes and <a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Util-NamedScratchpad.html">scratchpads</a>.
One thing that’s essential for this setup to make sense is that eshell and zsh share the same history file.
Sadly,
this doesn’t work out of the box:
zsh stores its history in a metafied format<!--
-->—nothing that’s not fixable on the Emacs side, of course!</p>
<!--more-->
<p><a href="https://www.zsh.org/mla/users/2011/msg00154.html">This email</a> explains the problem quite well.
In short:</p>
<blockquote>
<p>[…] when 0x80-0x9F characters are used, then always 0x83 Meta
character is inserted and following character is bit shifted, […]</p>
</blockquote>
<p>This is not a bug, but expected behaviour;
zsh’s history is saved in exactly such a metafied format.
The upshot is that,
when setting <code>eshell-history-file-name</code> to e.g. <code>"~/.config/zsh/zsh_history"</code>,
Emacs either won’t know how to properly encode the file upon exiting eshell,
or one will get suggestions<!--
-->—using a package like <a href="https://github.com/dieggsy/esh-autosuggest">esh-autosuggest</a>—<!--
-->containing garbage like <code>\304§</code> instead of <code>ć</code>.</p>
<p>The linked discussion helpfully contains a small C program to unmetafy the history:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#define Meta </span><span class="op">((</span><span class="dt">char</span><span class="op">)</span><span class="pp"> </span><span class="bn">0x83</span><span class="op">)</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="co">/* from zsh utils.c */</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="dt">char</span> <span class="op">*</span>unmetafy<span class="op">(</span><span class="dt">char</span> <span class="op">*</span>s<span class="op">,</span> <span class="dt">int</span> <span class="op">*</span>len<span class="op">)</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>  <span class="dt">char</span> <span class="op">*</span>p<span class="op">,</span> <span class="op">*</span>t<span class="op">;</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">(</span>p <span class="op">=</span> s<span class="op">;</span> <span class="op">*</span>p <span class="op">&amp;&amp;</span> <span class="op">*</span>p <span class="op">!=</span> Meta<span class="op">;</span> p<span class="op">++);</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">(</span>t <span class="op">=</span> p<span class="op">;</span> <span class="op">(*</span>t <span class="op">=</span> <span class="op">*</span>p<span class="op">++);)</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(*</span>t<span class="op">++</span> <span class="op">==</span> Meta<span class="op">)</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>      t<span class="op">[-</span><span class="dv">1</span><span class="op">]</span> <span class="op">=</span> <span class="op">*</span>p<span class="op">++</span> <span class="op">^</span> <span class="dv">32</span><span class="op">;</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>len<span class="op">)</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">*</span>len <span class="op">=</span> t <span class="op">-</span> s<span class="op">;</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> s<span class="op">;</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>This looks pretty terse,
at least to my non-C-reading-eyes,
but essentially every time <code>0x83</code> is encountered,
we delete it and XOR the following character with the number 32.
An implementation in elisp might look like the following:</p>
<pre class="emacs-lisp"><code>(defun slot/unmetafy ()
  (cl-flet ((unmetafy (input)
              (let ((i 0) output)
                (while-let ((char (nth i input))
                            (inc-and-char
                             (if (= char #x83)
                                 ;; Skip meta character and unmetafy.
                                 `(2 . ,(logxor (nth (1+ i) input) 32))
                               ;; Advance as usual.
                               `(1 . ,char))))
                  (cl-incf i (car inc-and-char))
                  (setq output (cons (cdr inc-and-char) output)))
                (decode-coding-string
                 (apply #'unibyte-string (nreverse output))
                 'utf-8-unix
                 t))))
    (let ((hist-file &quot;~/.config/zsh/zsh_history&quot;))
      (with-temp-buffer
        (insert (mapconcat (-compose #'unmetafy #'string-to-list)
                           (s-lines (f-read-bytes hist-file))
                           &quot;\n&quot;))
        (write-file hist-file)))))
</code></pre>
<p>This can be conveniently integrated into an <code>eshell/exit</code>-like function,
such as</p>
<pre class="emacs-lisp"><code>(defun slot/eshell-exit (&amp;optional arg)
  &quot;Exit eshell and kill the current frame.&quot;
  (interactive &quot;P&quot;)
  (slot/unmetafy)
  (eshell-write-history)
  (save-buffers-kill-terminal))
</code></pre>
<p>Finally, one just need to take care to bind that function to a key,
and to unmetafy the history when eshell starts.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></p>
<pre class="emacs-lisp"><code>(use-package eshell
  :hook (eshell-hist-load . slot/unmetafy)
  :bind (:map eshell-mode-map
              (&quot;C-x C-c&quot; . slot/eshell-exit)))
</code></pre>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>Unmetafying when quitting resolves the “Emacs can’t decide on an encoding” issue,
and doing so at the start solves <code>esh-autosuggest</code> et al producing garbage suggestions.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Using XMonad with NixOS</title>
    <link href="https://tony-zorman.com/posts/xmonad-on-nixos.html" />
    <id>https://tony-zorman.com/posts/xmonad-on-nixos.html</id>
    <published>2023-11-13T00:00:00Z</published>
    <updated>2023-11-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2023-11-13
      
      
        &thinsp;·&thinsp; last modified: 2024-10-15
      
      
        &thinsp;·&thinsp; <span title="1173 words">5 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>, <a title="All pages tagged 'nix'." href="/tags/nix.html" rel="tag">nix</a>, <a title="All pages tagged 'xmonad'." href="/tags/xmonad.html" rel="tag">xmonad</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>
I recently switched to NixOS,
and one of the first tasks was to properly set up my window manager of choice—XMonad, of course.
Luckily, the project provides a custom flake that makes pretty very straightforward;
if you know your way around flakes and Nix, that is.
I don’t yet, so I hit some rough spots.
Since providing more documentation always sounds like a worthwhile goal,
this post is just that: a diff-by-diff guide on how everything was set up on my side.
</p>
<!--more-->
As indicated, I’ll be working with direct diffs from my configuration;
this seems to tell the story in the most accurate way.
Because scrolling through lots of diffs is about as fun as a visit to the dentist,
they are all tucked away in expandable sections
<details>
<summary>
Like this one
</summary>
Hi :)
</details>
<h2 id="setup">Setup</h2>
<p>First and foremost I should mention that XMonad does in fact have some documentation on how to set up the flake:
it’s tucked away in <a href="https://github.com/xmonad/xmonad-contrib/blob/master/NIX.md">NIX.md</a>.
The process mainly consists of two parts:
adding an <code>xmonad-contrib</code> input to your system flake,
and enabling this functionality in <code>windowManager.xmonad</code>.</p>
<details>
<summary>
Modifying the system flake
</summary>
<p><a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></p>
<div class="sourceCode" id="cb1"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">diff --git a/flake.nix b/flake.nix</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>index 4cf35e4..dedd839 100644</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="dt">--- a/flake.nix</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/flake.nix</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -6,13 +6,14 @@</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>     emacs-overlay.url = github:nix-community/emacs-overlay;</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>     hmenu.url         = gitlab:slotThe/hmenu;</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>     kmonad.url        = git+https://github.com/kmonad/kmonad?submodules=1&amp;dir=nix;</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="va">+    xmonad-contrib.url= github:xmonad/xmonad-contrib;</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>     home-manager      = {</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>       url = github:nix-community/home-manager;</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>       inputs.nixpkgs.follows = &quot;nixpkgs&quot;;</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>     };</span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>   };</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a><span class="st">-  outputs = inputs@{ self, nixpkgs, emacs-overlay, hmenu, kmonad, home-manager, ... }:</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a><span class="va">+  outputs = inputs@{ self, nixpkgs, emacs-overlay, hmenu, kmonad, xmonad-contrib, home-manager, ... }:</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>     let my-overlays = {</span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>           nixpkgs.overlays = [</span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>             emacs-overlay.overlays.default</span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -20,7 +21,7 @@</span></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a>           ];</span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>         };</span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>     in {</span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a><span class="st">-      nixosConfigurations.comonad = nixpkgs.lib.nixosSystem {</span></span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a><span class="va">+      nixosConfigurations.comonad = nixpkgs.lib.nixosSystem rec {</span></span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a>         system  = &quot;x86_64-linux&quot;;</span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a>         modules = [</span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>           ./nix/hardware-configuration.nix</span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -34,6 +35,8 @@</span></span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a>             home-manager.useUserPackages = true;</span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a>             home-manager.users.slot      = import ./nix/home.nix;</span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a>           }</span>
<span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a><span class="va">+        ] ++ xmonad-contrib.nixosModules ++ [</span></span>
<span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a><span class="va">+          xmonad-contrib.modernise.${system}</span></span>
<span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a>         ];</span>
<span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a>       };</span>
<span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a>     };</span></code></pre></div>
</details>
<p>After having added the input, making use of the flake is quite easy.<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a></p>
<details>
<summary>
Enabling the flake
</summary>
<div class="sourceCode" id="cb2"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">diff --git a/nix/configuration.nix b/nix/configuration.nix</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>index 4700e14..50b1519 100644</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="dt">--- a/nix/configuration.nix</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/nix/configuration.nix</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -63,6 +63,16 @@</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>     enable = true;</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>     layout = &quot;us&quot;;</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>     displayManager.startx.enable = true;</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="va">+    windowManager.xmonad = {</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="va">+      enable = true;</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a><span class="va">+      enableContribAndExtras = true;</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a><span class="va">+      flake  = {</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a><span class="va">+        enable   = true;</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a><span class="va">+        compiler = &quot;ghc947&quot;;</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a><span class="va">+      };</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a><span class="va">+      config = builtins.readFile ../xmonad/xmonad.hs;</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a><span class="va">+      enableConfiguredRecompile = true;</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a><span class="va">+    };</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>   };</span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>   fonts.packages = with pkgs; [</span></code></pre></div>
</details>
<p>And that’s really it!
No need to write a custom <code>launch</code> function and similar shenanigans,
the flake takes care of all of those details for you—pretty neat, I think;
thanks <a href="https://github.com/lsleary">Leary</a>!</p>
<h2 id="primitive-emacs-integration">Primitive Emacs integration</h2>
<p>Though not directly relevant to making the flake work,
a nice-to-have feature is Emacs support.
One could <a href="https://srid.ca/xmonad-conf-ide">create a cabal project</a> to get real <code>haskell-language-server</code> support,
but that seems a bit overkill to me.
I don’t really need more than a <code>ghci</code> session for my configuration<!--
-->—anything complicated enough to warrant a language server should immediately be upstreamed into <code>xmonad-contrib</code>.</p>
<p>In Emacs’s <code>haskell-mode</code>,
executing <code>haskell-interactive-bring</code> (bound to <code>C-c C-c</code> by default)
brings up a <code>ghci</code> session.<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>
Rather obviously, this fails out of the box.
It tries to call the global <code>ghci</code>,
which doesn’t come from the flake,
and is thus not equipped with <code>xmonad-contrib</code> and other dependencies that I might have.</p>
<p>The low-tech solution I chose here is twofold;
first, I outsourced starting the Emacs daemon from my xinitrc to my XMonad configuration file.
In this way, the resulting Emacs instance comes equipped with the <code>$XMONAD_GHC</code> environment variable.</p>
<details>
<summary>
Moving Emacs
</summary>
<div class="sourceCode" id="cb4"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">diff --git a/nix/modules/emacs.nix b/nix/modules/emacs.nix</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>index 794f636..fad9cd0 100644</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="dt">--- a/nix/modules/emacs.nix</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/nix/modules/emacs.nix</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -1,8 +1,6 @@</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a> { config, pkgs, ... }:</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a> {</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="st">-  services.emacs.enable = true; # Start as daemon</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="st">-</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>   xdg.configFile.&quot;emacs&quot;.source = config.lib.my.mkSymlink &quot;emacs&quot;;</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>   home.packages = with pkgs; [</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a><span class="kw">diff --git a/xinitrc/.xinitrc b/xinitrc/.xinitrc</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>index c9a6958..b8176bd 100755</span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a><span class="dt">--- a/xinitrc/.xinitrc</span></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/xinitrc/.xinitrc</span></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -32,10 +32,6 @@ kmonad ~/.config/kmonad/config.kbd &amp;</span></span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a> # 14dec2019</span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a> redshift -l 55.7:12.6 -t 6500K:3200K -b 1.0:0.8 &amp;</span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a><span class="st">-# Start emacs as a daemon.</span></span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a><span class="st">-emacs --daemon &amp;</span></span>
<span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a><span class="st">-emacs --daemon=eshell &amp;</span></span>
<span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a><span class="st">-</span></span>
<span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a> # Hide mouse cursor when idle.</span>
<span id="cb4-27"><a href="#cb4-27" aria-hidden="true" tabindex="-1"></a> unclutter --ignore-scrolling &amp;</span>
<span id="cb4-28"><a href="#cb4-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-29"><a href="#cb4-29" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -46,4 +42,4 @@ wallpaper-changer &amp;</span></span>
<span id="cb4-30"><a href="#cb4-30" aria-hidden="true" tabindex="-1"></a> compton --blur-method kawase --blur-strength 5 --config ~/.config/compton/compton.conf &amp;</span>
<span id="cb4-31"><a href="#cb4-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-32"><a href="#cb4-32" aria-hidden="true" tabindex="-1"></a> # Start the window manager.</span>
<span id="cb4-33"><a href="#cb4-33" aria-hidden="true" tabindex="-1"></a><span class="st">-exec &quot;$XMONAD_CONFIG_DIR&quot;/xmonad-x86_64-linux</span></span>
<span id="cb4-34"><a href="#cb4-34" aria-hidden="true" tabindex="-1"></a><span class="va">+exec xmonad</span></span>
<span id="cb4-35"><a href="#cb4-35" aria-hidden="true" tabindex="-1"></a><span class="kw">diff --git a/xmonad/xmonad.hs b/xmonad/xmonad.hs</span></span>
<span id="cb4-36"><a href="#cb4-36" aria-hidden="true" tabindex="-1"></a>index 5802888..933a274 100644</span>
<span id="cb4-37"><a href="#cb4-37" aria-hidden="true" tabindex="-1"></a><span class="dt">--- a/xmonad/xmonad.hs</span></span>
<span id="cb4-38"><a href="#cb4-38" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/xmonad/xmonad.hs</span></span>
<span id="cb4-39"><a href="#cb4-39" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -80,6 +80,7 @@ import XMonad.Prompt.Workspace (workspacePrompt)</span></span>
<span id="cb4-40"><a href="#cb4-40" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-41"><a href="#cb4-41" aria-hidden="true" tabindex="-1"></a> import XMonad.Util.Cursor (setDefaultCursor)</span>
<span id="cb4-42"><a href="#cb4-42" aria-hidden="true" tabindex="-1"></a> import XMonad.Util.EZConfig (additionalKeysP)</span>
<span id="cb4-43"><a href="#cb4-43" aria-hidden="true" tabindex="-1"></a><span class="va">+import XMonad.Util.SpawnOnce (spawnOnce)</span></span>
<span id="cb4-44"><a href="#cb4-44" aria-hidden="true" tabindex="-1"></a> import XMonad.Util.Loggers (logTitlesOnScreen)</span>
<span id="cb4-45"><a href="#cb4-45" aria-hidden="true" tabindex="-1"></a> import XMonad.Util.NamedScratchpad (NamedScratchpad (NS), customFloating, namedScratchpadAction, namedScratchpadManageHook, scratchpadWorkspaceTag)</span>
<span id="cb4-46"><a href="#cb4-46" aria-hidden="true" tabindex="-1"></a> import XMonad.Util.Run (EmacsLib (ElpaLib, Special), asBatch, asString, elispFun, eval, execute, executeNoQuote, findFile, getInput, inEditor, inEmacs, inProgram, inTerm, proc, progn, quote, require, setFrameName, setXClass, spawnExternalProcess, termInDir, toInput, withEmacsLibs, (&gt;&amp;&amp;&gt;), (&gt;-$), (&gt;-&gt;))</span>
<span id="cb4-47"><a href="#cb4-47" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -121,7 +122,10 @@ myConfig = def</span></span>
<span id="cb4-48"><a href="#cb4-48" aria-hidden="true" tabindex="-1"></a>   , normalBorderColor  = colorBg</span>
<span id="cb4-49"><a href="#cb4-49" aria-hidden="true" tabindex="-1"></a>   , focusedBorderColor = colorBlue</span>
<span id="cb4-50"><a href="#cb4-50" aria-hidden="true" tabindex="-1"></a>   , terminal           = &quot;alacritty&quot;</span>
<span id="cb4-51"><a href="#cb4-51" aria-hidden="true" tabindex="-1"></a><span class="st">-  , startupHook        = setDefaultCursor xC_left_ptr</span></span>
<span id="cb4-52"><a href="#cb4-52" aria-hidden="true" tabindex="-1"></a><span class="va">+  , startupHook        = do</span></span>
<span id="cb4-53"><a href="#cb4-53" aria-hidden="true" tabindex="-1"></a><span class="va">+      setDefaultCursor xC_left_ptr</span></span>
<span id="cb4-54"><a href="#cb4-54" aria-hidden="true" tabindex="-1"></a><span class="va">+      spawnOnce &quot;emacs --daemon&quot;        -- See Note [Emacs]</span></span>
<span id="cb4-55"><a href="#cb4-55" aria-hidden="true" tabindex="-1"></a><span class="va">+      spawnOnce &quot;emacs --daemon=eshell&quot;</span></span>
<span id="cb4-56"><a href="#cb4-56" aria-hidden="true" tabindex="-1"></a>   , workspaces         = topicNames topics</span>
<span id="cb4-57"><a href="#cb4-57" aria-hidden="true" tabindex="-1"></a>   , manageHook         = myManageHook</span>
<span id="cb4-58"><a href="#cb4-58" aria-hidden="true" tabindex="-1"></a>   , layoutHook         = lessBorders (Combine Union Screen OnlyFloat) layoutOrder</span>
<span id="cb4-59"><a href="#cb4-59" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -132,6 +136,14 @@ myConfig = def</span></span>
<span id="cb4-60"><a href="#cb4-60" aria-hidden="true" tabindex="-1"></a>                          -- move pointer to exact center of that window.</span>
<span id="cb4-61"><a href="#cb4-61" aria-hidden="true" tabindex="-1"></a>   }</span>
<span id="cb4-62"><a href="#cb4-62" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-63"><a href="#cb4-63" aria-hidden="true" tabindex="-1"></a><span class="va">+{- Note [Emacs]</span></span>
<span id="cb4-64"><a href="#cb4-64" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb4-65"><a href="#cb4-65" aria-hidden="true" tabindex="-1"></a><span class="va">+All of the Emacs daemons are spawned here, and *not* as systemd services</span></span>
<span id="cb4-66"><a href="#cb4-66" aria-hidden="true" tabindex="-1"></a><span class="va">+or in the ~/.xinitrc. The reason is that, in this way, Emacs inherits</span></span>
<span id="cb4-67"><a href="#cb4-67" aria-hidden="true" tabindex="-1"></a><span class="va">+all environment variables that are set by the XMonad executable, like</span></span>
<span id="cb4-68"><a href="#cb4-68" aria-hidden="true" tabindex="-1"></a><span class="va">+$XMONAD_GHC. See the bottom of this file for a use-case.</span></span>
<span id="cb4-69"><a href="#cb4-69" aria-hidden="true" tabindex="-1"></a><span class="va">+-}</span></span>
<span id="cb4-70"><a href="#cb4-70" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb4-71"><a href="#cb4-71" aria-hidden="true" tabindex="-1"></a> -- | Building my own pretty-printer.</span>
<span id="cb4-72"><a href="#cb4-72" aria-hidden="true" tabindex="-1"></a> xmobarPP :: ScreenId -&gt; X PP</span>
<span id="cb4-73"><a href="#cb4-73" aria-hidden="true" tabindex="-1"></a> xmobarPP sid = pure . filterOutWsPP [scratchpadWorkspaceTag] $ def</span></code></pre></div>
</details>
<p>All that’s left now is to set some local variable,
making Emacs aware that it should use another GHC version for my <code>xmonad.hs</code>.</p>
<details>
<summary>
Adding <code>haskell-process-path</code> to my <code>xmonad.hs</code>
</summary>
<div class="sourceCode" id="cb5"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">diff --git a/xmonad/xmonad.hs b/xmonad/xmonad.hs</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>index 933a274..185ed2e 100644</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="dt">--- a/xmonad/xmonad.hs</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/xmonad/xmonad.hs</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -881,3 +881,8 @@ switchToLayout = sendMessage . JumpToLayout</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a> -- submap from a list of @(key, action)@ pairs.</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a> basicSubmapFromList :: Ord key =&gt; [(key, action)] -&gt; Map (KeyMask, key) action</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a> basicSubmapFromList = fromList . map \(k, a) -&gt; ((0, k), a)</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a><span class="va">+--- Local Variables:</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a><span class="va">+--- mode: haskell</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a><span class="va">+--- eval: (setopt haskell-process-path-ghci (concat (or (getenv &quot;XMONAD_GHC&quot;) &quot;ghc&quot;) &quot;i&quot;))</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a><span class="va">+--- End:</span></span></code></pre></div>
</details>
<p>Now <code>C-c C-c</code> works out of the box!</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>{-} 󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>Note that <code>xmonad-contrib.modernise.${system}</code> was only temporarily needed until nixpkgs caught up with some upstream changes in XMonad.
If you still have this in your flake, you should probably remove it—it might lead to quirky behaviour upon evaluation!<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>Note the presence of the <code>enableConfiguredRecompile</code> flag—this is necessary for <code>M-q</code> recompilation to work out of the box!
I figured that out so you don’t have to.
Make sure that the revision of <code>nixpkgs</code> that you track is recent enough,
else this flag may not be available.</p>
<p>Also, don’t forget to provide XMonad with your configuration,
lest you will be greeted by a black screen upon login.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>More precisely, I have <code>C-c C-c</code> bound to</p>
<pre class="emacs-lisp"><code>(defun slot/haskell-load-and-bring ()
  &quot;Sane behaviour when loading the current file into ghci.&quot;
  (interactive)
  (save-buffer)
  (haskell-process-load-file)
  (haskell-interactive-bring))</code></pre>
<p>but this is only a small quality of life wrapper.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Fixing Lsp-Mode's Hover Signatures</title>
    <link href="https://tony-zorman.com/posts/fixing-lsp-mode.html" />
    <id>https://tony-zorman.com/posts/fixing-lsp-mode.html</id>
    <published>2023-10-22T00:00:00Z</published>
    <updated>2023-10-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2023-10-22
      
      
        &thinsp;·&thinsp; last modified: 2023-10-27
      
      
        &thinsp;·&thinsp; <span title="1148 words">5 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>, <a title="All pages tagged 'haskell'." href="/tags/haskell.html" rel="tag">haskell</a>, <a title="All pages tagged 'rust'." href="/tags/rust.html" rel="tag">rust</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>By now,
LSP servers have become the norm for editor-agnostic language support.
As expected, Emacs features at least two packages that implement the protocol:
the built-in <code>eglot</code>,
and the third-party <code>lsp-mode</code>.
I will focus on the latter in this post.</p>
<p>L<span class="small-caps">sp</span> clients have the option of showing useful things on hover.
In most languages, there is an obvious candidate for this:
the type signature of the thing at point.
Sadly—for some languages—the implementation of the feature is… not great.
Buggy even, one might say.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>
Taking this as an excuse to talk about Emacs’s infinite customisability,
there is of course a way to fix this within the bounds of our configuration.
Let’s do that!</p>
<!--more-->
<h2 id="the-problem">The problem</h2>
<p>Take any Haskell function with a long enough type signature, like the
following:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">iAmTooLong ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>iAmTooLong <span class="ot">=</span> <span class="fu">undefined</span></span></code></pre></div>
<p>By default, lsp-mode<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> will display the following type signature
in the echo-area
when hovering over the function name:</p>
<p><img class="pure-img" style="padding-left: 1em;" src="../images/fixing-lsp-mode/lsp-mode-default.png" alt="By default, lsp-mode only shows `iamTooLong :: Stirng`"></p>
<p>That’s… not correct.
Executing <code>lsp-describe-thing-at-point</code> immediately reveals the problem;
the request we get back looks like this:</p>
<pre><code>``` haskell
iAmTooLong :: String
-&gt; String
-&gt; String
-&gt; String
-&gt; String
-&gt; String
-&gt; String
-&gt; String
```

Defined at »PATH«</code></pre>
<p>The type signature is so long that the server breaks it into several lines.
Lsp-mode uses <code>lsp-clients-extract-signature-on-hover</code> to extract a signature on hover—by default, it looks like this:</p>
<pre class="emacs-lisp"><code>(cl-defgeneric lsp-clients-extract-signature-on-hover (contents _server-id)
  &quot;Extract a representative line from CONTENTS, to show in the echo area.&quot;
  (car (s-lines (s-trim (lsp--render-element contents)))))</code></pre>
<p>It just takes the first line of the first markdown code block.
While this works for simple type signatures,
it obviously falls flat in more complicated scenarios.
However, this being a generic function,
there’s the possibility to overload it depending on the major mode.</p>
<h2 id="fixing-haskell-type-signatures">Fixing Haskell type signatures</h2>
<p>The strategy seems pretty clear:
extract the whole block instead of only the first line.
This is swiftly done:<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a></p>
<pre class="emacs-lisp"><code>(defun slot/lsp-get-type-signature (lang str)
  &quot;Get LANGs type signature in STR.
Original implementation from https://github.com/emacs-lsp/lsp-mode/pull/1740.&quot;
  (let* ((start (concat &quot;```&quot; lang))
         (groups (--filter (s-equals? start (car it))
                           (-partition-by #'s-blank? (s-lines (s-trim str)))))
         (name-at-point (symbol-name (symbol-at-point)))
         (type-sig-group (car
                          (--filter (s-contains? name-at-point (cadr it))
                                    groups))))
    (-&gt;&gt; (or type-sig-group (car groups))
         (-drop 1)                    ; ``` LANG
         (-drop-last 1)               ; ```
         (-map #'s-trim)
         (s-join &quot; &quot;))))</code></pre>
<p>We can now override the method with our own implementation:</p>
<pre class="emacs-lisp"><code>(cl-defmethod lsp-clients-extract-signature-on-hover
  (contents (_server-id (eql lsp-haskell))) ; Only for Haskell.
  &quot;Display the type signature of the function at point.&quot;
  (slot/lsp-get-type-signature &quot;haskell&quot; (plist-get contents :value)))</code></pre>
<p>This already looks <em>fine</em>, but something is still amiss.</p>
<p><img class="pure-img" style="padding-left: 1em;" src="../images/fixing-lsp-mode/lsp-mode-no-syntax-highlighting.png" alt="Correctly shows the whole type signature, but there is no syntax highlighting"></p>
<p>There is no syntax highlighting!
Thankfully, this is not very difficult to fix;
the idea is to paste the string into a temporary buffer,
activate <code>haskell-mode</code>,
and grab the propertised string from that.
The only thing to take care of is that we dont want to run <code>lsp-mode</code> and friends <em>again</em> in the temporary buffer.</p>
<pre class="emacs-lisp"><code>(defun slot/syntax-highlight-string (str mode)
  &quot;Syntax highlight STR in MODE.&quot;
  (with-temp-buffer
    (insert str)
    ;; We definitely don't want to call certain modes, so delay the mode's
    ;; hooks until we have removed them.
    (delay-mode-hooks (funcall mode))
    (-map #'funcall
          (--remove (-contains? '(lsp-mode lsp-deferred) it)
                    (-mapcat #'symbol-value delayed-mode-hooks)))
    ;; Now we can propertise the string.
    (font-lock-ensure)
    (buffer-string)))</code></pre>
<p>Lsp-mode also provides a function for this, <code>lsp--render-string</code>,
but that one does not try to load all of the “safe” hooks for the major mode.
However, I have some <code>pretify-symbols-mode</code> configuration for Haskell
which I would very much like to take effect.</p>
<p>All in all, we have<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a></p>
<pre class="emacs-lisp"><code>;; Fixes https://github.com/emacs-lsp/lsp-haskell/issues/151
(cl-defmethod lsp-clients-extract-signature-on-hover
  (contents (_server-id (eql lsp-haskell)))
  &quot;Display the type signature of the function at point.&quot;
  (slot/syntax-highlight-string
   (slot/lsp-get-type-signature &quot;haskell&quot; (plist-get contents :value))
   'haskell-mode))</code></pre>
<p>This works quite nicely:</p>
<p><img class="pure-img" style="padding-left: 1em;" src="../images/fixing-lsp-mode/lsp-mode-fixed.png" alt="Properly syntax highlighted type signature"></p>
<h2 id="fixing-rust-hovers">Fixing Rust hovers</h2>
<p>One of the above code snippets already mentions <a href="https://github.com/emacs-lsp/lsp-mode/pull/1740">lsp-mode#1740</a>,
which is not about Haskell, but Rust,
a language that I also occasionally dabble in.
The basic issue here goes like this:
by default, <code>lsp-mode</code> shows the following hover information.</p>
<p><img class="pure-img" style="padding-left: 1em;" src="../images/fixing-lsp-mode/lsp-rust-default-hover.png" alt="By default, the hover shows the module that the identifier is imported from"></p>
<p>Much like the user who opened the mentioned pull-request,
I really don’t care about this.
Instead, I’d much rather see</p>
<p><img class="pure-img" style="padding-left: 1em;" src="../images/fixing-lsp-mode/lsp-rust-improved-hover.png" alt="Instead of the module, show the type singature"></p>
<p>which looks much more useful to me.</p>
<p>Luckily, this is exactly the same situation as in the Haskell case,
which we already fixed.
Writing</p>
<pre class="emacs-lisp"><code>(cl-defmethod lsp-clients-extract-signature-on-hover
  (contents (_server-id (eql rust-analyzer))) ; Only for Rust.
  &quot;Display the type signature of the function at point.&quot;
  (slot/syntax-highlight-string
   (slot/lsp-get-type-signature &quot;rust&quot; (plist-get contents :value))
   'rustic-mode))</code></pre>
<p>works out of the box.
Nice.</p>
<h2 id="bonus-adding-type-signatures">Bonus: adding type signatures</h2>
<p>Here’s another problem that we’ve solved <em>en passant</em>:
lsp-mode has code-lens support<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a>,
which enables one to add type signatures by clicking on the relevant button:</p>
<p><img class="pure-img" style="padding-left: 1em;" src="../images/fixing-lsp-mode/add-type-signature-mouse.gif" alt="Clicking on the relevant code lens adds a type signature"></p>
<p>However, this ostensibly requires me to use the mouse,<a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a>
and—more importantly—the above GIF also shows that local functions do not have such a code lens attached to them.
I quite like type signatures for local definitions,
so that’s a bit of a shame.</p>
<p>Fixing this is not terribly difficult either;
the hardest thing is having to look through lsp-mode’s codebase so one actually knows which functions to call.
When defining the overrides for <code>lsp-clients-extract-signature-on-hover</code>, the LSP response was free,
whereas now we want to create a request for the thing at point.</p>
<pre class="emacs-lisp"><code>(defun slot/lsp-get-type-signature-at-point (&amp;optional lang)
  &quot;Get LANGs type signature at point.
LANG is not given, get it from `lsp--buffer-language'.&quot;
  (interactive)
  (-some-&gt;&gt; (lsp--text-document-position-params)
    (lsp--make-request &quot;textDocument/hover&quot;)
    lsp--send-request
    lsp:hover-contents
    (funcall (-flip #'plist-get) :value)
    (slot/lsp-get-type-signature (or lang lsp--buffer-language))))</code></pre>
<p>Once we have the type signature at point,
all that’s left is to insert it into the buffer.<a href="#fn7" class="footnote-ref" id="fnref7" role="doc-noteref"><sup>7</sup></a></p>
<pre class="emacs-lisp"><code>(defun slot/lsp-haskell-type-signature ()
  &quot;Add a type signature for the thing at point.
This is very convenient, for example, when dealing with local
functions, since those—as opposed to top-level expressions—don't
have a code lens for \&quot;add type signature here\&quot; associated with
them.&quot;
  (interactive)
  (let* ((value (slot/lsp-get-type-signature-at-point &quot;haskell&quot;)))
    (slot/back-to-indentation)
    (insert value)
    (haskell-indentation-newline-and-indent)))</code></pre>
<p>Bind that to a key and you’re good to go!</p>
<p><img class="pure-img" style="padding-left: 1em;" src="../images/fixing-lsp-mode/add-type-signature-keybinding.gif" alt="Clicking on the relevant code lens adds a type signature"></p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>I have reported this as a bug <a href="https://github.com/emacs-lsp/lsp-haskell/issues/151">here</a>,
but that issue seems to have stalled,
so here we are.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>And also eglot, judging from a cursory test.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>Even more so because smart people have already written this for me;
see the docstring.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>{-} 󠀠</p>
<p>󠀠</p>
<p>This code assumes that lsp-mode uses
<a href="https://emacs-lsp.github.io/lsp-mode/page/performance/#use-plists-for-deserialization">plists instead of hash tables for deserialisation</a>.
If you don’t have the <code>lsp-use-plists</code> variable set<!--
  -->—and have recompiled lsp-mode afterwards—<!--
  -->then just replace <code>(plist-get contents :value)</code> with <code>(gethash "value" contents)</code>.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>Incidentally, this is the only reason that I use lsp-mode over eglot.
There is a
<a href="https://github.com/joaotavora/eglot/pull/71">stalled PR</a>
from five years ago,
but that never led anywhere.
<em>Someone</em> should pick this back up, I suppose.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6"><p>Lsp-mode also provides <code>lsp-avy-lens</code>,
so this is not really an actual problem.<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn7"><p>{-} For when hovering inexplicably breaks again,
this also enables for a quick definition of “show the type signature of the thing at point”:</p>
<pre class="emacs-lisp"><code>(defun slot/lsp-show-type-signature ()
  &quot;Show the type signature for the thing at
point.  This is essentially what
`lsp-clients-extract-signature-on-hover'
does, just as an extra function.&quot;
  (interactive)
  (message
   (slot/syntax-highlight-string
    (slot/lsp-get-type-signature-at-point)
    major-mode)))</code></pre>
<p>This can, again, be bound to a key for convenient access.<a href="#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Prettifying LaTeX Buffers</title>
    <link href="https://tony-zorman.com/posts/pretty-latex.html" />
    <id>https://tony-zorman.com/posts/pretty-latex.html</id>
    <published>2023-09-10T00:00:00Z</published>
    <updated>2023-09-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2023-09-10
      
      
        &thinsp;·&thinsp; last modified: 2023-10-15
      
      
        &thinsp;·&thinsp; <span title="1622 words">7 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>A friend recently confided in me that,
after years of using Emacs,
he was only now getting into using <code>prettify-symbols-mode</code> for editing LaTeX buffers!
After overwhelming him with more customisations related to this,
I realised that the topic<!--
-->—while seemingly easy on the surface—<!--
-->actually has a lot more depth to it than one would first imagine.</p>
<!--more-->
<h2 id="prettify-symbols-mode"><code>prettify-symbols-mode</code></h2>
<p>If you’ve never come into contact with <code>prettify-symbols-mode</code> before,
I encourage you to just issue an <code>M-x prettify-symbols-mode RET</code> in a <code>LaTeX-mode</code> buffer.
The default <code>prettify-symbols-alist</code> that e.g. AUCTeX provides already includes a lot of symbols.
For the uninitiated,
it would display a buffer like this<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></p>
<p><img class="pure-img" style="padding-left: 1em" src="../images/pretty-latex/no-pretty-symbols.png" alt="Definition of the Day convolution without prettify-symbols-mode enabled"></p>
<p>as the already much more readable</p>
<p><img class="pure-img" style="padding-left: 1em" src="../images/pretty-latex/default-pretty-symbols.png" alt="Definition of the Day convolution with AUCTeX's default prettify-symbols-alist"></p>
<p>Basically, <code>prettify-symbols-mode</code> is a home-cooked ligature system for Emacs,
because of course that exists.</p>
<p>However, the above already has some problems:
<code>\otimes</code> is quite small,
and thus barely discernible from <code>\bullet</code>,
and of course user-defined macros—like <code>\defeq</code> or <code>\cat</code>—don’t get picked up on at all.
We can refine the displayed symbols by adding our own definitions to
the (buffer-local) <code>prettify-symbols-alist</code> variable:</p>
<pre class="emacs-lisp"><code>(add-hook 'LaTeX-mode-hook
          (lambda ()
            (--map (push it prettify-symbols-alist)
                   '((&quot;\\blank&quot;      . ?—)
                     (&quot;\\otimes&quot;     . ?⨂) ; more visible
                     (&quot;\\defeq&quot;      . ?≔)
                     (&quot;\\mathcal{C}&quot; . ?𝓒) ; better looking
                     (&quot;\\cat{C}&quot;     . ?𝓒)))))</code></pre>
<p>Executing that hook makes the above situation even prettier.</p>
<p><img class="pure-img" style="padding-left: 1em" src="../images/pretty-latex/custom-pretty-symbols.png" alt="Definition of the Day convolution with a custom prettify-symbols-alist"></p>
<h3 id="going-further">Going further</h3>
<p>Naturally<!--
-->—this being Emacs—<!--
-->substituting one symbol for another is not all that <code>prettify-symbols-mode</code> has to offer.
Digging into the documentation of <code>prettify-symbols-alist</code>,
the second entry of the cons pair can be<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a></p>
<blockquote>
<p>[…] a character, a string or a vector or list of integers and rules.</p>
<p>If it is a character, it is an alternate character to display instead
of the text in the region.</p>
<p>If it is a string, the elements are alternate characters. In
this case, TAB element has a special meaning. If the first
character is TAB, the glyphs are displayed with left padding space
so that no pixel overlaps with the previous column. If the last
character is TAB, the glyphs are displayed with right padding
space so that no pixel overlaps with the following column.</p>
<p>If it is a vector or list, it is a sequence of alternate characters and
composition rules, where (2N)th elements are characters and (2N+1)th
elements are composition rules to specify how to compose (2N+2)th
elements with previously composed N glyphs.</p>
<p>A composition rule is a cons of global and new glyph reference point
symbols. See the documentation of reference-point-alist for more
details.</p>
</blockquote>
<p>We’ve only used a plain character as the replacement so far,
but in fact we can supply a whole list of them,
with some rules on how everything should be glued together.
The gluing of each pair of glyphs is done according to the following diagram,
taken from the documentation of <code>reference-point-alist</code>:</p>
<pre><code>  0----1----2 &lt;---- ascent    0:tl or top-left
  |         |                 1:tc or top-center
  |         |                 2:tr or top-right
  |         |                 3:Bl or base-left     9:cl or center-left
  9   10   11 &lt;---- center    4:Bc or base-center  10:cc or center-center
  |         |                 5:Br or base-right   11:cr or center-right
--3----4----5-- &lt;-- baseline  6:bl or bottom-left
  |         |                 7:bc or bottom-center
  6----7----8 &lt;---- descent   8:br or bottom-right</code></pre>
<p>A gluing instruction either comprises a cons pair of two locations<!--
-->—e.g., <code>(cr . cl)</code> to glue position 9 of the left glyph to position 11 of the right—<!--
-->or a list with some additional <code>x</code> and <code>y</code> offsets,
like <code>'(cr cl 0 10)</code>.</p>
<p>As an easy example,
consider <code>\defeq</code> from the above LaTeX snippet,
which is a better-looking version of the definitional equality symbol <code>:=</code>.<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>
Sadly, the appropriate Unicode symbol <code>≔</code> does not look particularly nice in my font<!--
-->—simply fusing <code>:</code> and <code>=</code> together works quite well, however!
Defining</p>
<pre class="emacs-lisp"><code>'(&quot;\\coloneqq&quot; . (?: (cr cl -20 -8) ?=))</code></pre>
<p>yields a decent approximation of what I would want the Unicode symbol to look like.
Here are some more examples of this in action:</p>
<pre class="emacs-lisp"><code>'((&quot;\\tak&quot;         . (?× (br . cl) ?A))
  (&quot;^{\\op}&quot;       . (?ᵒ (tr tl -25 0) ?ᵖ))
  (&quot;\\defeq&quot;       . (?: (cr cl -20 -8) ?=))
  (&quot;^{\\tensorop}&quot; . (?​ (tr bl 0 80) ?⊗ (tr . tl) ?ᵒ (tr tl -25 0) ?ᵖ))
  (&quot;^{-1}&quot;         . (?​ (tr bl 0 100) ?- (cr . bl) ?¹)))</code></pre>
<p><img class="pure-img" style="padding-left: 1em" src="../images/pretty-latex/stitching-together-symbols.png" alt="The above symbols"></p>
<h2 id="going-too-far-code-folding">Going too far: code folding</h2>
<p><a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a></p>
<p>The only thing that <code>prettify-symbols-mode</code> lacks is
being able to supply a function as a replacement,
in order to manipulate the matched symbol.</p>
<p>Enter code folding, which does not have this restriction.
Most often, it is used to hide parts of a definition or section,
in order to make the respective buffer more easily scannable for a human.
However, AUCTeX’s machinery is set up in such a way
that one can supply an arbitrary function that transforms the matched text somehow.
This is extremely convenient for things like mathematical alphabets,
as then one does not have to hard-code all replacements.<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a></p>
<p>The main variables to change here are
<code>TeX-fold-math-spec-list</code> and <code>TeX-fold-macro-spec-list</code>.
The parsing of <code>tex-fold.el</code> is fairly featureful;
the documentation for the latter variable tells the whole story.</p>
<blockquote>
<p>List of replacement specifiers and macros to fold.</p>
<p>The first element of each item can be a string, an integer or a
function symbol. The second element is a list of macros to fold
without the leading backslash.</p>
If the first element is a string, it will be used as a display
replacement for the whole macro. Numbers in braces, brackets,
parens or angle brackets will be replaced by the respective macro
argument. For example “{1}” will be replaced by the first
mandatory argument of the macro. One can also define
alternatives within the specifier which are used if an argument
is not found. Alternatives are separated by “||”. They are
most useful with optional arguments. As an example, the default
specifier for
<p>is “[1]:||*” which means that if there is
an optional argument, its value is shown followed by a colon. If
there is no optional argument, only an asterisk is used as the
display string.</p>
<p>If the first element is an integer, the macro will be replaced by
the respective macro argument.</p>
<p>If the first element is a function symbol, the function will be
called with all mandatory arguments of the macro and the result
of the function call will be used as a replacement for the macro.</p>
<p>Setting this variable does not take effect immediately. Use
Customize or reset the mode.</p>
</blockquote>
<p>Quite the functionality!
The simplest example is probably hiding the <code>\emph</code> macro,
which indicates emphasised text.<a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a></p>
<pre class="emacs-lisp"><code>(setopt TeX-fold-macro-spec-list '((&quot;{1}&quot; (&quot;emph&quot;))))</code></pre>
<p>This ends up looking like the following:</p>
<p><img class="pure-img" style="padding-left: 1em" src="../images/pretty-latex/hide-emphasis.png" alt="Hiding \emph"></p>
<p>As with <code>prettify-symbols-mode</code>,
things unprettify when the point is on them.</p>
<p><img class="pure-img" style="padding-left: 1em" src="../images/pretty-latex/show-emphasis.png" alt="Show \emph on hover"></p>
<p>Using these techniques,
we can define replacements for calligraphic letters
(or any other alphabet, like Fraktur or blackboard bold)
in a much more straightforward fashion.
First, we create a function to shift each codepoint in a string by a certain offset.<a href="#fn7" class="footnote-ref" id="fnref7" role="doc-noteref"><sup>7</sup></a></p>
<pre class="emacs-lisp"><code>(defun slot/shift-string (offset word)
  &quot;Shift the codepoint of each character in WORD by OFFSET.
Add an extra -6 shift if the letter is lowercase.&quot;
  (apply #'string
         (--map (pcase it
                  (?, ?,)   ; Allow things like \Hom(\mathbb{A,B})
                  (_ (+ (if (&gt;= it ?a) (- it 6) it) offset)))
                word)))</code></pre>
<p>Now, all that’s left to do is to define some folds for mathematical alphabets,
and give them the right starting points:<a href="#fn8" class="footnote-ref" id="fnref8" role="doc-noteref"><sup>8</sup></a></p>
<pre class="emacs-lisp"><code>(cl-flet ((start-at (pt)
            (- pt ?A)))
  (setq TeX-fold-math-spec-list
        `((,(lambda (c) (slot/shift-string (start-at ?𝔄) c)) (&quot;mathfrak&quot;))
          (,(lambda (c) (slot/shift-string (start-at ?𝓐) c)) (&quot;mathcal&quot;)))))

;; For good measure
(setq LaTeX-fold-math-spec-list TeX-fold-math-spec-list)</code></pre>
<p>Note that this again has the advantage of
making user-defined macros much easier to integrate into the whole system.
Above we have met the <code>\cat</code> macro<a href="#fn9" class="footnote-ref" id="fnref9" role="doc-noteref"><sup>9</sup></a>,
which should be displayed in much the same way as <code>\mathcal</code> is.
With code folding,
all this entails is to amend the respective line in <code>TeX-fold-math-spec-list</code>:</p>
<pre class="emacs-lisp"><code>(,(lambda (c) (slot/shift-string (start-at ?𝓐) c)) (&quot;mathcal&quot; &quot;cat&quot;))</code></pre>
<h2 id="conclusion">Conclusion</h2>
<p>Using everything in this article together—see
<a href="https://gitlab.com/slotThe/dotfiles/-/blob/7b2885a8343327717c91818d1970576238184307/emacs/.config/emacs/lisp/hopf-latex-pretty-symbols.el">here</a>—<!--
-->one can transform a boring old LaTeX buffer</p>
<p><img class="pure-img" style="padding-left: 1em" src="../images/pretty-latex/end-before.png" alt="Before prettifying: Sections, subsections, emphasis, math"></p>
<p>into something like this:</p>
<p><img class="pure-img" style="padding-left: 1em" src="../images/pretty-latex/end-after.png" alt="After prettifying: Sections, subsections, emphasis, math"></p>
<p>Nice.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>{-} If you don’t have AUCTeX installed for some reason<!--
  -->—why are you reading this?—<!--
  -->then trying out the following snippet might also get the message across:</p>
<pre class="emacs-lisp"><code>(add-hook
 'emacs-lisp-mode-hook
 (lambda ()
   (setq-local prettify-symbols-alist
               '((&quot;lambda&quot; . ?λ)))
   (prettify-symbols-mode)))</code></pre>
<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></li>
<li id="fn2"><p>{-} The citation itself is from the documentation of <code>compose-region</code>,
as that is what the <code>CHARACTER</code> argument of <code>prettify-symbols-alist</code> can be.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>For the interested reader:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="fu">\newcommand*</span>{<span class="ex">\defeq</span>}{<span class="co">%</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  <span class="fu">\mathrel</span>{<span class="fu">\vcenter</span>{<span class="co">%</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>      <span class="fu">\baselineskip</span>0.5ex <span class="fu">\lineskiplimit</span>0pt</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>      <span class="fu">\hbox</span>{<span class="fu">\scriptsize</span>.}<span class="fu">\hbox</span>{<span class="fu">\scriptsize</span>.}}}<span class="co">%</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>  =}</span></code></pre></div>
<p>I think that this looks better than <code>amsmath</code>’s <code>\coloneq</code>.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>{-} <strong>Disclaimer</strong>:
Pretty much all of the code in this section was written by
<a href="https://git.tecosaur.net/">tecosaur</a>,
from whose
<a href="https://tecosaur.github.io/emacs-config/config.html#editor-visuals">configuration</a><!--
  -->—which I encourage you to check out—<!--
  -->I first learned about the fact that one can use AUCTeX’s code folding in this way.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>This actually happens;
just a small excerpt of the default <code>tex--prettify-symbols-alist</code>:</p>
<pre class="emacs-lisp"><code>(&quot;\\mathcal{A}&quot; . ?𝒜)
(&quot;\\mathcal{B}&quot; . ?ℬ)
(&quot;\\mathcal{C}&quot; . ?𝒞)
(&quot;\\mathcal{D}&quot; . ?𝒟)
(&quot;\\mathcal{E}&quot; . ?ℰ)
(&quot;\\mathcal{F}&quot; . ?ℱ)
(&quot;\\mathcal{G}&quot; . ?𝒢)
(&quot;\\mathcal{H}&quot; . ?ℋ)
(&quot;\\mathcal{I}&quot; . ?ℐ)
(&quot;\\mathcal{J}&quot; . ?𝒥)
(&quot;\\mathcal{K}&quot; . ?𝒦)
(&quot;\\mathcal{L}&quot; . ?ℒ)
(&quot;\\mathcal{M}&quot; . ?ℳ)
(&quot;\\mathcal{N}&quot; . ?𝒩)
(&quot;\\mathcal{O}&quot; . ?𝒪)
(&quot;\\mathcal{P}&quot; . ?𝒫)
(&quot;\\mathcal{Q}&quot; . ?𝒬)
(&quot;\\mathcal{R}&quot; . ?ℛ)
(&quot;\\mathcal{S}&quot; . ?𝒮)
(&quot;\\mathcal{T}&quot; . ?𝒯)
(&quot;\\mathcal{U}&quot; . ?𝒰)
(&quot;\\mathcal{V}&quot; . ?𝒱)
(&quot;\\mathcal{W}&quot; . ?𝒲)
(&quot;\\mathcal{X}&quot; . ?𝒳)
(&quot;\\mathcal{Y}&quot; . ?𝒴)
(&quot;\\mathcal{Z}&quot; . ?𝒵)</code></pre>
<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></li>
<li id="fn6"><p>{-} The <code>TeX-fold-macro-spec-list</code> can be used for any macro outside of math-mode.
One application is to define
prettier versions of <code>\[sub]section</code> commands,
or even <code>\item</code>:</p>
<pre class="emacs-lisp"><code>(setopt
 TeX-fold-macro-spec-list
 '((&quot;{1}&quot; (&quot;emph&quot;))
   (&quot;[1]:||►&quot; (&quot;item&quot;))
   (&quot;§ {1}&quot; (&quot;section&quot; &quot;section*&quot;))
   (&quot;§§ {1}&quot; (&quot;subsection&quot; &quot;subsection*&quot;))
   (&quot;¶ {1}&quot; (&quot;paragraph&quot; &quot;paragraph*&quot;))))</code></pre>
<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></li>
<li id="fn7"><p>The
<a href="https://gitlab.com/slotThe/dotfiles/-/blob/7b2885a8343327717c91818d1970576238184307/emacs/.config/emacs/lisp/hopf-latex-pretty-symbols.el#L77-L117">real function</a>
is a tad more complicated,
as some codepoints are not where you expect them to be,
so some sort of lookup table has to be consulted as well.<a href="#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn8"><p>{-} 󠀠</p>
<p>󠀠</p>
<p>Ideally, one would make use of the new <code>setopt</code> macro here,
but the fact that <code>TeX-fold-math-spec-list</code> accepts functions in this way was only documented in
<a href="https://git.savannah.gnu.org/cgit/auctex.git/commit/?id=3c03ee089a2b74d0d5a0285f983a9eba82dc04a5">3c03ee08</a>,
which has not found its way to GNU ELPA yet.<a href="#fnref8" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn9"><p>Defined as</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="fu">\newcommand*</span>{<span class="ex">\cat</span>}[1]{<span class="co">%</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>  <span class="ss">\ensuremath{</span><span class="sc">\mathcal</span><span class="ss">{#1}}</span><span class="co">%</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<a href="#fnref9" class="footnote-back" role="doc-backlink">↩︎</a></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Change the Insides of an S-Expression in Emacs</title>
    <link href="https://tony-zorman.com/posts/change-inner.html" />
    <id>https://tony-zorman.com/posts/change-inner.html</id>
    <published>2023-08-26T00:00:00Z</published>
    <updated>2023-08-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2023-08-26
      
      
        &thinsp;·&thinsp; last modified: 2023-08-29
      
      
        &thinsp;·&thinsp; <span title="1770 words">8 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p><a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>I have to make a confession:
I have an <a href="https://github.com/emacs-evil/evil">evil</a> past—literally.
Having switched to vanilla Emacs keybindings a while ago,
one thing that I genuinely miss from <em>that time</em> are the <code>ci(</code> and <code>ca(</code> motions,
killing everything in or around the closest encompassing <code>()</code>-environment.
Luckily, the <a href="https://github.com/magnars/change-inner.el">change-inner</a> package provides exactly these commands for Emacs proper.
Unluckily, there are some issues regarding whitespace handling—let’s try to fix that.</p>
<!--more-->
<h2 id="how-it-all-started">How it all started</h2>
<p>After happily using change-inner for a few days,
one of the first problems I ran into
was the package’s flakiness with respect to whitespace.
This is elucidated in, for example,
<a href="https://github.com/magnars/change-inner.el/issues/5">this issue</a>:</p>
<blockquote>
<p>When using change-inner with rust-mode, the following code (with <code>|</code> as the cursor):</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> issue_list_url <span class="op">=</span> <span class="pp">Url::</span>parse(<span class="op">|</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;https://github.com/rust-lang/rust/issues?labels=E-easy&amp;state=open&quot;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>        )<span class="op">.</span>unwrap()<span class="op">;</span></span></code></pre></div>
<p>calling <code>M-x change-inner (</code> gives:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> issue_list_url <span class="op">=</span> <span class="pp">Url::</span>parse<span class="op">|.</span>unwrap()<span class="op">;</span></span></code></pre></div>
<p>whereas I would expect:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> issue_list_url <span class="op">=</span> <span class="pp">Url::</span>parse(<span class="op">|</span>)<span class="op">.</span>unwrap()<span class="op">;</span></span></code></pre></div>
<p>It looks like it’s related to newlines. There’s a similar issue in JS:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="co">// works here</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> foo <span class="op">=</span> <span class="fu">bar</span>(<span class="op">|</span><span class="st">&quot;baz&quot;</span>)<span class="op">;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="co">// error: Couldn't find expansion</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> foo <span class="op">=</span> <span class="fu">bar</span>(<span class="op">|</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;baz&quot;</span>)<span class="op">;</span></span></code></pre></div>
</blockquote>
<p>Change-inner as a package builds upon another excellent one from the same author:
<a href="https://github.com/magnars/expand-region.el">expand-region</a>,
an “Emacs extension to increase selected region by semantic units.”
Essentially, change-inner just expands the region
until it hits something that it’s happy with.
As such, the problem eluded to above is
with the respective expand-region functions that are called;
specifically, <code>er/mark-inside-pairs</code>,
which is defined like so:</p>
<pre class="emacs-lisp"><code>(defun er/mark-inside-pairs ()
  &quot;Mark inside pairs (as defined by the mode), not including the pairs.&quot;
  (interactive)
  (when (er--point-inside-pairs-p)
    (goto-char (nth 1 (syntax-ppss)))
    (set-mark (save-excursion
                (forward-char 1)
                (skip-chars-forward er--space-str) ; ← HERE
                (point)))
    (forward-list)
    (backward-char)
    (skip-chars-backward er--space-str)            ; ← HERE
    (exchange-point-and-mark)))</code></pre>
<p>Notice the invocations of <code>(skip-chars-forward er--space-str)</code>;
if we start with<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a></p>
<div class="sourceCode" id="cb6"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> foo <span class="op">=</span> <span class="fu">bar</span>(<span class="op">|</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;baz&quot;</span>)<span class="op">;</span></span></code></pre></div>
<p>and run <code>M-x er/mark-inside-pairs RET</code>,
then the marked area will actually just be <code>"baz"</code>,
instead of everything inside of the parentheses.</p>
<p>Mystery solved, right?
Maybe, but having to redefine that function for this package alone
feels wrong to me.
This got me looking into the internals of change-inner,<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>
in order to see where the problem <em>actually</em> lies.</p>
<h2 id="inside-change-inner">Inside change-inner</h2>
<p>Taking a closer look at <code>change-inner*</code><!--
-->—the internal function doing the actual work—<!--
-->reveals the following.
After some initial book keeping,
the area surrounding the point is expanded,
looking for the innermost expression matching the parameters:<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a></p>
<pre class="emacs-lisp"><code>(er--expand-region-1)
(er--expand-region-1)                      ; sic!
(while (and (not (= (point) (point-min)))
            (not (looking-at q-char)))
  (er--expand-region-1))</code></pre>
<p>Crucially,
the area is expanded twice <em>completely unconditionally</em>.
This stops only
once we’ve reached the bounds of either the buffer,
or the expression we are interested in.</p>
<p>The idea is to start in a situation like this</p>
<pre class="emacs-lisp"><code>'( &quot;one&quot; &quot;t|wo&quot; &quot;three&quot; &quot;four&quot; )</code></pre>
<p>and expand until we encompass the whole list<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a></p>
<pre class="emacs-lisp"><code>'( &quot;one&quot; &quot;t|wo&quot; &quot;three&quot; &quot;four&quot; )
;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
<p>noting that the previous step was</p>
<pre class="emacs-lisp"><code>'( &quot;one&quot; &quot;t|wo&quot; &quot;three&quot; &quot;four&quot; )
;  ^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
<p>which equates to the “inner” part of the list.
Then, one can call
<code>er/contract-region</code>,
which relies on an expansion history,
in order to only kill this inner part.</p>
<p>Why expand twice unconditionally?
Because in a situation like</p>
<pre class="emacs-lisp"><code>'|( &quot;one&quot; &quot;two&quot; &quot;three&quot; &quot;four&quot; )</code></pre>
<p>The expansion would immediately encompass the whole list,<a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a>
and its innards wouldn’t be available to expand-region’s contraction history.
The “trick” is to actually expand <em>further</em> than necessary;
looping through the <code>while</code> above until one inevitably hits <code>(point-min)</code> and stops expanding.
This triggers yet another bit of code that then recurses with prefilled arguments<a href="#fn7" class="footnote-ref" id="fnref7" role="doc-noteref"><sup>7</sup></a></p>
<pre class="emacs-lisp"><code>(if (not (looking-at q-char))
    (if search-forward-char
        (error &quot;Couldn't find any expansion starting with %S&quot; char)
      (goto-char starting-point)
      (setq mark-active nil)
      (change-inner* yank? char))
  ;; … else …
  )</code></pre>
<p>During that additional run of the function,
it searches for the correct delimiter via</p>
<pre class="emacs-lisp"><code>(search-forward char (point-at-eol))</code></pre>
<p>and<!--
-->—due to the way that <code>search-forward</code> works by default—<!--
-->we end up with the point directly after the opening delimiter</p>
<pre class="emacs-lisp"><code>'(| &quot;one&quot; &quot;two&quot; &quot;three&quot; &quot;four&quot; )</code></pre>
<p>This now expands correctly.<a href="#fn8" class="footnote-ref" id="fnref8" role="doc-noteref"><sup>8</sup></a></p>
<h3 id="puni-to-the-rescue">Puni to the rescue</h3>
<p>I certainly know what I think of this solution.
Instead of trying to fix this web of expansions and contractions,
how about we rewrite the function instead?</p>
<p>I’ve been happily using <a href="https://github.com/AmaiKinono/puni">puni</a> for a while,
and it seems pretty apt for the job.
Briefly, puni is a structured editing package,
like <a href="https://paredit.org/">paredit</a> or <a href="https://github.com/Fuco1/smartparens">smartparens</a>,
but it works for a broader range of languages than the former,
while comprising of a much smaller code-base<!--
-->—and even fewer language-specific bits—<!--
-->than the latter.<a href="#fn9" class="footnote-ref" id="fnref9" role="doc-noteref"><sup>9</sup></a>
While I still prefer paredit for lisps,
puni has become my de facto standard for language-agnostic parenthesis handling.</p>
<p>Luckily for us,
puni already comes equipped with a <code>puni-expand-region</code> function,
so one can swiftly rewrite the core of <code>change-inner*</code> using that instead of <code>er--expand-region-1</code>:</p>
<pre class="emacs-lisp"><code>;; Try to find a region.
(puni-expand-region)
(when (&gt; (point) (mark)) ; By default, puni jumps to the end of the sexp
  (exchange-point-and-mark))
(while (and (not (= (point) (point-min)))
            (not (looking-at q-char)))
  (puni-expand-region))</code></pre>
<p>Notice that the double expansion vanished!
Instead, when a region was found,
we can make use of <code>puni-bounds-of-list-around-point</code> to get the internals explicitly,
and then calculate how big the delimiters were:</p>
<pre class="emacs-lisp"><code>(let* ((rb (region-beginning))
       (re (region-end))
       (insides (progn (goto-char (1+ rb))
                       (puni-bounds-of-list-around-point)))
       (olen (- (car insides) rb))  ; Length of opening delimiter
       (clen (- re (cdr insides)))) ; Length of closing delimiter
  (kill-region (+ rb olen) (- re clen)))</code></pre>
<p>Trying this out with our trusty example of</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> foo <span class="op">=</span> <span class="fu">bar</span>(<span class="op">|</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;baz&quot;</span>)<span class="op">;</span></span></code></pre></div>
<p>we… are greeted with a type error.</p>
<pre><code>Debugger entered--Lisp error: (wrong-type-argument number-or-marker-p nil)
  puni--smaller-interval((103 . 108) (nil . 108))</code></pre>
<p>Yikes.</p>
<h3 id="puni-to-the-rescue-1">Puni to the rescue?</h3>
<p>The <code>puni--smaller-interval</code> function does some comparisons with <code>&lt;=</code>,
and having <code>nil</code> in there will obviously result in a bad time for everyone.
As it turns out, puni <em>also</em> has some problems handling whitespace,
in that it <em>doesn’t</em> skip it.
At some point in <code>puni-expand-region</code>,
we call <code>puni-bounds-of-sexp-at-point</code>,
which tries to find out whether we are at the start or end of an S-expression
by going forwards and backwards a few times:</p>
<pre class="emacs-lisp"><code>(save-excursion
  (setq end-forward (puni-strict-forward-sexp)
        beg-forward (puni-strict-backward-sexp)))
(save-excursion
  (setq beg-backward (puni-strict-backward-sexp)
        end-backward (puni-strict-forward-sexp)))</code></pre>
<p>Now, when we are in a situation like <code>(|   "furble")</code>,
an invocation of <code>puni-strict-forward-sexp</code> will leave us at <code>(   "furble"|)</code>,
but executing <code>puni-strict-backward-sexp</code> after that will result in <code>(   |"furble")</code>—not where we started.
As such, puni will (incorrectly) conclude that we were not at the start of the expression.</p>
<p>One could try to cram some whitespace handling into this,
but who says we don’t run into other issues then?<a href="#fn10" class="footnote-ref" id="fnref10" role="doc-noteref"><sup>10</sup></a>
In fact, <code>puni-expand-region</code> is written in such a way
that it tries out different expansion strategies until one succeeds—why not just quiet the error?</p>
<pre class="emacs-lisp"><code>(advice-add 'puni-bounds-of-sexp-at-point :around
  (lambda (fun)
    (ignore-errors (fun))))</code></pre>
<p>This… turns out to work!</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="co">// before</span></span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> foo <span class="op">=</span> <span class="fu">bar</span>(<span class="op">|</span></span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;baz&quot;</span>)<span class="op">;</span></span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true" tabindex="-1"></a><span class="co">// after</span></span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> foo <span class="op">=</span> <span class="fu">bar</span>(<span class="op">|</span>)<span class="op">;</span></span></code></pre></div>
<p>Phew.</p>
<h2 id="the-code">The code</h2>
<p>For anyone interested, here is the full code.
It also includes a <code>mode</code> setting, which can be set to <code>outer</code>,
in order to kill around the parentheses; e.g.,</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="co">// before</span></span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> issue_list_url <span class="op">=</span> <span class="pp">Url::</span>parse(<span class="op">|</span><span class="st">&quot;https://my-url.com&quot;</span>)<span class="op">.</span>unwrap()<span class="op">;</span></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true" tabindex="-1"></a><span class="co">// after</span></span>
<span id="cb25-5"><a href="#cb25-5" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> issue_list_url <span class="op">=</span> <span class="pp">Url::</span>parse<span class="op">|.</span>unwrap()<span class="op">;</span></span></code></pre></div>
<p>For obvious reasons,
I will not submit this upstream to change-inner,
but it will instead live in my personal configuration.<a href="#fn11" class="footnote-ref" id="fnref11" role="doc-noteref"><sup>11</sup></a></p>
<pre class="emacs-lisp"><code>(cl-defun slot/change-sexp (&amp;key search-for mode)
  &quot;Delete (the innards of) a sexp.
Takes a char, like ( or \&quot;, and kills the first ancestor semantic
unit starting with that char. The unit must be recognisable to
`puni'.

SEARCH-FOR is the opening delimiter to search for: if this is
nil, prompt for one. MODE is whether to kill the whole
region (`outer'), or just the innards of it (any other value,
including nil).&quot;
  (cl-labels
      ((expand (char &amp;optional forward)
         &quot;Expand until we encompass the whole expression.&quot;
         (let* ((char (or char
                          (char-to-string
                           (read-char (format &quot;Kill %s:&quot;
                                              (symbol-name
                                               (or mode 'inner)))))))
                (q-char (regexp-quote char))
                (starting-point (point)))
           ;; Try to find a region.
           (puni-expand-region)
           (when (&gt; (point) (mark))
             (exchange-point-and-mark))
           (while (and (not (= (point) (point-min)))
                       (not (looking-at q-char)))
             (puni-expand-region))
           ;; If we haven't found one yet, initiate a forward search and
           ;; try again—once.
           (when (not (looking-at q-char))
             (goto-char starting-point)
             (deactivate-mark)
             (if forward
                 (error &quot;Couldn't find any expansion starting with %S&quot; char)
               (search-forward char (pos-eol 2))
               (expand char 'forward))))))
    (expand search-for)
    ;; Now that we have a region, decide what to do with it.
    (let ((rb (region-beginning))
          (re (region-end)))
      (if (eq mode 'outer)
          (kill-region rb re)           ; Kill everything
        ;; If we want to delete inside the expression, fall back to `puni'.
        ;; This circumvents having to call `er--expand-region-1' and then
        ;; `er/contract-region' in some vaguely sensical order, and hoping
        ;; to recover the inner expansion from that.
        ;; Addresses ghub:magnars/change-inner.el#5
        (let* ((insides (progn (goto-char (1+ rb))
                               (puni-bounds-of-list-around-point)))
               (olen (- (car insides) rb)) ; Length of opening delimiter
               (clen (- re (cdr insides)))) ; Length of closing delimiter
          (kill-region (+ rb olen) (- re clen)))))))</code></pre>
<p>One can bind killing the innards to <code>M-i</code>,
and killing everything to <code>M-o</code>,
as change-inner suggests.
Alternatively, and this is what I do,<a href="#fn12" class="footnote-ref" id="fnref12" role="doc-noteref"><sup>12</sup></a>
a second small helper function is swiftly written,
such that only one keybinding is needed:</p>
<pre class="emacs-lisp"><code>(defun slot/change-around (&amp;optional arg)
  (interactive &quot;P&quot;)
  (if arg
      (slot/change-sexp :mode 'outer)
    (slot/change-sexp)))

(bind-key &quot;M-i&quot; #'slot/change-around)</code></pre>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>{-} The term “S-expression” is not super accurate,
and should be substituted with something like “semantic unit” instead,
as I’m also talking about things that aren’t necessarily S-expressions as Emacs knows them.
I mainly chose the term for brevity, and because it’s hopefully more familiar—and thus less scary—to the reader.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>{-} As is common,
I will use <code>|</code>
to indicate the position of the point.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>I wish I hadn’t.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>{-} 󠀠</p>
<p>󠀠</p>
<p><code>q-char</code> is the char that the user input,
but quoted as a regular expression via <code>regexp-quote</code>.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>{-} 󠀠</p>
<p>As you’ve probably already guessed,
the <code>^</code>’s are supposed to signal the marked region.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6"><p>As in</p>
<pre class="emacs-lisp"><code>'|( &quot;one&quot; &quot;two&quot; &quot;three&quot; &quot;four&quot; )
; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></li>
<li id="fn7"><p>{-} 󠀠</p>
<p>󠀠</p>
<p><code>search-forward-char</code> is the second argument of <code>change-inner*</code>;
if the function was called with that,
we have already recursed once, so stop.
<code>char</code> is the character that the user actually input.
<code>starting-point</code> is the position of the point before anything happened.<a href="#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn8"><p>Actually,
the searching also has a different, actual, use.
When in a situation like</p>
<pre class="emacs-lisp"><code>'(1| 2 &quot;this is a string&quot;)</code></pre>
<p>One might want to change the string—indeed,
<code>M-x change-inner "</code> correctly jumps to the string:</p>
<pre class="emacs-lisp"><code>'(1 2 &quot;|&quot;)</code></pre>
<p>This is one of the great features of Vim’s <code>ci"</code>,
and certainly something to preserve.<a href="#fnref8" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn9"><p>Puni achieves this by relying on Emacs’s built-in functions.<a href="#fnref9" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn10"><p>The real reason,
of course,
is that I just wanted my code to work <em>right now</em>,
instead of having to wait for upstream to fix something.
At some point this should definitely be fixed in puni, though.<a href="#fnref10" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn11"><p>{-} 󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>Using a recursive local function also incidentally fixes <a href="https://github.com/magnars/change-inner.el/issues/9">#9</a>.
Nice.<a href="#fnref11" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn12"><p><code>M-o</code> will never be something other than <code>other-window</code>.<a href="#fnref12" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Notmuch: Warn on Empty Subjects</title>
    <link href="https://tony-zorman.com/posts/notmuch-subject.html" />
    <id>https://tony-zorman.com/posts/notmuch-subject.html</id>
    <published>2023-07-30T00:00:00Z</published>
    <updated>2023-07-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2023-07-30
      
      
      
        &thinsp;·&thinsp; <span title="523 words">3 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->


<div>
  <p>Emacs’s <code>notmuch</code> package has this fantastic concept of an <em>attachment check</em>:
adding <code>notmuch-mua-attachment-check</code> to <code>notmuch-mua-send-hook</code> will,
before sending the message,
check whether the regular expression in <code>notmuch-mua-attachment-regexp</code> matches.
If yes—and no attachment has been added—it will alert the user,
asking whether one really wants to send that email;
otherwise, everything goes through smoothly.
Due to some personal idiosyncrasies,
I needed a variant of this to check for empty subjects,
lest I become one of those people who sends emails like that.
As always, Emacs delivers.</p>
<!--more-->
<p>The code for <code>notmuch-mua-attachment-check</code> is relatively straightforward,
and worth a look if we want to imitate this kind of behaviour for other headers.
A simplified<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> version goes as follows:</p>
<pre class="emacs-lisp"><code>(defun notmuch-mua-attachment-check ()
  &quot;Signal an error an attachement is expected but missing.

Signal an error if the message text indicates that an attachment
is expected but no MML referencing an attachment is found.

Typically this is added to `notmuch-mua-send-hook'.&quot;
  (when (and
         ;; When the message mentions attachment...
         (save-excursion
           (message-goto-body)
           ;; Limit search from reaching other possible parts of the message
           (let ((search-limit (search-forward &quot;\n&lt;#&quot; nil t)))
             (message-goto-body)
             (re-search-forward notmuch-mua-attachment-regexp search-limit t)))
         ;; ...but doesn't have a part with a filename...
         (save-excursion
           (message-goto-body)
           (not (re-search-forward &quot;^&lt;#part [^&gt;]*filename=&quot; nil t)))
         ;; ...and that's not okay...
         (not
          (y-or-n-p &quot;Attachment mentioned, but no attachment - is that okay?&quot;)))
    ;; ...signal an error.
    (error &quot;Missing attachment&quot;)))</code></pre>
<p>There is nothing fancy happening here,
so it’s not terribly difficult to adapt it to other settings.
As I said in the beginning,
I need it to check for subjects,
due to the bad habit of only adding a subject once the email is already written—only sometimes I forget.
Instead of trying to change my habits—which is hard!—it sounds much easier to modify Emacs to suit my needs.</p>
<p>The strategy is exactly the same as for <code>notmuch-mua-attachment-check</code>;
check for a certain regular expression, whitespace, and say something if it matches the current subject:</p>
<pre class="emacs-lisp"><code>(defun notmuch-mua-subject-check ()
  (or (save-excursion
        (message-goto-subject)
        (message-beginning-of-header t)
        (not (looking-at-p &quot;[[:blank:]]*$&quot;)))
      (y-or-n-p &quot;No subject given – still send?&quot;)
      (error &quot;No subject&quot;)))</code></pre>
<p>All one has to do is to execute this before sending a mail:</p>
<pre class="emacs-lisp"><code>(add-hook 'notmuch-mua-send-hook #'notmuch-mua-attachment-check)</code></pre>
<p>and we’re good to go.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>Looking for an attachment is complicated insofar as there are some ways the regular expression might match,
which however <em>don’t</em> indicate that anything needs to be done.
The real code looks at this by observing text properties of the matches.
However, this is not important for what follows, so I simply omitted it.</p>
<p>If you’re interested:</p>
<pre class="emacs-lisp"><code>;; When the message mentions attachment...
(save-excursion
  (message-goto-body)
  ;; Limit search from reaching other possible
  ;; parts of the message
  (let ((search-limit
         (search-forward &quot;\n&lt;#&quot; nil t)))
    (message-goto-body)
    (cl-loop
     while (re-search-forward
             notmuch-mua-attachment-regexp
             search-limit t)
     ;; For every instance of the &quot;attachment&quot;
     ;; string found, examine the text
     ;; properties.  If the text has either a
     ;; `face' or `syntax-table' property then
     ;; it is quoted text and should *not*
     ;; cause the user to be asked about a
     ;; missing attachment.
     if (let ((props (text-properties-at
                      (match-beginning 0))))
          (not (or (memq 'syntax-table props)
                   (memq 'face props))))
     return t
     finally return nil)))</code></pre>
<p>Alternatively, check the source code of <code>notmuch-mua-attachment-check</code> directly.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Incorporating BibTeX into Hakyll</title>
    <link href="https://tony-zorman.com/posts/hakyll-and-bibtex.html" />
    <id>https://tony-zorman.com/posts/hakyll-and-bibtex.html</id>
    <published>2023-06-20T00:00:00Z</published>
    <updated>2023-06-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2023-06-20
      
      
        &thinsp;·&thinsp; last modified: 2025-02-01
      
      
        &thinsp;·&thinsp; <span title="2980 words">12 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'haskell'." href="/tags/haskell.html" rel="tag">haskell</a>, <a title="All pages tagged 'hakyll'." href="/tags/hakyll.html" rel="tag">hakyll</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>When writing a blog post that feels academic—or pretentious—enough to invoke the need for citations,
having them automatically generated feels like a mandatory requirement.
I can only shudder to imagine the alternatives.</p>
<p>The good news is that LaTeX has solved this problem long ago;
we now have BibTeX as a file format,
and any number of programs,
like <code>biblatex</code> or <code>natbib</code>,
to generate good-looking citations from that.
Further, everyone’s favourite document format converter<!--
-->—pandoc—<!--
-->has excellent support for leveraging this functionality.
All that’s left is to integrate this into Hakyll;
and to play around with it, of course!</p>
<!--more-->
<h2 id="introduction">Introduction</h2>
<p>Pandoc—using the <a href="https://github.com/jgm/citeproc">citeproc</a> library—can
make use of <a href="https://citationstyles.org/">CSL</a>,
which is an XML-based formatting specification,<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>
in order to decide how the generated citations will be displayed.
There are <em>a lot</em> of styles to choose from;
the <a href="https://www.zotero.org/styles">Zotero Style Repository</a> alone sports around 10’000 different ones!
I settled on one that closely resembles <code>biblatex</code>’s “alphabetic” style.</p>
<p>To not keep anyone in suspense, the final result looks like this:</p>
<div class="highlight">
<p>
This is a line citing
<span>[<a href="#ref-benabou67:bicats-intro" role="doc-biblioref">Béna67</a>]</span>
and
<span>[<a href="ref-day07:lax-intro" role="doc-biblioref">DaPaSt07</a>]</span>.
</p>
<h2>
References
</h2>
<div id="refs-intro" class="references csl-bib-body" role="doc-bibliography">
<table>
<tr>
<div id="ref-benabou67:bicats-intro">
<td style="vertical-align: top">
<div class="csl-left-margin">
[Béna67]
</div>
</td>
<td>
</td>
<td>
<div class="csl-right-inline">
J. Bénabou, <span>“<a href="https://doi.org/10.1007/BFb0074299">Introduction to bicategories</a>.”</span> B<span>é</span>nabou, <span>Jean</span> et al., <span>Reports</span> of the <span>Midwest</span> <span>Category</span> <span>Seminar</span>. <span>Lect</span>. <span>Notes</span> <span>Math</span>. 47, 1–77, 1967.
</div>
</td>
</div>
</tr>
<tr>
<div id="ref-day07:lax-intro" class="csl-entry" role="doc-biblioentry">
<td style="vertical-align: top">
<div class="csl-left-margin">
[DaPaSt07]
</div>
</td>
<td>
</td>
<td>
<div class="csl-right-inline">
B. Day, E. Panchadcharam, and R. Street, <span>“Lax braidings and the lax centre,”</span> in <em>Hopf algebras and generalizations. AMS special session on hopf algebras at the crossroads of algebra, category theory, and topology, evanston, IL, USA, october 23–24, 2004.</em>, Providence, RI: American Mathematical Society (AMS), 2007, pp. 1–17.
</div>
</td>
</div>
</tr>
</table>
</div>
</div>
<p>The rest of the post will be a step by step explanation of how I arrived at this result,
hopefully in a generic enough way such that the ideas presented here
may translate to other problems that can be solved with pandoc filters.
If you just want the code, however, the relevant commits are
<a href="https://github.com/slotThe/slotThe.github.io/commit/62c6072243ee06d8df39813b7e35a6fd0ea1fe9d">here</a>,
<a href="https://github.com/slotThe/slotThe.github.io/commit/c23b03522fcddca779f2a1e593a32b2e51284958">here</a>,
and <a href="https://github.com/slotThe/slotThe.github.io/commit/f39352fd825ed6efad918de11b002734fdff03c4">here</a>.<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a></p>
<h2 id="simple-setup">Simple setup</h2>
<p>On the command line,
the incantation one needs to write is quite simple:</p>
<pre class="shell"><code>$ pandoc --from=markdown --to=html                               \
         --citeproc --biblatex                                   \
         --csl=bib/style.csl --bibliography=bib/bibliography.bib \
         FILE.md</code></pre>
<p>Integrating this into a basic Hakyll setup is not much more complicated,
as some kind soul has given us
<a href="https://hackage.haskell.org/package/hakyll-4.16.0.0/docs/Hakyll-Web-Pandoc-Biblio.html#v:pandocBiblioCompiler">Hakyll.Web.Pandoc.Biblio</a>—<!--
-->a library specifically written to make use of pandoc’s bibliography handling.</p>
<p>In fact, <a href="https://jaspervdj.be/">Jasper Van der Jeugt</a> himself created a <a href="https://github.com/jaspervdj/hakyll-citeproc-example">tutorial</a> for this.
Slightly abbreviated, it goes a bit like the following.
First, we compile the CSL and BibTeX files in our main function:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> hakyll <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- …</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>  match <span class="st">&quot;bib/style.csl&quot;</span>        <span class="op">$</span> compile cslCompiler</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>  match <span class="st">&quot;bib/bibliography.bib&quot;</span> <span class="op">$</span> compile biblioCompiler</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- …</span></span></code></pre></div>
<p>Next, we create a compiler
with the help of the <code>readPandocBiblio</code> function:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">myPandocBiblioCompiler ::</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>myPandocBiblioCompiler <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  csl <span class="ot">&lt;-</span> load <span class="st">&quot;bib/style.csl&quot;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  bib <span class="ot">&lt;-</span> load <span class="st">&quot;bib/bibliography.bib&quot;</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>  getResourceBody</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">&gt;&gt;=</span> readPandocBiblio defaultHakyllReaderOptions csl bib</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">&gt;&gt;=</span> <span class="fu">pure</span> <span class="op">.</span> writePandoc</span></code></pre></div>
<p>Since this kind of setup is so common,
it is already packaged up in <code>pandoc​Biblio​Compiler</code>:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ot">myPandocBiblioCompiler ::</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>myPandocBiblioCompiler <span class="ot">=</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  pandocBiblioCompiler <span class="st">&quot;bib/style.csl&quot;</span> <span class="st">&quot;bib/bibliography.bib&quot;</span></span></code></pre></div>
<p>With all these pieces in place,
this compiler can now be used in place of the default <code>pandocCompiler</code>;
for example, instead of</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- somewhere in main</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  compile <span class="op">$</span> pandocCompiler</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>        <span class="op">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;default.html&quot;</span> defaultContext</span></code></pre></div>
<p>one would write</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- somewhere in main</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>  compile <span class="op">$</span> myPandocBiblioCompiler</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>        <span class="op">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;default.html&quot;</span> defaultContext</span></code></pre></div>
<p>And that’s all there is to it!
Citations should now work out of the box using the <code>[@citation-name]</code> syntax.
They appear like this:</p>
<div id="ref-first-try" class="highlight">
<p>
This is a line citing <span>[Béna67]</span>, and <span>[DaPaSt07]</span>.
</p>
<div>
<div>
<div>
[Béna67]
</div>
<div>
J. Bénabou, <span>“<a href="https://doi.org/10.1007/BFb0074299">Introduction to bicategories</a>.”</span> B<span>é</span>nabou, <span>Jean</span> et al., <span>Reports</span> of the <span>Midwest</span> <span>Category</span> <span>Seminar</span>. <span>Lect</span>. <span>Notes</span> <span>Math</span>. 47, 1–77, 1967.
</div>
</div>
<div>
<div>
[DaPaSt07]
</div>
<div>
B. Day, E. Panchadcharam, and R. Street, <span>“Lax braidings and the lax centre,”</span> in <em>Hopf algebras and generalizations. AMS special session on hopf algebras at the crossroads of algebra, category theory, and topology, evanston, IL, USA, october 23–24, 2004.</em>, Providence, RI: American Mathematical Society (AMS), 2007, pp. 1–17.
</div>
</div>
</div>
</div>
<p>While the basic setup really is this easy,
incorporating citations into a real-world Hakyll code base
proves to be slightly more difficult<!--
-->—not to mention addressing all of my neuroses.
Let’s get straight into it.</p>
<h2 id="integration-into-my-hakyll-setup">Integration into my Hakyll setup</h2>
<p>The most important bit is that,
instead of a separate compiler,
I would really rather have a <a href="https://pandoc.org/filters.html">pandoc filter</a> for this feature.
Briefly, filters are transformations of
pandoc’s internal representation of a document’s structure.<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>
This internal representation is encapsulated in the <code>Pandoc</code> type</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Pandoc</span> <span class="ot">=</span> <span class="dt">Pandoc</span> <span class="dt">Meta</span> [<span class="dt">Block</span>]</span></code></pre></div>
<p>which represents a full document plus some metadata.
The <a href="https://hackage.haskell.org/package/pandoc-types/docs/Text-Pandoc-Definition.html#t:Block">Block</a> and <a href="https://hackage.haskell.org/package/pandoc-types/docs/Text-Pandoc-Definition.html#t:Inline">Inline</a> types then
contain more fine-grained stylistic information,
like the presence of lists, tables, bold text, and so on.
Writing a filter is further simplified by the <a href="https://hackage.haskell.org/package/pandoc-types/docs/Text-Pandoc-Walk.html#t:Walkable">Walkable</a>
type class,
with which it becomes trivial to promote an <code>Inline -&gt; Inline</code> function
to a full <code>Pandoc -&gt; Pandoc</code> transformation.</p>
<p>Luckily, <code>Hakyll.​Web.​Pandoc.​Biblio</code> exposes a function for this kind of use-case:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>processPandocBiblio</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> <span class="dt">Item</span> <span class="dt">CSL</span> <span class="ot">-&gt;</span> <span class="dt">Item</span> <span class="dt">Biblio</span>               <span class="co">-- Formatting boiler plate</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">Item</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">Pandoc</span>) <span class="co">-- The actual transformation</span></span></code></pre></div>
<p>A basic filter materialises:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ot">processBib ::</span> <span class="dt">Item</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">Pandoc</span>)</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>processBib pandoc <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>  csl <span class="ot">&lt;-</span> load <span class="st">&quot;bib/style.csl&quot;</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>  bib <span class="ot">&lt;-</span> load <span class="st">&quot;bib/bibliography.bib&quot;</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>  processPandocBiblio csl bib pandoc</span></code></pre></div>
<p>Notice that the type of this function transforms an <code>Item Pandoc</code>!
An <a href="https://hackage.haskell.org/package/hakyll/docs/Hakyll-Core-Item.html#t:Item">Item</a> is a type internal to Hakyll,
which associates a unique identifier to some contents.
In the best case,
one would like to treat this as an implementation detail and not think about it at all.
However, most of Hakyll’s other pandoc functions that let you do AST
transformations—like <code>pandoc​Compiler​With​TransformM</code>—have a bit of a different API,
accepting only a <code>Pandoc -&gt; Compiler Pandoc</code> argument.
This means that some care is needed to get everything to type check.</p>
<p>To start, my personal pandoc compiler looks a little bit like this:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="ot">myPandocCompiler ::</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>myPandocCompiler <span class="ot">=</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>  pandocCompilerWithTransformM</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>    myReader</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>    myWriter</span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>    myTransformations   <span class="co">-- Pandoc -&gt; Compiler Pandoc</span></span></code></pre></div>
<p>The easiest way I found to incorporate a <code>process​Pandoc​Biblio</code>-like transformation into this was to
write a function that’s like <code>pandoc​Compiler​With​TransformM</code>,
but accepts a wider input range.
Looking at its definition
already gives some idea as to what needs to be done:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a>pandocCompilerWithTransformM</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> <span class="dt">ReaderOptions</span> <span class="ot">-&gt;</span> <span class="dt">WriterOptions</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> (<span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> <span class="dt">Pandoc</span>)</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>pandocCompilerWithTransformM ropt wopt f <span class="ot">=</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>  getResourceBody <span class="op">&gt;&gt;=</span> renderPandocWithTransformM ropt wopt f</span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a>renderPandocWithTransformM</span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> <span class="dt">ReaderOptions</span> <span class="ot">-&gt;</span> <span class="dt">WriterOptions</span></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> (<span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> <span class="dt">Pandoc</span>)</span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">Item</span> <span class="dt">String</span></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a>renderPandocWithTransformM ropt wopt f i <span class="ot">=</span></span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a>  writePandocWith wopt <span class="op">&lt;$&gt;</span> (<span class="fu">traverse</span> f <span class="op">=&lt;&lt;</span> readPandocWith ropt i)</span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a><span class="co">-- readPandocWith :: ReaderOptions -&gt; Item String -&gt; Compiler (Item Pandoc)</span></span></code></pre></div>
<p>So <code>pandoc​Compiler​With​TransformM</code> is defined in terms of <code>render​Pandoc​With​TransformM</code>,
which in turn has quite a simple implementation.
Notice in particular the <code>traverse f =&lt;&lt; readPandocWith ropt i</code> bit;
<code>readPandocWith</code> returns a <code>Compiler (Item Pandoc)</code>,
so the <code>traverse</code> above exactly transform our <code>f</code> into a function that works at the <code>Item</code> level.
Omitting this yields the desired functions:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a>myRenderPandocWithTransformM</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> <span class="dt">ReaderOptions</span> <span class="ot">-&gt;</span> <span class="dt">WriterOptions</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> (<span class="dt">Item</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">Pandoc</span>))  <span class="co">-- this changed!</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">Item</span> <span class="dt">String</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>myRenderPandocWithTransformM ropt wopt f i <span class="ot">=</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a>  writePandocWith wopt <span class="op">&lt;$&gt;</span> (f <span class="op">=&lt;&lt;</span> readPandocWith ropt i)</span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>myPandocCompilerWithTransformM</span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> <span class="dt">ReaderOptions</span> <span class="ot">-&gt;</span> <span class="dt">WriterOptions</span></span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> (<span class="dt">Item</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">Pandoc</span>))  <span class="co">-- this changed!</span></span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span>
<span id="cb12-13"><a href="#cb12-13" aria-hidden="true" tabindex="-1"></a>myPandocCompilerWithTransformM ropt wopt f <span class="ot">=</span></span>
<span id="cb12-14"><a href="#cb12-14" aria-hidden="true" tabindex="-1"></a>  getResourceBody <span class="op">&gt;&gt;=</span> myRenderPandocWithTransformM ropt wopt f</span></code></pre></div>
<p>We can now easily incorporate the <code>processBib</code> function defined above into our existing framework,
adding a <code>traverse</code> where the old code was:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="ot">myPandocCompiler ::</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>myPandocCompiler <span class="ot">=</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>  myPandocCompilerWithTransformM</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>    myReader</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>    myWriter</span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>    (    <span class="fu">traverse</span> myTransformations  <span class="co">-- Item Pandoc -&gt; Compiler (Item Pandoc)</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>     <span class="op">&lt;=&lt;</span> processBib                  <span class="co">-- composed with the new stuff</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a>    )</span></code></pre></div>
<p>And that’s it!
Citations can now be added using the <code>[@citation-name]</code> syntax mentioned above,
and they look exactly the same as in <a href="#ref-first-try">the simple example</a>.</p>
<p>Now, that particular formatting looks <em>fine</em>,
but I’m sure you can already discern a few not-so-nice bits.
Let’s address the most glaring ones,
at least in my opinion.</p>
<h2 id="changing-the-look">Changing the look</h2>
<h3 id="adding-a-header-for-the-references">Adding a header for the references</h3>
<p>As it stands now,
the references are just dumped at the bottom of the page,
without any additional heading.
This looks subjectively ugly,
so automatically adding one
whenever at least one citation is present would be nice.</p>
<p>There is another small complication because of my idiosyncratic Hakyll setup:
in order to easily control the style of the headings in the table of contents,
I pre-generate the TOC before the actual compilation of the site.
This means that in addition to the <code>processBib</code> function,
we need to change the code in one other place.</p>
<p>The generation looks a little bit like this:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="ot">getTocCtx ::</span> <span class="dt">Context</span> a <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Context</span> a)</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>getTocCtx ctx <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>  writerOpts <span class="ot">&lt;-</span> mkTocWriter</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>  toc        <span class="ot">&lt;-</span> renderPandocWith</span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>                  defaultHakyllReaderOptions</span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>                  writerOpts</span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>                  <span class="op">=&lt;&lt;</span> getResourceBody</span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a>  <span class="fu">pure</span> <span class="op">$</span> <span class="fu">mconcat</span> [ ctx</span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>                 , constField <span class="st">&quot;toc&quot;</span> <span class="op">$</span> doStuffWithTheToc toc</span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>                 ]</span></code></pre></div>
<p>When the TOC is saved in the <code>toc</code> variable,
it’s already rendered into a string,
which means that it’s time for some good old string manipulations.
The (simplified) HTML for a typical table of contents looks like this:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;</span><span class="kw">div</span><span class="dt">&gt;</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&lt;</span><span class="kw">p</span><span class="dt">&gt;</span>Contents<span class="dt">&lt;/</span><span class="kw">p</span><span class="dt">&gt;</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&lt;</span><span class="kw">ul</span><span class="dt">&gt;</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;</span><span class="kw">li</span><span class="dt">&gt;</span></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>      High level structure</span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&lt;</span><span class="kw">ul</span><span class="dt">&gt;</span></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a>        <span class="dt">&lt;</span><span class="kw">li</span><span class="dt">&gt;</span>Topics<span class="dt">&lt;/</span><span class="kw">li</span><span class="dt">&gt;</span></span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a>        <span class="dt">&lt;</span><span class="kw">li</span><span class="dt">&gt;</span>Files<span class="dt">&lt;/</span><span class="kw">li</span><span class="dt">&gt;</span></span>
<span id="cb15-9"><a href="#cb15-9" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&lt;/</span><span class="kw">ul</span><span class="dt">&gt;</span></span>
<span id="cb15-10"><a href="#cb15-10" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;/</span><span class="kw">li</span><span class="dt">&gt;</span></span>
<span id="cb15-11"><a href="#cb15-11" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&lt;/</span><span class="kw">ul</span><span class="dt">&gt;</span></span>
<span id="cb15-12"><a href="#cb15-12" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;/</span><span class="kw">div</span><span class="dt">&gt;</span></span></code></pre></div>
<p>The last <code>&lt;/ul&gt;</code> block seems to be an appropriate target to attack.
The function to add a <code>References</code> heading in its place is swiftly written:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="ot">addBibHeading ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>addBibHeading s <span class="ot">=</span> T.unpack <span class="op">.</span> <span class="fu">mconcat</span> <span class="op">$</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>  [ T.dropEnd <span class="dv">5</span> before</span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>  , <span class="st">&quot;&lt;li&gt;&lt;a href=\&quot;#references\&quot;&gt;References&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&quot;</span></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a>  , after</span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>  ]</span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a> <span class="kw">where</span></span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a>  (before, after) <span class="ot">=</span> T.breakOnEnd <span class="st">&quot;&lt;/ul&gt;&quot;</span> (T.pack s)</span></code></pre></div>
<p>This can now be incorporated into <code>getTocCtx</code> in a straightforward manner:<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a></p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="ot">getTocCtx ::</span> <span class="dt">Context</span> a <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Context</span> a)</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>getTocCtx ctx <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>  writerOpts <span class="ot">&lt;-</span> mkTocWriter</span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>  toc        <span class="ot">&lt;-</span> renderPandocWith</span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a>                  defaultHakyllReaderOptions</span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a>                  writerOpts</span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a>                  <span class="op">=&lt;&lt;</span> getResourceBody</span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a>  <span class="fu">pure</span> <span class="op">$</span> <span class="fu">mconcat</span> [ ctx</span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true" tabindex="-1"></a>                 , constField <span class="st">&quot;toc&quot;</span> <span class="op">$</span> addBibHeading (doStuffWithTheToc toc)</span>
<span id="cb17-10"><a href="#cb17-10" aria-hidden="true" tabindex="-1"></a>                                   <span class="co">-- ^^^^^^^^^^^^^</span></span>
<span id="cb17-11"><a href="#cb17-11" aria-hidden="true" tabindex="-1"></a>                 ]</span></code></pre></div>
<p>All we need to do now is to actually create that header.
Again inspecting the HTML, one can spy a line along the lines of</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;</span><span class="kw">div</span><span class="ot"> id</span><span class="op">=</span><span class="st">&quot;refs&quot;</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;references csl-bib-body&quot;</span><span class="ot"> role</span><span class="op">=</span><span class="st">&quot;doc-bibliography&quot;</span><span class="dt">&gt;</span></span></code></pre></div>
<p>when the references start.
Inserting a heading above that sounds like a plan.
This can again be done using filters,
this time inside our <code>processBib</code> function:<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a></p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="ot">processBib ::</span> <span class="dt">Item</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">Pandoc</span>)</span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a>processBib pandoc <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a>  csl <span class="ot">&lt;-</span> load <span class="st">&quot;bib/style.csl&quot;</span></span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a>  bib <span class="ot">&lt;-</span> load <span class="st">&quot;bib/bibliography.bib&quot;</span></span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true" tabindex="-1"></a>  <span class="fu">fmap</span> insertRefHeading <span class="op">&lt;$&gt;</span> processPandocBiblio csl bib pandoc</span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true" tabindex="-1"></a>  <span class="co">--   ^^^^^^^^^^^^^^^^</span></span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true" tabindex="-1"></a> <span class="kw">where</span></span>
<span id="cb20-8"><a href="#cb20-8" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Insert a heading for the citations.</span></span>
<span id="cb20-9"><a href="#cb20-9" aria-hidden="true" tabindex="-1"></a><span class="ot">  insertRefHeading ::</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Pandoc</span></span>
<span id="cb20-10"><a href="#cb20-10" aria-hidden="true" tabindex="-1"></a>  insertRefHeading <span class="ot">=</span> walk <span class="op">$</span> <span class="fu">concatMap</span> \<span class="kw">case</span></span>
<span id="cb20-11"><a href="#cb20-11" aria-hidden="true" tabindex="-1"></a>    d<span class="op">@</span>(<span class="dt">Div</span> (<span class="st">&quot;refs&quot;</span>, _, _) _) <span class="ot">-&gt;</span></span>
<span id="cb20-12"><a href="#cb20-12" aria-hidden="true" tabindex="-1"></a>      [<span class="dt">Header</span> <span class="dv">1</span> (<span class="st">&quot;references&quot;</span>, [], []) [<span class="dt">Str</span> <span class="st">&quot;References&quot;</span>], d]</span>
<span id="cb20-13"><a href="#cb20-13" aria-hidden="true" tabindex="-1"></a>    block <span class="ot">-&gt;</span> [block]</span></code></pre></div>
<p>The citations now look like this:</p>
<div class="highlight">
<p>
This is a line citing <span>[Béna67]</span>, and <span>[DaPaSt07]</span>.
</p>
<h2>
References
</h2>
<div>
<div>
<div>
[Béna67]
</div>
<div>
J. Bénabou, <span>“<a href="https://doi.org/10.1007/BFb0074299">Introduction to bicategories</a>.”</span> B<span>é</span>nabou, <span>Jean</span> et al., <span>Reports</span> of the <span>Midwest</span> <span>Category</span> <span>Seminar</span>. <span>Lect</span>. <span>Notes</span> <span>Math</span>. 47, 1–77, 1967.
</div>
</div>
<div>
<div>
[DaPaSt07]
</div>
<div>
B. Day, E. Panchadcharam, and R. Street, <span>“Lax braidings and the lax centre,”</span> in <em>Hopf algebras and generalizations. AMS special session on hopf algebras at the crossroads of algebra, category theory, and topology, evanston, IL, USA, october 23–24, 2004.</em>, Providence, RI: American Mathematical Society (AMS), 2007, pp. 1–17.
</div>
</div>
</div>
</div>
<h3 id="prettifying-the-generated-references">Prettifying the generated references</h3>
<p>What immediately irks me in the above output is
that a single citation is broken up into two lines.
Thankfully, this is easily fixed by a tiny bit of CSS.</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* Don't split up a citation over multiple lines. */</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a>div<span class="fu">.csl-left-margin</span> {</span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">display</span><span class="ch">:</span> <span class="dv">inline</span><span class="op">;</span></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a>div<span class="fu">.csl-right-inline</span> {</span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">display</span><span class="ch">:</span> <span class="dv">inline</span><span class="op">;</span></span>
<span id="cb21-7"><a href="#cb21-7" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Much better:</p>
<div class="highlight">
<p>
This is a line citing <span>[Béna67]</span> and <span>[DaPaSt07]</span>.
</p>
<h2>
References
</h2>
<div>
<div>
<div class="csl-left-margin">
[Béna67]
</div>
<div class="csl-right-inline">
J. Bénabou, <span>“<a href="https://doi.org/10.1007/BFb0074299">Introduction to bicategories</a>.”</span> B<span>é</span>nabou, <span>Jean</span> et al., <span>Reports</span> of the <span>Midwest</span> <span>Category</span> <span>Seminar</span>. <span>Lect</span>. <span>Notes</span> <span>Math</span>. 47, 1–77, 1967.
</div>
</div>
<div>
<div class="csl-left-margin">
[DaPaSt07]
</div>
<div class="csl-right-inline">
B. Day, E. Panchadcharam, and R. Street, <span>“Lax braidings and the lax centre,”</span> in <em>Hopf algebras and generalizations. AMS special session on hopf algebras at the crossroads of algebra, category theory, and topology, evanston, IL, USA, october 23–24, 2004.</em>, Providence, RI: American Mathematical Society (AMS), 2007, pp. 1–17.
</div>
</div>
</div>
</div>
<p>Next, notice that there is no link from the label in the text
to the actual citation at the end.
This seems pretty inconvenient,
as at least I often jump to citations whose label is
unfamiliar—just to get an idea what kind of article it is.</p>
<p>Pandoc does accept a <code>link-citations</code> option that controls this behaviour,
which works fine for my purposes.
Setting this can be done directly
by modifying the <a href="https://hackage.haskell.org/package/pandoc-types-1.23/docs/Text-Pandoc-Definition.html#t:Meta">Meta</a> field of the <code>Pandoc</code> type:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="ot">processBib ::</span> <span class="dt">Item</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">Pandoc</span>)</span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a>processBib pandoc <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a>  csl <span class="ot">&lt;-</span> load <span class="st">&quot;bib/style.csl&quot;</span></span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a>  bib <span class="ot">&lt;-</span> load <span class="st">&quot;bib/bibliography.bib&quot;</span></span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- We do want to link citations.</span></span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true" tabindex="-1"></a>  p <span class="ot">&lt;-</span> withItemBody</span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true" tabindex="-1"></a>         (\(<span class="dt">Pandoc</span> (<span class="dt">Meta</span> meta) bs) <span class="ot">-&gt;</span> <span class="fu">pure</span> <span class="op">$</span></span>
<span id="cb22-8"><a href="#cb22-8" aria-hidden="true" tabindex="-1"></a>           <span class="dt">Pandoc</span> (<span class="dt">Meta</span> <span class="op">$</span> Map.insert <span class="st">&quot;link-citations&quot;</span> (<span class="dt">MetaBool</span> <span class="dt">True</span>) meta)</span>
<span id="cb22-9"><a href="#cb22-9" aria-hidden="true" tabindex="-1"></a>                  bs)</span>
<span id="cb22-10"><a href="#cb22-10" aria-hidden="true" tabindex="-1"></a>         pandoc</span>
<span id="cb22-11"><a href="#cb22-11" aria-hidden="true" tabindex="-1"></a>  <span class="fu">fmap</span> insertRefHeading <span class="op">&lt;$&gt;</span> processPandocBiblio csl bib pandoc</span></code></pre></div>
<p>One could also introduce a Hakyll metadata field
if this is to be done conditionally,
but I see no reason to not link citations,
so I didn’t.</p>
<p>Everything works as expected:</p>
<div class="highlight">
<p>
This is a line citing
<span>[<a href="#ref-benabou67:bicats-1" role="doc-biblioref">Béna67</a>]</span>
and
<span>[<a href="ref-day07:lax-1" role="doc-biblioref">DaPaSt07</a>]</span>.
</p>
<h2>
References
</h2>
<div id="refs1" class="references csl-bib-body" role="doc-bibliography">
<div id="ref-benabou67:bicats-a">
<div class="csl-left-margin">
[Béna67]
</div>
<div class="csl-right-inline">
J. Bénabou, <span>“<a href="https://doi.org/10.1007/BFb0074299">Introduction to bicategories</a>.”</span> B<span>é</span>nabou, <span>Jean</span> et al., <span>Reports</span> of the <span>Midwest</span> <span>Category</span> <span>Seminar</span>. <span>Lect</span>. <span>Notes</span> <span>Math</span>. 47, 1–77, 1967.
</div>
</div>
<div id="ref-day07:lax-1" class="csl-entry" role="doc-biblioentry">
<div class="csl-left-margin">
[DaPaSt07]
</div>
<div class="csl-right-inline">
B. Day, E. Panchadcharam, and R. Street, <span>“Lax braidings and the lax centre,”</span> in <em>Hopf algebras and generalizations. AMS special session on hopf algebras at the crossroads of algebra, category theory, and topology, evanston, IL, USA, october 23–24, 2004.</em>, Providence, RI: American Mathematical Society (AMS), 2007, pp. 1–17.
</div>
</div>
</div>
</div>
<p>Lastly,
and this is perhaps the most important modification,
I think that not having a table-like
look—aligning labels and not letting the citation information run under its label—looks
a bit awkward.
As so many times before, pandoc filters come to the rescue here.
There is a <code>Table</code> constructor of the <code>Block</code> type which we will use:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="dt">Table</span><span class="ot"> ::</span> <span class="dt">Attr</span> <span class="ot">-&gt;</span> <span class="dt">Caption</span> <span class="ot">-&gt;</span> [<span class="dt">ColSpec</span>] <span class="ot">-&gt;</span> <span class="dt">TableHead</span> <span class="ot">-&gt;</span> [<span class="dt">TableBody</span>] <span class="ot">-&gt;</span> <span class="dt">TableFoot</span></span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a>      <span class="ot">-&gt;</span> <span class="dt">Block</span></span></code></pre></div>
<p>This may look kind of scary,
but for our simple use-case there is the aptly named <code>simpleTable</code> function:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="ot">simpleTable ::</span> [<span class="dt">Blocks</span>]   <span class="co">-- ^ Headers</span></span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a>            <span class="ot">-&gt;</span> [[<span class="dt">Blocks</span>]] <span class="co">-- ^ Rows</span></span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a>            <span class="ot">-&gt;</span> <span class="dt">Blocks</span></span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- where</span></span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Blocks</span>    <span class="ot">=</span> <span class="dt">Many</span> <span class="dt">Block</span></span>
<span id="cb24-7"><a href="#cb24-7" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">Many</span> a <span class="ot">=</span> <span class="dt">Many</span> (<span class="dt">Seq</span> a)</span></code></pre></div>
<p>Basically, any particular cell is composed of a number of <code>Blocks</code>,
a single row is a bunch (list) of those,
and all rows taken together then form a <code>[[Blocks]]</code>.
Equipped with this knowledge,
we can just search for an instance of a citation,
which will be two <code>Div</code>s inside of one <code>Para</code> inside of one <code>Div</code>,
and replace accordingly:</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- | Align all citations in a table.</span></span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a><span class="ot">tableiseBib ::</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Pandoc</span></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a>tableiseBib <span class="ot">=</span> walk \<span class="kw">case</span></span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Citations start with a &lt;div id=&quot;refs&quot; …&gt;</span></span>
<span id="cb25-5"><a href="#cb25-5" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Div</span> a<span class="op">@</span>(<span class="st">&quot;refs&quot;</span>, _, _) body <span class="ot">-&gt;</span></span>
<span id="cb25-6"><a href="#cb25-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- No header needed, we just want to fill in the body contents.</span></span>
<span id="cb25-7"><a href="#cb25-7" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Div</span> a (Many.toList (simpleTable [] (<span class="fu">map</span> citToRow body)))</span>
<span id="cb25-8"><a href="#cb25-8" aria-hidden="true" tabindex="-1"></a>  body <span class="ot">-&gt;</span> body</span>
<span id="cb25-9"><a href="#cb25-9" aria-hidden="true" tabindex="-1"></a> <span class="kw">where</span></span>
<span id="cb25-10"><a href="#cb25-10" aria-hidden="true" tabindex="-1"></a><span class="ot">  citToRow ::</span> <span class="dt">Block</span> <span class="ot">-&gt;</span> [<span class="dt">Many</span> <span class="dt">Block</span>]</span>
<span id="cb25-11"><a href="#cb25-11" aria-hidden="true" tabindex="-1"></a>  citToRow <span class="ot">=</span> <span class="fu">map</span> Many.singleton <span class="op">.</span> \<span class="kw">case</span></span>
<span id="cb25-12"><a href="#cb25-12" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Div</span> attr [<span class="dt">Para</span> [s1, s2]] <span class="ot">-&gt;</span></span>
<span id="cb25-13"><a href="#cb25-13" aria-hidden="true" tabindex="-1"></a>      [<span class="dt">Div</span> attr [<span class="dt">Plain</span> [s1]], <span class="dt">Plain</span> [<span class="dt">Space</span>], <span class="dt">Plain</span> [s2]]</span>
<span id="cb25-14"><a href="#cb25-14" aria-hidden="true" tabindex="-1"></a>    _ <span class="ot">-&gt;</span> <span class="fu">error</span> <span class="st">&quot;citToRow: unexpected citation format.&quot;</span></span></code></pre></div>
<p>Just signaling an <code>error</code> here
in case of an unexpected format
was nice for debugging the code<!--
-->—I missed the <code>Para</code> at first—<!--
-->and at this point I see no reason to change it.
Perhaps it is better to fail fast in theses kinds of situations,
instead of trying to desperately produce something based off garbage input.</p>
<p>The <code>tableiseBib</code> function can
be incorporated into <code>processBib</code>
in a straightforward fashion:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="ot">processBib ::</span> <span class="dt">Item</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">Pandoc</span>)</span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a>processBib pandoc <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- …</span></span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a>  <span class="fu">fmap</span> (tableiseBib <span class="op">.</span> insertRefHeading) <span class="op">&lt;$&gt;</span> processPandocBiblio csl bib p</span></code></pre></div>
<p>All that’s left is to nicely align everything:
the right side of the table will,
in general,
span multiple lines—in stark contrast to the label.
This is again just a few lines of CSS:</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* Align citations to the top. */</span></span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true" tabindex="-1"></a>div<span class="pp">#refs</span> td {</span>
<span id="cb27-3"><a href="#cb27-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">vertical-align</span><span class="ch">:</span> <span class="dv">top</span><span class="op">;</span></span>
<span id="cb27-4"><a href="#cb27-4" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>We get the expected result already showcased in the introduction.
For completeness, here it is again:</p>
<div class="highlight">
<p>
This is a line citing
<span>[<a href="#ref-benabou67:bicats" role="doc-biblioref">Béna67</a>]</span>
and
<span>[<a href="ref-day07:lax" role="doc-biblioref">DaPaSt07</a>]</span>.
</p>
<h2>
References
</h2>
<div id="refs-final" class="references csl-bib-body" role="doc-bibliography">
<table>
<tr>
<div id="ref-benabou67:bicats">
<td style="vertical-align: top">
<div class="csl-left-margin">
[Béna67]
</div>
</td>
<td>
</td>
<td>
<div class="csl-right-inline">
J. Bénabou, <span>“<a href="https://doi.org/10.1007/BFb0074299">Introduction to bicategories</a>.”</span> B<span>é</span>nabou, <span>Jean</span> et al., <span>Reports</span> of the <span>Midwest</span> <span>Category</span> <span>Seminar</span>. <span>Lect</span>. <span>Notes</span> <span>Math</span>. 47, 1–77, 1967.
</div>
</td>
</div>
</tr>
<tr>
<div id="ref-day07:lax" class="csl-entry" role="doc-biblioentry">
<td style="vertical-align: top">
<div class="csl-left-margin">
[DaPaSt07]
</div>
</td>
<td>
</td>
<td>
<div class="csl-right-inline">
B. Day, E. Panchadcharam, and R. Street, <span>“Lax braidings and the lax centre,”</span> in <em>Hopf algebras and generalizations. AMS special session on hopf algebras at the crossroads of algebra, category theory, and topology, evanston, IL, USA, october 23–24, 2004.</em>, Providence, RI: American Mathematical Society (AMS), 2007, pp. 1–17.
</div>
</td>
</div>
</tr>
</table>
</div>
</div>
<p>Neat.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Since smart people had already written all the hard parts,
this was surprisingly easy to add for such a useful feature!
Plus, playing around with pandoc filters is always fun.</p>
<p>Especially the <code>my​{render​Pandoc,Pandoc​Compiler}​With​TransformM</code> functions
could—with different names, of course—perhaps be contributed to upstream Hakyll.
A variant of any of the <code>*PandocBiblio</code> functions
that explicitly accepts a list of additional arguments
to give to <code>citeproc</code> might also be useful;
there are quite a few <a href="https://pandoc.org/MANUAL.html#citations">metadata fields</a> one can specify,
after all.
Finally, I think a format along the lines of <code>tableiseBib</code> would be quite nice to have with label-style citations.
However, the current implementation is much too specific to justify living anywhere but a personal configuration.
Some day, maybe.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>If you want some more information,
the format describes itself as</p>
<blockquote>
<p>an XML-based format to describe the formatting of citations,
notes and bibliographies, offering:</p>
<ul>
<li>An open format</li>
<li>Compact and robust styles</li>
<li>Extensive support for style requirements</li>
<li>Automatic style localization</li>
<li>Infrastructure for style distribution and updating</li>
<li>Thousands of freely available styles (Creative Commons BY-SA licensed)</li>
</ul>
</blockquote>
<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></li>
<li id="fn2"><p>While this style is good enough for now,
it’s still not quite perfect;
suggestions for other styles would be most welcome!<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>As one can imagine, the use-cases for filters are manifold.
From changing Hakyll’s default <a href="./pygmentising-hakyll.html">syntax highlighting</a>,
to swapping out footnotes and producing this very <a href="./block-sidenotes.html">sidenote</a>,
almost anything one can imagine is possible.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>{-} 󠀠</p>
<p>󠀠</p>
<p>In the actual code,
I also check for a <code>bib</code> boolean field,
in order to decide whether this transformation should actually be applied.
If you are interested in that, see the relevant <a href="https://github.com/slotThe/slotThe.github.io/commit/62c6072243ee06d8df39813b7e35a6fd0ea1fe9d">commit</a>.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>{-} 󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>This example also nicely showcases the power of the <code>Walkable</code> type class.
Via the</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="dt">Walkable</span> <span class="dt">Block</span> <span class="dt">Pandoc</span></span></code></pre></div>
<p>instance,
I seamlessly walk over all <code>Block</code>s in the AST
and pick out the ones I’d like to change.
Pretty neat if you ask me.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>The tensor product of S-modules is a convolution product</title>
    <link href="https://tony-zorman.com/posts/day-convolution-for-operads.html" />
    <id>https://tony-zorman.com/posts/day-convolution-for-operads.html</id>
    <published>2023-06-12T00:00:00Z</published>
    <updated>2023-06-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2023-06-12
      
      
        &thinsp;·&thinsp; last modified: 2024-08-30
      
      
        &thinsp;·&thinsp; <span title="1481 words">6 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'maths'." href="/tags/maths.html" rel="tag">maths</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>Classically, (algebraic) symmetric <a href="https://ncatlab.org/nlab/show/operad">operads</a> are defined as certain graded objects,
each level coming equipped with a nice action of the symmetric group,
which are also monoids in some sense.
While it is often noted that the grading and action correspond exactly to the data of a functor,
the fact that virtually all of the structure needed to define operads can be expressed categorically is often passed by,
which I think is quite the shame!
In this post I want to explicitly calculate the Day convolution for symmetric operads in the category of
vector spaces—though the argument holds for all nice enough target categories—in order
to show that it is nothing but the usual tensor product of modules.</p>
<!--more-->
<p>While there is more to this
story—all of which is wonderfully explained in <span class="citation" data-cites="kelly05:j">[@kelly05:j]</span>—I
think focusing on the tensor product of <span class="math inline">\mathbb{S}</span>-modules in the case of vector spaces already gives one a clue
as to how this whole translation works in general.</p>
<h2 id="the-day-convolution-product">The Day convolution product</h2>
<p>If we have nice enough categories <span class="math inline">\mathcal{C}</span> and <span class="math inline">\mathcal{V}</span>,
then the functor category <span class="math inline">[\mathcal{C}, \mathcal{V}]</span> inherits many of the properties of the two parent categories.
One of them is being <em>monoidal</em>; if there are nice functors
<span class="math display">
  \otimes_{\mathcal{C}} \colon \mathcal{C} \times \mathcal{C} \to \mathcal{C},
  \qquad \qquad
  \otimes \colon \mathcal{V} \times \mathcal{V} \to \mathcal{V},
</span>
that are associative and unital in appropriate ways,
then there is also a nice monoidal structure—called the <em>(Day) convolution product</em>—on <span class="math inline">[\mathcal{C}, \mathcal{V}]</span>.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></p>
<p>Intuitively,
one can think of the Day convolution much like the tensor product of vector spaces.
Given functors <span class="math inline">F, G, H \in [\mathcal{C}, \mathcal{V}]</span>,
a <em>bilinear map</em> is a natural transformation
<span class="math display">
  \beta ≔
  \big\{
    \beta_{v, w} \colon
      Fv \otimes Gw \to H(v \otimes_{\mathcal{C}} w)
  \big\}_{v, w \in \mathcal{V}}.
</span>
Just as in the concrete case,
maps from the convolution product <span class="math inline">F \star G</span> to <span class="math inline">H</span> now correspond to exactly these bilinear maps,
and can be seen as some sort of “linearisation”.</p>
<p>Setting <span class="math inline">\mathcal{V} ≔ \mathsf{Vect}_{\mathtt{k}}</span>—for some field <span class="math inline">\mathtt{k}</span>—one
can also give a definition in more explicit terms:<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>
<span class="math display">
  (F \star G)x
  ≔ \int^{c,d \in \mathcal{C}}
      \mathtt{k}\mathcal{C}(c \otimes_{\mathcal{C}} d, x) \otimes Fc \otimes Gd.
</span>
The <span class="math inline">\mathtt{k}\mathcal{C}(c \otimes_{\mathcal{C}} d, x)</span> notation is meant to indicate
the linearisation of the hom-set;
i.e., we take the free vector space with basis <span class="math inline">\mathcal{C}(c \otimes_{\mathcal{C}} d, x)</span>.
The little integral sign above is called a <em>coend</em>.
These are nice universal objects, and show up all the time when working with functor categories.
Still in the case of <span class="math inline">\mathcal{V} ≔ \mathsf{Vect}_{\mathtt{k}}</span>,
suppose that <span class="math inline">P \colon \mathcal{C}^{\mathrm{op}} \otimes \mathcal{C} \to \mathcal{V}</span> is a functor.
In general, one can speak of the coend <span class="math inline">\int^{c \in \mathcal{C}} P(c, c)</span> of that functor;
a more explicit description can be given as a certain coequaliser:<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>
<span class="math display">
 \bigoplus_{f \colon c \to d} P(d, c) \rightrightarrows \bigoplus_{c} P(c, c) \twoheadrightarrow \int^{c} P(c, c).
</span>
For a morphism <span class="math inline">f \colon c \to d</span>,
the two parallel arrows are induced by
<span class="math display">
  P(f, c) \colon P(d, c) \to P(c, c) \quad \text{and} \quad P(d, f) \colon P(d, c) \to P(d, d).
</span></p>
<p>To get a feeling for these things,
consider the following example in the case of <span class="math inline">\mathcal{V} ≔ \mathsf{Set}</span>.
We know how coequalisers look in the category of sets: they are merely certain equivalence relations.
Squinting at the induced arrows,
one wants to identify <span class="math inline">P(f, c)(x)</span> with <span class="math inline">P(d, f)(x)</span>,
for <span class="math inline">c, d \in \mathcal{C}</span>,
<span class="math inline">x \in P(d, c)</span>,
and <span class="math inline">f \colon c \to d</span>.<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a>
In the special case that <span class="math inline">P</span> is the hom-functor <span class="math inline">\mathcal{C}({-},{-})</span>,
the induced maps are
<span class="math display">
  {-} \circ f \colon \mathcal{C}(d, c) \to \mathcal{C}(c, c)
  \qquad \text{and} \qquad
  f \circ {-} \colon \mathcal{C}(d, c) \to \mathcal{C}(d, d).
</span>
More plainly, given <span class="math inline">x \colon d \to c</span> and <span class="math inline">f \colon c \to d</span>,
we have <span class="math inline">x \circ f \sim f \circ x</span>.
Thus, the coend here can be seen as a kind of abelianisation of arrows.</p>
<h2 id="the-tensor-product-of-mathbbs-modules">The tensor product of <span class="math inline">\mathbb{S}</span>-modules</h2>
<p>Consider the following category <span class="math inline">\mathbb{S}</span>:
objects are natural numbers,
and morphism spaces are given by <span class="math inline">\mathbb{S}(n, m) = S_n</span> if <span class="math inline">n = m</span>, and <span class="math inline">0</span> otherwise,
where <span class="math inline">S_n</span> is the symmetric group of <span class="math inline">n</span> elements.</p>
<p>Again staying firmly in the case that <span class="math inline">\mathcal{V} = \mathsf{Vect}_{\mathtt{k}}</span>,
an <em><span class="math inline">\mathbb{S}</span>-module</em> is a family of vector spaces <span class="math inline">F = (F0, F1, F2, \dots)</span>,
each of which is a left <span class="math inline">\mathtt{k}S_n</span>-module.
Alternatively, it is a functor from <span class="math inline">\mathbb{S}</span> to <span class="math inline">\mathcal{V}</span>—this is,
of course, where the convolution product comes into play.
The category of <span class="math inline">\mathbb{S}</span>-modules is usually denoted by <span class="math inline">\mathbb{S}\text{-}\mathrm{Mod}</span>.</p>
<p>This construction might seem somewhat artificial at first,
but—as mentioned before—<a href="https://ncatlab.org/nlab/show/operad">(symmetric) operads</a> turn out to be <span class="math inline">\mathbb{S}</span>-modules
that are also monoids with respect to a certain monoidal structure
(not the Day convolution, but a related one).
As such, <span class="math inline">\mathbb{S}</span>-modules are quite well studied as a category.</p>
<p>One could put quite a few monoidal structures on <span class="math inline">\mathbb{S}</span>,
but what is usually called the <em>tensor product of <span class="math inline">\mathbb{S}</span>-modules</em> is defined as follows:
given <span class="math inline">F, G \in \mathbb{S}\text{-}\mathrm{Mod}</span>, let
<span class="math display">
  (F \otimes G)r ≔ \bigoplus_{n + m = r} \mathsf{Ind}_{S_n \times S_m}^{S_r} Fn \otimes_{\mathtt{k}} Gm,
</span>
where <span class="math inline">\mathsf{Ind}_{S_n \times S_m}^{S_r}</span> denotes the <a href="https://ncatlab.org/nlab/show/induced+representation">induced representation</a>.<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a>
Alternatively, one could write this with <a href="https://ncatlab.org/nlab/show/shuffle">shuffles</a>:
<span class="math display">
  (F \otimes G)r ≔ \bigoplus_{n + m = r} \mathtt{k}\mathrm{Shuf}(n, m) \otimes_{\mathtt{k}} Fn \otimes_{\mathtt{k}} Gm,
</span></p>
<p>This tensor product doesn’t look super different than the convolution product above,
but it remains to see that the equivalence relation generated by the coequaliser really glues things together in just the right way.
Let’s try that.</p>
<h2 id="bringing-everything-together">Bringing everything together</h2>
<p>In a slightly more general setting—now considering
an arbitrary (monoidal) category <span class="math inline">\mathcal{C}</span> instead of <span class="math inline">\mathbb{S}</span>,
but still fixing vector spaces over <span class="math inline">\mathtt{k}</span> for
<span class="math inline">\mathcal{V}</span>—the
Day convolution <span class="math inline">F \star G</span> evaluated at <span class="math inline">x \in \mathcal{C}</span> can be expressed as</p>
<p><span class="math display">
  \bigoplus_{\substack{f \colon a \to a' \\ g \colon b \to b'}}
    \mathtt{k}\mathcal{C}(a' \otimes b', x) \otimes_{\mathtt{k}} Fa \otimes_{\mathtt{k}} Gb
  \rightrightarrows
  \bigoplus_{a, b \in \mathcal{C}}
    \mathtt{k}\mathcal{C}(a \otimes b, x) \otimes_{\mathtt{k}} Fa \otimes_{\mathtt{k}} Gb.
</span></p>
<p>Looking at the induced arrows,
and—as usual—considering only elementary tensors,
on the left side we have “tuples” of
<span class="math display">
  h \colon a' \otimes b' \to x,\quad  v \in Fa,\quad  w \in Gb.
</span>
They are then mapped to either
<span class="math display">
  h \circ (f \otimes g) \colon a \otimes b \to x,\quad  v \in Fa,\quad  w \in Gb
</span>
or
<span class="math display">
  h \colon a' \otimes b' \to x,\quad (Ff) v \in Fa',\quad (Gg) w \in Gb',
</span>
and these two representations are identified.</p>
<p>In the special example of operads,
the above coequaliser is easier to
understand—remember that <span class="math inline">\mathbb{S}</span> is a category with only endomorphisms.
Thus, due to <span class="math inline">\mathbb{S}(a + b, x)</span> vanishing, all factors in the coproduct where <span class="math inline">a + b \neq x</span> are automatically 0.
As such, the whole thing transforms into</p>
<p><span class="math display">
  \bigoplus_{\substack{\sigma \in S_n \\ \tau \in S_m \\ n + m = r}}\!\!\!
    \mathtt{k}\mathbb{S}(n + m, r) \otimes_{\mathtt{k}} Fn \otimes_{\mathtt{k}} Gm
  \rightrightarrows
  \!\bigoplus_{n + m = r}\!\!
    \mathtt{k}\mathbb{S}(n + m, r) \otimes_{\mathtt{k}} Fn \otimes_{\mathtt{k}} Gm.
</span></p>
<p>The identifications
<span class="math display">
  h \circ (\sigma + \tau),\quad v         ,\quad w
  \qquad\sim\qquad
  h                      ,\quad (F\sigma) v,\quad (G\tau) w
</span>
now look an awful lot like identifying some left actions with some right actions.
Indeed, due to the extra condition that <span class="math inline">n + m = r</span>,
we are effectively permuting <span class="math inline">r</span>
by applying the action of two partitions of size <span class="math inline">n</span> and <span class="math inline">m</span>—a shuffle product!
Overall, the expression
<span class="math display">
  \big(\!\!\!\!
    \bigoplus_{n + m = r} \mathtt{k}\mathbb{S}(n + m, r) \otimes_{\mathtt{k}} Fn \otimes_{\mathtt{k}} Gm
  \big)
  /
  {\sim}
</span>
simplifies to
<span class="math display">
  \bigoplus_{n + m = r} \mathtt{k}\mathrm{Shuf}(n,m)  \otimes_{\mathtt{k}} Fn \otimes_{\mathtt{k}} Gm,
</span>
or, in different notation,
<span class="math display">
  \bigoplus_{n + m = r} \mathsf{Ind}_{S_n \times S_m}^{S_k} Fn \otimes_{\mathtt{k}} Gm,
</span>
which is exactly the kind of formula that we wanted to end up with. Neat.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>Provided some extra technical conditions:
<span class="math inline">\mathcal{C}</span> should be small,
and <span class="math inline">\mathcal{V}</span> should be cocomplete,
with the tensor product preserving colimits in both variables.
Alternatively, one could talk about enriched categories and functors,
but since I will work with <span class="math inline">\mathcal{V} = \mathsf{Vect}_{\mathtt{k}}</span> for most of the post,
these more involved concepts seem overkill.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>Really, this definition always works,
one just needs to substitute the <span class="math inline">\mathtt{k}</span>-linearisation of the hom-set
with a <a href="https://ncatlab.org/nlab/show/copower">Copower</a>.
I have written about these things <a href="https://tony-zorman.com/posts/weighted-colimits.html#copowers">before</a>,
just in a different context.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>{-} 󠀠
󠀠</p>
<p>The big direct sum
<span class="math inline">\bigoplus_{f \colon V \to W}</span> is shorthand for <span class="math inline">\bigoplus_{V, W} \bigoplus_{f \in \mathcal{V}(V, W)}</span>.
Really, this is a coproduct in general,
but we are in <span class="math inline">\mathsf{Vect}_{\mathtt{k}}</span>,
so writing a direct sum here is appropriate.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>This may or may not be an equivalence relation,
but we can always complete to one.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>{-} As an aside (literally),
equipped with the tensor product of <span class="math inline">\mathbb{S}</span>-modules,
it’s not so hard to define the <em>plethysm product</em> <span class="math inline">\odot</span>,
which is actually the one that operads are monoids for:
<span class="math display">
    (F \odot G)n ≔ \bigoplus_{m \geq 0} Fm \otimes_{S_m} G^{\star m}n.
  </span>
This can, of course, also be expressed with coends:
<span class="math display">
    (F \odot G)n ≔ \int^{m} Fm \otimes_{\mathtt{k}} G^{\star m}n.
  </span>
In both expressions,
<span class="math inline">G^{\star m}</span> is the <span class="math inline">m</span>-fold tensor product (Day convolution) of <span class="math inline">G</span> with itself:
<span class="math display">
    \int^{r_1 \dots r_m}\!\! \mathbb{S}(r_1 + \dots + r_m, n) \otimes G r_1 \otimes \dots \otimes G r_m.
  </span><a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Use-package now has a :vc keyword</title>
    <link href="https://tony-zorman.com/posts/use-package-vc.html" />
    <id>https://tony-zorman.com/posts/use-package-vc.html</id>
    <published>2023-05-18T00:00:00Z</published>
    <updated>2023-05-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2023-05-18
      
      
      
        &thinsp;·&thinsp; <span title="232 words">1 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->


<div>
  <p>Just a quick heads-up: <code>use-package</code>,
which was merged into Emacs in <a href="https://git.savannah.gnu.org/cgit/emacs.git/commit/?id=4a1e9d61b57c36255752437a2668e037e79fe870">November last year</a>,
now has a <code>:vc</code> keyword!</p>
<!--more-->
<p>The change was <a href="https://git.savannah.gnu.org/cgit/emacs.git/commit/?id=2ce279680bf9c1964e98e2aa48a03d6675c386fe">merged</a> two days ago,
and supersedes—indeed, is a rewrite of—<a href="https://github.com/slotThe/vc-use-package">vc-use-package</a>,
which is now only needed for people who prefer to stick to released versions of Emacs.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>
In short,
the keyword enables one to install packages directly from their remote source:</p>
<pre class="emacs-lisp"><code>(use-package modus-themes
  :vc (:url &quot;https://gitlab.com/protesilaos/modus-themes&quot;
       :branch &quot;main&quot;))</code></pre>
<p>This is not dependent on git,
but should work for all version control systems that Emacs knows about;
see <code>vc-handled-backends</code>.</p>
<p>By default,
<code>:vc</code> installs the latest <em>release</em> of a package—the
last commit that bumped the <code>"Version"</code> tag inside of the main elisp file
(yes, really).
Installing the most recent commit instead,
which should feel more familiar to users coming from package archives like MELPA,
can be done by giving <code>:vc</code> a <code>:rev :newest</code> argument.
Additionally,
<code>:rev</code> can also be used to pin specific revisions of a package.
Other niceties, like specifying alternative lisp directories, are also included:</p>
<pre class="emacs-lisp"><code>(use-package vertico
  :vc (:url &quot;https://github.com/minad/vertico&quot;
       :rev :newest
       :lisp-dir &quot;extensions/&quot;))</code></pre>
<p>For more information on the specific syntax,
refer to <code>C-h v package-vc-selected-packages RET</code>,
and the relevant info node <code>(emacs)Fetching Package Sources</code>.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>There is no reason for that, of course.
Building Emacs is just a</p>
<pre class="shell"><code>BUILD_OPTS=$(emacs \
  --batch \
  --eval &quot;(prin1 system-configuration-options)&quot;)

./autogen.sh
echo &quot;$BUILD_OPTS&quot; | sed 's/^&quot;\(.*\)&quot;$/\1/' \
                   | xargs ./configure
make bootstrap
sudo make install</code></pre>
<p>away!<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Keyboardio Atreus Review</title>
    <link href="https://tony-zorman.com/posts/atreus-review.html" />
    <id>https://tony-zorman.com/posts/atreus-review.html</id>
    <published>2023-05-06T00:00:00Z</published>
    <updated>2023-05-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2023-05-06
      
      
        &thinsp;·&thinsp; last modified: 2023-06-17
      
      
        &thinsp;·&thinsp; <span title="4147 words">17 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'hardware'." href="/tags/hardware.html" rel="tag">hardware</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>And now for something completely different—hardware.
Even worse: consumerism!
I bought an <a href="https://shop.keyboard.io/products/keyboardio-atreus">Atreus</a> keyboard from Keyboardio about three weeks ago,
and can’t resist writing at least a few sentences about it.</p>
<p>TL;DR: Get it.
For bonus points, build it yourself!</p>
<!--more-->
<h2 id="overview">Overview</h2>
<p>So what even is the Atreus?
I will keep this rather short,
as I don’t imagine many people not knowing at least a vague answer to that question will have clicked on this random blog and want to read about it.
To start, they say a picture is worth a thousand words:<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></p>
<p><img class="pure-img" src="../images/atreus-review/atreus.jpg" alt="My Atreus with blank keycaps"></p>
<p>If you’re interested in buzzwords:
this is a 40%, vertically staggered, split-ish mechanical keyboard
with Kailh tactile silent BOX switches.<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>
In particular,
the Keyboardio version builds upon an <a href="https://atreus.technomancy.us/">earlier design</a> by Phil Hagelberg.
There are some distinctions, like two additional thumb keys in the centre,
but most of what I say here will also apply to that version of the keyboard.</p>
<p>The 40% form factor—just 44 keys—is obviously quite something,
and in fact one of the main reasons that I bought this keyboard in the first place.
Basically, it’s small enough so that one can take it everywhere,
while also not being <em>too</em> small.<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>
The relying on thumb buttons,
which means that one is not forced to use the weakest finger for holding down modifiers anymore,
also fits nicely with my particular sensibilities.
As does—and these things go hand in hand, I suppose—not having a comically large space bar;
something that too many people still put up with!</p>
<p>The physical keys themselves are PBT with an XDA profile.
While they are more than adequate,
sculpted keycaps would have been nice,
if only to go with the ergo theme.
The one key I do have with a label (the <code>Any</code> key) is laser engraved,
and feels quite good as well.
I went with blank keycaps mostly because I use <a href="https://colemakmods.github.io/mod-dh/">Colemak Mod-DH</a> as my keyboard layout,
and I can’t stand TODOs on the wrong fingers!
Plus,
not being sure how the key layout was actually going to look like in the end,
this seemed like the safer choice, aesthetically.</p>
<p>Being quite inexperienced with these sorts of things,
I don’t have too many things to say about the switches:
they’re honestly pretty much exactly what I wanted.<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a>
Comparing them with the two other switches that I have access to,
Cherry MX Browns and Hako Trues,
they are much lighter than the latter—which is a big plus for me—and
a bit more weighty than the former.
Overall, the Kailh switches feel more comfortable than either of the other two.
Plus, the “silent” aspect really delivers:
perfect for the office,
where I now bring this keyboard every day,
as well as coffee shops or trains.</p>
<h2 id="physical-layout">Physical layout</h2>
<p>The layout—both in terms of physical placement of the keys, as well as the key mappings—obviously plays a tremendous role
in making a keyboard that small both comfortable, and actually usable.</p>
<p>While perhaps not quite being on the level of a truly split keyboard,
like the <a href="https://ergodox-ez.com/">ergodox</a>,
the ergonomic aspects are entirely adequate,
and there obviously had to have been some sort of trade-off in favour of portability.
That being said, some keys are hard to hit.
For me, this is thankfully limited to the two upper thumb keys,
as well as the penultimate keys from the left and right in the bottom row:</p>
<pre><code>     .----.----.----.----.----.         .----.----.----.----.----.
     |    |    |    |    |    |         |    |    |    |    |    |
     .----.----.----.----.----.         .----.----.----.----.----.
     |    |    |    |    |    |         |    |    |    |    |    |
     .----.----.----.----.----.----.----.----.----.----.----.----.
     |    |    |    |    |    | XX | XX |    |    |    |    |    |
     .----.----.----.----.----.----.----.----.----.----.----.----.
     |    | XX |    |    |    |    |    |    |    |    | XX |    |
     .----.----.----.----.----.----.----.----.----.----.----.----.</code></pre>
<p>Hitting these involves big stretches of the
thumb—or alternatively the ring finger, in the latter case—and
neither movement is particularly comfortable.<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a></p>
<p>Also, while the thumb buttons are convenient,
I do sort of wish for one or two additional pinky keys on both sides,
perhaps on the second or third row:</p>
<pre><code>     .----.----.----.----.----.         .----.----.----.----.----.
     |    |    |    |    |    |         |    |    |    |    |    |
.----.----.----.----.----.----.         .----.----.----.----.----.----.
| XX |    |    |    |    |    |         |    |    |    |    |    | XX |
.----.----.----.----.----.----.----.----.----.----.----.----.----.----.
| XX |    |    |    |    |    |    |    |    |    |    |    |    | XX |
.----.----.----.----.----.----.----.----.----.----.----.----.----.----.
     |    |    |    |    |    |    |    |    |    |    |    |    |
     .----.----.----.----.----.----.----.----.----.----.----.----.</code></pre>
<p>One could then even get rid of the problematic keys altogether,
though they could still be useful for e.g. mouse-assist layers.</p>
<p>Actually getting used to the physical layout of the board took a while.
Typing itself was not the issue,
and I was back to a comfortable pace after just two or three hours of practice.
Incorporating numbers,
special keys,
and getting muscle memory for all of the modifiers and key chords<a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a> however… took some time.
The better part of these last weeks, in fact,
and even now I still occasionally notice some hesitation and awkwardness in my movements.
I suppose it did not help that I kept fiddling with the layout;
perhaps people who have less specific requirements and just use the Atreus as-is would need less time.
Then again, creating a custom keyboard layout for this thing is at least half of the fun!</p>
<p>Speaking of which, let’s talk about that.</p>
<h2 id="keyboard-layout">Keyboard layout</h2>
<p><a href="#fn7" class="footnote-ref" id="fnref7" role="doc-noteref"><sup>7</sup></a>The Atreus comes loaded with the <a href="https://github.com/keyboardio/Kaleidoscope">Kaleidoscope</a> firmware,
and Keyboardio are very keen to point to their GUI configurator <a href="https://github.com/keyboardio/Chrysalis">Chrysalis</a> for interfacing with the keyboard.
Personally, I was planning on using features—like tap dancing—that Chrysalis does not support,
and I didn’t see much of a point in using Kaleidoscope just to be different,
so I immediately flashed my Atreus with <a href="https://qmk.fm/">QMK</a>.<a href="#fn8" class="footnote-ref" id="fnref8" role="doc-noteref"><sup>8</sup></a>
The end result turned out to be quite nice,
and for my typical workflow I now indeed often have the feeling of being <em>faster</em> than I was before.
Typing <code>M-(</code> has become such a joy!</p>
<p>While one could stop here and just paste the layout,
I think the considerations that went into it during its initial
creation—and while fiddling with it, of course—are quite important,
given the unusual form-factor.
Plus, there aren’t very many detailed resources on actually using a 40% keyboard that I could find,
so perhaps this will also turn out to be useful to people not using an Atreus.
For the impatient: you can find my finished layout <a href="https://github.com/slotThe/qmk_firmware/tree/keyboardio/atreus/slotThe/keyboards/keyboardio/atreus/keymaps/slotthe">here</a>.</p>
<h3 id="key-chord-considerations">Key chord considerations</h3>
<p>As I extensively use both Emacs and XMonad,
there are quite a few modifier combinations to consider.
Obviously, some of these will be more difficult to press than others,
especially since I don’t want to go overboard with layers,
and I would like as many of my key chords to commute as possible,
but more on that later.
For example, a (non-exhaustive) list of combinations<a href="#fn9" class="footnote-ref" id="fnref9" role="doc-noteref"><sup>9</sup></a>
would be <code>C-S</code>, <code>C-M1</code>, <code>M4-M1</code>, <code>S-M4</code>, and <code>C-M4</code>;
this already suggests some vague ordering of keys to different hands.
Before buying the Atreus, I keylogged myself for a little bit on my internal laptop keyboard using <a href="https://github.com/anko/xkbcat">xkbcat</a>.
A cursory analysis reveals the following:<a href="#fn10" class="footnote-ref" id="fnref10" role="doc-noteref"><sup>10</sup></a></p>
<pre class="console"><code>$ sort ~/.keylog.txt | uniq -c | sort -r | head -n15
  80590 Control_L
  58476 n
  49657 space
  47140 e
  46213 Down
  38062 s
  36874 Shift_L
  32862 t
  31168 Up
  30814 BackSpace
  30522 p
  28555 a
  26445 x
  25004 Alt_L
  24831 Super_L</code></pre>
<p>This is not 100% accurate,
as xkbcat uses X11 input events in order to find out which keys were pressed,
and so my layer key—with which I also press keys like <code>Down</code>—does not show up at all.
I did, however, go through the trouble of remapping every right variant of a key (like <code>Shift_R</code>) to their respective left versions,
so that there was no need for further <code>sed</code>ing.
Based on the prevalence of <code>Up</code> and <code>Down</code>,
it’s probably fair to say that the layer key and Control are my two most pressed keys.</p>
<p>The data suggests that Control and the layer 1 key should probably be on different hands.
Shift was used quite a lot,
but since the Atreus does not have a number row
it will become a bit less essential,
with a lot of special characters moving to a different layer instead.
Super and Alt are probably not too critical,
and can be distributed according to how easy it is to press the most important key chords.
For example,
<code>C-M1</code> is used very often inside of Emacs,
and hence Alt should be on the opposite hand of Control.</p>
<p>One thing that I didn’t anticipate,
yet which turned out to be quite important,
was to have “numerical” symbols on a layer that’s on the opposite hand of the space bar.
Otherwise, entering maths can become a bit clunky.
For example, with both keys on the same hand,
just typing <code>3 + 3</code> would involve
holding down a layer key with one thumb,
pressing <code>3</code>,
releasing the layer key,
tapping Space with the same thumb,
pressing the layer key, …
Quite the chore!
Much better to have Space and the layer key on opposite hands,
and set up a fall-through for it on the respective layer
(i.e., so that one can just hold down the layer key and write <code>3 + 3</code> “in one go”).
This situation gets exacerbated when writing LaTeX
(which I do <a href="https://tony-zorman.com/posts/my-phd-workflow.html">quite a lot</a>).</p>
<p>So much for my preparation.</p>
<p>Of course, I still changed the layout every two minutes during the first few days of usage,
and I’m only now slowing down a little bit.
Still, I like to think that keylogging myself gave me some small insight into my (subconscious) keyboard habits,
although using a 40% board is so different from even just a laptop keyboard that
surprises like the above maths entry conundrum are inevitable.
Anyways, let’s actually talk about the layers now.</p>
<h3 id="base-layer">Base layer</h3>
<pre><code>.-----.-----.-----.-----.-----.           .-----.-----.-----.-----.------.
|  Q  |  W  |  F  |  P  |  B  |           |  J  |  L  |  U  |  Y  | M4+; |
.-----.-----.-----.-----.-----.           .-----.-----.-----.-----.------.
|  A  |  R  |  S  |  T  |  G  |           |  M  |  N  |  E  |  I  |  O   |
.-----.-----.-----.-----.-----.-----.-----.-----.-----.-----.-----.------.
| S+Z |  X  |  C  |  D  |  V  | ARP | REP |  K  |  H  |  ,  |  .  | S+/  |
.-----.-----.-----.-----.-----.-----.-----.-----.-----.-----.-----.------.
| ESC | TAB | M4  | L1  | SPC | A[] | BSC | C() | L2  |  -  |  '  | RET  |
.-----.-----.-----.-----.-----.-----.-----.-----.-----.-----.-----.------.</code></pre>
<p>As I said, I use <a href="https://colemakmods.github.io/mod-dh/">Colemak Mod-DH</a> as my layout,
though this is probably the least surprising thing about the above layer.
Some key names aren’t at all obvious,
and this layer already showcases quite a bit of the functionality that I’ve packed into the keyboard,
so let’s go through it carefully.</p>
<p>I—perhaps strikingly—opted for not putting Shift on the thumb,
but recreating the “ordinary” one-on-each-side setup from the good old typewriter days.
While I already have a key to access the LOWER (L1) layer with my left thumb,
I had to sacrifice Shift so I could fit a key to the RAISE (L2) layer on the right thumb.
This also jumps to the ADJUST (L3) layer when both LOWER and RAISE are held at the same time.
I will gladly trade two layers for one Shift key.</p>
<p>One of the most basic things—besides having layers—that one can do with QMK is <a href="https://docs.qmk.fm/#/mod_tap">mod-taps</a>.
These are keys that act as modifiers when held, and as “ordinary” keys when pressed.
For example, all of the <code>S+«key»</code> keys emit Shift when held and <code>«key»</code> when pressed.
There is a slight delay between pressing the key and the press registering,
since we have to wait for a possible tap,
which keeps me from using modifiers on the home-row, as some people like to do.
Likewise, the <code>M4+;</code> key acts as Super when held and as <code>;</code> when pressed.
At this point, it is actually my main way to press the Super key,
even though I don’t find the real <code>M4</code> key particularly hard to hit with my thumb.
Sometimes these things just happen,
I suppose,
though it may help that I press both outer keys of the top row (that is, <code>q</code> and <code>;</code>) with my ring finger
instead of my pinky.</p>
<p>The <code>A[]</code> and <code>C()</code> keys are utilising <a href="https://docs.qmk.fm/#/feature_tap_dance">tap dances</a>,
in order to do even more.
Tap dances are very similar to mod-taps,
only in addition to just differentiating between a “pressed” and a “held” state,
QMK now also keeps track of <em>how often</em> a key has been tapped.
So far, <a href="https://github.com/slotThe/qmk_firmware/blob/keyboardio/atreus/slotThe/keyboards/keyboardio/atreus/keymaps/slotthe/keymap.c#L190">my setup</a> here is quite basic;
I only check whether a key was pressed once, twice, or is being held.
This allows me to not need extra keys for parentheses,
as they can fit on the modifier keys:</p>
<ul>
<li><p><code>A[]</code>: Alt when held, <code>[</code> when pressed once, and <code>]</code> when pressed twice.
This one is especially neat, since tap dances play well with other modifiers,
so pressing <code>S-M1</code> once will result in <code>{</code> and pressing it twice gives <code>}</code>.</p></li>
<li><p><code>C()</code>: Control when held, <code>(</code> when pressed once, and <code>)</code> when pressed twice.</p></li>
</ul>
<p>I don’t mind having the extra indirection for the respective closed delimiter,
as <a href="https://paredit.org/">paredit</a>,
<a href="https://github.com/AmaiKinono/puni">puni</a>,
<code>electric-pair-mode</code>,
or a different package of choice usually takes care of inserting it.</p>
<p>Having essentially all parentheses on the base layer makes programming even more fun,
especially the more parentheses-heavy languages—whether that’d be Clojure or Rust.</p>
<p>The <code>REP</code> and <code>AREP</code> keys make use of the <a href="https://docs.qmk.fm/#/feature_repeat_key">Repeat Key</a> functionality;
basically, <code>REP</code> executes the key chord that was last pressed.
On the other hand,
<code>AREP</code> is an alternative, configurable, of “repeating” things;
by default, it turns some directional movements
around—e.g., <code>M-f</code> becomes <code>M-b</code>—but
it can be made to pretty much input anything one wants.</p>
<h3 id="layer-1">Layer 1</h3>
<pre><code>.-----.-----.-----.-----.-----.           .-----.-----.-----.-----.-------.
|  &amp;  | *&gt;  | &gt;&gt;= | &lt;&amp;&gt; |     |           |  =  |  +  |  *  |  -  | M4+RT |
.-----.-----.-----.-----.-----.           .-----.-----.-----.-----.-------.
| ::  | =&gt;  | =&lt;&lt; | &lt;|&gt; |  @  |           | LFT |  UP | DWN | RGT |   \   |
.-----.-----.-----.-----.-----.-----.-----.-----.-----.-----.-----.-------.
| S+! | &lt;*  | &lt;*&gt; | &lt;$&gt; | &lt;-  |     | MEN |  -&gt; |  $  |  #  |  %  |  S+^  |
.-----.-----.-----.-----.-----.-----.-----.-----.-----.-----.-----.-------.
|     |     |     |     |     |     |     |     | L3  | ALT |     | S-Ins |
.-----.-----.-----.-----.-----.-----.-----.-----.-----.-----.-----.-------.</code></pre>
<p>Guess which programming language I like based on this layer’s <a href="https://docs.qmk.fm/#/feature_macros">macros</a> :).
There are also other mod-taps here, but nothing new concept wise.<a href="#fn11" class="footnote-ref" id="fnref11" role="doc-noteref"><sup>11</sup></a></p>
<p>Crucially, however, keys that were “Shift when held,
<em>something</em> when pressed” on the base layer retain the Shift part of that functionality.
This is used for the commutativity<a href="#fn12" class="footnote-ref" id="fnref12" role="doc-noteref"><sup>12</sup></a> of the modifier keys,
which would otherwise drive me insane.
The same goes for all fall-through keys;
i.e., keys that appear blank in the above layout.
These aren’t blocked or anything,
just no new functionality is added
so the key falls back to what’s on the next lowest layer.
In plain terms,
the key to the left of <code>L3</code> will still be Control,
as I can comfortably press that while holding down something with my left hand.
The same can’t be said for the Alt key,
which is on the left hand by default,
so a separate binding for it has to be created on the right hand.
Thus,
as the two don’t commute,
key chords involving the LOWER layer and Alt are to be avoided if possible.</p>
<p>The <code>S-Ins</code> key is not some sort of tap,
but actually just emits a Shift-Insert,
which can be used to paste stuff from the <a href="https://www.uninformativ.de/blog/postings/2017-04-02/0/POSTING-en.html">X11 primary selection</a>.</p>
<h3 id="layer-2">Layer 2</h3>
<pre><code>.-----.-----.-----.-----.-----.           .-----.-----.-----.-----.-----.
|     |  7  |  8  |  9  |     |           |     |  +  |  *  |  -  |     |
.-----.-----.-----.-----.-----.           .-----.-----.-----.-----.-----.
|  :  |  4  |  5  |  6  |  =  |           |     |  `  |  _  |  '  |  &quot;  |
.-----.-----.-----.-----.-----.-----.-----.-----.-----.-----.-----.-----.
| S+0 |  1  |  2  |  3  |     |     |     |     |     |  #  |  %  | S+^ |
.-----.-----.-----.-----.-----.-----.-----.-----.-----.-----.-----.-----.
|     |     |     | L3  |     |     |     |     |     |     |     |     |
.-----.-----.-----.-----.-----.-----.-----.-----.-----.-----.-----.-----.</code></pre>
<p>A relatively unspectacular layer,
RAISE is mainly used for numbers,
and number adjacent things.
Some symbols related to this,
like <code>=</code>, <code>+</code>, <code>*</code>, and <code>-</code>,
are replicated from the LOWER layer.
This is due to the above mentioned issues of inserting arithmetic.
This layer also features ` and <code>'</code> quite prominently,
as these are important for <a href="https://github.com/cdominik/cdlatex">CDLaTeX</a>.
Plus, putting <code>'</code> and <code>"</code> on this layer circumvents the difficult to hit key on the base layer.<a href="#fn13" class="footnote-ref" id="fnref13" role="doc-noteref"><sup>13</sup></a></p>
<h3 id="layer-3">Layer 3</h3>
<pre><code>.-----.-----.-----.-----.-----.           .-----.-----.-----.-----.-----.
|     |     |     |     |     |           |     | F7  | F8  | F9  | F10 |
.-----.-----.-----.-----.-----.           .-----.-----.-----.-----.-----.
|     |     |     |     |     |           |     | F4  | F5  | F6  | F11 |
.-----.-----.-----.-----.-----.-----.-----.-----.-----.-----.-----.-----.
|     |     |     |     |     |     |     |     | F1  | F2  | F3  | F12 |
.-----.-----.-----.-----.-----.-----.-----.-----.-----.-----.-----.-----.
|     |     |     |     |     |     |     |     |     |     |     |     |
.-----.-----.-----.-----.-----.-----.-----.-----.-----.-----.-----.-----.</code></pre>
<p>So far, only the seldom used F-keys are present here.
As should be obvious, this is the least developed layer,
and also the one that’ll probably change the most in the future.<a href="#fn14" class="footnote-ref" id="fnref14" role="doc-noteref"><sup>14</sup></a>
Currently, I’m thinking of putting some XMonad specific bindings on here,
which could even to free up the Super key to be used inside of Emacs
for certain things—that would certainly be a worthwhile experiment.
Other thoughts include things like volume and brightness controls,
although this is less critical since my laptop keyboard is never far away.</p>
<h2 id="other-features">Other features</h2>
<p>There are some features that aren’t necessarily reflected in the keys themselves,
yet are quite essential for day-to-day use.
The TL;DR can be found in <a href="https://github.com/slotThe/qmk_firmware/blob/keyboardio/atreus/slotThe/keyboards/keyboardio/atreus/keymaps/slotthe/rules.mk">rules.mk</a>.</p>
<p>One notable omission from the following list will be Unicode entry.
This is solely due to the fact that QMK’s built-in support for this utilises some GTK-specific functionality,
which is woefully inadequate for my setup.
However, since I mostly write English nowadays,
so far I have survived on a mixture of compose key sequences,
and <a href="https://github.com/minad/jinx">jinx</a> telling me that I really should write an Umlaut in a certain place.
This is one of the areas in which KMonad actually beats
QMK—and by quite a large margin at that!
There is a good way to define Unicode characters by setting up one’s own X11 keymap,
but I haven’t gotten around to this yet.
Some day!</p>
<h3 id="key-overridesqmkkey-overrides"><a href="https://docs.qmk.fm/#/feature_key_overrides">Key overrides</a></h3>
<p>Quoting from the documentation</p>
<blockquote>
<p>Key overrides allow you to override modifier-key combinations to send a different modifier-key combination
or perform completely custom actions.</p>
</blockquote>
<p>Above I mentioned that some keys on the keyboard are quite hard to hit.
On the default layout,
one of these turns out to be the Tab key,
which is nonetheless important in a lot of situations.
Conveniently, Emacs interprets <code>C-i</code> as Tab, so there is less need to actually hit the “real” key.
However, not all programs are quite so understanding—or old, I guess.
With key overrides, one can send a real <code>TAB</code> whenever <code>C-i</code> is pressed;
no special convention on how to interpret certain key chords required!
I also rebound <code>C-m</code> to <code>RET</code> (with the same justification), and <code>S-BSP</code> to <code>DEL</code>.</p>
<p>This is one of those features that I didn’t know I needed,
yet now couldn’t live without anymore.
I’m definitely looking forward to discovering new and interesting ways of using this!</p>
<h3 id="autocorrectqmkautocorrect"><a href="https://docs.qmk.fm/#/feature_autocorrect">Autocorrect</a></h3>
<p>This is a quaint little feature: auto-correct inside of your keyboard’s firmware!
I promise that it’s not as bad as it sounds.
It does not work automatically, thankfully, but is based off a given list of replacements.
For example,</p>
<pre><code>widht -&gt; width</code></pre>
<p>would fire anytime one writes <code>widht</code>, which then gets replaced by <code>width</code>.
This is based on (a trie of) the most recently pressed keys,
so whenever one actually wants to write <code>widht</code>
all that’s needed is pressing, for example, any modifier during the insertion.</p>
<p>As I’ve really just been trying this out for a laugh, my current word list is quite short:</p>
<pre><code>:alot       -&gt;  a lot
accesories  -&gt;  accessories
accomodate  -&gt;  accommodate
alledge     -&gt;  allege</code></pre>
<p>In general,
I think the solution to stop misspelling a word is not to remap key sequences on the firmware level,
but to—you know—learn how to spell that word.
Still,
I can imagine at least one or two use-cases where something like this could be useful,
so I figured it might be nice to make people aware of this features’ existence.</p>
<p>In addition—as I’ve found out on three separate occasions so far—using the words “auto-correct, but in firmware”
makes people stare in utter disbelief and/or disgust at your keyboard.
That alone makes this feature worth it.</p>
<h3 id="caps-wordqmkcaps-word"><a href="https://docs.qmk.fm/#/feature_caps_word">Caps Word</a></h3>
<p>Caps Word is a clever alternative to Caps Lock,
which I enable by pressing both Shift keys together.
After that,
all of the letter keys are shifted,
and <code>-</code> becomes <code>_</code>
until a different key (excluding common sense ones like backspace) is pressed.
This is very useful for, e.g.,
writing long constants,
as these tend to have capital names separated with underscores:
writing <code>BOTH_SHIFTS_TURNS_ON_CAPS_WORD</code> has never been easier!</p>
<p>One thing to note is that,
while layer switching works just fine in “Caps Word mode”,
the <a href="https://docs.qmk.fm/#/feature_tri_layer">Tri Layer</a> feature does not seem to play nicely with it;
i.e., the mode gets disabled when switching to these layers.
This is also the reason why I have an explicit LOWER, RAISE, and ADJUST setup,
instead of just using Tri Layer.
One could fiddle with the <code>caps_word_press_user</code> callback,
but it seemed much easier to just create one additional layer toggle instead.
I haven’t looked at how hard it would be to hack this into Caps Word,
so maybe this is a future pull request.</p>
<h2 id="conclusion">Conclusion</h2>
<p>This turned into more of a QMK overview than an Atreus review,
but the verdict stays the same:
definitely get this keyboard, if only so you have an excuse to play around with QMK.</p>
<p>It does have some flaws and design decisions that were perhaps not entirely optimal,
but in my opinion it is one of the best choices one can make when buying a keyboard.
Even more-so when buying a keyboard to travel with.
As I said in the beginning,
I would almost suggest to build one from scratch according to the original instructions
instead of buying it already assembled.
In my opinion, the changes made by Keyboardio,
like the two additional thumb buttons,
aren’t strictly necessary, so there isn’t much one is missing;
plus, building something yourself is much more rewarding than buying it!</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>{-} 󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>Not pictured: I braided the cable,
which makes it much more manageable.
The default cable is <em>long</em>,
which is not at all necessary since the keyboard is always rather close to my laptop.
Plus, <a href="https://ncatlab.org/nlab/show/braided+monoidal+category">braids</a>
make everything better!<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>I think the full name—at least as far as I could make out—is
“Kailh deep sea tactile silent BOX islet switches”.
Quite the mouthfull indeed!<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>This may seem debatable at this point,
but I guess part of this post is convincing the sceptics that 44 keys really are enough.
Indeed, one might even argue that the form-factor is a big strength of the keyboard,
irrespective of the potential ergonomic benefits.
After all,
even though it involves hitting two keys,
for me it’s much faster to hit a capital <code>E</code>
than having to do an awkward stretch in order to reach <code>6</code> or—even worse—<code>F6</code>.
On the Atreus everything is close together,
which means these kinds of big stretches are a thing of the past!<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>{-} I will note that the Atreus does have hot-swappable switches, so while I’m satisfied and will probably never fiddle with the swtiches myself, swapping them out should only be a matter of minutes. This is a nice touch, I think.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>The outer two keys would suffer from the same issue, but these are actually very easy to hit with one’s palm. I press the two keys under the middle finger with a thumb or middle finger curl, both of which feel fine for me.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6"><p>Thanks, Emacs.<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn7"><p>{-} I did not try the default layout in any way, instead diving straight into designign my own, so I can’t say much about that aspect.<a href="#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn8"><p>This was very straightforward—after I figured out that one needs to hold the Escape key when plugging in the keyboard while flashing.
After, that, one simply has to execute</p>
<pre class="console"><code>$ xset r rate 230 70
$ setxkbmap -option compose:menu</code></pre>
<p>to get some sane key repeat and compose key settings, and that’s it!<a href="#fnref8" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn9"><p>{-} Keeping in line with X11 conventions, <code>M4</code> denotes the Super key, and <code>M1</code> is for Alt.<a href="#fnref9" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn10"><p>{-} 󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>󠀠</p>
<p>At first I was very surprised to see <code>x</code> so far up this list—at least,
until I remembered that <code>M1-x</code> and <code>C-x</code> exist!<a href="#fnref10" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn11"><p>Note that <code>S+^</code> and <code>S+!</code> are tap-dances for technical reasons:
QMK can’t emit shifted keycodes with an ordinary <code>LSFT_T</code> setup.<a href="#fnref11" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn12"><p>I.e., it does not matter whether I press <code>S-L1-«key»</code> or <code>L1-S-«key»</code>.<a href="#fnref12" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn13"><p>Although, strictly speaking, only <code>'</code> would be necessary, as <code>S-L2</code> is pretty easy to hit.<a href="#fnref13" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn14"><p>I will try to keep this post updated with newer versions.<a href="#fnref14" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>XMonad Module Showcase: X.A.Search</title>
    <link href="https://tony-zorman.com/posts/x.a.search.html" />
    <id>https://tony-zorman.com/posts/x.a.search.html</id>
    <published>2023-03-19T00:00:00Z</published>
    <updated>2023-03-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2023-03-19
      
      
        &thinsp;·&thinsp; last modified: 2023-07-12
      
      
        &thinsp;·&thinsp; <span title="1313 words">6 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'haskell'." href="/tags/haskell.html" rel="tag">haskell</a>, <a title="All pages tagged 'xmonad'." href="/tags/xmonad.html" rel="tag">xmonad</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>I’d like to highlight another XMonad module that has become quite
essential to me: <a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Actions-Search.html">XMonad.Actions.Search</a>. Its premise is simple: you
enter some text into the XMonad prompt, and it queries a search engine
of your choice with this input—straightforward, and yet very effective.</p>
<!--more-->
<p>In fact, this sounds so simple that one might immediately ask: what’s
the point? The problem with regular searching is that it’s <em>slow</em>; who
has the time to open their browser, navigate to the relevant website,
and only then enter their search? In today’s world, where many things
now have their own dedicated search engines<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>, searching efficiently
becomes increasingly important. Plus, the lower barrier to entry means
that looking something up—always a good idea, with all of humanities
collected knowledge at one’s fingertips—may well become instinctive,
instead of feeling like a chore.</p>
<h2 id="functionality">Functionality</h2>
<p>The basic workflow suggested by the module simply consists of picking a
search engine, and binding it to a key via <code>promptSearch</code>—that’s it.
Additionally, there is also <code>selectSearch</code> to look up the current
(primary) selection. For example, suppose we had bound<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a></p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">searchKeys ::</span> [(<span class="dt">String</span>, <span class="dt">X</span> ())]</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>searchKeys <span class="ot">=</span>              <span class="co">-- def is an optional prompt config</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  [ (<span class="st">&quot;M-s&quot;</span>    , promptSearch def wikipedia)</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  , (<span class="st">&quot;M-u M-s&quot;</span>, selectSearch     wikipedia)</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>  ]</span></code></pre></div>
<p>This would enable us to search through Wikipedia normally by pressing
<code>M-s</code>, and directly look up the currently selected text with <code>M-u M-s</code>.<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a> The whole things looks like this:</p>
<p>
<video width="100%" controls>
<source src="../images/search-showcase/search-simple.webm" type="video/webm">
Searching for “Alexander Grothendieck” once manually,
and then highlighting that phrase and using the selection search.
</video>
</p>
<p>Further, there is a third workflow that is quite convenient: by default,
pressing <code>C-y</code> in the prompt inserts the current selection, ready for
further editing.</p>
<p>
<video width="100%" controls>
<source src="../images/search-showcase/search-simple-alt.webm" type="video/webm">
Showcasing the functionality described in the last paragraph.
</video>
</p>
<h3 id="adding-new-engines">Adding new engines</h3>
<p>There are quite a few search engines built-in: at the time of writing,
X.A.Search sports about 40 different ones. Thankfully, adding new
engines is easy, even in one’s own configuration; e.g., to look up
something on <a href="https://hoogle.haskell.org/">Hoogle</a>, one would simply
define</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">hoogle ::</span> <span class="dt">SearchEngine</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>hoogle <span class="ot">=</span> searchEngine <span class="st">&quot;hoogle&quot;</span> <span class="st">&quot;https://hoogle.haskell.org/?hoogle=&quot;</span></span></code></pre></div>
<p>This means that even if the module does not have a search engine you
want, it’s trivial to define it yourself—and don’t forget to upstream it
afterwards!</p>
<p>There also is the <code>searchEngineF</code> function, which instead of just a
string takes a function to also modify that string.<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a> With this, one
can build more complicated search engines; for example, the following
constitutes a very basic URL entry function, which may also work as a
sort of lightweight bookmarking system:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ot">url ::</span> <span class="dt">SearchEngine</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>url <span class="ot">=</span> searchEngineF <span class="st">&quot;url&quot;</span> \s <span class="ot">-&gt;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> url <span class="ot">=</span> <span class="st">&quot;https://&quot;</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>   <span class="kw">in</span> <span class="kw">if</span> url <span class="ot">`isPrefixOf`</span> s <span class="kw">then</span> s <span class="kw">else</span> url <span class="op">&lt;&gt;</span> s</span></code></pre></div>
<p>The whole API is quite flexible. In my personal configuration I have
defined a <code>git</code> search engine to quickly jump to certain projects on
several different forges:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ot">git ::</span> <span class="dt">SearchEngine</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>git <span class="ot">=</span> searchEngineF <span class="st">&quot;repo&quot;</span> \s <span class="ot">-&gt;</span> <span class="kw">if</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> s <span class="ot">`elem`</span> [<span class="st">&quot;change-env&quot;</span>, <span class="st">&quot;irc-bot&quot;</span>]</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    <span class="ot">-&gt;</span> <span class="st">&quot;https://gitlab.com/slotThe/&quot;</span> <span class="op">&lt;&gt;</span> s</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> s <span class="ot">`elem`</span> [<span class="st">&quot;kbd-mode&quot;</span>, <span class="st">&quot;kmonad&quot;</span>]</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>    <span class="ot">-&gt;</span> <span class="st">&quot;https://github.com/kmonad/&quot;</span> <span class="op">&lt;&gt;</span> s</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> s <span class="ot">`elem`</span> [ <span class="st">&quot;x11&quot;</span>, <span class="st">&quot;x11-xft&quot;</span>, <span class="st">&quot;xmonad&quot;</span>, <span class="st">&quot;xmonad-contrib&quot;</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>             , <span class="st">&quot;xmonad-docs&quot;</span>, <span class="st">&quot;xmonad-web&quot;</span> ]</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>    <span class="ot">-&gt;</span> <span class="st">&quot;https://github.com/xmonad/&quot;</span> <span class="op">&lt;&gt;</span> s</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> s <span class="ot">`elem`</span> [ <span class="st">&quot;vc-use-package&quot;</span>, <span class="st">&quot;arXiv-citation&quot;</span>, <span class="st">&quot;hmenu&quot;</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>             , <span class="st">&quot;slotThe.github.io&quot;</span>, <span class="st">&quot;query-replace-many&quot;</span> ]</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>    <span class="ot">-&gt;</span> <span class="st">&quot;https://github.com/slotThe/&quot;</span> <span class="op">&lt;&gt;</span> s</span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> s <span class="op">==</span> <span class="st">&quot;slotThe&quot;</span>    <span class="ot">-&gt;</span> <span class="st">&quot;https://github.com/slotThe/&quot;</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> s <span class="op">==</span> <span class="st">&quot;void-linux&quot;</span> <span class="ot">-&gt;</span> <span class="st">&quot;https://github.com/void-linux/void-packages&quot;</span></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> s <span class="op">==</span> <span class="st">&quot;xmobar&quot;</span>     <span class="ot">-&gt;</span> <span class="st">&quot;https://codeberg.org/xmobar/xmobar&quot;</span></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="fu">otherwise</span>         <span class="ot">-&gt;</span> <span class="st">&quot;&quot;</span></span></code></pre></div>
<p>It works as expected—so much so that I can enable the prompt’s
auto-complete feature, which automatically completes a query if there is
only a single candidate left.<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a></p>
<p>
<video width="100%" controls>
<source src="../images/search-showcase/search-git.webm" type="video/webm">
&lt;img class=“pure-img”
Showcasing the git search engine defined above
</video>
</p>
<h3 id="further-tweaks">Further tweaks</h3>
<p>As I said, the module is pretty flexible with how exactly one can use
it, and so here are a few more personal tweaks that I figure might also
be of interest to others. First, my setup is integrated with
<a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Actions-Prefix.html">XMonad.​Actions.​Prefix</a>—I use the prefix argument to decide whether I
want “normal” searches, or ones using the primary selection.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- | Search commands; integration with X.A.Prefix.</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="ot">searchKeys ::</span> <span class="dt">Keybindings</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>searchKeys <span class="ot">=</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>  [ (<span class="st">&quot;M-s&quot;</span>, withPrefixArgument <span class="op">$</span> submap <span class="op">.</span> searchEngineMap <span class="op">.</span> \<span class="kw">case</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>      <span class="dt">Raw</span> _ <span class="ot">-&gt;</span> <span class="co">-- normal searches</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>        selectSearchBrowser</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>      _     <span class="ot">-&gt;</span> <span class="co">-- use the primary selection</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>        \br se <span class="ot">-&gt;</span> promptSearchBrowser' (decidePrompt se) br se)</span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>  ]</span></code></pre></div>
<p>This is nice because <code>searchKeys</code> is now the only two place where this
distinction has to be made; others functions, like <code>search​Engine​Map</code>, do
not need to differentiate between a select search and a prompt search.
What I do separately match on is (i) the type of browser that I want to
open the searches in, and (ii) the type of prompt I would like to use.
This is very dependent on the engine itself; some, like <code>git</code> as defined
above, greatly benefit from keeping a history, while in others this is
more of a hinderance than anything else. The browser situation is
similar. An except of the totality of <code>searchKeys</code> looks like the
following.<a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a></p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ot">searchKeys ::</span> <span class="dt">Keybindings</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>searchKeys <span class="ot">=</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>  [ (<span class="st">&quot;M-s&quot;</span>, withPrefixArgument <span class="op">$</span> submap <span class="op">.</span> searchEngineMap <span class="op">.</span> \<span class="kw">case</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>      <span class="dt">Raw</span> _ <span class="ot">-&gt;</span> selectSearchBrowser</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>      _     <span class="ot">-&gt;</span> \br se <span class="ot">-&gt;</span> promptSearchBrowser' (decidePrompt se) br se)</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>  ]</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a> <span class="kw">where</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- | Match on the prompt type; this needs an orphan 'Eq' instance</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- for 'SearchEngine'.  @prompt@ is my prompt config.</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a><span class="ot">  decidePrompt ::</span> <span class="dt">SearchEngine</span> <span class="ot">-&gt;</span> <span class="dt">XPConfig</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>  decidePrompt se</span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> se <span class="ot">`elem`</span> [arXiv, wikipedia, github] <span class="ot">=</span> promptNoHist<span class="co">-- no history</span></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> se <span class="ot">`elem`</span> [git] <span class="ot">=</span> prompt{ autoComplete <span class="ot">=</span> (<span class="dv">5</span> <span class="ot">`ms`</span>) }</span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> <span class="fu">otherwise</span> <span class="ot">=</span> prompt</span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- | Open searches, possibly in a new window.</span></span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a><span class="ot">  searchEngineMap ::</span> (<span class="dt">Browser</span> <span class="ot">-&gt;</span> <span class="dt">SearchEngine</span> <span class="ot">-&gt;</span> <span class="dt">X</span> ())</span>
<span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a>                  <span class="ot">-&gt;</span> <span class="dt">Map</span> (<span class="dt">KeyMask</span>, <span class="dt">KeySym</span>) (<span class="dt">X</span> ())</span>
<span id="cb9-19"><a href="#cb9-19" aria-hidden="true" tabindex="-1"></a>  searchEngineMap searchIn <span class="ot">=</span> basicSubmapFromList</span>
<span id="cb9-20"><a href="#cb9-20" aria-hidden="true" tabindex="-1"></a>    [ (xK_a, sw arXiv    )</span>
<span id="cb9-21"><a href="#cb9-21" aria-hidden="true" tabindex="-1"></a>    , (xK_w, nw wikipedia)</span>
<span id="cb9-22"><a href="#cb9-22" aria-hidden="true" tabindex="-1"></a>    , (xK_g, submap <span class="op">$</span> basicSubmapFromList  <span class="co">-- submaps in submaps</span></span>
<span id="cb9-23"><a href="#cb9-23" aria-hidden="true" tabindex="-1"></a>              [ (xK_g, sw' git)</span>
<span id="cb9-24"><a href="#cb9-24" aria-hidden="true" tabindex="-1"></a>              , (xK_h, sw' github)</span>
<span id="cb9-25"><a href="#cb9-25" aria-hidden="true" tabindex="-1"></a>              ])</span>
<span id="cb9-26"><a href="#cb9-26" aria-hidden="true" tabindex="-1"></a>    ]</span>
<span id="cb9-27"><a href="#cb9-27" aria-hidden="true" tabindex="-1"></a>   <span class="kw">where</span></span>
<span id="cb9-28"><a href="#cb9-28" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- | Same window, new window.</span></span>
<span id="cb9-29"><a href="#cb9-29" aria-hidden="true" tabindex="-1"></a>    sw, sw',<span class="ot"> nw ::</span> <span class="dt">SearchEngine</span> <span class="ot">-&gt;</span> <span class="dt">X</span> ()</span>
<span id="cb9-30"><a href="#cb9-30" aria-hidden="true" tabindex="-1"></a>    sw  <span class="ot">=</span> searchIn browser</span>
<span id="cb9-31"><a href="#cb9-31" aria-hidden="true" tabindex="-1"></a>    nw  <span class="ot">=</span> searchIn <span class="st">&quot;browser-new-window.sh&quot;</span></span>
<span id="cb9-32"><a href="#cb9-32" aria-hidden="true" tabindex="-1"></a>    sw' <span class="ot">=</span> searchIn altBrowser</span>
<span id="cb9-33"><a href="#cb9-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-34"><a href="#cb9-34" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Eq</span> <span class="co">{- ORPHAN -}</span> <span class="dt">SearchEngine</span> <span class="kw">where</span></span>
<span id="cb9-35"><a href="#cb9-35" aria-hidden="true" tabindex="-1"></a><span class="ot">  (==) ::</span> <span class="dt">SearchEngine</span> <span class="ot">-&gt;</span> <span class="dt">SearchEngine</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb9-36"><a href="#cb9-36" aria-hidden="true" tabindex="-1"></a>  (<span class="dt">SearchEngine</span> n _) <span class="op">==</span> (<span class="dt">SearchEngine</span> n' _) <span class="ot">=</span> n <span class="op">==</span> n'</span></code></pre></div>
<p>For my full configuration, see <a href="https://gitlab.com/slotThe/dotfiles/-/blob/c31bc324a8cc3df5449d9ca7a50aabfcd87a7ad8/xmonad/.config/xmonad/src/xmonad.hs#L720">here</a>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>As always, even the simplest topic—that of a search—leaves a lot more
room for personalisation than one would initially think. Also as
always, XMonad delivers on the “there is already a module for that”
front.</p>
<p>For me personally, X.A.Search has really alleviated this perceived
slowness in searching, especially when using many different engines
simultaneously. So much so, in fact, that I no longer have a problem
looking up information from multiple sources mid (text) conversation.
This not only helps me, but I reckon a few users of the <code>#xmonad</code> <a href="https://web.libera.chat/#xmonad">IRC
Channel</a> are quite glad about this as well!</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>Just to name a few, I regularly look things up on
<a href="https://zbmath.org/">zbmath</a>,
<a href="https://hoogle.haskell.org/">Hoogle</a>,
<a href="https://clojuredocs.org/">ClojureDocs</a>,
<a href="https://en.wikipedia.org/">Wikipedia</a>,
<a href="https://www.openstreetmap.org/">Open­Street­Map</a>,
<a href="https://searx.github.io/searx/">searX</a>,
<a href="https://arxiv.org/">arXiv</a>,
<a href="https://noogle.dev/">noogle</a>,
forges like <a href="https://github.com/">Git­Hub</a>,
… the list goes on.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>{-} 󠀠</p>
<p>󠀠</p>
<p>This uses <a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Util-EZConfig.html">XMonad.Util.EZConfig</a> syntax.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>As an aside, this is an ideal use case for <a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Actions-Prefix.html">XMonad.​Actions.​Prefix</a>.
With that module, one could define an equivalent keybinding along the lines of</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ot">searchKeys ::</span> [(<span class="dt">String</span>, <span class="dt">X</span> ())]</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>searchKeys <span class="ot">=</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  [ (<span class="st">&quot;M-s&quot;</span>, withPrefixArgument <span class="op">$</span> \<span class="kw">case</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>      <span class="dt">Raw</span> _ <span class="ot">-&gt;</span> selectSearch     wikipedia</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>      _     <span class="ot">-&gt;</span> promptSearch def wikipedia)</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>  ]</span></code></pre></div>
<p>This is especially useful when multiple search engines are involved;
see <a href="#further-tweaks">below</a> or check out <a href="https://gitlab.com/slotThe/dotfiles/-/blob/c31bc324a8cc3df5449d9ca7a50aabfcd87a7ad8/xmonad/.config/xmonad/src/xmonad.hs#L720">my configuration</a> for a complete example.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>{-} For the following code examples, you may need to place extra
pragmas along the lines of</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE BlockArguments #-}</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE LambdaCase     #-}</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE MultiWayIf     #-}</span></span></code></pre></div>
<p>at the top of your XMonad configuration file.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>In this case here, that single candidate will be from the relevant
prompt history.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6"><p>{-} Just for completeness, an in order to improve
copy-pasteability, the definition of <code>basicSubmapFromList</code> used a
lot in this piece of code is:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>basicSubmapFromList</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> <span class="dt">Ord</span> key</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=&gt;</span> [(key, action)]</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">Map</span> (<span class="dt">KeyMask</span>, key) action</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>basicSubmapFromList <span class="ot">=</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>  fromList <span class="op">.</span> <span class="fu">map</span> \(k, a) <span class="ot">-&gt;</span> ((<span class="dv">0</span>, k), a)</span></code></pre></div>
<p>This is just creates a basic (i.e. there is no additional ‘KeyMask’ to consider)
submap from a list of <code>(key, action)</code> pairs.<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Announcing: latex-change-env Version 0.3</title>
    <link href="https://tony-zorman.com/posts/latex-change-env-0.3.html" />
    <id>https://tony-zorman.com/posts/latex-change-env-0.3.html</id>
    <published>2023-02-19T00:00:00Z</published>
    <updated>2023-02-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2023-02-19
      
      
        &thinsp;·&thinsp; last modified: 2023-06-03
      
      
        &thinsp;·&thinsp; <span title="965 words">4 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>I’ve just released version 0.3 of <code>latex-change-env</code>, featuring some
major improvements with regard to inline maths and macro handling; this
seems as good a time as any to talk about the package in full. I
briefly mentioned it in the post about my <a href="https://tony-zorman.com/posts/my-phd-workflow.html#digital-notes">research workflow</a>, but I
figure now that the library has reached a state where I’m not ashamed of
it anymore—at least, not at the time of writing this—it may warrant its
own post.</p>
<!--more-->
<h2 id="functionality">Functionality</h2>
<p>Briefly, <code>latex-change-env</code><a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> can be seen as an extension of AUCTeX’s
built-in facilities to manipulate the current environment. Taking
functions like <code>LaTeX-environment</code> as a base, it adds extra
functionality like deleting environments, changing to and from display
maths, “remembering” and editing labels, as well as macro<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> and inline
maths support on top of them. There are two main “entry points”:
<code>latex-change-env</code> and <code>latex-change-env-cycle</code>.</p>
<p>The basic functionality may be used with a <code>use-package</code> configuration
along the lines of</p>
<pre class="emacs-lisp"><code>(use-package latex-change-env
  :after latex
  :commands latex-change-env
  :bind (:map LaTeX-mode-map (&quot;C-c r&quot; . latex-change-env))
  :custom
  (latex-change-env-math-display '(&quot;\\[&quot; . &quot;\\]&quot;))
  (latex-change-env-math-inline  '(&quot;$&quot;   . &quot;$&quot;)))</code></pre>
<p>Pressing the keybinding for <code>latex-change-env</code> will pop up a selection
in the minibuffer; by default, one can delete the current
environment<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a> with <code>k</code>, modify it into something else with <code>m</code>, or
switch to display maths with <code>d</code>. This is all controlled by the
<code>latex-change-env-options</code> variable, allowing for user-defined functions
to be inserted, should that be desired.</p>
<p>For example, the following video showcases switching to display maths,
changing the environment into an <code>equation</code>, and deleting it completely.</p>
<p>
<video width="100%" controls>
<source src="../images/latex-change-env/basic-functionality.webm" type="video/webm">
Basic functionality of <code>latex-change-env</code>: changing and deleting labels.
</video>
</p>
<h3 id="cycling-through-environments">Cycling through environments</h3>
<p>The <code>latex-change-env-cycle</code> function may be used to create a list of
environments to cycle through. For convenience, it depends on Omar
Antolín Camarena’s <a href="https://github.com/oantolin/math-delimiters">math-delimiters</a> package, so as to facilitate a
comfortable workflow with maths environments out of the box.<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a> For
example, one could define a simple maths-based toggle</p>
<pre class="emacs-lisp"><code>(defun my/insert-toggle-math ()
  (interactive)
  (latex-change-env-cycle
   '(display-math equation* align* equation align)))</code></pre>
<p>and then bind that to <code>$</code> in <code>latex-mode</code>. This works because
<code>math-delimiters-insert</code> is called when one is not in any environment.
Quoting from the documentation of <code>latex-change-env-cycle</code> (slightly
edited):</p>
<blockquote>
<p>Cycle through the given list of environments. The special symbol
<code>display-math</code> denotes a display maths environment.</p>
<p>If one is right at the end of a display or inline maths environment,
call <code>math-delimiters-insert</code> instead of cycling through environments.
The same is done when not inside any environment, which, for our
definition of environment, also includes inline maths.</p>
</blockquote>
<p>The following video illustrates how <code>my/insert-toggle-math</code> might be
used.</p>
<p>
<video width="100%" controls>
<source src="../images/latex-change-env/cycling-maths.webm" type="video/webm">
Cycling between inline and display maths, as well as several maths environments.
</video>
</p>
<p>Of course, cycling also works for non-maths environments, as well as
macros; below, I bound the following to a key:</p>
<pre class="emacs-lisp"><code>(defun my/cycle-macros ()
  (interactive)
  (latex-change-env-cycle
   '(textbf emph textsc textit texttt)))</code></pre>
<p>
<video width="100%" controls>
<source src="../images/latex-change-env/cycling-macros.webm" type="video/webm">
Cycling macros
</video>
</p>
<p>An effort was made to make macro handling feel like a first class
citizen; for example, when cycling through possible modifications,
instead of <code>LaTeX-environment-list-filtered</code> (as would be used for
environments), the macro-specific <code>TeX--symbol-completion-table</code> is used
to generate a list of possible replacements.</p>
<h3 id="labels">Labels</h3>
<p>When changing or deleting environments, <code>latex-change-env</code> tries to
smartly handle associated labels. In the former case, labels have a
unique prefix associated to what environment they are defined in; for
example, <code>theorem</code> environments might start their labels with <code>thm:</code>,
while a <code>lemma</code> will have a <code>lem:</code> prefix.<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a> Further, when deleting an
environment, or switching to one that does not have an associated label
prefix, the label is (i) deleted, and (ii) stored for the session, such
that it can be restored when switching back to the original environment.</p>
<p>While this is all well and good, renaming and deleting labels seems of
little use when the changes aren’t reflected in the rest of the project.
As such, there is an optional <code>latex-change-env-edit-labels-in-project</code>
variable. When it is customised to <code>t</code>, a label change/deletion
triggers a project-wide <code>query-replace-regexp</code>, such that the user can
decide whether referencing labels should change as well. This utilises
Emacs’s own <code>project.el</code>, so one should make sure that the LaTeX project
is version controlled—in which case the relevant ignore file is also
respected—or otherwise recognisable by the library.<a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a></p>
<p>
<video width="100%" controls>
<source src="../images/latex-change-env/label-handling.webm" type="video/webm">
Label handling
</video>
</p>
<h2 id="conclusion">Conclusion</h2>
<p>That’s about all of the functionality that the package currently has.
It has certainly served me quite well so far—my hope is that it will be
useful to at least one other person.</p>
<p>On that note: contributions welcome! For example, something that should
not be too hard to implement is the ability to store labels not just for
the session, but permanently, by serialising the internal hash-map to a
file. I don’t know how useful this would be but, given a certain
workflow, it could certainly be worthwhile! Another path of inquiry
might be to add better macro handling. As I said, support is currently
limited to macros that take exactly one (mandatory) argument. However,
the response one gets from <code>LaTeX-what-macro</code> is quite general, so I
reckon it wouldn’t be too hard to cook up a more general implementation.</p>
<p>Again, if you want to give the package a spin then you can find it on
<a href="https://gitlab.com/slotThe/change-env">GitLab</a>, <a href="https://github.com/slotThe/change-env">GitHub</a>,
and <a href="https://melpa.org/#/latex-change-env">MELPA</a>!</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>Available on <a href="https://gitlab.com/slotThe/change-env">GitLab</a> and
<a href="https://github.com/slotThe/change-env">GitHub</a>, as well as
<a href="https://melpa.org/#/latex-change-env">MELPA</a>.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>At least, macros taking exactly only argument, which is what
support is currently restricted to; contributions welcome!<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>In the context of this package, by “environment” I will often mean
a proper environment, inline or display maths, or a (simple)
macro.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>As such, be sure that you configure <code>math-delim​it​ers-{inline,display}</code>
accordingly. For example, it may be useful to set</p>
<pre class="emacs-lisp"><code>  (setq math-delimiters-display
        latex-change-env-math-display)</code></pre>
<p>and so on.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>This behaviour may be changed by customising the
<code>latex-change-env-labels</code> variable.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6"><p>{-} If you look closely at the video, you can see that, while the
label changes, the “Lemma” before the reference does not. This
would require more sophisticated regular expressions, but—reading
<code>latex​-​change-env-labels</code> and making some assumptions—it certainly
seems possible to do.<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Using Sidenotes with Hakyll</title>
    <link href="https://tony-zorman.com/posts/block-sidenotes.html" />
    <id>https://tony-zorman.com/posts/block-sidenotes.html</id>
    <published>2023-01-27T00:00:00Z</published>
    <updated>2023-01-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2023-01-27
      
      
        &thinsp;·&thinsp; last modified: 2024-07-17
      
      
        &thinsp;·&thinsp; <span title="2104 words">9 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'haskell'." href="/tags/haskell.html" rel="tag">haskell</a>, <a title="All pages tagged 'hakyll'." href="/tags/hakyll.html" rel="tag">hakyll</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>
</p>
<p>I’ve become quite enamoured with sidenotes recently, and so of course
this website now has them as well! Thankfully, the integration with
pandoc and Hakyll is quite straightforward, because other people have
already done the hard work.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> Depending on your use-case, however, the
existing libraries might not entirely fit the bill; for example, by
default blocks that are more complicated than just paragraphs of pure
text don’t work. In this post, I’d like to explain an alternative
approach of integrating sidenotes into pandoc, which does enable the use
of these features.</p>
<!--more-->
<h2 id="introduction">Introduction</h2>
<p>If you don’t know: sidenotes are footnotes, just on the side of the
page!<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> More specifically they are footnotes placed inside of the
margins, in order to avoid having to click or scroll, breaking the flow
of reading—a flick of the eyes is enough. This is very convenient,
especially for longer entries with lots of asides that don’t necessarily
fit the flow of the article. However, because websites are dynamic in
size, a fallback option should be provided in case the margins are too
small/nonexistent. In most cases, this amount to making sidenotes
clickable again and, in one way or another, showing their content once
clicked.</p>
<p>Gwern Branwen has written about many different sidenote implementations
<a href="https://gwern.net/Sidenotes">here</a>. I settled on <a href="https://github.com/edwardtufte/tufte-css">Tufte CSS</a>,
mainly because it seemed to be the most popular non-JS solution. Plus,
there is the fantastic <a href="https://hackage.haskell.org/package/pandoc-sidenote">pandoc-sidenote</a>, which
provides an appropriate pandoc filter. After extracting the relevant
CSS into <a href="https://github.com/slotThe/slotThe.github.io/blob/main/css/sidenotes.css">sidenotes.css</a> and plugging the exported
<code>usingSidenotes</code> function into my pandoc compiler,<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a> things just
worked!</p>
<p>There is but one problem with this setup: paragraphs. A sidenote
roughly looks like the following:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;sidenote-wrapper&quot;</span><span class="dt">&gt;</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&lt;</span><span class="kw">label</span><span class="ot"> for</span><span class="op">=</span><span class="st">&quot;sn-NAME&quot;</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;margin-toggle sidenote-number&quot;</span><span class="dt">&gt;</span> <span class="dt">&lt;/</span><span class="kw">label</span><span class="dt">&gt;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&lt;</span><span class="kw">input</span><span class="ot"> type</span><span class="op">=</span><span class="st">&quot;checkbox&quot;</span><span class="ot"> id</span><span class="op">=</span><span class="st">&quot;sn-NAME&quot;</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;margin-toggle&quot;</span><span class="dt">&gt;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;sidenote&quot;</span><span class="dt">&gt;</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    SIDENOTEn</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span></code></pre></div>
<p>As Chris MacKay—a Tufte CSS contributor—helpfully explains in an
<a href="https://github.com/edwardtufte/tufte-css/issues/93#issuecomment-234316022">issue</a>, spans officially don’t play nice with
paragraphs:</p>
<blockquote>
<p>so marginnotes and sidenotes, as they are implemented now, are
<code>&lt;span&gt;</code> elements inside paragraph <code>&lt;p&gt;</code> elements. Only inline
elements are allowed inside paragraphs per the HTML standard.</p>
</blockquote>
<p>I know what you’re thinking: people don’t usually let themselves be
hampered by standards, do they?<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a> Alas, the <code>pandoc-sidenote</code> package
quite sensibly converts a given footnote into an approximation of the
above HTML by using pandoc’s native <code>Span</code> data constructor. Here is a
(heavily) simplified version of the relevant function.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">filterInline ::</span> <span class="dt">Inline</span> <span class="ot">-&gt;</span> <span class="dt">Inline</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>filterInline <span class="ot">=</span> \<span class="kw">case</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- A @Note@ signifies a footnote.</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Note</span> blocks <span class="ot">-&gt;</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> <span class="co">-- Note has a [Block], but Span needs [Inline]</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>        content <span class="ot">=</span> coerceToInline blocks</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>     <span class="kw">in</span> <span class="dt">Span</span> (<span class="st">&quot;&quot;</span>, [<span class="st">&quot;sidenote-wrapper&quot;</span>], [])</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>             [ <span class="dt">RawInline</span> <span class="st">&quot;html&quot;</span> <span class="st">&quot;&lt;label for …&quot;</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>             , <span class="dt">RawInline</span> <span class="st">&quot;html&quot;</span> <span class="st">&quot;&lt;input type …&quot;</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>             , <span class="dt">Span</span> (<span class="st">&quot;&quot;</span>, [<span class="st">&quot;sidenote&quot;</span>], []) content</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>             ]</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>  inline <span class="ot">-&gt;</span> inline</span></code></pre></div>
<p>Now, pandoc very much does <em>not</em> want you to put any kind of block
inside of its <code>Span</code>s—that’s why its type is</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="dt">Span</span><span class="ot"> ::</span> <span class="dt">Attr</span> <span class="ot">-&gt;</span> [<span class="dt">Inline</span>] <span class="ot">-&gt;</span> <span class="dt">Inline</span></span></code></pre></div>
<p>Notice the absence of a <code>[Block]</code> argument. This is why
<code>coerceToInline</code> exists, which tries to convert as many blocks as it can
to inline elements.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ot">coerceToInline ::</span> [<span class="dt">Block</span>] <span class="ot">-&gt;</span> [<span class="dt">Inline</span>]</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>coerceToInline <span class="ot">=</span> <span class="fu">concatMap</span> deBlock <span class="op">.</span> walk deNote</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a> <span class="kw">where</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="ot">  deBlock ::</span> <span class="dt">Block</span> <span class="ot">-&gt;</span> [<span class="dt">Inline</span>]</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>  deBlock (<span class="dt">Plain</span>     ls    ) <span class="ot">=</span> ls</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Simulate paragraphs with double LineBreak</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>  deBlock (<span class="dt">Para</span>      ls    ) <span class="ot">=</span> ls <span class="op">++</span> newline</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- See extension: line_blocks</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>  deBlock (<span class="dt">LineBlock</span> lss   ) <span class="ot">=</span> intercalate [<span class="dt">LineBreak</span>] lss <span class="op">++</span> newline</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Pretend RawBlock is RawInline (might not work!)</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Consider: raw &lt;div&gt; now inside RawInline... what happens?</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>  deBlock (<span class="dt">RawBlock</span> fmt str) <span class="ot">=</span> [<span class="dt">RawInline</span> fmt str]</span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- lists, blockquotes, headers, hrs, and tables are all omitted</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Think they shouldn't be? I'm open to sensible PR's.</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>  deBlock _                  <span class="ot">=</span> []</span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a><span class="ot">  deNote ::</span> <span class="dt">Inline</span> <span class="ot">-&gt;</span> <span class="dt">Inline</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>  deNote (<span class="dt">Note</span> _) <span class="ot">=</span> <span class="dt">Str</span> <span class="st">&quot;&quot;</span></span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>  deNote x        <span class="ot">=</span> x</span></code></pre></div>
<p>The <code>coerceToInline</code> function behaves sensibly with respect to the
simplest kinds of blocks, but already mentions that the <code>RawBlock → RawInline</code> transformation may have some caveats. For example,
<a href="https://tony-zorman.com/posts/pygmentising-hakyll.html">prerendering code blocks</a> puts one in exactly such a
“now we have a <code>&lt;div&gt;</code> tag inside of a <code>RawInline</code> element” situation.
Well, what happens?</p>
<span class="sidenote-wrapper">
<label for="sn-test" class="margin-toggle sidenote-number"></label>
<input type="checkbox" id="sn-test" class="margin-toggle">
<p><span class="sidenote">Now simulating <code>pandoc-sidenode</code>s behaviour, the following is a piece of code <em>in the sidenote:</em>
<div class="highlight"><pre><span></span><span class="nf">a</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">Int</span> <span class="nf">
a</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="mi">42</span> </pre></div>
</span></p>
</span>
<p>This is the next line in the main document; the above code block was
supposed to be in the relevant sidenote, but “spilled” into the text
instead. This is obviously not what we want.</p>
<p>The documentation mentions other things that are missing, and that pull
requests are welcome, but for many blocks there just is no good
alternative. For example, code blocks and inline code serve very
different purposes most of the time. Pandoc itself has a
<a href="https://hackage.haskell.org/package/pandoc-3.0.1/docs/Text-Pandoc-Shared.html#v:blocksToInlines">function</a> of the same name that
attempts to convert tables, figures, and the like, but this also yields
some surprising behaviour when used instead of <code>pandoc-sidenote</code>s
variant.<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a></p>
<p>So what to do? Well, life wouldn’t be fun if we didn’t at least try to
hack our way around a standard, would it?</p>
<h2 id="rewriting-pandoc-sidenote">Rewriting <code>pandoc-sidenote</code></h2>
<p>As I’ve learned while <a href="https://tony-zorman.com/posts/pygmentising-hakyll.html">writing</a> about using
<code>pygmentize</code> to syntax highlight code for this site, pandoc has quite
good support for changing its AST in creative ways. A strategy unfolds:
find every <code>Note</code> block in a document, somehow render its contents, and
create a <code>RawBlock "html"</code> node instead of using pandoc’s built in
<code>Span</code> .</p>
<p>For rendering HTML, pandoc has a
<a href="https://hackage.haskell.org/package/pandoc-3.0.1/docs/Text-Pandoc-Writers.html#v:writeHtml5String">writeHtml5String</a> function, which is
conveniently wrapped by Hakyll in
<a href="https://hackage.haskell.org/package/hakyll-4.15.1.1/docs/Hakyll-Web-Pandoc.html#v:writePandocWith">writePandocWith</a>:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- | Write a document (as HTML) using pandoc, with the supplied options</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="ot">writePandocWith ::</span> <span class="dt">WriterOptions</span>  <span class="co">-- ^ Writer options for pandoc</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>                <span class="ot">-&gt;</span> <span class="dt">Item</span> <span class="dt">Pandoc</span>    <span class="co">-- ^ Document to write</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>                <span class="ot">-&gt;</span> <span class="dt">Item</span> <span class="dt">String</span>    <span class="co">-- ^ Resulting HTML</span></span></code></pre></div>
<p>Importantly, rendering takes some <code>WriterOptions</code>; since we don’t want
to mess around with changing pure HTML afterwards, this is quite
important for us.</p>
<p>Writing this filter now essentially works by the same strategy outlined
in the last post: look through the Haddocks to find the types that we
want, <a href="https://aphyr.com/posts/342-typing-the-technical-interview">seize some meaningless functions from the void, and imbue them
with meaning</a>. The relevant bits
from pandoc’s internal types are the following.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Pandoc</span> <span class="ot">=</span> <span class="dt">Pandoc</span> <span class="dt">Meta</span> [<span class="dt">Block</span>]</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Block</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>    <span class="ot">=</span> <span class="dt">Plain</span> [<span class="dt">Inline</span>]       <span class="co">-- ^ Plain text, not a paragraph</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> <span class="dt">Para</span> [<span class="dt">Inline</span>]        <span class="co">-- ^ Paragraph</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- …</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> <span class="dt">RawBlock</span> <span class="dt">Format</span> <span class="dt">Text</span> <span class="co">-- ^ Raw block</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Inline</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>    <span class="ot">=</span> <span class="dt">Str</span> <span class="dt">Text</span>             <span class="co">-- ^ Text (string)</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- …</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> <span class="dt">Note</span> [<span class="dt">Block</span>]         <span class="co">-- ^ Footnote or endnote</span></span></code></pre></div>
<p>While this document is <em>not</em> a literate Haskell file, the following is
still here for convenience, in case you are left wondering where some of
the functions come from.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE BangPatterns             #-}</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE LambdaCase               #-}</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE OverloadedStrings        #-}</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE StandaloneKindSignatures #-}</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Control.Monad.State</span> (<span class="dt">State</span>, foldM, get, modify', runState)</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Kind</span> (<span class="dt">Type</span>)</span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Text</span> (<span class="dt">Text</span>)</span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Text</span> <span class="kw">as</span> <span class="dt">T</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Hakyll</span> (<span class="dt">Item</span> (..), writePandocWith)</span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Text.Pandoc.Definition</span> (<span class="dt">Block</span> (..), <span class="dt">Inline</span> (..), <span class="dt">Pandoc</span> (..))</span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Text.Pandoc.Options</span> (<span class="dt">WriterOptions</span>)</span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Text.Pandoc.Shared</span> (tshow)</span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Text.Pandoc.Walk</span> (walkM)</span></code></pre></div>
<p>Rendering the actual sidenote isn’t very complicated, and amounts to
picking out the <code>Note</code> constructor, rendering it, and putting everything
back together.<a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a></p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ot">renderSidenote ::</span> [<span class="dt">Inline</span>]            <span class="co">-- ^ Inlines from a single @Note@</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>               <span class="ot">-&gt;</span> <span class="dt">Sidenote</span> [<span class="dt">Block</span>]</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>renderSidenote <span class="ot">=</span> go []</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a> <span class="kw">where</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a><span class="ot">  go ::</span> [<span class="dt">Inline</span>] <span class="ot">-&gt;</span> [<span class="dt">Inline</span>] <span class="ot">-&gt;</span> <span class="dt">Sidenote</span> [<span class="dt">Block</span>]</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>  go inlines <span class="ot">=</span> \<span class="kw">case</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>    []           <span class="ot">-&gt;</span> <span class="fu">pure</span> [<span class="dt">Plain</span> inlines]</span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Note</span> bs <span class="op">:</span> xs <span class="ot">-&gt;</span> <span class="kw">do</span> block <span class="ot">&lt;-</span> renderBlock bs</span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>                       ([<span class="dt">Plain</span> inlines, block] <span class="op">&lt;&gt;</span>) <span class="op">&lt;$&gt;</span> go [] xs</span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>    b       <span class="op">:</span> xs <span class="ot">-&gt;</span> go (inlines <span class="op">&lt;&gt;</span> [b]) xs</span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a><span class="ot">  renderBlock ::</span> [<span class="dt">Block</span>] <span class="ot">-&gt;</span> <span class="dt">Sidenote</span> <span class="dt">Block</span></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>  renderBlock blocks <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- Update sidenote counter and get the `WriterOption's.</span></span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a>    <span class="dt">SNS</span> w i <span class="ot">&lt;-</span> get <span class="op">&lt;*</span> modify' (\sns <span class="ot">-&gt;</span> sns{ counter <span class="ot">=</span> <span class="dv">1</span> <span class="op">+</span> counter sns })</span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a>    <span class="fu">pure</span> <span class="op">.</span> <span class="dt">RawBlock</span> <span class="st">&quot;html&quot;</span> <span class="op">$</span> <span class="co">-- … all the opening html stuff</span></span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a>                             writePandocWith w (<span class="dt">Item</span> <span class="st">&quot;&quot;</span> (<span class="dt">Pandoc</span> <span class="fu">mempty</span> blocks))</span>
<span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a>                             <span class="co">-- … all the closing html stuff</span></span></code></pre></div>
<p>Finding notes is a bit more finicky, since they could potentially occur
in a lot of places. Right now, for obvious reasons, I’ve settled on
covering all cases that currently occur on this website. Importantly,
we need to be a bit careful about inserting newlines for paragraphs (and
when to omit this). This is because <code>Note</code>s are actually inline
elements, and so we are replacing a single <code>Block</code> by a list of
<code>Block</code>s, which incurs some additional formatting.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="ot">mkSidenote ::</span> [<span class="dt">Block</span>] <span class="ot">-&gt;</span> <span class="dt">Sidenote</span> [<span class="dt">Block</span>]</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>mkSidenote <span class="ot">=</span> foldM (\acc b <span class="ot">-&gt;</span> (acc <span class="op">&lt;&gt;</span>) <span class="op">&lt;$&gt;</span> single b) []</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a> <span class="kw">where</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="ot">  single ::</span> <span class="dt">Block</span> <span class="ot">-&gt;</span> <span class="dt">Sidenote</span> [<span class="dt">Block</span>]</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>  single <span class="ot">=</span> \<span class="kw">case</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- Simulate a paragraph by inserting a dummy block; this is needed</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- in case two consecutive paragraphs have sidenotes, or a paragraph</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- doesn't have one at all.</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Para</span> inlines         <span class="ot">-&gt;</span> (<span class="dt">Para</span> [<span class="dt">Str</span> <span class="st">&quot;&quot;</span>] <span class="op">:</span>) <span class="op">&lt;$&gt;</span> renderSidenote inlines</span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a>    <span class="dt">OrderedList</span> attrs bs <span class="ot">-&gt;</span> (<span class="op">:</span>[]) <span class="op">.</span> <span class="dt">OrderedList</span> attrs <span class="op">&lt;$&gt;</span> <span class="fu">traverse</span> mkSidenote bs</span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a>    <span class="dt">BulletList</span>        bs <span class="ot">-&gt;</span> (<span class="op">:</span>[]) <span class="op">.</span> <span class="dt">BulletList</span>        <span class="op">&lt;$&gt;</span> <span class="fu">traverse</span> mkSidenote bs</span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>    block                <span class="ot">-&gt;</span> <span class="fu">pure</span> [block]</span></code></pre></div>
<p>Putting everything together, we apply this transformation to every block
in a document:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="ot">usingSidenotes ::</span> <span class="dt">WriterOptions</span> <span class="ot">-&gt;</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Pandoc</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>usingSidenotes writer (<span class="dt">Pandoc</span> meta blocks) <span class="ot">=</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Pandoc</span> meta (walkBlocks (<span class="dt">SNS</span> writer <span class="dv">0</span>) blocks)</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a> <span class="kw">where</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a><span class="ot">  walkBlocks ::</span> <span class="dt">SidenoteState</span> <span class="ot">-&gt;</span> [<span class="dt">Block</span>] <span class="ot">-&gt;</span> [<span class="dt">Block</span>]</span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>  walkBlocks sns <span class="ot">=</span> \<span class="kw">case</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>    []       <span class="ot">-&gt;</span> []</span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a>    (b <span class="op">:</span> bs) <span class="ot">-&gt;</span> b' <span class="op">&lt;&gt;</span> walkBlocks s' bs</span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>     <span class="kw">where</span> (b', s') <span class="ot">=</span> runState (walkM mkSidenote [b]) sns</span></code></pre></div>
<p>This can now be used much like the <code>usingSidenotes</code> function from
<code>pandoc-sidenote</code>, only that it needs to know your <code>WriterOption</code>s.
More importantly, it should be the last of the transformations that you
do to pandoc’s AST, since <code>usingSidenotes</code> completely renders the
footnote, which is not what you want in case you—like me—do other
creative transformations, such as separately generating HTML for
<code>CodeBlock</code>s. In my configuration, I now have</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="ot">myPandocCompiler ::</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>myPandocCompiler <span class="ot">=</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>  pandocCompilerWithTransformM</span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>    defaultHakyllReaderOptions</span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a>    myWriter</span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>    (<span class="fu">pure</span> <span class="op">.</span> usingSidenotes myWriter <span class="op">&lt;=&lt;</span> pygmentsHighlight  <span class="op">.</span> addSectionLinks)</span></code></pre></div>
<p>Tufte CSS needs to be changed minimally to support this extended
functionality, but thankfully Said Achmiz has already documented what
needs to be done <a href="https://github.com/edwardtufte/tufte-css/issues/93#issuecomment-671102819">here</a>. This is
already included in my <code>sidenotes.css</code>, so if you’re just copying that
then you should be fine.</p>
<p>Even better, as Gwern Branwen <a href="https://github.com/jez/pandoc-sidenote/issues/4#issuecomment-1426123545">mentions</a>, we
don’t even need to use <code>span</code>s anymore!</p>
<blockquote>
<p>It’s true that <code>Span</code> nodes are often unsuited for doing anything
interesting involving a <code>Block</code> or <code>[Block]</code>, but that’s precisely
what <code>Div</code> is for: it’s the <code>Block</code>-level equivalent of the <code>Inline</code>
<code>Span</code>. And if you are rendering blocks into an HTML <code>&lt;span&gt;</code> wrapper,
that would seem to be bad HTML practice:
<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span"><code>&lt;span&gt;</code></a>
is defined as being inline and containing inline stuff (which is why
Pandoc makes it expressed as an <code>Inline</code>), in contrast to
<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div"><code>&lt;div&gt;</code></a>
block containers.</p>
</blockquote>
<p>So far, I had assumed that there was a reason why Tufte CSS used <code>span</code>
elements instead of <code>div</code>s in their sidenote, but this does not seem to
be the case.<a href="#fn7" class="footnote-ref" id="fnref7" role="doc-noteref"><sup>7</sup></a> Instead of writing</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;sidenote&quot;</span><span class="dt">&gt;</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>  «sidenote»</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span></code></pre></div>
<p>one may well use</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;</span><span class="kw">div</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;sidenote&quot;</span><span class="dt">&gt;</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>  «sidenote»</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;/</span><span class="kw">div</span><span class="dt">&gt;</span></span></code></pre></div>
<p>instead—since we render directly to HTML now, that door opened for us.
This means no more standard violations!</p>
<h2 id="conclusion">Conclusion</h2>
<p>Being perfectly honest, I’m not very satisfied with the module.
It does work, but pre-rendering everything and not using pandoc’s built in constructors feels like a big hack.</p>
<p>However, this solution seems to be quite comfortable from a Hakyll
perspective,<a href="#fn8" class="footnote-ref" id="fnref8" role="doc-noteref"><sup>8</sup></a> and people have told me that the functionality provided
is still useful to them. Since what I’ve done here amounts to a
complete rewrite—and almost certainly a regression in places—I don’t
think that this will ever replace <code>Text.​Pandoc.​SideNote</code> wholesale.
However, the <code>pandoc-sidenote</code> library now features a
<a href="https://github.com/jez/pandoc-sidenote/blob/master/src/Text/Pandoc/SideNoteHTML.hs">Text.​Pandoc.​SideNoteHTML</a>
module as an alternative.
This keeps backwards compatibility,
yet still allows people to make use of the alternative filter.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>{-} To put this front and centre:
the <code>pandoc-sidenote</code> library now features a
<a href="https://github.com/jez/pandoc-sidenote/blob/master/src/Text/Pandoc/SideNoteHTML.hs">Text.​Pandoc.​SideNoteHTML</a>
module, which is an implementation of what’s discussed in this post!<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>For example, this is one.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>Just like you would expect:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">myPandocCompiler ::</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>myPandocCompiler <span class="ot">=</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  pandocCompilerWithTransformM</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    defaultHakyllReaderOptions</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    myWriter</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    ( pygmentsHighlight <span class="co">-- syntax highlight</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span> usingSidenotes    <span class="co">-- sidenotes</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span> addSectionLinks   <span class="co">-- link on hover</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    )</span></code></pre></div>
<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></li>
<li id="fn4"><p>Just ask any person who’s ever worked on a window manager what
creative “interpretations” programs have of <a href="https://x.org/releases/X11R7.6/doc/xorg-docs/specs/ICCCM/icccm.html">ICCCM</a> or <a href="https://en.wikipedia.org/wiki/Extended_Window_Manager_Hints">EWMH</a> :)<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>Whereas now, things like</p>
<ul>
<li><p>tables</p>
<table style="width:66%;">
<colgroup>
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 26%" />
</colgroup>
<thead>
<tr>
<th>Fruit</th>
<th>Price</th>
<th>Advantages</th>
</tr>
</thead>
<tbody>
<tr>
<td>Oranges</td>
<td>$2.10</td>
<td><ul>
<li>cures scurvy</li>
<li>tasty</li>
</ul></td>
</tr>
</tbody>
</table></li>
<li><p>quotes</p>
<blockquote>
<p>they said that …</p>
</blockquote></li>
<li><p>display maths</p>
<p><span class="math display">
\int^{a, b} \mathcal{C}(a \otimes b, {-}) \cdot Fa \otimes Gb
</span></p></li>
</ul>
<p>and the like are no problem at all!<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6"><p>The <code>Sidenote</code> type you are seeing is just some alias for <code>State</code>,
which keeps track of the sidenote number, as well as the supplied
<code>WriterOption</code>s; nothing fancy.<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn7"><p>At least not to my current knowledge.<a href="#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn8"><p>Jake Zimmerman—the author of <code>pandoc-sidenote</code>—also
<a href="https://github.com/jez/pandoc-sidenote/issues/4#issuecomment-269744553">thought about this issue</a>,
and concluded that perhaps a custom pandoc <code>Writer</code> would be the
most elegant solution to this problem. However, since using
pandoc’s HTML5 writer is quite hard-coded into Hakyll, I don’t think
that I will go down that path.<a href="#fnref8" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Pygmentising Hakyll's Syntax Highlighting</title>
    <link href="https://tony-zorman.com/posts/pygmentising-hakyll.html" />
    <id>https://tony-zorman.com/posts/pygmentising-hakyll.html</id>
    <published>2023-01-21T00:00:00Z</published>
    <updated>2023-01-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2023-01-21
      
      
        &thinsp;·&thinsp; last modified: 2025-01-05
      
      
        &thinsp;·&thinsp; <span title="1847 words">8 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'haskell'." href="/tags/haskell.html" rel="tag">haskell</a>, <a title="All pages tagged 'hakyll'." href="/tags/hakyll.html" rel="tag">hakyll</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>By default, Hakyll uses pandoc to generate syntax highlighting for all
kinds of different programming languages. However, even in simple
examples the HTML this produces is unsatisfactory. Thankfully, the two
programs are almost infinitely customisable, and changing pretty much
any setting doesn’t usually involve a lot of work—this is no exception.
Using <code>pygmentize</code> as an example, I will show you how you can swap out
pandoc’s native syntax highlighting with pretty much any third party
tool that can output HTML.</p>
<!--more-->
<h2 id="the-problem">The problem</h2>
<p>Pandoc uses the <a href="https://hackage.haskell.org/package/skylighting">skylighting</a> library to generate syntax highlighting
for a given block of code. Skylighting, in turn, uses <a href="https://docs.kde.org/stable5/en/kate/katepart/highlight.html">KDE XML syntax
definitions</a> for the respective tokenisers. However, even for simple
examples I don’t agree with the HTML this generates. Consider the
following Haskell code block.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">fibs ::</span> [<span class="dt">Integer</span>]</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>fibs <span class="ot">=</span> <span class="dv">0</span> <span class="op">:</span> scanl' (<span class="op">+</span>) <span class="dv">1</span> fibs</span></code></pre></div>
<p>Pandoc would generate something like the following:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;</span><span class="kw">div</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;sourceCode&quot;</span><span class="ot"> id</span><span class="op">=</span><span class="st">&quot;cb1&quot;</span><span class="dt">&gt;</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&lt;</span><span class="kw">pre</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;sourceCode haskell&quot;</span><span class="dt">&gt;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;</span><span class="kw">code</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;sourceCode haskell&quot;</span><span class="dt">&gt;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> id</span><span class="op">=</span><span class="st">&quot;cb1-1&quot;</span><span class="dt">&gt;</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>        <span class="dt">&lt;</span><span class="kw">a</span><span class="ot"> href</span><span class="op">=</span><span class="st">&quot;#cb1-1&quot;</span><span class="ot"> aria-hidden</span><span class="op">=</span><span class="st">&quot;true&quot;</span><span class="ot"> tabindex</span><span class="op">=</span><span class="st">&quot;-1&quot;</span><span class="dt">&gt;</span> <span class="dt">&lt;/</span><span class="kw">a</span><span class="dt">&gt;</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>        <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;ot&quot;</span><span class="dt">&gt;</span>    fibs :: <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span> [<span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;dt&quot;</span><span class="dt">&gt;</span>Integer <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span>]</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> id</span><span class="op">=</span><span class="st">&quot;cb1-2&quot;</span><span class="dt">&gt;</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>        <span class="dt">&lt;</span><span class="kw">a</span><span class="ot"> href</span><span class="op">=</span><span class="st">&quot;#cb1-2&quot;</span><span class="ot"> aria-hidden</span><span class="op">=</span><span class="st">&quot;true&quot;</span><span class="ot"> tabindex</span><span class="op">=</span><span class="st">&quot;-1&quot;</span><span class="dt">&gt;</span> <span class="dt">&lt;/</span><span class="kw">a</span><span class="dt">&gt;</span>    fibs</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>        <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;ot&quot;</span><span class="dt">&gt;</span>= <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>        <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;dv&quot;</span><span class="dt">&gt;</span>0 <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span> <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;op&quot;</span><span class="dt">&gt;</span>: <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>        scanl<span class="dv">&amp;#39;</span> (<span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;op&quot;</span><span class="dt">&gt;</span>+ <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span>) <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;dv&quot;</span><span class="dt">&gt;</span>1</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>        <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span> fibs</span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;/</span><span class="kw">code</span><span class="dt">&gt;</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&lt;/</span><span class="kw">pre</span><span class="dt">&gt;</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;/</span><span class="kw">div</span><span class="dt">&gt;</span></span></code></pre></div>
<p>One can already see a few things wrong with this: (i) in the type
signature, the name of the list is smushed together with the separating
double colon (worse: it’s just in the “other” syntax class), (ii) in the
actual definition, <code>fibs</code> isn’t assigned any class at all, and (iii) the
assignment operator is also in the “other” class, instead of something
related to it being a built in operator! As one can imagine, this only
gets worse as snippets get more complicated.</p>
<p>These kinds of issues, combined with the fact that certain
languages—like Emacs Lisp—don’t have any syntax definitions at all,
annoyed me enough to look for an alternative way to highlight code on
this website.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> There are of course many options to choose from; I
went with <code>pygmentize</code>, solely because I already had it installed. All
that’s left is to tell pandoc and Hakyll to make use of it. As
mentioned, this thankfully doesn’t turn out to be very difficult!</p>
<h2 id="playing-with-pygmentize">Playing with <code>pygmentize</code></h2>
<p>Having never used <code>pygmentize</code> as a command line utility,<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> I expected
this to take some work—possibly involving Python <em>shudder</em>—but all of
the necessary pieces are already present in the CLI. First up, the <code>-f</code>
option specifies the formatter to use, which will decide the shape of
the output.</p>
<pre class="console"><code>$ pygmentize -L formatter | grep html
* html:
    Format tokens as HTML 4 ``&lt;span&gt;`` tags within a ``&lt;pre&gt;`` tag, wrapped
    in a ``&lt;div&gt;`` tag. The ``&lt;div&gt;``'s CSS class can be set by the `cssclass`
    option. (filenames *.html, *.htm)</code></pre>
<p>We can test how this highlighting looks straight away; executing</p>
<pre class="console"><code>$ echo &quot;fibs :: [Integer]\nfibs = 0 : scanl' (+) 1 fibs&quot; \
   \ | pygmentize -l haskell -f html</code></pre>
<p>produces an HTML output along the lines of</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;</span><span class="kw">div</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;highlight&quot;</span><span class="dt">&gt;</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&lt;</span><span class="kw">pre</span><span class="dt">&gt;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;</span><span class="kw">span</span><span class="dt">&gt;</span> <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;nf&quot;</span><span class="dt">&gt;</span>fibs <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span> <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;w&quot;</span><span class="dt">&gt;</span> <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;ow&quot;</span><span class="dt">&gt;</span>:: <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span> <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;w&quot;</span><span class="dt">&gt;</span> <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;p&quot;</span><span class="dt">&gt;</span>[<span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;kt&quot;</span><span class="dt">&gt;</span>Integer <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span> <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;p&quot;</span><span class="dt">&gt;</span>] <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;nf&quot;</span><span class="dt">&gt;</span>fibs <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span> <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;w&quot;</span><span class="dt">&gt;</span> <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;ow&quot;</span><span class="dt">&gt;</span>= <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span> <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;w&quot;</span><span class="dt">&gt;</span> <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;mi&quot;</span><span class="dt">&gt;</span>0 <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span> <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;w&quot;</span><span class="dt">&gt;</span> <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;kt&quot;</span><span class="dt">&gt;</span>: <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span> <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;w&quot;</span><span class="dt">&gt;</span> <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;n&quot;</span><span class="dt">&gt;</span>scanl<span class="dv">&amp;#39;</span> <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span> <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;w&quot;</span><span class="dt">&gt;</span> <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;p&quot;</span><span class="dt">&gt;</span>(<span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;o&quot;</span><span class="dt">&gt;</span>+ <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span> <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;p&quot;</span><span class="dt">&gt;</span>) <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;w&quot;</span><span class="dt">&gt;</span> <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;mi&quot;</span><span class="dt">&gt;</span>1 <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span> <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;w&quot;</span><span class="dt">&gt;</span> <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;</span><span class="kw">span</span><span class="ot"> class</span><span class="op">=</span><span class="st">&quot;n&quot;</span><span class="dt">&gt;</span>fibs <span class="dt">&lt;/</span><span class="kw">span</span><span class="dt">&gt;</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&lt;/</span><span class="kw">pre</span><span class="dt">&gt;</span></span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;/</span><span class="kw">div</span><span class="dt">&gt;</span></span></code></pre></div>
<p>This looks much better! The class names are kind of obtuse, but
<code>pygmentize</code> can also give you nicely annotated CSS styles for its
supported colour schemes. For example, the following is a small excerpt
of the output:</p>
<pre class="console"><code>$ pygmentize -S emacs -f html
…
.nf { color: #00A000 }                    /* Name.Function */
.ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
.kt { color: #00BB00; font-weight: bold } /* Keyword.Type */
.w { color: #bbbbbb }                     /* Text.Whitespace */
.c { color: #008800; font-style: italic } /* Comment */
…</code></pre>
<p>You can redirect this into a <code>pygments.css</code> file, link to it (e.g., from
your <code>default.html</code> template), and be on your way. The annotation also
makes it very easy to change that file after the fact, in case
<code>pygmentize</code> does not have the theme that you want.</p>
<h2 id="integration">Integration</h2>
<p>The idea of what we want to do is quite simple: for every code block in
a given post, shell out to <code>pygmentize</code>, and use its output to replace
the block, somehow making sure pandoc doesn’t touch it afterwards.
Let’s solve this step by step.</p>
<h3 id="pandoc">Pandoc</h3>
<p>Pandoc has an aptly named <code>Pandoc</code> type, which represents the internal
structure of a document.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Pandoc</span> <span class="ot">=</span> <span class="dt">Pandoc</span> <span class="dt">Meta</span> [<span class="dt">Block</span>]</span></code></pre></div>
<p>We’ll neglect the metadata for now and just look at the <code>Block</code>s;
specifically, we want to zoom in on two constructors that will give you
everything we need:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Block</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Lots of other constructors omitted</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=</span> <span class="dt">CodeBlock</span> <span class="dt">Attr</span> <span class="dt">Text</span>   <span class="co">-- ^ Code block (literal) with attributes</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">RawBlock</span> <span class="dt">Format</span> <span class="dt">Text</span>  <span class="co">-- ^ Raw block</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="co">-- | Attributes: identifier, classes, key-value pairs</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Attr</span> <span class="ot">=</span> (<span class="dt">Text</span>, [<span class="dt">Text</span>], [(<span class="dt">Text</span>, <span class="dt">Text</span>)])</span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="co">-- | Formats for raw blocks</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">Format</span> <span class="ot">=</span> <span class="dt">Format</span> <span class="dt">Text</span></span></code></pre></div>
<p>To get a feeling for how these <code>CodeBlock</code>s look, again consider our
<code>fibs</code> example from above. By default, the corresponding <code>CodeBlock</code>
for this would look something like</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="dt">CodeBlock</span> (<span class="st">&quot;&quot;</span>, [<span class="st">&quot;haskell&quot;</span>], [])</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>          <span class="st">&quot;fibs :: [Integer]\nfibs = 0 : scanl' (+) 1 fibs&quot;</span></span></code></pre></div>
<p>Importantly, the language (if any) is the first argument of the
<code>classes</code> field of <code>Attr</code>.</p>
<p>A strategy begins to form: look for all occurences of a <code>CodeBlock</code> in
the <code>Pandoc</code> type, and replace it with a <code>RawBlock "html"</code> such that it
isn’t touched anymore. Doing so will not pose very many
challenges—pandoc has really great capabilities for
<a href="https://hackage.haskell.org/package/pandoc-types/docs/Text-Pandoc-Walk.html">walking</a> its AST in order to facilitate exactly these
kinds of changes. Unsurprisingly, the <code>Walkable</code> class resides over all
things walkable; an abbreviated definition looks like this:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">Walkable</span> a b <span class="kw">where</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- | @walk f x@ walks the structure @x@ (bottom up) and replaces every</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- occurrence of an @a@ with the result of applying @f@ to it.</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="ot">  walk  ::</span> (a <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> b</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>  walk f <span class="ot">=</span> runIdentity <span class="op">.</span> walkM (<span class="fu">return</span> <span class="op">.</span> f)</span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- | A monadic version of 'walk'.</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a><span class="ot">  walkM ::</span> (<span class="dt">Monad</span> m, <span class="dt">Applicative</span> m, <span class="dt">Functor</span> m) <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> m a) <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> m b</span></code></pre></div>
<p>Specifically, as we’ll need to shell out to an external program, let us
restrict our attention to the more general <code>walkM</code> function here. There
is an instance</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Walkable</span> <span class="dt">Block</span> <span class="dt">Pandoc</span></span></code></pre></div>
<p>which will be all that we need. The necessary code now just
materialises in front of our eyes:<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a></p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- {-# LANGUAGE BlockArguments    #-}</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- {-# LANGUAGE LambdaCase        #-}</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="co">-- {-# LANGUAGE OverloadedStrings #-}</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a><span class="co">-- {-# LANGUAGE ViewPatterns      #-}</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="co">--</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a><span class="co">-- import Data.Maybe (fromMaybe, listToMaybe)</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a><span class="co">-- import qualified Data.Text as T</span></span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a><span class="co">-- import Hakyll</span></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a><span class="co">-- import System.Process (readProcess)</span></span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a><span class="co">-- import Text.Pandoc.Definition (Block (CodeBlock, RawBlock), Pandoc)</span></span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a><span class="co">-- import Text.Pandoc.Walk (walk, walkM)</span></span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-13"><a href="#cb12-13" aria-hidden="true" tabindex="-1"></a><span class="ot">pygmentsHighlight ::</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> <span class="dt">Pandoc</span></span>
<span id="cb12-14"><a href="#cb12-14" aria-hidden="true" tabindex="-1"></a>pygmentsHighlight <span class="ot">=</span> walkM \<span class="kw">case</span></span>
<span id="cb12-15"><a href="#cb12-15" aria-hidden="true" tabindex="-1"></a>  <span class="dt">CodeBlock</span> (_, (T.unpack <span class="ot">-&gt;</span> lang) <span class="op">:</span> _, _) (T.unpack <span class="ot">-&gt;</span> body) <span class="ot">-&gt;</span></span>
<span id="cb12-16"><a href="#cb12-16" aria-hidden="true" tabindex="-1"></a>    <span class="dt">RawBlock</span> <span class="st">&quot;html&quot;</span> <span class="op">.</span> T.pack <span class="op">&lt;$&gt;</span> unsafeCompiler (callPygs lang body)</span>
<span id="cb12-17"><a href="#cb12-17" aria-hidden="true" tabindex="-1"></a>  block <span class="ot">-&gt;</span> <span class="fu">pure</span> block</span>
<span id="cb12-18"><a href="#cb12-18" aria-hidden="true" tabindex="-1"></a> <span class="kw">where</span></span>
<span id="cb12-19"><a href="#cb12-19" aria-hidden="true" tabindex="-1"></a><span class="ot">  pygs ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">String</span></span>
<span id="cb12-20"><a href="#cb12-20" aria-hidden="true" tabindex="-1"></a>  pygs lang <span class="ot">=</span> readProcess <span class="st">&quot;pygmentize&quot;</span> [<span class="st">&quot;-l&quot;</span>, lang, <span class="st">&quot;-f&quot;</span>, <span class="st">&quot;html&quot;</span>]</span></code></pre></div>
<p>Notice how <em>a priori</em> this would have type <code>Pandoc -&gt; IO Pandoc</code>, but
since we want to use it from Hakyll I’ve already inserted a call to
<code>unsafeCompiler</code> in the correct place.</p>
<p>Further, the above code checks whether the block has an explicit
language attached to it and, if not, leaves it alone; this was suggested
by <a href="https://old.reddit.com/r/haskell/comments/10ilrui/pygmentising_hakylls_syntax_highlighting/j5fih5h/">LSLeary</a> on Reddit. If you want to have a single <code>div</code> class for
every code block—say, for some custom CSS—then you can replace</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>  <span class="dt">CodeBlock</span> (_, (T.unpack <span class="ot">-&gt;</span> lang) <span class="op">:</span> _, _) (T.unpack <span class="ot">-&gt;</span> body) <span class="ot">-&gt;</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">RawBlock</span> <span class="st">&quot;html&quot;</span> <span class="op">.</span> T.pack <span class="op">&lt;$&gt;</span> unsafeCompiler (callPygs lang body)</span></code></pre></div>
<p>with</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>  <span class="dt">CodeBlock</span> (_, listToMaybe <span class="ot">-&gt;</span> mbLang, _) (T.unpack <span class="ot">-&gt;</span> body) <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> lang <span class="ot">=</span> T.unpack (fromMaybe <span class="st">&quot;text&quot;</span> mbLang)</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">RawBlock</span> <span class="st">&quot;html&quot;</span> <span class="op">.</span> T.pack <span class="op">&lt;$&gt;</span> unsafeCompiler (callPygs lang body)</span></code></pre></div>
<h3 id="hakyll">Hakyll</h3>
<p>Thankfully, integrating <code>pygmentsHighlight</code> into Hakyll is not very
complicated either. In addition to the normal <code>pandocCompiler</code> or
<code>pandocCompilerWith</code> functions that you are probably already using,
there is also <a href="https://hackage.haskell.org/package/hakyll-4.15.1.1/docs/Hakyll-Web-Pandoc.html#v:pandocCompilerWithTransformM">pandocCompilerWithTransformM</a>:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a>pandocCompilerWithTransformM</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> <span class="dt">ReaderOptions</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">WriterOptions</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> (<span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> <span class="dt">Pandoc</span>)</span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span></code></pre></div>
<p>Basically, in additions to reader and writer options, it also takes a
monadic transformation of pandoc’s AST and builds an appropriate
<code>Compiler</code> from that.</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- import Hakyll</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- import Text.Pandoc.Options</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a><span class="ot">myPandocCompiler ::</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a>myPandocCompiler <span class="ot">=</span></span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>  pandocCompilerWithTransformM</span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a>    defaultHakyllReaderOptions</span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a>    defaultHakyllWriterOptions</span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a>    pygmentsHighlight</span></code></pre></div>
<p>The <code>myPandocCompiler</code> function can now be used as any other compiler;
for example:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> hakyll <span class="kw">do</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- …</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>  match <span class="st">&quot;posts/**.md&quot;</span> <span class="kw">do</span></span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a>    route (setExtension <span class="st">&quot;html&quot;</span>)</span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a>    compile <span class="op">$</span> myPandocCompiler</span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a>          <span class="op">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/default.html&quot;</span> defaultContext</span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a>          <span class="op">&gt;&gt;=</span> relativizeUrls</span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- …</span></span></code></pre></div>
<p>For a full working example, see <a href="https://github.com/slotThe/slotThe.github.io/blob/main/src/site.hs#L87">my configuration</a>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>That’s it! To my eyes, syntax highlighting looks much better now, and
on the way I—and perhaps you as well—even learned a little bit about how
pandoc internally represents its documents. Time well spent. As I said
in the beginning, in principle one could swap out <code>pygmentize</code> for any
other syntax highlighter that can produce HTML. However, for me these
results are good enough that I will probably not try out every tool
under the sun, chasing that ever present epsilon of highlighting cases
which I still don’t agree with—at least for now.</p>
<h2 id="epilogue-a-pygments-server">Epilogue: a pygments server</h2>
<p><span style="position: relative; top: -0.8em"><em>Added on 2025-01-05</em></span></p>
<p>Shelling out to <code>pygmentize</code> every time is quite expensive,
and once the site contains its fair share of code blocks one is curious if better solutions exist.
As <a href="https://github.com/pygments/pygments">pygments</a> itself is a Python project,
one can instead spin up the interpreter once, and then just query the API a whole lot:</p>
<div class="include" data-from="scripts/pygmentize.py">

</div>
<p>The script is first fed the amount of stuff we intend to send on a separate line,
followed by the language, and finally the body of the block.
One could faff around with bidirectional process communication at this point,
but good old files will also do the trick just fine.</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="ot">pygmentsHighlight ::</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> <span class="dt">Pandoc</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>pygmentsHighlight pandoc <span class="ot">=</span> recompilingUnsafeCompiler <span class="kw">do</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a>  (hin, _, _, _) <span class="ot">&lt;-</span> runInteractiveCommand <span class="st">&quot;python scripts/pygmentize.py&quot;</span></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a>  hSetBuffering hin <span class="dt">NoBuffering</span></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a>  void <span class="op">$</span> (<span class="ot">`walkM`</span> pandoc) \<span class="kw">case</span></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a>    cb<span class="op">@</span>(<span class="dt">CodeBlock</span> (_, listToMaybe <span class="ot">-&gt;</span> mbLang, _) body) <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a>      <span class="kw">let</span> cod <span class="ot">=</span> <span class="fu">mconcat</span> [ T.pack (<span class="st">&quot;/tmp/&quot;</span> <span class="op">&lt;&gt;</span> hash [T.unpack body]), <span class="st">&quot;\n&quot;</span></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a>                        , fromMaybe <span class="st">&quot;text&quot;</span> mbLang <span class="op">&lt;&gt;</span> <span class="st">&quot;\n&quot;</span></span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true" tabindex="-1"></a>                        , body</span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true" tabindex="-1"></a>                        ]</span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true" tabindex="-1"></a>      hPrint hin (T.length cod)</span>
<span id="cb18-12"><a href="#cb18-12" aria-hidden="true" tabindex="-1"></a>      T.hPutStr hin cod</span>
<span id="cb18-13"><a href="#cb18-13" aria-hidden="true" tabindex="-1"></a>      <span class="fu">pure</span> cb</span>
<span id="cb18-14"><a href="#cb18-14" aria-hidden="true" tabindex="-1"></a>    block <span class="ot">-&gt;</span> <span class="fu">pure</span> block</span>
<span id="cb18-15"><a href="#cb18-15" aria-hidden="true" tabindex="-1"></a>  threadDelay <span class="fl">1.0e6</span></span>
<span id="cb18-16"><a href="#cb18-16" aria-hidden="true" tabindex="-1"></a>  (<span class="ot">`walkM`</span> pandoc) \<span class="kw">case</span></span>
<span id="cb18-17"><a href="#cb18-17" aria-hidden="true" tabindex="-1"></a>    <span class="dt">CodeBlock</span> _ body <span class="ot">-&gt;</span></span>
<span id="cb18-18"><a href="#cb18-18" aria-hidden="true" tabindex="-1"></a>      <span class="dt">RawBlock</span> <span class="st">&quot;html&quot;</span> <span class="op">&lt;$&gt;</span> T.readFile (<span class="st">&quot;/tmp/&quot;</span> <span class="op">&lt;&gt;</span> hash [T.unpack body])</span>
<span id="cb18-19"><a href="#cb18-19" aria-hidden="true" tabindex="-1"></a>    block <span class="ot">-&gt;</span> <span class="fu">pure</span> block</span></code></pre></div>
<h2 id="backlinks">Backlinks</h2>
<ul>
<li>Vaibhav Sagar has written a
<a href="https://vaibhavsagar.com/blog/2023/01/29/ghc-syntax-hakyll/">fantastic post</a>
outlining how one can use GHC itself to generate highlighting for Haskell code
using the <a href="https://hackage.haskell.org/package/ghc-syntax-highlighter">ghc-syntax-highlighter</a> library.
Seeing how there are a lot of language extensions that <code>pygmentize</code> does not highlight correctly,
this seems well worth it!</li>
</ul>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>All of this work for a mostly greyscale theme!<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>So far, the only interaction I had with the program was through
the excellent <a href="https://ctan.org/pkg/minted?lang=en">minted</a> LaTeX package.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>If all else fails, simply <a href="https://aphyr.com/posts/353-rewriting-the-technical-interview">trace the sigils in the air and give
them form</a>.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Immediately Refile Notes with X.P.OrgMode</title>
    <link href="https://tony-zorman.com/posts/orgmode-refiling.html" />
    <id>https://tony-zorman.com/posts/orgmode-refiling.html</id>
    <published>2023-01-14T00:00:00Z</published>
    <updated>2023-01-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2023-01-14
      
      
        &thinsp;·&thinsp; last modified: 2023-02-13
      
      
        &thinsp;·&thinsp; <span title="668 words">3 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>, <a title="All pages tagged 'haskell'." href="/tags/haskell.html" rel="tag">haskell</a>, <a title="All pages tagged 'xmonad'." href="/tags/xmonad.html" rel="tag">xmonad</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>In a <a href="/posts/orgmode-prompt/2022-08-27-xmonad-and-org-mode.html">previous post</a> I talked about
<a href="https://xmonad.github.io/xmonad-docs/xmonad-contrib/XMonad-Prompt-OrgMode.html">XMonad.Prompt.OrgMode</a>, an XMonad module to rapidly capture thoughts
and ideas into an Org file. The functionality that the module provides
has proven to be extremely useful to me, and really I couldn’t be
happier with it. However, a user recently contacted me by email and
told me that they’re missing but one feature: the ability to immediately
refile notes.</p>
<!--more-->
<h2 id="motivation">Motivation</h2>
<p>If you don’t know, <a href="https://orgmode.org/manual/Refile-and-Copy.html">refiling</a> is the act of moving an entry<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> <em>below</em>
another heading; i.e., such that it becomes a subheading there. This
can be useful for structuring TODOs into separate categories: one might
have projects called “work”, “life”, “XMonad”, and so on, where all
related tasks live. Quite convenient!</p>
<p>So far, X.P.OrgMode just dumped the created note at the end of the
specified file, leaving you to pick up the pieces. This aligns with my
personal workflow—while I extensively use refiling, I only do so at the
end of the day after reviewing all tasks that have accumulated.
However, it is conceivable that someone might want to refile certain
tasks straight away when it’s pretty clear that (i) they’ll be kept, and
(ii) they can be unambiguously assigned to a certain heading (e.g., an
already scheduled work meeting with X).</p>
<h2 id="showcase">Showcase</h2>
<p>Long story short, this is now built into X.P.OrgMode. There are two new
functions:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">    orgPromptRefile   ::</span> <span class="dt">XPConfig</span> <span class="ot">-&gt;</span>           <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">FilePath</span> <span class="ot">-&gt;</span> <span class="dt">X</span> ()</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="ot">    orgPromptRefileTo ::</span> <span class="dt">XPConfig</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">FilePath</span> <span class="ot">-&gt;</span> <span class="dt">X</span> ()</span></code></pre></div>
<p>The former takes the same arguments as <a href="https://hackage.haskell.org/package/xmonad-contrib-0.17.1/docs/XMonad-Prompt-OrgMode.html#v:orgPrompt">orgPrompt</a> (which see), and is
for popping up another prompt that asks for a heading. The latter
refiles everything under the specified (as the second argument) heading.</p>
<p>The way <code>orgPromptRefile</code> works is that, after querying for a TODO, it
<em>always</em> inserts the note into the file and then <em>possibly</em> refiles it
to another heading. This way, you don’t need to worry about losing
notes when you abort the refiling prompt or enter a non-existent
heading.</p>
<p><img class="pure-img" src="../images/orgmode-refiling/refiling.gif" alt="Entering a TODO, and refiling it to an appropriate place"></p>
<p>Note: Refiling is (near) instant; the delay you are seeing above is due
to <code>auto-revert-mode</code>.</p>
<h3 id="some-gory-details">Some gory details</h3>
<p>All of the refiling is actually directly done by Emacs itself! More
precisely, the EDSL that <a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Util-Run.html">XMonad.Util.Run</a> defines—which I’ve also
<a href="/posts/2022-05-25-calling-emacs-from-xmonad.html">written about</a>—shells out to Emacs. This
might intuitively <em>feel</em> horrible, but that’s just another reason to
share it:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ot">refile ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">FilePath</span> <span class="ot">-&gt;</span> <span class="dt">X</span> ()</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>refile (asString <span class="ot">-&gt;</span> parent) (asString <span class="ot">-&gt;</span> fp) <span class="ot">=</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  proc <span class="op">$</span> inEmacs</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>     <span class="op">&gt;-&gt;</span> asBatch</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>     <span class="op">&gt;-&gt;</span> eval (progn</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>                [ <span class="st">&quot;find-file&quot;</span> <span class="op">&lt;&gt;</span> fp</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>                , <span class="st">&quot;end-of-buffer&quot;</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>                , <span class="st">&quot;org-refile nil nil&quot;</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>                    <span class="op">&lt;&gt;</span> list [ parent, fp, <span class="st">&quot;nil&quot;</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>                            , saveExcursion</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>                               [<span class="st">&quot;org-find-exact-headline-in-buffer&quot;</span> <span class="op">&lt;&gt;</span> parent]</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>                            ]</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>                , <span class="st">&quot;save-buffer&quot;</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>                ])</span></code></pre></div>
<p>This—as you probably guessed already—just executes the following elisp
snippet in Emacs’s batch mode:</p>
<pre class="emacs-lisp"><code>(progn
  (find-file «fp»)
  (end-of-buffer)
  (org-refile nil nil
              (list «parent» «fp» nil
                    (save-excursion
                      (org-find-exact-headline-in-buffer «parent»))))
  (save-buffer))</code></pre>
<p>I know this seems insane, but letting Emacs do this work is actually
much less brittle than the alternative. The Org maintainers certainly
know best what refiling <em>means</em>, and thus also what it entails—if all of
this logic is already written, why not take advantage of it? Plus, I
now don’t have to keep track of subtle changes in newer versions of Org.</p>
<h2 id="closing-thoughts">Closing thoughts</h2>
<p>Writing this was actually a lot of fun, and a great opportunity to play
with the EDSL that X.U.Run exposes. I reckon there are a few places in
my own XMonad configuration in which I could use these kinds of “Emacs
scripts” to great effect!</p>
<p>One other idea I’ve had is to integrate this into the language that
plain old <code>orgPrompt</code> accepts. It could be prefixed by something like
“<code>ref:</code>”, followed by a unique substring with which to identity a
heading. This would have the disadvantage that—without the second
prompt—one would not get any suggestions for headings. However, if you
want to refile something you probably know where you want to put it;
plus, it would not involve a possibly distracting second prompt.
Actually, this sounds like a good first pull request: contributions
welcome!</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>A headline, possibly with an attached body.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Duality in Monoidal Categories</title>
    <link href="https://tony-zorman.com/posts/duality-in-monoidal-categories.html" />
    <id>https://tony-zorman.com/posts/duality-in-monoidal-categories.html</id>
    <published>2023-01-10T00:00:00Z</published>
    <updated>2023-01-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2023-01-10
      
      
        &thinsp;·&thinsp; last modified: 2023-01-12
      
      
        &thinsp;·&thinsp; <span title="857 words">4 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'maths'." href="/tags/maths.html" rel="tag">maths</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>I have a new preprint <a href="https://arxiv.org/abs/2301.03545">on the arXiv</a>! It is joint work with
Sebastian Halbig, and concerns itself with the interplay of different
structures on monoidal categories that give rise to a notion of
“duality”. At five pages, it is a very short paper; yet I’d still like
to give a little teaser as to what kind of question we sought to answer.</p>
<!--more-->
<h2 id="setting-the-scene">Setting the scene</h2>
<p>We mainly concerned ourselves with three notions of <em>duality</em> for
(non-symmetric!) <a href="https://ncatlab.org/nlab/show/monoidal+category">monoidal</a> categories: <a href="https://ncatlab.org/nlab/show/closed+monoidal+category">closed monoidal</a> categories,
<a href="https://ncatlab.org/nlab/show/star-autonomous+category">*-autonomous</a><a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> categories, and <a href="https://ncatlab.org/nlab/show/rigid+monoidal+category">rigid (monoidal)</a> categories. It
is well-known that these concepts are all connected in the following
way.</p>
<blockquote>
<ol type="1">
<li><p>Every *-autonomous category is closed monoidal.
For all <span class="math inline">x, y \in \mathcal{C}</span>, the internal-hom <span class="math inline">[x, y]</span>
is given by <span class="math inline">D^{-1}(Dy \otimes x)</span>, where <span class="math inline">D</span> is the duality
functor.</p></li>
<li><p>Every rigid monoidal category is *-autonomous. The internal-hom
then simplifies to <span class="math inline">[x, y] = y \otimes x^*</span>, where <span class="math inline">{-}^*</span> is the
duality functor.</p></li>
</ol>
</blockquote>
<p>An obvious next question one could ask is: does this already
characterise rigid and *-autonomous categories? More explicitly, are
there any conditions one could impose on the internal-hom, such that
closedness already implies rigidity? What about *-autonomy?</p>
<h2 id="autonomy">*-autonomy</h2>
<p>We’ll start with a positive result for *-autonomy. So the question is
this: given a closed monoidal category <span class="math inline">\mathcal{C}</span> in which the
internal-hom is given by tensoring with another object, is this category
already *-autonomous?</p>
<p>More formally, is it true that <span class="math inline">\mathcal{C}</span> is *-autonomous if
for all <span class="math inline">x \in \mathcal{C}</span>, there exists an object
<span class="math inline">Dx \in \mathcal{C}</span>, such that there is an adjunction
<span class="math display">
  {-} \otimes x \dashv {-} \otimes Dx?
</span></p>
<p>Almost! In good cases, we can recover what we want from just a little
extra condition:</p>
<blockquote>
<p>Let <span class="math inline">\mathcal{C}</span> be a monoidal category. Suppose that for all
<span class="math inline">x \in \mathcal{C}</span> there exist objects
<span class="math inline">Lx, Rx \in \mathcal{C}</span>, such that we have adjunctions
<span class="math display">
  {-} \otimes Lx  \dashv  {-} \otimes x  \dashv  {-} \otimes Rx.
</span>
Then <span class="math inline">\mathcal{C}</span> is *-autonomous.</p>
</blockquote>
<p>Using the notion of a *-autonomous category of <span class="citation" data-cites="boyarchenko13:groth-verdier">[@boyarchenko13:groth-verdier]</span>—that is, for
every <span class="math inline">x \in \mathcal{C}</span> the functor <span class="math inline">\mathcal{C}({-} \otimes x, 1)</span> is
representable by <span class="math inline">Dx</span>—this becomes an exercise in “Yoneda Yoga”. More
precisely, one uses the fact that the Yoneda embedding is fully faithful
a lot. Try it yourself!</p>
<h2 id="rigidity">Rigidity</h2>
<p>At first sight, it’s not even clear there is anything to show for
rigidity. Something one is immediately tempted to do is to conjecture
the following:</p>
<blockquote>
<p>A closed monoidal category <span class="math inline">\mathcal{C}</span> is rigid monoidal
if for all <span class="math inline">x \in \mathcal{C}</span> we have
<span class="math inline">[x, {-}] \cong {-} \otimes Dx</span>, for some object assignment
<span class="math inline">D \colon \mathrm{Ob}\,\mathcal{C} \to \mathrm{Ob}\,\mathcal{C}</span>.</p>
</blockquote>
<p>This seems sensible; after all, the snake identities of an adjunction
look almost completely the same as the ones for a dual!<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> However, if
one sits down and actually writes down the diagrams, something doesn’t
quite fit. As a reminder, suppose we have an adjunction
<span class="math inline">F\colon \mathcal{C} \leftrightarrows \mathcal{C} : \! U</span> with unit
<span class="math inline">\eta \colon \mathrm{Id}_{\mathcal{C}} \Longrightarrow U F</span>
and counit
<span class="math inline">\varepsilon \colon F U \Longrightarrow \mathrm{Id}_{\mathcal{C}}</span>.
The snake identities for this adjunction look like</p>
<p><img class="pure-img" src="../images/duality-in-monoidal-categories/snake-idents-adjunction.png" alt="Usual snake identities of an adjunction"></p>
<p>In particular, we get two such diagrams if we apply everything to the
monoidal unit <span class="math inline">1 \in \mathcal{C}</span>. Specialised to the adjunction
<span class="math inline">{-} \otimes x \dashv {-} \otimes Dx</span> the above then becomes</p>
<p><img class="pure-img" src="../images/duality-in-monoidal-categories/snake-idents-adjunction-specialised.png" alt="Snake identities of an adjunction, specialised to this use-case"></p>
<p>These are just the snake identities for duals if we make the definitions
<span class="math inline">\mathrm{ev}_x ≔ \varepsilon_1</span> and <span class="math inline">\mathrm{coev}_x ≔ \eta_1</span>, right?
Wrong! In the latter case we, for example, require that
<span class="math display">
  (x \otimes \varepsilon_1) \circ (\eta_1 \otimes x) = \mathrm{id}_x.
</span>
However, the above diagram does <em>not</em> say that! It says that the
relation
<span class="math display">
  \varepsilon_x \circ (\eta_1 \otimes x) = \mathrm{id}_x
</span>
holds. This means that we would have to impose the additional
conditions that <span class="math inline">\varepsilon</span> and <span class="math inline">\eta</span> are morphisms of modules; i.e.,
<span class="math inline">\varepsilon_x \overset{\scriptsize{!}}{=} x \otimes \varepsilon_1 = x \otimes \mathrm{coev}_x</span>,
as well as a dual statement. This is not the case in general.</p>
<p>Finding a counterexample now works by exploiting exactly this fact: we
write down a syntactic category <span class="math inline">\mathcal{D}</span> that is generated by a
family of morphisms
<span class="math display">
  \eta_{m, n} \colon m \to m \otimes n \otimes n
  \qquad \text{and} \qquad
  \varepsilon_{m, n} \colon m \otimes n \otimes n \to m,
</span>
and impose relations guaranteeing the naturality of these arrows. There
is a subcategory <span class="math inline">\mathcal{C}</span> of <span class="math inline">\mathcal{D}</span> in which we additionally
require <span class="math inline">\eta</span> and <span class="math inline">\varepsilon</span> satisfy the snake equations of an
adjunction. One can now show that the category <span class="math inline">\mathcal{C}</span> is closed
monoidal, with the appealing adjunction
<span class="math display">
  {-} \otimes n \dashv {-} \otimes n.
</span>
However, it is not rigid! The proof exploits certain strong monoidal
functors to the category of finite-dimensional vector spaces, and shows
that the subset of arrows <em>in <span class="math inline">\mathcal{D}</span></em> that contains one of the
snake identities for duals is (i) closed under exactly these relations,
and (ii) all morphisms in this set have length at least two. Hence, if
we project any morphism down to <span class="math inline">\mathcal{C}</span>, it can’t possibly be the
identity, and thus the snake identities for duals do not hold. If you
want more details, check the paper <span class="citation" data-cites="halbig23:dualit-monoid-categ">[@halbig23:dualit-monoid-categ]</span>!</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>Or rather, a non-symmetric variant of it called an <em>r-category</em> in
<span class="citation" data-cites="boyarchenko13:groth-verdier">[@boyarchenko13:groth-verdier]</span>.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>This is not a coincidence; for example, adjoints in the monoidal
category <span class="math inline">([\mathcal{C}, \mathcal{C}], \circ, \mathrm{Id})</span> are
exactly duals!.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Announcing: vc-use-package</title>
    <link href="https://tony-zorman.com/posts/vc-use-package.html" />
    <id>https://tony-zorman.com/posts/vc-use-package.html</id>
    <published>2022-12-22T00:00:00Z</published>
    <updated>2022-12-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2022-12-22
      
      
        &thinsp;·&thinsp; last modified: 2023-05-18
      
      
        &thinsp;·&thinsp; <span title="286 words">2 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->


<div>
  <p>I’d like to announce a small package I’ve written: <a href="https://github.com/slotThe/vc-use-package">vc-use-package</a>. It
is a first attempt at integrating the new (as of Emacs 29)
<code>package-vc.el</code> with the now built-in use-package. I’ve already talked
about how these two interact in my <a href="https://tony-zorman.com/posts/package-vc-install.html">last post</a>—you can
see this package as automating things juuuust a little more.</p>
<!--more-->
<p><em>Update (2023-05-18)</em>: This is now built into Emacs 30!
Check <a href="https://tony-zorman.com/posts/use-package-vc.html">here</a> for more details.</p>
<h2 id="motivation">Motivation</h2>
<p>For the last post, someone gave me some <a href="https://old.reddit.com/r/emacs/comments/z9i4ce/exploring_packagevcinstall_as_an_alternative_to/iygzeum/">feedback</a>:
couldn’t we go a little further? In particular, they wanted a new <code>:vc</code>
keyword for use-package, much like <a href="https://github.com/quelpa/quelpa">quelpa</a> has done with
<a href="https://github.com/quelpa/quelpa-use-package">quelpa-use-package</a>. I already gave them a small working example in a
follow-up comment, but figured this might actually interest enough
people so that turning it into a proper package could be worth it; and
here we are!</p>
<p>The basic premise is really this simple—we create a handler for a new
<code>:vc</code> use-package keyword. It can be used like so:</p>
<pre class="emacs-lisp"><code>(use-package math-delimiters
  :vc (:fetcher github :repo oantolin/math-delimiters))</code></pre>
<p>One can specify most arguments that <code>package-vc-install</code> also accepts; for example:</p>
<pre class="emacs-lisp"><code>(use-package math-delimiters
  :vc (:fetcher &quot;github&quot;
       :repo &quot;oantolin/math-delimiters&quot;
       :rev &quot;master&quot;         ; also accepts the special `:last-release'
       :backend Git))</code></pre>
<p>Much like quelpa-use-package, there is some care needed concerning the
interaction between this package and the <code>use-package-always-ensure</code>
variable, but this should mostly be taken care of automatically. For
more information (and manual controls), see the
<a href="https://github.com/slotThe/vc-use-package#in-combination-with-use-package-always-ensure">README</a>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>As I said above,
this is no longer only available as an external package,
but actually <a href="https://tony-zorman.com/posts/use-package-vc.html">built into Emacs</a>!
By virtue of being a part of it now,
the integration with <code>use-package</code> is a lot tighter—try it out if you’re using <code>HEAD</code> anyways!
If not, then don’t worry: <code>vc-use-package</code> will not go anywhere for the forseeable future.</p>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Exploring package-vc-install</title>
    <link href="https://tony-zorman.com/posts/package-vc-install.html" />
    <id>https://tony-zorman.com/posts/package-vc-install.html</id>
    <published>2022-11-30T00:00:00Z</published>
    <updated>2022-11-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2022-11-30
      
      
        &thinsp;·&thinsp; last modified: 2023-05-18
      
      
        &thinsp;·&thinsp; <span title="621 words">3 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>The Emacs 29 release branch was just cut—and it’s chock full of new
features! In this post, I want to talk about the new
<code>package-vc-install</code> function, which allows one to install packages
directly from their respective upstream source; for example, GitHub. It
can be seen as a built-in alternative to things like quelpa or
straight.el.</p>
<!--more-->
<p><em>Update (2023-05-18)</em>:
Integration into <code>use-package</code> is now available as
a <a href="https://tony-zorman.com/posts/vc-use-package.html">standalone package</a>,
as well as—as of Emacs 30—a
<a href="https://tony-zorman.com/posts/use-package-vc.html">built-in option</a></p>
<h2 id="the-story-so-far">The story so far</h2>
<p>I’ve been using <a href="https://github.com/quelpa/quelpa">quelpa</a> and <a href="https://github.com/quelpa/quelpa-use-package">quelpa-use-package</a> to install packages
that are not on any popular archive straight from source. Especially
the latter package resulted in an almost seemless integration with the
rest of my configuration; for example:</p>
<pre class="emacs-lisp"><code>(use-package math-delimiters
  :quelpa (math-delimiters :fetcher github :repo &quot;oantolin/math-delimiters&quot;))</code></pre>
<p><a href="https://git.savannah.gnu.org/cgit/emacs.git/commit/?id=5fa2f116799b8a7c17ff6eedd6e1b1af077c116b">Recently</a>, Emacs added built-in capabilities for
installing a package directly from its remote repository. Eager to
shave yet another external package from my otherwise ever growing list,
I took <code>package-vc.el</code> out for a spin: turns out, it almost perfectly
covers the use-case for which I—and perhaps a few other people—used
quelpa up until now!</p>
<p>The most user-facing of these new functions is <code>package-vc-install</code>,
with signature</p>
<pre class="emacs-lisp"><code>(package-vc-install PACKAGE &amp;optional NAME REV BACKEND)</code></pre>
<p>In the simplest case, it takes a URL pointing to some online source as
its argument and installs the respective package from there, guessing
the name from the URL. In case that doesn’t work—or one wants more
control, like requiring a specific revision—there are some other
optional arguments available, see the function’s documentation.</p>
<h2 id="customising-package-vc-install">Customising <code>package-vc-install</code></h2>
<p>When a package is already installed, <code>package-vc-install</code> will ask the
user to interactively confirm whether they really want to overwrite the
existing directory. Naturally, this is not a good experience when
trying to use this in a non-interactive fashion.</p>
<p>There are a few ways one could go about fixing this. One of these is
even documented in the manual: customise <code>package-vc-selected-packages</code>
and then call <code>package-vc-install-selected-packages</code>, which works much
like <code>package-install-selected-packages</code>. However, this feels
unergonomic to me—at least considering that I want to use
<code>package-vc-install</code> as a (hopefully) drop-in replacement for
use-package’s <code>quelpa</code> keyword. Plus, I’d rather have the information
that package X is not installed from *ELPA local to the use-package
declaration of X itself.</p>
<p>So, let’s take the easy way out and write a small wrapper:</p>
<pre class="emacs-lisp"><code>(cl-defun slot/vc-install (&amp;key (fetcher &quot;github&quot;) repo name rev backend)
  &quot;Install a package from a remote if it's not already installed.
This is a thin wrapper around `package-vc-install' in order to
make non-interactive usage more ergonomic.  Takes the following
named arguments:

- FETCHER the remote where to get the package (e.g., \&quot;gitlab\&quot;).
  If omitted, this defaults to \&quot;github\&quot;.

- REPO should be the name of the repository (e.g.,
  \&quot;slotThe/arXiv-citation\&quot;.

- NAME, REV, and BACKEND are as in `package-vc-install' (which
  see).&quot;
  (let* ((url (format &quot;https://www.%s.com/%s&quot; fetcher repo))
         (iname (when name (intern name)))
         (pac-name (or iname (intern (file-name-base repo)))))
    (unless (package-installed-p pac-name)
      (package-vc-install url iname rev backend))))</code></pre>
<p>This function can now be used under the <code>init</code> keyword of the
use-package macro, almost without changing the shape of the declaration
from above:</p>
<pre class="emacs-lisp"><code>;; Before
(use-package math-delimiters
  :quelpa (math-delimiters :fetcher github :repo &quot;oantolin/math-delimiters&quot;))

;; After
(use-package math-delimiters
  :init (slot/vc-install :fetcher &quot;github&quot; :repo &quot;oantolin/math-delimiters&quot;)
  ;; OR (slot/vc-install :repo &quot;oantolin/math-delimiters&quot;)
  )</code></pre>
<p>In case you think I cherry picked the example, <a href="https://gitlab.com/slotThe/dotfiles/-/commit/6d55ac184af125a117215a1bb812ad75c5b0ab03">here</a>
is the full commit that exchanges quelpa for <code>slot/vc-install</code>.</p>
<h2 id="thats-all-folks">That’s all folks!</h2>
<p>Admittedly, my use of quelpa was rather primitive. I can imagine users
more heavily invested in, for example, the <code>straight.el</code> ecosystem
probably want a bit more out of their package manager than <code>package.el</code>
can give them right now, even with the added convenience of
<code>package-vc.el</code>. However, for me—and probably at least a few people out
there—this is quite enough. After all, for anything more there’s always
<a href="https://nixos.org/">nix</a> :)</p>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Adjusting preview.el for vertical monitors</title>
    <link href="https://tony-zorman.com/posts/vertical-previews.html" />
    <id>https://tony-zorman.com/posts/vertical-previews.html</id>
    <published>2022-11-05T00:00:00Z</published>
    <updated>2022-11-05T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2022-11-05
      
      
        &thinsp;·&thinsp; last modified: 2023-02-13
      
      
        &thinsp;·&thinsp; <span title="451 words">2 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->


<div>
  <p>Here’s a fun one: when previewing LaTeX fragments via AUCTeX’s
<code>preview.el</code> library (whether it be in a .tex buffer, or—via
<a href="https://github.com/karthink/org-auctex">org-auctex</a>—in Org) things get <em>really</em> messed up when one or more
monitors are set up in portrait mode.</p>
<!--more-->
<p>When you have two monitors oriented vertically, previews might end up
looking something like this:</p>
<p style="text-align:center;">
<img class="pure-img" src="../images/vertical-preview/two-vertical.png" alt="preview with two vertical monitors, horribly squished vertically">
</p>
<p>With the perhaps more common setup of one vertical and one horizontal
monitor, you could instead get the charming</p>
<p style="text-align:center;">
<img class="pure-img" src="../images/vertical-preview/one-vertical.png" alt="preview with one vertical monitor, horribly squished horizontally">
</p>
<p>Imagine a whole page of this—things get pretty funky. Being a boring
person, I would rather prefer the much more ordinary looking</p>
<p style="text-align:center;">
<img class="pure-img" src="../images/vertical-preview/normal.png" alt="normal preview, prefectly legible">
</p>
<p>Thankfully, this isn’t so complicated. Looking into <code>preview.el</code>, we
get the geometry of the frame from <code>preview-get-geometry</code>. At least,
this is what <code>preview-generate-preview</code> calls before delegating the
heavy lifting to some internal functions. After staring at the former
function for a while, one can single out <code>preview-get-dpi</code> as the main
culprit. It seems to calculate the “resolution” of the preview:</p>
<pre class="emacs-lisp"><code>  (defun preview-get-dpi ()
    (let* ((monitor-attrs (frame-monitor-attributes))
           (mm-dims (cdr (assoc 'mm-size monitor-attrs)))
           (mm-width (nth 0 mm-dims))
           (mm-height (nth 1 mm-dims))
           (pixel-dims (cl-cdddr (assoc 'geometry monitor-attrs)))
           (pixel-width (nth 0 pixel-dims))
           (pixel-height (nth 1 pixel-dims)))
      (cons (/ (* 25.4 pixel-width) mm-width)
            (/ (* 25.4 pixel-height) mm-height))))</code></pre>
<p>Monitor details are returned by the <code>frame-monitor-attributes</code> function;
its output for a horizontal monitor is</p>
<pre class="emacs-lisp"><code>  '((name . &quot;DP1&quot;)
    (geometry 0 0 1920 1080)
    (workarea 0 0 1920 1080)
    (mm-size 530 300)
    (frames &lt;&lt;omitted&gt;&gt;)
    (source . &quot;XRandR 1.5&quot;))</code></pre>
<p>While the same monitor in “vertical-mode” returns</p>
<pre class="emacs-lisp"><code>  '((name . &quot;DP1&quot;)
    (geometry 0 0 1080 1920)
    (workarea 0 0 1080 1920)
    (mm-size 530 300)
    (frames &lt;&lt;omitted&gt;&gt;)
    (source . &quot;XRandR 1.5&quot;))</code></pre>
<p>Crucially, the physical width and height of the monitor don’t change,
but the <em>geometry</em>—the pixel width and height—does; you can <code>C-h f display-monitor-attributes-list RET</code> for more information. This means
that in portrait mode, we actually compare the pixel <em>width</em> of the
monitor with its physical <em>height</em>, as well as its pixel height with its
width. Naturally, and depending on the specific setup, this produces
too narrow or too wide previews.</p>
<p>The solution is to only compare the comparable values. Indeed,
overriding the built-in <code>preview-get-dpi</code> function with</p>
<pre class="emacs-lisp"><code>  (defun preview-get-dpi ()
    (-let (((&amp;alist 'mm-size (mw mh)
                    'geometry (_ _ pw ph))
            (frame-monitor-attributes)))
      (cons (/ (* 25.4 (max pw ph)) (max mw mh))
            (/ (* 25.4 (min pw ph)) (min mw mh)))))</code></pre>
<p>produces the correct behaviour! This implicit assumption—that monitors
are generally wider than they are tall—of <code>preview-get-dpi</code> should
probably be fixed; I will report it as an Emacs bug.</p>
<p>As an aside, this is an excellent opportunity to see the ergonomic
benefits of the <a href="https://github.com/magnars/dash.el">dash.el</a> library. Compare the readability of the
“fixed” implementation using <code>-let</code> to the original one above. I
certainly know which of the two I’d rather write!</p>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>A Potpourri of Emacs Tweaks</title>
    <link href="https://tony-zorman.com/posts/emacs-potpourri.html" />
    <id>https://tony-zorman.com/posts/emacs-potpourri.html</id>
    <published>2022-10-22T00:00:00Z</published>
    <updated>2022-10-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2022-10-22
      
      
        &thinsp;·&thinsp; last modified: 2024-03-02
      
      
        &thinsp;·&thinsp; <span title="3265 words">14 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>Emacs is the “extensible text editor”, and it wouldn’t be fun if one
didn’t at least try to take advantage of that, right? Having just
written a <a href="https://gitlab.com/slotThe/dotfiles/-/tree/master/emacs">README</a> for my Emacs configuration, I
thought it might be nice to somewhat expand on certain ideas and give a
little context to some snippets that have accumulated over time.</p>
<p>While there is a post about <a href="https://tony-zorman.com/posts/query-replace-many.html">my version</a> of the
<code>query-replace</code> function, most other tidbits have only seen the light of
day in places like the “Weekly Tips, Tricks, &amp;c.” thread on Reddit. In
the spirit of hosting my content somewhere that I actually control,
I chose to showcase these again here, hoping that other people may also
find some of this stuff useful.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></p>
<!--more-->
<h2 id="frame-inhibit-implied-resize"><code>frame-inhibit-implied-resize</code></h2>
<p>This variable is interesting for all the people who, for one reason or
another, care about the startup time of their Emacs session. Even more
if one uses a tiling window manager, as then Emacs doesn’t get a say in
how big its frame will be anyway. An excerpt from the documentation:</p>
<blockquote>
<p>Whether frames should be resized implicitly.</p>
<p>If this option is nil, setting font, menu bar, tool bar, tab bar,
internal borders, fringes or scroll bars of a specific frame may
resize the frame in order to preserve the number of columns or lines
it displays. If this option is t, no such resizing is done.</p>
</blockquote>
<p>I always wondered why startup time skyrocketed whenever I changed the
default font to something else—surely opening a font and using it can’t
be that expensive! What I didn’t realise was that what I set was
slightly larger than Emacs’s default font, which I reckon was some kind
of monospace fallback on my system. Setting
<code>frame-inhibit-implied-resize</code> to <code>t</code> will thusly prevent Emacs from
trying to—futilely, since I use <a href="https://xmonad.org">XMonad</a>—resize its frame in order to
“preserve the number of columns or lines it displays”. The upshot is
that this cuts my startup time from just over 1 second to about 0.8
seconds. This may not seem like much, but it’s literally <a href="https://gitlab.com/slotThe/dotfiles/-/blob/460060b7b5e164e6b892397e264b0da470ed74c9/emacs/.config/emacs/early-init.el#L51">setting a
single variable</a> in my <code>early-init.el</code>—pretty good
value for money.</p>
<h2 id="pixel-scroll-precision-mode"><code>pixel-scroll-precision-mode</code></h2>
<p>This is pretty old news by now, but I wanted to take the opportunity to
again praise <code>pixel-scroll-precision-mode</code>. My day job is being a <a href="./my-phd-workflow.html">PhD
student in maths</a>, which means that I write a lot of
LaTeX and also use Org extensively for taking notes. While ordinary
LaTeX entry in Org works quite well, commutative diagrams are a pain
more often than not. In fact, It’s much easier to draw them with a tool
like <a href="https://q.uiver.app/">quiver</a>, make a screenshot, and then include the resulting picture
in the file. However, now we have the problem that Emacs treats
pictures as very large single characters—the result is a scrolling
experience that’s very far from optimal. This is <em>exactly</em> where
<code>pixel-scroll-precision-mode</code> comes in and saves the day, but see the
difference for yourself:</p>
<p>
<video width="100%" controls>
<source src="../images/emacs-potpourri/pixel-scroll-precision-mode.mp4" type="video/mp4">
</video>
</p>
<h2 id="quickly-insert-images-in-org-roam">Quickly insert images in <code>org-roam</code></h2>
<p>Speaking of inserting images into Org; how does one do that, exactly?
Doing everything by hand seems like a slog: select an arbitrary
rectangle on the screen, take a screenshot of it, move the resulting
picture into the correct directory, give it an appropriate name, and
insert a link to it into the current buffer. This sounds like a lot of
busywork for something that I ideally don’t want to think about at all;
thankfully, most of this can be nicely automated.</p>
<pre class="emacs-lisp"><code>(defun slot/org-roam-insert-image ()
  &quot;Select and insert an image at point.&quot;
  (interactive)
  (let* ((file-name (format &quot;%s-%s.png&quot;
                            (file-name-sans-extension (buffer-name))
                            (cl-random (expt 2 31))))
         (path (format &quot;%s/%s/%s&quot; org-roam-directory &quot;images&quot; file-name)))
    ;; The mouse movement via xdotool is needed because otherwise, if
    ;; unclutter is active, the pointer will remain hidden.  Uff.
    (call-process &quot;xdotool&quot; nil 0 nil &quot;mousemove_relative&quot; &quot;--&quot; &quot;-1&quot; &quot;0&quot;)
    (let ((scrot-exit (call-process &quot;scrot&quot; nil nil nil
                                    &quot;-z&quot; &quot;-f&quot; &quot;-s&quot; &quot;--file&quot; path)))
      (when (= scrot-exit 0)
        (insert (format &quot;[[../images/%s]]&quot; file-name))))))</code></pre>
<p>All it needs is <code>xdotool</code> for moving the mouse (though, if you don’t use
<code>unclutter</code> then this may well be deleted) and <code>scrot</code> for actually
taking the screenshot. Pretty convenient. If <code>scrot</code> is too low-tech
for you, then the above snippet probably also works with <code>flameshot</code> or
a similar tool.</p>
<h2 id="latex">LaTeX</h2>
<h3 id="latex-for-the-lazy-mathematician">LaTeX for the lazy mathematician</h3>
<p>I am pretty impatient when it comes to LaTeX entry. So impatient that I
have created a few “now you’re really taking it too far”-type of
functions. To be honest, they kind of delight me.</p>
<p>First, the following is an override for the <code>self-insert-command</code>, which
enables faster entry of one-character math symbols:</p>
<pre class="emacs-lisp"><code>(defun slot/LaTeX-self-insert (&amp;optional arg char)
  &quot;`self-insert-command' for LaTeX mode.
If the previous word is just a single character, surround it with
dollar signs.  If already in math mode, do nothing.  If the
character is a single `a', do nothing.

If called with a single \\[universal-argument], just call
`self-insert-command'.&quot;
  (interactive &quot;P&quot;)
  (pcase arg
    ('(4) (self-insert-command 1))
    (_ (let ((ppoint (save-excursion (backward-word)       (point)))
             (ipoint (save-excursion (back-to-indentation) (point)))
             (word   (word-at-point)))
         (unless (or (length&gt; word 1)   ; longer than a single character
                     (not word)
                     (= ipoint ppoint)  ; the first thing on a new line
                     (equal &quot;a&quot; word)
                     (number-at-point)
                     (texmathp))
           (-let (((open . close) math-delimiters-inline))
             (backward-char)
             (insert open)
             (forward-char 1)
             (insert close)))
         (self-insert-command 1 char)))))</code></pre>
<p>Bound to <code>&lt;SPC&gt;</code> (and also things like <code>.</code> and <code>-</code>), it enables one to
write <code>"foo T&lt;SPC&gt;"</code> and have Emacs insert <code>"foo $T$ "</code> instead—very
convenient, and much faster even than having a snippet to insert dollars
based on some condition.</p>
<p>The laziness continues with me not wanting to write <code>\blank</code> so
often.<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> I could also create an auto-expanding snippet for this, but
wouldn’t it be <em>much better</em> to insert it on a double tap of the space
bar instead? I think so!</p>
<pre class="emacs-lisp"><code>(defun slot/LaTeX-space (&amp;optional arg)
  &quot;Insert a space; or not.
In case the previous character was already a space, insert
\\blank instead.&quot;
  (interactive &quot;P&quot;)
  (if (and (= ?\s (char-before)) (texmathp))
      (insert &quot;\\blank &quot;)
    (slot/LaTeX-self-insert arg ?\s)))</code></pre>
<p>Now, writing something like <code>"C(&lt;SPC&gt;&lt;SPC&gt;,&lt;SPC&gt;&lt;SPC&gt;)"</code> in math-mode
nicely inserts <code>"C( \blank , \blank )"</code>. Because the space bar is so
easy to press, this is again marginally faster than having to write
something like <code>"C(bln,bln)"</code>.</p>
<p>Together with auto-expanding snippets, this enables reasonably fast
LaTeX entry:</p>
<p><img class="pure-img" src="../images/emacs-potpourri/latex-entry.gif" alt="Fast LaTeX entry with various kinds of macros and abbreviations"></p>
<p>More examples can be found in the <a href="./my-phd-workflow.html#digital-notes">post</a> about
my research workflow.</p>
<h3 id="prettify-latex-buffers">Prettify LaTeX buffers</h3>
<p>This story is interesting enough that I’ve written a whole <a href="./pretty-latex.html">post</a> about it<!--
-->—go check it out!
Long story short, one can transform a buffers like this</p>
<p><img class="pure-img" style="padding-left: 1em" src="../images/pretty-latex/end-before.png" alt="Before prettifying: Sections, subsections, emphasis, math"></p>
<p>into one like this</p>
<p><img class="pure-img" style="padding-left: 1em" src="../images/pretty-latex/end-after.png" alt="After prettifying: Sections, subsections, emphasis, math"></p>
<h2 id="erc">ERC</h2>
<p>I recently switched from WeeChat to <a href="https://www.gnu.org/software/emacs/erc.html">ERC</a> for IRC. It’s
really great so far, but some things felt a bit lackluster out of the
box. As such, my <a href="https://gitlab.com/slotThe/dotfiles/-/blob/460060b7b5e164e6b892397e264b0da470ed74c9/emacs/.config/emacs/lisp/erc-config.el">ERC config</a> has already grown quite a
bit.<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a> The following are a few tweaks that improve my experience
greatly.</p>
<h3 id="mark-the-current-frame-as-urgent">Mark the current frame as urgent</h3>
<p>One feature I was dearly missing was the ability to set <a href="https://tronche.com/gui/x/xlib/ICC/client-to-window-manager/wm-hints.html">urgency
hints</a> in the case I get highlighted/pinged. This is
essentially the window telling your window manager or desktop
environment that it wants your attention. You can then execute an
action based on this urgency hint. Thankfully, Emacs is extensible, so
hacking this behaviour into ERC wasn’t actually all that complicated.</p>
<pre class="emacs-lisp"><code>(defun slot/mark-emacs-urgent ()
  &quot;Mark the current frame as urgent.&quot;
  (let* ((WM-HINTS &quot;WM_HINTS&quot;)
         (hints (seq--into-list
                 ;; By default this returns a string/vector.
                 (x-window-property WM-HINTS nil WM-HINTS nil nil t))))
    ;; Urgency flag: (1L &lt;&lt; 8) == 256
    ;; Source (as always): https://tronche.com/gui/x/xlib/ICC/client-to-window-manager/wm-hints.html
    (setcar hints (logior (car hints) (lsh 1 8)))
    (x-change-window-property WM-HINTS hints nil WM-HINTS 32)))

(defun slot/beep-on-match (match-type _nickuserhost message)
  &quot;Beep and mark the frame as urgent on highlight.&quot;
  (let ((visible-bell nil))
    (slot/mark-emacs-urgent)
    (erc-beep-on-match match-type _nickuserhost message)))

(add-hook 'erc-text-matched-hook #'slot/beep-on-match)</code></pre>
<p>And that’s really it! Now ERC correctly sends an urgency hint whenever
I get highlighted. Note that, <a href="https://old.reddit.com/r/emacs/comments/xjyuni/weekly_tips_tricks_c_thread/ipfjlw0/">as we found out</a>, if
you use a reparenting window manager (you probably do if you use a
desktop environment) you might have to give <code>x-change-window-property</code>
above an extra <code>t</code> argument.</p>
<h3 id="dont-highlight-quite-so-much">Don’t highlight quite so much</h3>
<p>Having configured quite a few regular expressions for when I get
highlighted, things can get quite overwhelming at times. For example,
when ERC starts up it prints <code>/users</code> in every channel buffer. Of
course, I’m a user in a channel that I’m in, so Emacs happily starts
beeping and throwing around urgency hints—not a good experience. This
also clutters the <code>ERC Keywords</code> buffer (which is built-in and akin to
WeeChat’s <code>highmon.pl</code>).</p>
<p>Thankfully, however, there is a straightforward hack around this: just
check the message for certain regular expression first and do nothing
when they are present.</p>
<pre class="emacs-lisp"><code>(defun slot/erc-ignore-highlight (msg)
  &quot;Don't highlight me when these things happen.&quot;
  (let ((message (s-trim-left msg))
        (channel (or (erc-default-target) &quot;&quot;)))
    (--any? (s-prefix? it message)
            `(&quot;*** Users on&quot;
              &quot;*** Your new nickname is&quot;
              &quot;*** Welcome to the&quot;
              ,(concat &quot;*** &quot; channel &quot;: topic set by&quot;)))))</code></pre>
<p>All that’s left to do is to thread this function through to
<code>erc-log-matches</code> and the above-defined <code>slot/beep-on-match</code>:</p>
<pre class="emacs-lisp"><code>(defun slot/erc-log-matches (match-type nickuserhost message)
  &quot;Log matches to extra buffer, unless they are annoying.&quot;
  (unless (slot/erc-ignore-highlight message)
    (erc-log-matches match-type nickuserhost message)))

(defun slot/beep-on-match (match-type _nickuserhost message)
  &quot;Beep and mark the frame as urgent on highlight.&quot;
  (let ((visible-bell nil))
    (unless (slot/erc-ignore-highlight message)
      (slot/mark-emacs-urgent)
      (erc-beep-on-match match-type _nickuserhost message))))

;; As before, now add the appropriate hooks to `erc-text-matched-hook'.</code></pre>
<p>If it works, it works, right?</p>
<h2 id="inserting-links">Inserting links</h2>
<p>Next to being a user, I also spend way too much time working on XMonad.
As such, I often help people coming into our IRC or posting on the
subreddit with their problems. More often than not one needs to link to
the same resources over and over again—why not write something so that I
don’t have to dig up these links again and again?</p>
<p>I currently have a set-up where I can link to every XMonad module, all
of my blog posts, as well as selected extra sites, like our tutorial and
installation instructions. Depending on the given universal argument, a
different link style is used, to accomodate for different platforms.</p>
<pre class="emacs-lisp"><code>(defun slot/get-xmonad-modules ()
  &quot;Get all XMonad modules in the form (NAME . DOC-URL).&quot;
  (let* ((xmonad-cabal &quot;~/repos/xmonad/xmonad-contrib/xmonad-contrib.cabal&quot;)
         (hackage &quot;https://hackage.haskell.org/package/xmonad-contrib/docs/&quot;)
         (modules (shell-command-to-string
                   (format &quot;tail -n +50 %s | grep -E \&quot; XMonad\\.*\&quot;&quot;
                           xmonad-cabal))))
    (-&gt;&gt; (s-lines modules)
         (-drop-last 1)                 ; empty line
         (--map (s-trim (s-replace &quot;exposed-modules:&quot; &quot;&quot; it)))
         (--map (cons it
                      (concat hackage (s-replace &quot;.&quot; &quot;-&quot; it) &quot;.html&quot;))))))

(defun slot/get-posts ()
  &quot;Get all of my blog posts in the form (NAME . URL).&quot;
  (let* ((website &quot;https://tony-zorman.com/&quot;)
         (base-path &quot;~/repos/slotThe.github.io/&quot;)
         (posts (directory-files-recursively (concat base-path &quot;posts/&quot;)
                                             &quot;.md$&quot;)))
    (--map (with-temp-buffer
             (insert-file-contents-literally it)
             (search-forward &quot;title: &quot;)
             (cons                      ; Name . URL
              (string-replace &quot;\&quot;&quot; &quot;&quot; (buffer-substring (point)
                                                        (point-at-eol)))
              (concat website (string-trim it base-path &quot;.md&quot;) &quot;.html&quot;)))
           posts)))

(defun slot/often-used-links (&amp;optional arg)
  &quot;Choose a link and insert it into the buffer in .md format.
This is quite useful, since many people happen to have very
similar problems when, for example, first starting out with
xmonad.&quot;
  (interactive &quot;P&quot;)
  (-let* ((links
           (-concat '((&quot;tutorial&quot; . &quot;https://xmonad.org/TUTORIAL.html&quot;)
                      (&quot;install&quot;  . &quot;https://xmonad.org/INSTALL.html&quot;)
                      (&quot;xmonad.hs&quot;. &quot;https://gitlab.com/slotThe/dotfiles/-/blob/master/xmonad/.config/xmonad/src/xmonad.hs&quot;))
                    (slot/get-xmonad-modules)
                    (slot/get-posts)))
          (choice (completing-read &quot;Link: &quot; (mapcar #'car links)))
          ((name . link) (assoc choice links)))
    (insert &quot;[&quot; name &quot;]&quot;)
    (if arg
        (insert &quot;(&quot; link &quot;)&quot;)
      (save-excursion (insert &quot;\n\n[&quot; name &quot;]: &quot; link)))))</code></pre>
<p>I bind this to <code>C-c l</code> in <code>markdown-mode</code>; it looks like this:</p>
<p><img class="pure-img" src="../images/emacs-potpourri/markdown-entry.gif" alt="link entry in markdown-mode, with an interactive prompt"></p>
<h2 id="a-macro-for-repeat-mode">A macro for <code>repeat-mode</code></h2>
<p>I’ve written a macro for Emacs’s <code>repeat-mode</code>, which allows you to
execute repeated commands without having to press the same prefix over
and over again. For example, one can set this up for Org navigation
commands such that <code>C-c C-n n n</code> executes <code>org-next-visible-heading</code>
three times. A great introduction to <code>repeat-mode</code> can be found
<a href="https://karthinks.com/software/it-bears-repeating/">here</a>.</p>
<p>There are <a href="https://tildegit.org/acdw/define-repeat-map.el">lots</a> of <a href="https://github.com/mmarshall540/repeaters">packages</a>
around that define different macros which probably work much better than
the one below. Even <a href="https://github.com/jwiegley/use-package">use-package</a> now sports a <code>:repeat-map</code> keyword
now. However, obviously the one I wrote feels the most natural to <em>me</em>,
so it’s being kept around regardless.</p>
<pre class="emacs-lisp"><code>(defmacro defrepeatmap (sym pairs &amp;optional docstring)
  &quot;A macro for defining `repeat-map's.
Defines a new repeat-map called SYM with the given DOCSTRING.
The keys are derived via the list PAIRS, whose elements are cons
cells of the form (KEY . DEF), where KEY and DEF must fulfill the
same requirements as if given to `define-key'.

If the key only consists of a single character; i.e., is already
bound and a repeat map is created afterwards, simply add it to
the repeat-map SYM.  If not, globally bind KEY to DEF and only
insert the last character of DEF into the repeat map SYM.&quot;
  (declare (indent 1) (debug t))
  `(progn
     (defvar ,sym
       (let ((kmap (make-sparse-keymap)))
         (--each ,pairs
           (-let (((key . fun) it))
             (if (length= key 1)
                 (define-key kmap (kbd key) fun)
               (bind-key (kbd key) fun)
               (define-key kmap (kbd (s-right 1 key)) fun))))
         kmap)
       ,docstring)
     ;; Tell the keys they are in a repeat map.
     (--each (mapcar 'cdr (cdr ,sym))
       (put it 'repeat-map ',sym))))</code></pre>
<p>The following would, for example, bind <code>mc/mark-next-like-this-word</code> to
<code>M-s s</code> globally and to <code>s</code> in the created <code>mc-repeat-map</code>. Likewise,
<code>mc/mark-next-word-like-this</code> is bound to <code>.</code> in that map, and so on.</p>
<pre class="emacs-lisp"><code>(defrepeatmap mc-repeat-map
    '((&quot;M-s s&quot; . mc/mark-next-like-this-word)
      (&quot;C-M-.&quot; . mc/mark-next-word-like-this)
      (&quot;C-M-,&quot; . mc/mark-previous-word-like-this)
      (&quot;C-&gt;&quot;   . mc/skip-to-next-like-this)
      (&quot;C-&lt;&quot;   . mc/skip-to-previous-like-this))
    &quot;`repeat-mode' keymap to repeat `multiple-cursors' bindings.&quot;)</code></pre>
<p>This may be too implicit for many people, but for me it’s just right—and
that’s sort of the point of all of this, right?</p>
<h2 id="warn-on-empty-subjects">Warn on empty subjects</h2>
<p>Emacs’s <code>notmuch</code> package has this fantastic concept of an <em>attachment check</em>:
adding <code>notmuch-mua-attachment-check</code> to <code>notmuch-mua-send-hook</code> will,
before sending the message,
check whether the regular expression in <code>notmuch-mua-attachment-regexp</code> matches.
If yes—and no attachment has been added—it will alert the user,
asking whether one really wants to send that email;
otherwise, everything goes through smoothly.
Due to some personal idiosyncrasies,
I needed a variant of this to check for empty subjects,
lest I become one of those people who sends emails like that.
As always, Emacs delivers.</p>
<p>The code for <code>notmuch-mua-attachment-check</code> is relatively straightforward,
and worth a look if we want to imitate this kind of behaviour for other headers.
A simplified<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a> version goes as follows:</p>
<pre class="emacs-lisp"><code>(defun notmuch-mua-attachment-check ()
  &quot;Signal an error an attachement is expected but missing.

Signal an error if the message text indicates that an attachment
is expected but no MML referencing an attachment is found.

Typically this is added to `notmuch-mua-send-hook'.&quot;
  (when (and
         ;; When the message mentions attachment...
         (save-excursion
           (message-goto-body)
           ;; Limit search from reaching other possible parts of the message
           (let ((search-limit (search-forward &quot;\n&lt;#&quot; nil t)))
             (message-goto-body)
             (re-search-forward notmuch-mua-attachment-regexp search-limit t)))
         ;; ...but doesn't have a part with a filename...
         (save-excursion
           (message-goto-body)
           (not (re-search-forward &quot;^&lt;#part [^&gt;]*filename=&quot; nil t)))
         ;; ...and that's not okay...
         (not
          (y-or-n-p &quot;Attachment mentioned, but no attachment - is that okay?&quot;)))
    ;; ...signal an error.
    (error &quot;Missing attachment&quot;)))</code></pre>
<p>There is nothing fancy happening here,
so it’s not terribly difficult to adapt it to other settings.
As I said in the beginning,
I need it to check for subjects,
due to the bad habit of only adding a subject once the email is already written—only sometimes I forget.
Instead of trying to change my habits—which is hard!—it sounds much easier to modify Emacs to suit my needs.</p>
<p>The strategy is exactly the same as for <code>notmuch-mua-attachment-check</code>;
check for a certain regular expression, whitespace, and say something if it matches the current subject:</p>
<pre class="emacs-lisp"><code>(defun notmuch-mua-subject-check ()
  (or (save-excursion
        (message-goto-subject)
        (message-beginning-of-header t)
        (not (looking-at-p &quot;[[:blank:]]*$&quot;)))
      (y-or-n-p &quot;No subject given – still send?&quot;)
      (error &quot;No subject&quot;)))</code></pre>
<p>All one has to do is to execute this before sending a mail:</p>
<pre class="emacs-lisp"><code>(add-hook 'notmuch-mua-send-hook #'notmuch-mua-attachment-check)</code></pre>
<p>and we’re good to go.</p>
<h2 id="sane-type-signatures-with-lsp-mode">Sane type signatures with lsp-mode</h2>
<p>By default, <code>lsp-mode</code>s type signatures for certain languages are… not great.</p>
<p><img class="pure-img" style="padding-left: 1em;" src="../images/fixing-lsp-mode/lsp-mode-default.png" alt="By default, lsp-mode only shows `iamTooLong :: Stirng`"></p>
<p>However, with a bit of hacking around this turns out to be quite fixable:</p>
<p><img class="pure-img" style="padding-left: 1em;" src="../images/fixing-lsp-mode/lsp-mode-fixed.png" alt="Properly syntax highlighted type signature"></p>
<p><a href="https://tony-zorman.com/posts/fixing-lsp-mode.html">The full post with all the code is here</a>.</p>
<h2 id="eshell">Eshell</h2>
<h3 id="integrating-zshs-history-into-eshell">Integrating zsh’s history into eshell</h3>
<p>If you use zsh and eshell together, you—like me—will soon be annoyed at the fact that the two programs use separate history files.
However, unification is not as easy as <code>(setq eshell-history-file-name "~/.config/zsh/zsh_history")</code>,
since zsh stores its history file in a metafied format.<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a>
This means that,
on the eshell side,
we have to make sure unmetafy the history file before writing to it.</p>
<p><a href="https://tony-zorman.com/posts/eshell-zsh-history.html">The implementation and more details can be found here</a>.</p>
<h3 id="integrating-zoxide-with-eshell">Integrating zoxide with eshell</h3>
<p><a href="https://github.com/ajeetdsouza/zoxide">Zoxide</a> is a rewrite
of the original <a href="https://github.com/rupa/z"><code>z</code></a> shell script
to quickly jump around directories.<a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a>
Basically, it keeps a history of your most visited directories<!--
-->—ranked by <a href="https://github.com/ajeetdsouza/zoxide/wiki/Algorithm">frecency</a>—<!--
-->and jumps to the best match.
Think of it as a more general version of <code>cd</code> that learns from your habits.</p>
<p>Below is the most basic integration of zoxide with eshell,
which has however been enough for me;
at least for the time being.</p>
<pre class="emacs-lisp"><code>(advice-add 'eshell/cd :around
  (lambda (cd &amp;rest args)
    &quot;On directory change, add the path to zoxide's database.&quot;
    (let ((old-path (eshell/pwd))
          (_ (apply cd args))
          (new-path (eshell/pwd)))
      (when (and old-path new-path (not (string= old-path new-path)))
        (shell-command-to-string (concat &quot;zoxide add &quot; new-path))))))

(defun eshell/n (dir)
  &quot;Navigate to a previously visited directory.&quot;
  (eshell/cd
   (string-trim (shell-command-to-string (concat &quot;zoxide query &quot; dir))))
  (eshell/ls))</code></pre>
<h2 id="parentheses-aware-yanking">Parentheses-aware yanking</h2>
<p>Normally, when you have an expression like</p>
<pre class="emacs-lisp"><code>(insert-for-yank
 (current-kill
  (cond
   ((listp arg) 0)
   ((eq arg '-) -2)
   (t (1- arg)))))</code></pre>
<p>and you try to copy the last line and insert it again,
it will be returned exactly as-is:</p>
<pre class="emacs-lisp"><code>   (t (1- arg)))))
</code></pre>
<p>While this is expected behaviour, it gravely messes with awesome tools like paredit.
As I’m in the habit—using the power of <a href="https://github.com/purcell/whole-line-or-region">whole-line-or-region</a>—of lazily copying with with <code>M-w</code> all the time,
this posits a problem.<a href="#fn7" class="footnote-ref" id="fnref7" role="doc-noteref"><sup>7</sup></a></p>
<p>The solution, thankfully, does not involve all that much code.
<a href="https://tony-zorman.com/posts/yanking.html">You can read about it here</a>.</p>
<h2 id="make-join-line-handle-comments-sanely">Make <code>join-line</code> handle comments sanely</h2>
<p>By default, the <code>join-line</code> function does not handle comments at all,
and is thus quite useless for a majority of cases</p>
<p><img class="pure-img" src="../images/join-line/join-line-comment.gif" alt="Original join-line behaviour with respect to comments."></p>
<p>However,
with a bit of <a href="https://en.wikipedia.org/wiki/Monkey_patch">monkey-patching</a>,
one can get a result that approximated a sane solution!
<a href="https://tony-zorman.com/posts/join-lines-comments.html">Here is the corresponding post for this</a>.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>I am aware of the futility of this—Reddit is almost certainly
going to be around longer than my personal site will. And yet,
this feels “more correct” in some way.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>This is a placeholder that’s often used when not wanting to
explicitly quantify over an argument.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>Though it’s still much smaller than whatever it is that WeeChat
auto-generates :)<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>Looking for an attachment is complicated insofar as there are some ways the regular expression might match,
which however <em>don’t</em> indicate that anything needs to be done.
The real code looks at this by observing text properties of the matches.
However, this is not important for what follows, so I simply omitted it.</p>
<p>If you’re interested:</p>
<pre class="emacs-lisp"><code>;; When the message mentions attachment...
(save-excursion
  (message-goto-body)
  ;; Limit search from reaching other possible
  ;; parts of the message
  (let ((search-limit
         (search-forward &quot;\n&lt;#&quot; nil t)))
    (message-goto-body)
    (cl-loop
     while (re-search-forward
             notmuch-mua-attachment-regexp
             search-limit t)
     ;; For every instance of the &quot;attachment&quot;
     ;; string found, examine the text
     ;; properties.  If the text has either a
     ;; `face' or `syntax-table' property then
     ;; it is quoted text and should *not*
     ;; cause the user to be asked about a
     ;; missing attachment.
     if (let ((props (text-properties-at
                      (match-beginning 0))))
          (not (or (memq 'syntax-table props)
                   (memq 'face props))))
     return t
     finally return nil)))</code></pre>
<p>Alternatively, check the source code of <code>notmuch-mua-attachment-check</code> directly.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>For whatever reason, when any character from the <code>0x80</code>–<code>0x9F</code> range is encountered
the “Meta character” <code>0x83</code> is inserted and the following character gets XORed with 32.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6"><p>Eshell’s own <code>cd=</code> command only keeps track of the last <code>n</code> directories without filtering or ranking anything.
I know about <a href="https://github.com/xuchunyang/eshell-z">eshell-z</a>,
but since I’m using zoxide within zsh anyways
it seems prudent to not depend on an additional package here.<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn7"><p>Of course, the <em>real problem</em> is my lack of discipline,
but I’m certainly not going to change my habits if I can instead change my editor around me!<a href="#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Understanding Weighted Colimits as Tensor Products of Modules</title>
    <link href="https://tony-zorman.com/posts/weighted-colimits.html" />
    <id>https://tony-zorman.com/posts/weighted-colimits.html</id>
    <published>2022-10-15T00:00:00Z</published>
    <updated>2022-10-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2022-10-15
      
      
        &thinsp;·&thinsp; last modified: 2023-03-13
      
      
        &thinsp;·&thinsp; <span title="3771 words">16 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'maths'." href="/tags/maths.html" rel="tag">maths</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>If you’ve been doing category theory for any amount of time, you’ll
probably have stumbled upon enriched category theory as a way of
expressing categorical ideas internal to some context other than
<strong>Set</strong>. Reading into it, you might have come across these foreign
sounding concepts like weighted (co)limits and wondered what that was
all about—and then got lost for a few days, trying to decipher what
<a href="http://www.tac.mta.ca/tac/reprints/articles/10/tr10abs.html">Kelly</a> is talking about and why symbols resembling tensor
products are suddenly being thrown around. At least that’s what
happened to me.</p>
<p>After scouring the internet for good resources, I found two really
enlightening blog posts: one by <a href="https://golem.ph.utexas.edu/category/2007/02/day_on_rcfts.html#c007723">Todd Trimble</a> and the
other by <a href="https://golem.ph.utexas.edu/category/2007/02/day_on_rcfts.html#c007688">John Baez</a>—and they’re too good not to share.
Plus, people always say that you don’t understand a concept unless you
can explain it to someone else, so here’s my shot at it!</p>
<!--more-->
<p>I will assume familiarity with basic notions of category theory (limits,
colimits, adjunctions, monoidal categories, …), as well as elementary
abstract algebra (in particular, rings and modules). If you’re not
comfortable with these and have a lot of time to kill, I recommend
<a href="https://math.jhu.edu/~eriehl/context.pdf">Category Theory in Context</a> by Emily Riehl for the former and
<a href="https://bookstore.ams.org/gsm-56/">A Course in Algebra</a> by Ernest Vinberg for the latter.</p>
<p>Really, it’s good if you have heard about enriched category theory
before, as this is where weighted colimits tend to naturally crop up a
lot; also because I can’t possibly do the topic justice in a single blog
post. I will still try, of course, but be warned. Even if you’re not
familiar with enriched categories, however, this post might still be of
interest. Weighted colimits do also appear in ordinary category theory,
so feel free to substitute <span class="math inline">\mathsf{Set}</span> for <span class="math inline">\mathcal{V}</span> whenever you
feel like it. On top of that, most of the <a href="#weighted-colimits">main
part</a> of the text doesn’t use enrichment at all.</p>
<p>Before we start I must note that—more-so than elsewhere—these are very
much not my own thoughts. I’m just retelling the story in order to
understand it better myself. Sources and resources for everything are
linked <a href="#resources">at the end</a>. The key insights come from the already
mentioned blog posts by <a href="https://golem.ph.utexas.edu/category/2007/02/day_on_rcfts.html#c007723">Trimble</a> and <a href="https://golem.ph.utexas.edu/category/2007/02/day_on_rcfts.html#c007688">Baez</a>,
as well as the accompanying (resulting) <a href="https://ncatlab.org/nlab/show/weighted+colimit">nLab
article</a>.</p>
<h2 id="enriched-category-theory">Enriched category theory</h2>
<p>Before diving into the gory details, enriched category theory is perhaps
best explained a bit more intuitively at first. In short, instead
ordinary categories—whose hom-<em>sets</em> are always sets—one studies
so-called <span class="math inline">\mathcal{V}</span>-categories, whose hom-<em>objects</em> are objects in
some “environmental” category <span class="math inline">\mathcal{V}</span>. This category is what
replaces <span class="math inline">\mathsf{Set}</span>, so it will usually be assumed to have some very
nice properties. For the purposes of this blog post, I will assume that
<span class="math inline">(\mathcal{V}, \otimes, 1)</span> is a (small) complete and cocomplete closed
symmetric monoidal category.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> If you don’t know what some of these
words mean, you can read that as “It’s an environment with enough
structure so that a large chunk of ordinary category theory makes sense
internal to it.”</p>
<p>In addition, I would also like to fix a <span class="math inline">\mathcal{V}</span>-category
<span class="math inline">\mathcal{C}</span> for the rest of this blog post. For the moment, you can
think of this like an ordinary category such that for any two objects
<span class="math inline">a</span> and <span class="math inline">b</span> in <span class="math inline">\mathcal{C}</span>, we have that <span class="math inline">\mathcal{C}(a, b) ≔
\mathrm{Hom}_{\mathcal{C}}(a, b)</span> is an object in <span class="math inline">\mathcal{V}</span>.
Naturally, all the usual axioms of a category—like associativity and
unitality of morphisms—ought to hold in this new setting; however,
expressing these laws is a little bit more involved now. The fact that
<span class="math inline">\mathcal{C}(a,b)</span> is an object in <span class="math inline">\mathcal{V}</span> means that it’s a
“black box”—we can’t peek into it anymore! Writing <span class="math inline">f \in
\mathcal{C}(a,b)</span> is no longer legal, so we somehow have to make do with
not talking about individual morphisms. As such, a little bit more care
has to be taken for the precise definition of an enriched category to
make sense.</p>
<p>Before we get to that, however, a few examples should do wonders for
seeing just how wide-spread the concept really is in mathematics.
Thankfully—lest the world explodes—categories enriched in <span class="math inline">\mathsf{Set}</span>
are exactly ordinary categories. An equally familiar example should be
<span class="math inline">\mathsf{vect}_k</span>: the category of finite-dimensional vector spaces over
a field <span class="math inline">k</span>. It is easy to verify that the linear maps between two
vector spaces are again a vector space, and hence <span class="math inline">\mathsf{vect}_k</span> is,
much like the category of sets, <em>enriched over itself</em>. So whenever you
do linear algebra, you’re in the setting of enriched category theory
already! Categories enriched over <span class="math inline">\mathsf{vect}_k</span>, usually called
<span class="math inline">k</span>-linear categories, are plentiful “in the wild”; for example,
representation theorists might know Tannakian categories, or the
Temperley–Lieb category.</p>
<p>Other examples of enriched categories include 2-categories<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> as those
enriched over <span class="math inline">\mathsf{Cat}</span>, and preadditive categories, which are
enriched over <span class="math inline">\mathsf{Ab}</span>. Last, but certainly not least, rings can
also be seen as categories; namely, they have just a single object
<span class="math inline">\star</span> and <span class="math inline">\mathrm{Hom}(\star,\star)</span> forms an abelian group—stay
tuned for more on this.</p>
<p>With all of these examples in mind, let us explore the technical
definition of a category enriched over <span class="math inline">\mathcal{V}</span>. Formally, our
fixed <span class="math inline">\mathcal{C}</span> consists of:</p>
<ul>
<li>A collection of objects <span class="math inline">\mathrm{ob}\, \mathcal{C}</span>.</li>
<li>For <span class="math inline">x, y \in \mathcal{C}</span>, a hom-object
<span class="math inline">\mathcal{C}(x, y) \in \mathcal{V}</span>.</li>
<li>For <span class="math inline">x, y, z \in \mathcal{C}</span>, a composition map in <span class="math inline">\mathcal{V}</span>:
<span class="math display">
  \circ_{x, y, z} \colon \mathcal{C}(y, z) \otimes \mathcal{C}(x, y)
                  \longrightarrow \mathcal{C}(x, z).
</span></li>
<li>For <span class="math inline">x \in \mathcal{C}</span> an identities map
<span class="math inline">e_x \colon 1 \longrightarrow \mathcal{C}(x,x)</span>.</li>
</ul>
<p>Further, this data has to satisfy appropriate associativity and
unitality conditions:</p>
<p><img class="pure-img" src="../images/weighted-colimits/enriched.png" alt="axioms for an enriched category"></p>
<p>In the above diagrams, <span class="math inline">\alpha</span>, <span class="math inline">\lambda</span>, and <span class="math inline">\rho</span> respectively
denote the associativity, left, and right unitality constraints of
<span class="math inline">\mathcal{V}</span>.</p>
<p>If these diagrams remind you of a <a href="https://ncatlab.org/nlab/show/monoidal+category">monoidal
category</a>, they absolutely should! Much like
you can think of ordinary categories as multi-object monoids, a decent
mental model for <span class="math inline">\mathcal{V}</span>-categories is to think of them as
multi-object monoidal categories.</p>
<h3 id="functors-and-natural-transformations">Functors and natural transformations</h3>
<p>We furthermore need analogues for functors and natural
transformations—they now also come with a <span class="math inline">\mathcal{V}</span>- prefix. The
functor laws get a bit more complicated, as we need to draw commutative
diagrams and can’t simply express this property in an equation like <span class="math inline">F(f
\circ g) = Ff \circ Fg</span> anymore—remember that we can’t talk about
individual arrows. However, most of the intuition one already has about
functors and natural transformations should carry over just fine. I
will leave the technical definitions of enriched functors and natural
transformations as exercises to the reader; they are relatively
straightforward to write down and not all that important for what
follows.</p>
<p>Thinking further, the upshot one will arrive at is that, in order to do
enriched category theory, we not only need analogues for functors and
natural transformations, but also for all the other basic notions of
ordinary category theory. Since limits and colimits are among the most
important constructions, people naturally started to think about how one
could express them in the enriched language—this is precisely what lead
to the development of weighted colimits!</p>
<p>One interesting thing I want to highlight about enriched functors of the
form <span class="math inline">\mathcal{C} \longrightarrow \mathcal{V}</span> is the induced arrow on
morphisms that they always come with; namely, such a functor <span class="math inline">F</span> induces
an assignment <span class="math inline">\mathcal{C}(a, b) \longrightarrow \mathcal{V}(F a, F b)</span>.
Because <span class="math inline">\mathcal{V}</span> is symmetric monoidal, we can use its tensor–hom
adjunction and rewrite the above to look more like an action:</p>
<p><span class="math display">
  \mathcal{C}(a, b) \otimes F a \longrightarrow F b.
</span></p>
<p>Likewise, a <span class="math inline">\mathcal{V}</span>-functor <span class="math inline">F \colon \mathcal{C}^{\mathrm{op}}
\longrightarrow \mathcal{V}</span> is equipped with an action from the other
side:</p>
<p><span class="math display">
  F b \otimes \mathcal{C}(a, b) \longrightarrow F a.
</span></p>
<p>This already frames functors as little more than generalised modules,
and we will explore this connection in more detail later on.</p>
<h2 id="copowers">Copowers</h2>
<p>One more important technical detail has to be covered before we get to
the fun stuff: copowers. The basic idea is that in any
ordinary—non-enriched—closed monoidal category <span class="math inline">(\mathcal{A},
\otimes_{\mathcal{A}}, 1_{\mathcal{A}})</span>, we have the tensor–hom
adjunction (also called <em>currying</em>) <span class="math inline">{-} \otimes b \,\dashv\, [b, {-}]</span>.
More explicitly, this means that there is a natural isomorphism</p>
<p><span class="math display">
  \mathcal{A}(a \otimes_{\mathcal{A}} b, c) \cong \mathcal{A}(a, [b, c]),
  \qquad \text{for } a, b, c \in \mathcal{A}.
</span></p>
<p>If we’re in an enriched setting, we want to somehow replace the tensor
product of the monoidal category with some action, say <span class="math inline">\cdot \colon
\mathcal{C} \times \mathcal{V} \longrightarrow \mathcal{C}</span>, while
retaining an analogue of the above isomorphism. As such, the <em>copower</em>
of <span class="math inline">c \in \mathcal{C}</span> <em>by</em> <span class="math inline">v \in \mathcal{V}</span> is an object <span class="math inline">c \cdot v
\in \mathcal{C}</span>, such that for all <span class="math inline">b \in \mathcal{C}</span>, there is a
natural isomorphism</p>
<p><span class="math display">
  \mathcal{C}(c \cdot v, b) \cong \mathcal{V}(v, \mathcal{C}(c, b)).
</span></p>
<p>Above I have slightly abused notation; <span class="math inline">\mathcal{V}({-}, {-})</span> now
denotes the <em>internal</em> hom of <span class="math inline">\mathcal{V}</span>, instead of the external
one.<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a> If <span class="math inline">\mathcal{V}</span> is clear from the context, one also often writes
<span class="math inline">[{-},{-}]</span>.</p>
<p>The best thing about copowers is their existence when it comes to
<span class="math inline">\mathsf{Set}</span> and ordinary categories. If <span class="math inline">\mathcal{A}</span> has
coproducts, there is a canonical copower <span class="math inline">\cdot \colon \mathsf{Set}
\times \mathcal{A} \longrightarrow \mathcal{A}</span>.<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a> For all <span class="math inline">X \in
\mathsf{Set}</span> and <span class="math inline">a \in \mathcal{A}</span>, it is given by</p>
<p><span class="math display">
  X \cdot a ≔     \coprod_{x \in X} 1_{\mathcal{A}} \otimes_{\mathcal{A}} a
            \cong \coprod_{x \in X} a.
</span></p>
<p>The fact that this is a copower follows from</p>
<p><span class="math display">
  \mathcal{A}(X \cdot a, b) = \mathcal{A}\left(\coprod_{x \in X} a, b\right)
  \cong \prod_{x \in X} \mathcal{A}(a, b) \cong \mathsf{Set}(X, \mathcal{A}(a, b)),
</span></p>
<p>for all <span class="math inline">b \in \mathcal{A}</span>. Because of their closeness to the tensor
product, people sometimes call copowers “tensors” and write them with
the same symbol as they write the tensor product.</p>
<h2 id="weighted-colimits">Weighted colimits</h2>
<p>Onto the main dish. The key idea is to reframe an ordinary colimit in
terms of “looking like a monoidal product”. The weighted colimit then
becomes something akin to the tensor product over a k-algebra <span class="math inline">R</span>. We
like rings and modules, so let’s explore this further.</p>
<p>To recap, when looking at bimodules <span class="math inline">A</span> and <span class="math inline">B</span> over some <span class="math inline">k</span>-algebra
(ring) <span class="math inline">R</span> we can define the tensor product of <span class="math inline">A</span> and <span class="math inline">B</span> over <span class="math inline">R</span>, in
symbols <span class="math inline">A \otimes_R B</span>, as the coequaliser</p>
<p><span class="math display">
  A \otimes_R B
  ≔ \mathrm{coeq} \left(
      A \otimes R \otimes B \rightrightarrows A \otimes B
    \right),
</span></p>
<p>where the two parallel arrows are induced by the left and right actions
<span class="math inline">\rhd \colon A \otimes R \longrightarrow A</span> and <span class="math inline">\lhd \colon R \otimes B
\longrightarrow B</span>, respectively.</p>
<p>For ease of notation, I will often write coequalisers like the above one
as</p>
<p><span class="math display">
  A \otimes R \otimes B \rightrightarrows A \otimes   B
                        \longrightarrow   A \otimes_R B.
                                                            \tag{1}
</span></p>
<p>Categorifying this notion, the ring <span class="math inline">R</span> can be seen as a one-object
category enriched over <span class="math inline">\mathsf{Ab}</span> with object <span class="math inline">1</span>. The
multiplication is recovered as function composition in <span class="math inline">R(1, 1)</span>, and
addition is given by the abelian structure. A right <span class="math inline">R</span>-module <span class="math inline">A</span> is
then an enriched functor <span class="math inline">A \colon R^{\mathrm{op}} \longrightarrow
\mathsf{Ab}</span> and similarly a left R-module is an enriched functor <span class="math inline">B
\colon R \longrightarrow \mathsf{Ab}</span>. Inserting the definition
discussed above, we have that <span class="math inline">A</span> consists of a single object <span class="math inline">A1</span> and a
single arrow <span class="math inline">A1 \otimes R(1, 1) \longrightarrow A1</span>. Likewise, we
obtain <span class="math inline">B1</span> and <span class="math inline">R(1,1) \otimes B1 \longrightarrow B1</span> in <span class="math inline">\mathcal{V}</span>.
Thus, we have induced maps</p>
<p><span class="math display">
    A1 \otimes R(1,1) \otimes B1 \rightrightarrows A1 \otimes B1.
</span></p>
<p>Let us forget about enrichment for a while and just study ordinary
categories now. The second observation we need is the well-known fact
that any colimit can be represented as a coequaliser. Suppose
<span class="math inline">\mathcal{D}</span> to be a cocomplete category . Given a functor <span class="math inline">F \colon
\mathcal{J} \longrightarrow \mathcal{D}</span> we can express its colimit as</p>
<p><span class="math display">
  \coprod_{a, b \in \mathcal{J}}
            \coprod_{f \in \mathcal{J}(a, b)} F a
  \rightrightarrows \coprod_{b \in \mathcal{J}} F b
  \longrightarrow   \mathrm{colim}_\mathcal{J} F.
</span></p>
<p>Note that we can use what we learned about (<span class="math inline">\mathsf{Set}</span>-valued)
copowers above and write <span class="math inline">\coprod_{f \in \mathcal{J}(a, b)} F a</span> as
<span class="math inline">\mathcal{J}(a, b) \cdot F a</span>, or even <span class="math inline">\mathcal{J}(a, b) \times F a</span>,
as <span class="math inline">\mathcal{J}(a,b)</span> is a set in this case. Behold:</p>
<p><span class="math display">
  \coprod_{a, b \in \mathcal{J}} \mathcal{J}(a,b) \times F a
  \rightrightarrows \coprod_{b \in \mathcal{J}} F b
  \longrightarrow \mathrm{colim}_\mathcal{J} F.
                                                                \tag{2}
</span></p>
<p>What’s left is to define the two parallel arrows.<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a></p>
<ol type="1">
<li><p>One arrow is induced by the “projection” <span class="math inline">\pi_2 \colon
\mathcal{J}(a, b) \times F a \longrightarrow F a</span>. Note that
<span class="math inline">\mathcal{J}(a, b) \times F a</span> is really a copower, so the
existence of such an arrow is not immediately clear. Starting with
the unique map <span class="math inline">! \colon \mathcal{J}(a, b) \longrightarrow
\{\star\}</span> to the terminal object, we apply it to the functor <span class="math inline">{-}
\times F j \colon \mathsf{Set} \longrightarrow \mathcal{C}</span>, in
order to obtain</p>
<p><span class="math display">
\pi_2 \!≔\; ! \times F a \colon \mathcal{J}(a,b) \times F a \longrightarrow \{\star\} \times F a \cong F a.
</span></p></li>
<li><p>The other arrow is induced by a collection of actions of
<span class="math inline">\mathcal{J}</span> on <span class="math inline">F</span>, indexed by arrows <span class="math inline">f \colon a \longrightarrow
b</span> in <span class="math inline">\mathcal{J}</span>; i.e.,</p>
<p><span class="math display">
  \begin{aligned}
    (\mathcal{J}(a,b) \times F a \longrightarrow F b)
    &amp;= \left( \coprod_{f \in \mathcal{J}(a,b)} F a \longrightarrow F b \right) \\
    &amp;= \langle Ff \colon Fa \longrightarrow F b \rangle_{f \in \mathcal{J}(a,b)}.
  \end{aligned}
</span></p></li>
</ol>
<p>So that’s the story with expressing colimits as coequalisers. We now
need to completely reframe this in terms of actions. For the second
arrow we are already done: <span class="math inline">F</span> can be seen as a left
<span class="math inline">\mathcal{J}</span>-module.</p>
<p>Using the symmetry of the Cartesian product <span class="math inline">\times</span> of sets, the arrow
<span class="math inline">\mathcal{J}(a, b) \longrightarrow \{\star\}</span> can be reinterpreted as
the components of a right action of <span class="math inline">\mathcal{J}</span> on the terminal
functor <span class="math inline">\mathbb{T} \colon \mathcal{J} \longrightarrow \mathsf{Set}</span>
that sends every object to the one-element set <span class="math inline">\{\star\}</span>:</p>
<p><span class="math display">
  (\mathbb{T}b \times \mathcal{J}(a,b) \longrightarrow \mathbb{T}a)
  =     (\{\star \} \times \mathcal{J}(a,b) \longrightarrow \{\star\})
  \cong (\mathcal{J}(a,b) \longrightarrow \{\star\}).
</span></p>
<p>Putting these two observations together, we really have two induced
arrows, each with type signature</p>
<p><span class="math display">
  \mathbb{T} b \times \mathcal{J}(a, b) \times F a \longrightarrow \mathbb{T} a \times F a.
</span></p>
<p>Inserting these into Equation <span class="math inline">(2)</span>, this yields</p>
<p><span class="math display">
  \coprod_{a, b \in \mathcal{J}} \mathcal{J}(a,b) \times F a
    \cong             \coprod_{a, b \in \mathcal{J}} \mathbb{T} b \times \mathcal{J}(a, b) \times F a
    \rightrightarrows \coprod_{a \in \mathcal{J}} \mathbb{T} a \times F a
    \cong             \coprod_{a \in \mathcal{J}} F a.
</span></p>
<p>This is exactly the way the tensor product of bimodules is defined in
Equation <span class="math inline">(1)</span>, hence it is tempting to write the resulting coequaliser
as <span class="math inline">\mathbb{T} \otimes_{\mathcal{J}} F</span>. As such, a colimit of a
functor <span class="math inline">F</span> over <span class="math inline">\mathcal{J}</span> can be seen as a tensor product of
functors with the terminal functor. Now, the terminal functor is not
very interesting—what if we replace it with something more complicated?
Well, that’s exactly the point where weighted colimits come into play!
Using a <em>weight</em> <span class="math inline">W</span> instead of <span class="math inline">\mathbb{T}</span>, we would end up with
something like</p>
<p><span class="math display">
  \coprod_{a, b \in \mathcal{J}} W b \times \mathcal{J}(a, b) \times F a \rightrightarrows \coprod_{a \in \mathcal{J}} W a \times F a \longrightarrow W \otimes_{\mathcal{J}} F.
</span></p>
<p>Because this looks like a tensor product—and it’s universal, due to it
being a colimit—it should also support some form of currying: given an
arrow <span class="math inline">W \otimes_{\mathcal{J}} F \longrightarrow c</span>, for an object <span class="math inline">c
\in \mathcal{C}</span>, we should be able to obtain a map <span class="math inline">W \Longrightarrow
\mathcal{C}(F, c)</span>. Now’s your time to guess what exactly a weighted
colimit will be!</p>
<h3 id="definition">Definition</h3>
<p>Still in the non-enriched setting, let me now give you the formal
definition of a weighted colimit. Suppose <span class="math inline">\mathcal{J}</span> to be a small
category. Let <span class="math inline">W \colon \mathcal{J}^{\mathrm{op}} \longrightarrow
\mathsf{Set}</span> be a presheaf—the <em>weight</em>—and suppose we have a functor
<span class="math inline">F \colon \mathcal{J} \longrightarrow \mathcal{A}</span>. The <em><span class="math inline">W</span>-weighted
colimit of <span class="math inline">F</span></em> comprises an object <span class="math inline">W \otimes_{\mathcal{J}} F \in
\mathcal{A}</span>, equipped with a natural (in <span class="math inline">a \in \mathcal{A}</span>)
isomorphism</p>
<p><span class="math display">
  \mathcal{A}(W \otimes_{\mathcal{J}} F, a)
  \cong
  [\mathcal{J}^{\mathrm{op}}, \mathsf{Set}] (W, \mathcal{A}(F, a)).
</span></p>
<p>Note that, by the <a href="https://ncatlab.org/nlab/show/Yoneda+lemma">Yoneda lemma</a>, the above isomorphism is
uniquely determined by a natural transformation <span class="math inline">W \Longrightarrow
\mathcal{A}(F, W \otimes_{\mathcal{J}} F)</span>, induced by the identity on
<span class="math inline">W \otimes_{\mathcal{J}} F</span>. As promised, this is exactly the
representation we arrived at above.</p>
<p>A pair of an object <span class="math inline">c \in \mathcal{A}</span> and a natural transformation <span class="math inline">W
\Longrightarrow \mathcal{A}(F, c)</span> on their own; i.e., without the
universal property, is what one would normally call a <em><span class="math inline">W</span>-weighted
cocone</em>.</p>
<h3 id="enriched-weighted-colimits">Enriched weighted colimits</h3>
<p>The enriched definition is now exactly the same! If <span class="math inline">\mathcal{J}</span> is a
small <span class="math inline">\mathcal{V}</span>-category and we have <span class="math inline">\mathcal{V}</span>-functors <span class="math inline">F
\colon \mathcal{J} \longrightarrow \mathcal{C}</span> and <span class="math inline">W \colon
\mathcal{J}^{\mathrm{op}} \longrightarrow \mathcal{V}</span>, then we can
define the <em><span class="math inline">W</span>-weighted colimit of <span class="math inline">F</span></em> as an object <span class="math inline">W
\otimes_{\mathcal{J}} F \in \mathcal{C}</span>, equipped with a
<span class="math inline">\mathcal{V}</span>-natural (in <span class="math inline">c \in \mathcal{C}</span>) isomorphism</p>
<p><span class="math display">
  \mathcal{C}(W \otimes_{\mathcal{J}} F, c)
  \cong
  [\mathcal{J}^{\mathrm{op}}, \mathcal{V}] (W {-}, \mathcal{C}(F {-}, c)).
</span></p>
<p>This is the power of the formalism we developed—the definition extends
in a straightforward way to the enriched setting. This may now be used
to great effect: among other things weighted colimits can be used to
define the right notion of enriched coend.</p>
<h3 id="examples">Examples</h3>
<p>It’s probably about time for some examples. For the first two, let us
focus on cocones only; not thinking about the universal property at
first is perhaps a little easier to understand—at least it was for me.
I learned these from Richard Garner during <a href="https://conferences.leeds.ac.uk/bcqt2022/">BCQT 2022</a>.</p>
<ol type="1">
<li><p>Let our diagram category have two objects and one non-trivial
morphism; i.e., <span class="math inline">\mathcal{J} ≔ \{ \varphi \colon a \longrightarrow b
\}</span>. Further, assume that the weight <span class="math inline">W</span> picks out<a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a> the unique
arrow <span class="math inline">\{ 0, 1 \} \longrightarrow \{ 1 \}</span> in <span class="math inline">\mathsf{Set}</span>.
Suppose that the functor <span class="math inline">F \colon \mathcal{J} \longrightarrow
\mathcal{C}</span> sends <span class="math inline">a, b \in \mathcal{J}</span> to <span class="math inline">x, y \in \mathcal{C}</span>
and <span class="math inline">\varphi</span> to <span class="math inline">\theta \colon x \longrightarrow y</span>.</p>
<p>Again by the Yoneda lemma we have that a cocone is given by a natural
transformation <span class="math inline">W \Longrightarrow \mathcal{C}(F, c)</span>. In this
restricted setting, an arrow <span class="math inline">Wa \longrightarrow \mathcal{A}(Fb, c)</span>
just picks out two morphisms. Thus, the whole thing amounts to the
commutativity of the following diagram:</p>
<div style="text-align:center;">
<p><img class="pure-img" src="../images/weighted-colimits/example-1.png" alt="necessary commutative diagram"></p>
</div>
<p>In more plain language, the following equation must hold:</p>
<p><span class="math display">
  (x \xrightarrow{\;\;\theta\;\;} y \xrightarrow{\;\;g\;\;} c)
  = (x \xrightarrow{\;\;\theta\;\;} y \xrightarrow{\;\;f\;\;} c).
</span></p></li>
<li><p>A slightly more complicated example is the following. Assume again
that <span class="math inline">\mathcal{J} = \{ \varphi \colon a \longrightarrow b \}</span> as
above, only this time our choice of enrichment is not <span class="math inline">\mathsf{Set}</span>,
but <span class="math inline">\mathsf{Cat}</span>. This means that the weight <span class="math inline">W</span> is now a functor
from <span class="math inline">\mathcal{A}^{\mathrm{op}}</span> to <span class="math inline">\mathsf{Cat}</span>. Suppose it picks
out the arrow</p>
<p><span class="math display">
\{ 0 \;\; 1 \} \hookrightarrow \{ 0 \cong 1 \},
</span></p>
<p>where the source an target are understood to be categories. In this
setting, a weighted cocone becomes something 2-categorical. We still
pick out arrows <span class="math inline">f</span> and <span class="math inline">g</span>, but since the category we are looking at
contains a non-trivial isomorphism, the commutative diagram also
becomes more complicated. Namely, we required the commutativity of</p>
<div style="text-align:center;">
<p><img class="pure-img" src="../images/weighted-colimits/example-2.png" alt="necessary commutative diagram"></p>
</div>
<p>Instead of the requiring <span class="math inline">\theta \circ g</span> to <em>equal</em> <span class="math inline">\theta \circ
f</span>, we now only require the existence of an invertible 2-cell that
mediates between the two.</p></li>
<li><p>A subcategory <span class="math inline">\mathcal{D}</span> of <span class="math inline">\mathcal{E}</span> is said to be <em>dense</em> in
<span class="math inline">\mathcal{E}</span> if we can, in some sense, approximate the objects of
<span class="math inline">\mathcal{E}</span> well enough with objects in <span class="math inline">\mathcal{D}</span><a href="#fn7" class="footnote-ref" id="fnref7" role="doc-noteref"><sup>7</sup></a> (think
of the density of <span class="math inline">\mathbb{Q}</span> inside <span class="math inline">\mathbb{R}</span>). Dense
categories are nice because they often tell us a lot about their
super categories and are sometimes easier to reason about. For
example, the category of finite-dimensional (left-)comodules of any
(possibly infinite-dimen­sio­nal) Hopf algebra is dense
inside the category of all comodules, which makes them much easier to
work with than modules.</p>
<p>Formally, <span class="math inline">\mathcal{D}</span> is dense in <span class="math inline">\mathcal{E}</span> if the restricted
Yoneda embedding along the inclusion functor <span class="math inline">\iota \colon
\mathcal{D} \hookrightarrow \mathcal{E}</span></p>
<p><span class="math display">
  \mathcal{E} \longrightarrow [\mathcal{E}^{\mathrm{op}}, \mathsf{Set}]
    \xrightarrow{\;[\iota, \mathsf{Set}]\;} [\mathcal{D}^{\mathrm{op}}, \mathsf{Set}]
</span></p>
<p>is still fully faithful. Another way of saying this is that every
object <span class="math inline">e \in \mathcal{E}</span> is the <span class="math inline">\mathcal{E}(\iota, e)</span>-weighted
colimit of <span class="math inline">\iota</span>. Indeed, the isomorphism we have for a weighted
colimit specialised to our situation looks like</p>
<p><span class="math display">
 \mathcal{E}(e, a) \cong [\mathcal{D}^{\mathrm{op}}, \mathsf{Set}] (\mathcal{E}(\iota, e), \mathcal{E}(\iota, a)),
</span></p>
<p>for all <span class="math inline">a \in \mathcal{E}</span>, which is exactly what it means for the
above arrow to be fully faithful.</p></li>
</ol>
<p><em>Exercise</em>: Try to find a weight <span class="math inline">W</span> such that a <span class="math inline">W</span>-weighted cocone
recovers the normal, unweighted, notion.</p>
<p><em>Exercise</em>: As you can imagine 1. and 2. can be used to produce all
kinds of relations between <span class="math inline">f</span> and <span class="math inline">g</span>. As such, prove the following
statements:</p>
<ul>
<li><p>A variant of 1.: in the case of the weight being <span class="math inline">\{0, 1\}
\xrightarrow{\;\;\mathrm{id}\;\;} \{0, 1\}</span>, we obtain a
not-necessarily-commutative diagram.</p></li>
<li><p>A variant of 2.: in the case that the weight is <span class="math inline">\{ 0 \}
\hookrightarrow \{ 0 \longrightarrow 1 \}</span> (i.e., we only have an
arrow between 0 and 1 and not necessarily an isomorphism), we get an
ordinary (non-invertible) 2-cell as the weighted cocone.</p></li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>And that’s it! I’ve found this intuition very helpful in trying to wrap
my head around these concepts—hopefully other people will too. As a
parting gift, I leave you with some more things to think about.</p>
<p>First, one of the most important examples of weighted colimits—and
coends, of course—is the <a href="https://ncatlab.org/nlab/show/tensor+product+of+functors">tensor product of
functors</a>. If you ever wanted to be a
<a href="https://ncatlab.org/nlab/show/co-Yoneda+lemma">ninja</a>, now is the time! It’s a fun operation to think
about and play around with, and I would invite you to do just that.</p>
<p>Lastly, the category of weights <span class="math inline">[\mathcal{J}^{\mathrm{op}},
\mathcal{V}]</span> is actually very special: it is the free cocompletion of
<span class="math inline">\mathcal{J}</span>. Every functor <span class="math inline">G \colon \mathcal{J} \longrightarrow
\mathcal{A}</span> extends uniquely (up to unique isomorphism) to a
cocontinuous functor <span class="math inline">[\mathcal{J}^{\mathrm{op}}, \mathcal{V}]</span> to
<span class="math inline">\mathcal{A}</span> by the assignment <span class="math inline">W \mapsto W \otimes_{\mathcal{J}} G</span>;
note the tensor product of functors!.</p>
<h2 id="resources">(Re)sources</h2>
<ul>
<li><p>Monoidal Category Theory:</p>
<ul>
<li><p>Saunders Mac Lane: “Natural associativity and commutativity”.
In: Rice Univ. Stud. 49.4 (1963), pp. 28–46. issn: 0035-4996.</p></li>
<li><p>Pavel Etingof, Shlomo Gelaki, Dmitri Nikshych, and Victor Ostrik:
“Tensor categories”. In: Vol. 205. Mathematical Surveys and
Monographs. American Mathematical Society, Providence, RI, 2015,
pp. xvi+343.</p></li>
<li><p><a href="https://ncatlab.org/nlab/show/monoidal+category">nLab: monoidal category</a></p></li>
</ul></li>
<li><p>Enriched Category Theory:</p>
<ul>
<li><p>Max Kelly: “Basic concepts of enriched category theory”. In: London
Math. Soc. Lec. Note Series 64, Cambridge Univ. Press 1982, 245
pp. (ISBN:9780521287029).</p>
<p>Republished as: Reprints in Theory and Applications of Categories,
No. 10 (2005) pp. 1-136 (<a href="http://www.tac.mta.ca/tac/reprints/articles/10/tr10abs.html">link</a>)</p></li>
<li><p><a href="https://ncatlab.org/nlab/show/enriched+category">nLab: enriched category</a></p></li>
</ul></li>
<li><p>Copowers:</p>
<ul>
<li><a href="https://ncatlab.org/nlab/show/copower">nlab: copower</a></li>
</ul></li>
<li><p>Weighted Colimits:</p>
<ul>
<li><p><a href="https://golem.ph.utexas.edu/category/2007/02/day_on_rcfts.html#c007723">Todd Trimble on the n-Category Café</a></p></li>
<li><p><a href="https://golem.ph.utexas.edu/category/2007/02/day_on_rcfts.html#c007688">John Baez on the n-Category Café</a></p></li>
<li><p><a href="https://ncatlab.org/nlab/show/weighted+colimit">nLab: weighted colimit</a></p></li>
<li><p>Richard Garner: Bicategories; lecture series at <a href="https://conferences.leeds.ac.uk/bcqt2022/">BCQT 2022, Leeds</a>.</p></li>
<li><p>Emily Riehl: “Weighted Limits and Colimits”; <a href="https://math.jhu.edu/~eriehl/weighted.pdf">lecture notes</a>.</p></li>
</ul></li>
</ul>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>This is also sometimes called a <em>cosmos</em>.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>In the strict sense.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>Do remember that <span class="math inline">\mathcal{C}(a,b)</span> is an object in <span class="math inline">\mathcal{V}</span> now!<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>If the category <span class="math inline">\mathcal{A}</span> is locally small. I will ignore
those kinds of technicalities for the purposes of this post.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>I still mostly follow Trimble and the nLab here. A more explicit
description—in the case of limits—is given, for example, in
Riehl’s <a href="https://math.jhu.edu/~eriehl/context.pdf">Category Theory in Context</a>, Theorem 3.2.13.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6"><p>By sending <span class="math inline">a</span> to <span class="math inline">\{0, 1\}</span>, <span class="math inline">b</span> to <span class="math inline">\{1\}</span>, and <span class="math inline">\varphi</span> to the
arrow <span class="math inline">\{0, 1\} \longrightarrow \{1\}</span>, which exists because
<span class="math inline">\{1\}</span> is the terminal set.<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn7"><p>{-} These things are actually all other the place: for example,
the Yoneda embedding itself is dense if the category is
essentially small. Further, if you like higher category
theory, you will appreciate that the simplex category being
dense in <span class="math inline">\mathsf{Cat}</span> immediately follows from the fact
that the nerve functor from <span class="math inline">\mathsf{Cat}</span> to <span class="math inline">\mathsf{sSet}</span>
is fully faithful.<a href="#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>XMonad Module Showcase: X.A.TopicSpace</title>
    <link href="https://tony-zorman.com/posts/topic-spaces.html" />
    <id>https://tony-zorman.com/posts/topic-spaces.html</id>
    <published>2022-09-11T00:00:00Z</published>
    <updated>2022-09-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2022-09-11
      
      
        &thinsp;·&thinsp; last modified: 2023-02-17
      
      
        &thinsp;·&thinsp; <span title="1309 words">6 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'haskell'." href="/tags/haskell.html" rel="tag">haskell</a>, <a title="All pages tagged 'xmonad'." href="/tags/xmonad.html" rel="tag">xmonad</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>One of my favourite—and most used—modules is <code>XMonad.​Actions.​TopicSpace</code>.
However, it seems relatively unknown among the general XMonad community.
I fear this is due to the fact that the module is quite old and formerly
had a rather high barrier to entry. Despite having been given shiny
<a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Actions-TopicSpace.html">new documentation</a>, lots of people probably did not bother
revisiting it and thus still don’t really understand why they might be
interested in using topics instead of workspaces. Time to change that!</p>
<!--more-->
<h2 id="introduction">Introduction</h2>
<p>First, this post is not to be seen as a tutorial on <code>X.A.TopicSpace</code>, but
much rather as a showcase of how its functionality could be used day to
day. If you like what you see, perhaps check out the
<a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Actions-TopicSpace.html">docs</a> and give it a spin yourself! I have already written
an introduction to the module in the post about my <a href="./my-phd-workflow.html">research workflow</a>:</p>
<blockquote>
<p>XMonad has a module called TopicSpace, which upgrades the X11
workspace—virtual desktop—concept to so-called topics. These are
workspaces with a “theme” associated to them; for example, I have a
topic for every project that I’m currently working on. This results
in a clean separation of concerns. Plus, I always know where my
windows are!</p>
<p>Every topic has a directory and a “startup hook”, firing when the
topic is switched to and empty, associated to it. While most
convenient for programming related tasks—e.g., spawn <code>ghcid</code> in the
relevant directory or automatically build and open this website—it’s
also quite convenient for mathematical projects.</p>
<p>I have set up special keybindings to bring up an Emacs session in the
topic directory, or spawn a terminal there. Switching to topics is
done fuzzily via the XMonad prompt, which means I only have to type a
few characters to get to my destination. This makes it feasible to
have 30 topics, instead of the usual 9 or so, in the first place. As
a result, it’s rather fast to go from thinking about a certain problem
to working on it.</p>
</blockquote>
<p>At a glance, this probably does not sound very impressive—so one can
have a directory and some function associated to a workspace (hereafter
also called “topic”), big deal. However, we will see that with a bit of
creativity this can be used to great effect.</p>
<h2 id="examples">Examples</h2>
<h3 id="basic-topics">Basic topics</h3>
<p>The most obvious application of all of this is to have workspaces that
do one and only one thing. For example, I have a topic dedicated to
connecting to a VPN, should the need arise. Naturally, I automatically
want to execute <code>openvpn</code> and pick a random server whenever I happen to
enter that workspace and it’s empty (i.e., <code>openvpn</code> is not already
running).</p>
<p>More such use cases include having a topic dedicated to my RSS feed
reader, instant messaging, or IRC. Since I only show workspaces with
windows on them in xmobar, I can just glance at my status bar to find
out whether I currently have, for example, IRC open. No additional
program for checking the status of things necessary! Obviously, this
<em>modus operandi</em> takes a bit of discipline to uphold over the course of
the day, but I find that such a separation of concerns greatly reduces
mental load regarding what’s currently happening on my computer.
Definitely worth it.</p>
<p>In terms of code, this—as well as the following examples—heavily use the
<a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Util-Run.html#g:EDSL">new interface</a> to XMonad.Util.Run, which allows one to
spawn processes in a declarative and compositional way; I’ve <a href="./calling-emacs-from-xmonad.html">written
about this</a> in another post. For example, my RSS topic is
specified thusly:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- import XMonad.Actions.TopicSpace (inHome)</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- import XMonad.Util.Run</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  , inHome <span class="st">&quot;7:RSS&quot;</span> <span class="op">$</span> proc <span class="op">$</span> inEditor</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>                        <span class="op">&gt;-&gt;</span> setFrameName <span class="st">&quot;elfeed&quot;</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>                        <span class="op">&gt;-&gt;</span> execute (elispFun <span class="st">&quot;elfeed&quot;</span>)</span></code></pre></div>
<p>Here, <code>inHome</code> is a little helper function that takes a topic name and
an action, and creates a new topic with <code>$HOME</code> as its associated
directory.</p>
<p>You can find all of my topics (and there are a lot of them)
<a href="https://gitlab.com/slotThe/dotfiles/-/blob/master/xmonad/.config/xmonad/src/xmonad.hs#L219-L265">here</a>.</p>
<h3 id="spawning-everything-in-the-topic-directory">Spawning <em>everything</em> in the topic directory</h3>
<p>More generally, programming projects in the same language almost always
require me to open the same set of standard tools, so it’s extremely
convenient to directly spawn them upon first visit. This allows for
very little friction before starting to work on whatever I wanted to
work on.</p>
<p>For example, I want to open Emacs and <a href="https://github.com/ndmitchell/ghcid">ghcid</a> in every Haskell project
of mine—so why not automate this? Using what X.U.Run gives us, we can
quickly throw together a function that executes the given instruction
inside of a terminal:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- import XMonad.Actions.TopicSpace (currentTopicDir)</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- 'topicConfig' is my personal topic configuration.</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="co">-- | Execute a program in the topic directory (inside a terminal).</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="ot">executeInTopic ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">X</span> ()</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>executeInTopic p <span class="ot">=</span> proc <span class="op">$</span> (termInDir <span class="op">&gt;-$</span> currentTopicDir topicConfig)</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>                      <span class="op">&gt;-&gt;</span> execute p</span></code></pre></div>
<p>Similar functions can be created for spawning the terminal and editor:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- Whatever you're looking for, it's probably in X.A.TopicSpace</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- or X.U.Run.</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="co">-- | Spawn terminal in topic directory.</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="ot">spawnTermInTopic ::</span> <span class="dt">X</span> ()</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>spawnTermInTopic <span class="ot">=</span> proc <span class="op">$</span> termInDir <span class="op">&gt;-$</span> currentTopicDir topicConfig</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="co">-- | Spawn editor in the current topic directory.</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="ot">spawnEditorInTopic ::</span> <span class="dt">X</span> ()</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>spawnEditorInTopic <span class="ot">=</span> proc <span class="op">$</span> inEditor <span class="op">&gt;-$</span> currentTopicDir topicConfig</span></code></pre></div>
<p>Check the documentation of <a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Util-Run.html#g:EDSL">XMonad.Util.Run</a> to see how <code>inEditor</code> and
<code>termInDir</code> are defined and may be customised.</p>
<p>In my mathematical and other work-adjacent projects I keep it pretty
simple; an editor there is mostly sufficient.</p>
<p><img class="pure-img" src="../images/phd-workflow/topics.gif" alt="Navigating to an empty topic, Emacs pops up"></p>
<p>We can also get a little bit more fancy. Since the topic action is just
a general <code>X</code> action, we can really do anything we want in there. In
addition to spawning programs, all of my Haskell projects should default
to the <code>Hacking</code><a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> layout:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ot">spawnHaskell ::</span> <span class="dt">X</span> ()</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>spawnHaskell <span class="ot">=</span> sendMessage (<span class="dt">JumpToLayout</span> <span class="st">&quot;Hacking&quot;</span>)</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>            <span class="op">*&gt;</span> spawnEditorInTopic</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>            <span class="op">*&gt;</span> executeInTopic <span class="st">&quot;ghcid&quot;</span></span></code></pre></div>
<p>And Voilà, we can now attach this action to all the topics that we want!</p>
<p>Note that the <code>*&gt;</code> operator is—in this case—just the sequencing of
actions. If you’re more comfortable with <code>do</code> notation, you can also
write the above as</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ot">spawnHaskell ::</span> <span class="dt">X</span> ()</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>spawnHaskell <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>  sendMessage (<span class="dt">JumpToLayout</span> <span class="st">&quot;Hacking&quot;</span>)</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>  spawnEditorInTopic</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>  executeInTopic <span class="st">&quot;ghcid&quot;</span></span></code></pre></div>
<p>Furthermore, since the associated directory for a topic can easily be
made <code>$HOME</code> by default (as we’ve seen, <code>X.A.TopicSpace</code> even exports
the <code>inHome</code> function), spawning programs in certain topics can easily
be made to replace the default keybindings!</p>
<p>For the sake of completeness, I will showcase one slightly more
complicated example. My main shell environment is <code>eshell</code> and getting
sane behaviour there presents one with a few more obstacles than
<code>spawnTermInTopic</code> did. It also uses <code>inProgram</code> instead of <code>inEditor</code>,
allowing access to a different instance of the Emacs server.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- | Spawn an eshell frame in the current topic directory.</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="ot">spawnEshellInTopic ::</span> <span class="dt">X</span> ()</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>spawnEshellInTopic <span class="ot">=</span> currentTopicDir topicConfig <span class="op">&gt;&gt;=</span> \dir <span class="ot">-&gt;</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>  proc <span class="op">$</span> inProgram <span class="st">&quot;emacsclient -a '' -c -s eshell&quot;</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>     <span class="op">&gt;-&gt;</span> execute (progn [ <span class="st">&quot;eshell&quot;</span> <span class="op">&lt;&gt;</span> quote <span class="st">&quot;new-shell&quot;</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>                        , <span class="st">&quot;eshell/cd&quot;</span> <span class="op">&lt;&gt;</span> asString dir</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>                        , <span class="st">&quot;eshell/clear-scrollback&quot;</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>                        , <span class="st">&quot;eshell-send-input&quot;</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>                        ])</span></code></pre></div>
<p>All in all, we have something that looks a little bit like this:</p>
<p><img class="pure-img" src="../images/topic-space/haskell-topic.gif" alt="Switching to a Haskell topic, then using project.el to navigate the project"></p>
<h3 id="testing-this-website">Testing this website</h3>
<p>Much in the same vein as my Haskell topics, I find the <code>website</code> topic
to be extremely handy—you can probably guess what it’s used for. Its
associated function <code>spawnWebsite</code> switches to the “Tall” layout, spawns
an Emacs frame in the topic directory, builds the website, and opens a
browser window pointing to the local copy:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ot">spawnWebsite ::</span> <span class="dt">X</span> ()</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>spawnWebsite <span class="ot">=</span> switchToLayout <span class="st">&quot;Tall&quot;</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>            <span class="op">*&gt;</span> spawnEditorInTopic</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>            <span class="op">*&gt;</span> executeInTopic <span class="st">&quot;hakyll-build.sh --hold&quot;</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>            <span class="op">*&gt;</span> spawn <span class="st">&quot;browser-new-window.sh localhost:8000&quot;</span></span></code></pre></div>
<p>The whole thing looks like this:</p>
<p><img class="pure-img" src="../images/topic-space/website.gif" alt="Switching to an empty topic; various things automatically start up"></p>
<h2 id="conclusion">Conclusion</h2>
<p>Hopefully these examples have convinced you to give <code>X.A.TopicSpace</code> a spin;
perhaps you’ve even gotten some ideas of your own you’d like to try out.
Although conceptually very simple, the module can be used in a variety
of ways to automate boring tasks just that tiny bit more—definitely a
win in my book!</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>In case you are interested:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>hacking</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=</span> renamed [<span class="dt">Replace</span> <span class="st">&quot;Hacking&quot;</span>]</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  <span class="op">.</span> limitWindows <span class="dv">3</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">.</span> magnify <span class="fl">1.3</span> (<span class="dt">NoMaster</span> <span class="dv">3</span>) <span class="dt">True</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>  <span class="op">$</span> <span class="dt">ResizableTall</span> <span class="dv">1</span> (<span class="dv">3</span> <span class="op">%</span> <span class="dv">100</span>) (<span class="dv">13</span> <span class="op">%</span> <span class="dv">25</span>) []</span></code></pre></div>
<p>As the rest of my dotfiles, it’s available
<a href="https://gitlab.com/slotThe/dotfiles/-/blob/master/xmonad/.config/xmonad/src/xmonad.hs#L341">here</a>.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Rapidly Capture Ideas with XMonad and Emacs</title>
    <link href="https://tony-zorman.com/posts/xmonad-and-org-mode.html" />
    <id>https://tony-zorman.com/posts/xmonad-and-org-mode.html</id>
    <published>2022-08-27T00:00:00Z</published>
    <updated>2022-08-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2022-08-27
      
      
        &thinsp;·&thinsp; last modified: 2023-03-07
      
      
        &thinsp;·&thinsp; <span title="656 words">3 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>, <a title="All pages tagged 'xmonad'." href="/tags/xmonad.html" rel="tag">xmonad</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->


<div>
  <p>As I’ve said before, basically my entire digital life happens in either
<a href="https://www.gnu.org/software/emacs/">Emacs</a> or <a href="https://xmonad.org/">XMonad</a>. Thus, a lot of time spent on my setup either goes
towards working on the two configurations separately, or—as we’ll do
today—bringing them ever closed together.</p>
<p>Specifically, I want to showcase a new<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> XMonad module:
<a href="https://xmonad.github.io/xmonad-docs/xmonad-contrib/XMonad-Prompt-OrgMode.html">XMonad.​Prompt.​Org­Mode</a>. Building on top of XMonad’s prompt—which works
much like <a href="https://tools.suckless.org/dmenu/">dmenu</a>—it is designed to rapidly capture thoughts and ideas
whenever inspiration strikes and, importantly, to do so without
disrupting one’s current workflow. The module recently got support for
Org <a href="https://orgmode.org/manual/Priorities.html">priorities</a>, so I figured this was as good an excuse as
any to talk about it.</p>
<!--more-->
<h3 id="motivation">Motivation</h3>
<p>One theme in the post about my <a href="./my-phd-workflow.html">research workflow</a> was how it’s possible
to use org-mode (with all of its appendages, like <a href="https://www.orgroam.com/">org-roam</a>) to
organise one’s thoughts. <code>XMonad.Prompt.OrgMode</code> was created as yet
another link in that chain. Unlike when writing tiny <a href="./calling-emacs-from-xmonad.html">Emacs Lisp
scripts in XMonad</a>, this does not involve any
custom elisp code one has to run; all of it is taken care of by the
module itself.</p>
<p>The upshot of all of this is a tool to quickly and unobtrusively jot
down an idea—quiet the monkey mind—and then get back to work straight
away. For me, having something like this is very important, lest I get
distracted by some thought about another project and spend the next hour
or so working on that instead of doing what I was actually supposed to
do. Having the idea written down in a known place—perhaps even with an
automatic reminder in my <a href="https://orgmode.org/manual/Agenda-Views.html">agenda</a>—helps me get rid of that creeping
anxiety that I’m forgetting things left and right.</p>
<h3 id="functionality">Functionality</h3>
<p>The following showcases the core functionality of the module—taking
notes!</p>
<p><img class="pure-img" src="../images/orgmode-prompt/simple-task.gif" alt="capturing a single task"></p>
<p>In case you <em>really</em> don’t want to forget something, there is also the
ability to create <code>DEADLINE</code> and <code>SCHEDULED</code> tasks. Optionally, you can
also specify a <a href="https://orgmode.org/manual/Priorities.html">priority</a>, depending on the importance of the note. If
you add the org file in which the TODOs are placed to the
<code>org-agenda-files</code> variable, then this will immediately show these tasks
in your agenda!</p>
<p><img class="pure-img" src="../images/orgmode-prompt/deadline-task.gif" alt="capturing a deadline"></p>
<p>How exactly one may specify the <code>SCHEDULED</code> and <code>DEADLINE</code> keywords, as
well as a date, time, and priority is covered in detail in the
<a href="https://xmonad.github.io/xmonad-docs/xmonad-contrib/XMonad-Prompt-OrgMode.html">documentation</a> for <code>X.P.OrgMode</code>.</p>
<p>Last but not least, it’s possible to capture the current (primary)
selection and, depending on the type of thing in it, use that as either
the body or the header of the task. If it’s a URL, create a link (i.e.,
it will be of the form <code>[[link][input-text]]</code>); if not, just add the
selection to the body of the note.</p>
<p><img class="pure-img" src="../images/orgmode-prompt/selection-tasks.png" alt="visual representation of the above paragraph, showing various states of notes"></p>
<p>Of course, you can use all of this together as well—directly link to
that one paper or blog post you wanted to read, or that one YouTube
video you want to watch on the weekend!</p>
<h3 id="sample-configuration">Sample configuration</h3>
<p>To round things off—and quickly showcase another cool (and new!)
module, <a href="https://xmonad.github.io/xmonad-docs/xmonad-contrib/XMonad-Actions-Prefix.html">XMonad.Actions.Prefix</a>—here is a sample keybinding that takes
“normal” <code>TODO</code> notes on <code>M-o c</code><a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> and uses the selection when called
with a universal argument:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- uses {-# LANGUAGE LambdaCase #-}</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="ot">orgKey ::</span> (<span class="dt">String</span>, <span class="dt">X</span> ())</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>orgKey <span class="ot">=</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  (<span class="st">&quot;M-o c&quot;</span>, withPrefixArgument <span class="op">$</span> (<span class="ot">`uncurry`</span> orgSettings) <span class="op">.</span> \<span class="kw">case</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>     <span class="dt">Raw</span> _ <span class="ot">-&gt;</span> orgPromptPrimary promptNoHist</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>     _     <span class="ot">-&gt;</span> orgPrompt        promptNoHist)</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a> <span class="kw">where</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>  orgSettings <span class="ot">=</span> (<span class="st">&quot;TODO&quot;</span>, <span class="st">&quot;~/todos.org&quot;</span>)</span></code></pre></div>
<p>I’ve found <code>M-u</code> to be quite convenient for XMonad’s universal argument
key, mirroring the <code>C-u</code> convention from Emacs. In either case, simply
add the <code>usePrefix​Argument</code> combinator somewhere to your <code>main</code> function
and give it your preferred keybinding. For example:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> xmonad</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>     <span class="op">.</span> usePrefixArgument <span class="st">&quot;M-u&quot;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>     <span class="op">$</span> def{ modMask <span class="ot">=</span> mod4Mask  <span class="co">-- use &lt;Super&gt; as mod</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>          }</span></code></pre></div>
<p>If you’re anything like me, this will soon become an integral part of
your workflow and you won’t want to live without it. If not, then
perhaps you still don’t understand what all the fuss is about; in either
case, I’d like to <a href="mailto:mail@tony-zorman.com">hear from you</a>!</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>Version 0.17.0 onwards.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>Note that for this post, <code>M</code> means <code>&lt;Super_L&gt;</code> and not <code>&lt;Alt_L&gt;</code>.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Multiple Replacements with query-replace</title>
    <link href="https://tony-zorman.com/posts/query-replace-many.html" />
    <id>https://tony-zorman.com/posts/query-replace-many.html</id>
    <published>2022-08-06T00:00:00Z</published>
    <updated>2022-08-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2022-08-06
      
      
        &thinsp;·&thinsp; last modified: 2023-03-07
      
      
        &thinsp;·&thinsp; <span title="1022 words">5 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>As its name suggests, Emacs’s <code>query-replace</code> function, bound to <code>M-%</code> by default, can be used to replace occurences of one string with another—and it’s quite good at what it does.
However, there is one crucial feature missing from its default functionality: the ability to create multiple <code>from → to</code> pairs.
But this is Emacs, after all, which means that I can write that <code>query-replace-many</code> function I’ve always wanted, and even share it with others!
The <a href="#the-code">code</a> is packaged as <code>query-replace-many</code>, available on <a href="https://gitlab.com/slotThe/query-replace-many">GitLab</a> and <a href="https://github.com/slotThe/query-replace-many">GitHub</a>.</p>
<!--more-->
<p>I quite like the workflow that <code>query-replace</code> offers. In comparison to
other tools that are used for similar purposes—keyboard macros and
multiple-cursors—the whole process after entering the <code>from</code> and <code>to</code>
strings is interactive all the way through: it’s quite fast to step
through the individual matches and decide whether one would like to
replace them or not. In true Emacs fashion, the function also takes way
too many arguments: among other things, it can operate on the current
region, backwards, or only on things surrounded by words boundaries.</p>
<h2 id="motivation">Motivation</h2>
<p>Originally, my motivation came through <a href="../../research.html">work</a>, where I <a href="./my-phd-workflow.html">write a lot of
LaTeX</a>. When polishing papers, it sometimes happens that I would like
to change or unify the notation of certain objects in the current
equation/environment/file.</p>
<p>When an alteration like this only encompasses a single action, like
switching <code>T</code> to <code>H</code>, a simple <code>query-replace</code> after narrowing to the
current region of interest is totally sufficient. For others, like
changing <code>T</code> to <code>H</code> <em>and</em> <code>S</code> to <code>G</code>, this solution, along with
multiple-cursors and other tools people usually go for, would already be
unsatisfactory—the whole region would need to be traversed twice. Now
imagine that you want to change <code>T</code> to <code>U</code> <em>and</em> <code>U</code> to <code>T</code>: chaos!
Save having to give some sort of temporary name to one of the objects,
which would be even slower, <code>query-replace</code> is quite useless in this
situation. It’s possible to cook up a manual solution using the
alternative <code>query-replace-regexp</code> function and capture groups, but I’m
unsure how many people know their elisp regular expressions well enough
for that to be time efficient. I don’t, and almost certainly never
will, so it seemed much easier to automate this instead!</p>
<h2 id="the-solution">The solution</h2>
<p>Thankfully, since <code>replace.el</code> sports a decent API, writing a version of
<code>query-replace</code> that accepts multiple arguments turns out to be easy
enough. The high-level overview is this: we read in multiple queries
until an empty input is given,<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> build up a regular expression of the
form <code>"\\(?:query-1\\|query-2\\|…\\)"</code>, and—when it comes to
replacing—test the current thing to be replaced against all of the
queries to select the correct one.</p>
<p>The beauty of this is that, since it’s really just a thin wrapper over
two functions from <code>replace.el</code> that do the heavy lifting, all of the
modules regular functionality, like the keybindings and history, just
work.</p>
<p>For example, in the following I replace <code>T</code> with <code>U</code> and, at the same
time, <code>U</code> with <code>T</code>. The first few matches are stepped through and the
rest is just accepted wholesale. At the bottom, you can see the default
<code>query-replace</code> interface when interacting with the query.</p>
<p><img class="pure-img" src="../images/query-replace/query-replace-many.gif" alt="query-replace-many functionality showcase"></p>
<p>The only cosmetic imperfection of this is that, while the replacement
candidate itself is correctly updated, we see the whole regular
expression <code>\(?U:\|T\)</code> as the thing to be replaced instead of the bit
that’s actually matching currently. However, since this would seem to
require some work and one of course sees what’s to be replaced by
looking at the thing at point, I can live with this for the moment.</p>
<h3 id="the-code">The code</h3>
<p>As one might imagine, the code is actually quite straightforward—it only
consists of two functions! The first one is a little helper, querying
the user for multiple pairs.</p>
<pre class="emacs-lisp"><code>(defun query-replace-many--get-queries (&amp;optional pairs)
  &quot;Get multiple `query-replace' pairs from the user.
PAIRS is a list of replacement pairs of the form (FROM . TO).&quot;
  (pcase-let* ((`(,from ,to ,delim ,arg)
                (query-replace-read-args
                 (thread-last
                   (list &quot;Query replace many&quot;
                         (cond ((eq current-prefix-arg '-) &quot;backward&quot;)
                               (current-prefix-arg         &quot;word&quot;))
                         (when (use-region-p) &quot;in region&quot;))
                   (seq-keep #'identity)
                   ((lambda (seq) (mapconcat #'identity seq &quot; &quot;))))
                 nil))                  ; no regexp-flag
               (from-to
                (cons (regexp-quote from)
                      (replace-regexp-in-string &quot;\\\\&quot; &quot;\\\\&quot; to t t))))
    ;; HACK: Since the default suggestion of replace.el will be the last
    ;; one we've entered, an empty string will give us exactly that.
    ;; Instead of trying to fight against this, use it in order to
    ;; signal an exit.
    (if (member from-to pairs)
        (list pairs delim arg)
      (query-replace-many--get-queries (push from-to pairs)))))</code></pre>
<p>The actual <code>query-replace-many</code> function now just reads some pairs from
the user by virtue of the above function, and then calls
<code>perform-replace</code> with an appropriately generated regular expression.</p>
<pre class="emacs-lisp"><code>(defun query-replace-many
    (pairs &amp;optional delimited start end backward region-noncontiguous-p)
  &quot;Like `query-replace', but query for several replacements.
Query for replacement PAIRS until the users enters an empty
string (but see `query-replace-many--get-queries').

The optional arguments DELIMITED, START, END, BACKWARD, and
REGION-NONCONTIGUOUS-P are as in `query-replace' and
`perform-replace', which see.&quot;
  (interactive
   (let ((common (query-replace-many--get-queries)))
     (list (nth 0 common)     (nth 1 common)
           (if (use-region-p) (region-beginning))
           (if (use-region-p) (region-end))
           (nth 2 common)     (if (use-region-p)
                                (region-noncontiguous-p)))))
  (perform-replace
   (concat &quot;\\(?:&quot; (mapconcat #'car pairs &quot;\\|&quot;) &quot;\\)&quot;) ; build query
   (cons (lambda (pairs _count)
           (cl-loop for (from . to) in pairs
                    when (string-match from (match-string 0))
                    return to))
         pairs)
   :query :regexp delimited nil nil start end backward
   region-noncontiguous-p))</code></pre>
<p>And that’s it! As an aside, calling <code>query-replace-many</code> also works
from lisp; <code>(query-replace-many '(("1" . "2") ("2" . "1")))</code> has exactly
the effect one would imagine it to have. As I said, everything is
conveniently packaged up on <a href="https://gitlab.com/slotThe/query-replace-many">GitLab</a> and
<a href="https://github.com/slotThe/query-replace-many">GitHub</a>—get it while it’s hot!</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>This isn’t <em>quite</em> what’s actually done, but it’s the right mental
model to have (since this is how the function behaves). The gory
details are that we use the fact that <code>replace.el</code>’s default
suggestion is always the last query that was entered by the user.
What happens on an empty input is quite deep in the bowels of
<code>query-replace-read-from</code>. Since replacing these massive internal
functions sounds like a real pain, leaning on that functionality
suddenly appears much more reasonable. Thus, when we get back a
query that has already been entered in one way or another, we bail
out.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Calling Emacs from XMonad</title>
    <link href="https://tony-zorman.com/posts/calling-emacs-from-xmonad.html" />
    <id>https://tony-zorman.com/posts/calling-emacs-from-xmonad.html</id>
    <published>2022-05-25T00:00:00Z</published>
    <updated>2022-05-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2022-05-25
      
      
        &thinsp;·&thinsp; last modified: 2023-03-07
      
      
        &thinsp;·&thinsp; <span title="1742 words">7 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>, <a title="All pages tagged 'haskell'." href="/tags/haskell.html" rel="tag">haskell</a>, <a title="All pages tagged 'xmonad'." href="/tags/xmonad.html" rel="tag">xmonad</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>In the post about my <a href="/posts/phd-workflow/2022-05-01-my-phd-workflow.html#citations">research workflow</a>, I briefly mentioned having to
call Emacs—or other external programs—from within XMonad. I figured
that this was perhaps something that could be of use to more people than
just me. After a little bit of deliberation and coming up with a
generic enough API, I decided to turn it into an XMonad module!</p>
<p>These changes now live as part of the <a href="https://github.com/xmonad/xmonad-contrib">xmonad-contrib</a> repository and
are—from version 0.17.1 onwards—available for everyone to try out.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>
I’d like to use this opportunity to both showcase the module—how and why
one would use it—and talk a little bit about its only redeeming
implementation detail.</p>
<!--more-->
<h2 id="main-use-cases">Main use cases</h2>
<p>Wouldn’t it be neat to have some kind of <a href="https://en.wikipedia.org/wiki/Domain-specific_language">EDSL</a> for spawning external
processes? Something where one can just compose Haskell functions
together, not having to worry about the actual underlying string
manipulations? Something that’s composable, so that one does not have
to write the same <code>"emacsclient -c -a '' …"</code> or <code>"alacritty --working-directory …"</code> prefix over and over again? Well, at least
that’s what I thought on some rainy afternoon a few months ago.</p>
<h3 id="scratchpads">Scratchpads</h3>
<p>The first use case that I came up with was <a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Util-NamedScratchpad.html">scratchpad</a>s. The idea of
these things is simple: while we normally don’t like floating windows,
it’s quite convenient to have some of them around that one can bring to
the current workspace, as well as hide, with a single keybinding. This
is useful for things like email, a calendar, a daily agenda, a
calculator, etc.</p>
<p>For scratchpads to work reliably, windows need to have some unique
characteristic they can be recognised by, like a special <a href="https://tronche.com/gui/x/icccm/sec-4.html#WM_CLASS">class or
instance name</a>. Endowing an application with additional properties
sounds exactly like what our EDSL should be good at, so let’s try that!</p>
<p>Using the new features of <code>XMonad.Util.Run</code>, we could spawn an Emacs
frame with a special name for our scratchpad hooks to grab onto, and
execute <code>notmuch</code>:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">mailSession ::</span> <span class="dt">X</span> <span class="dt">String</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>mailSession <span class="ot">=</span> getInput <span class="op">$</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  inEditor <span class="op">&gt;-&gt;</span> setFrameName mailInstName</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>           <span class="op">&gt;-&gt;</span> eval (function <span class="st">&quot;notmuch&quot;</span>)</span></code></pre></div>
<p>You can read the <code>&gt;-&gt;</code> operator a little like a pipe, where you start
with what you want and thread that information through to the end: “I
want an editor with a certain frame name that also starts up notmuch”.</p>
<p>In full, the above function would produce the string (broken into a few
lines for better readability)</p>
<pre><code>&quot;emacsclient -c -a ''
             -F '(quote (name . \&quot;notmuch-scratch\&quot;))'
             --eval '(notmuch)'&quot;</code></pre>
<p>which would be quite bothersome to type indeed.</p>
<p>Because the type of <code>mailSession</code> is <code>X String</code> and not just <code>String</code>,
the setup for this is a little bit different than usual when using
scratchpads. You would use it like this:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">myScratchpads ::</span> <span class="dt">X</span> [<span class="dt">NamedScratchpad</span>]</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>myScratchpads <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- First, get the finished string.</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  mailSession <span class="ot">&lt;-</span> getInput <span class="op">$</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    inEditor <span class="op">&gt;-&gt;</span> setFrameName mailInst <span class="op">&gt;-&gt;</span> eval (elispFun <span class="st">&quot;notmuch&quot;</span>)</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Now we can insert it into our scratchpads as normal.</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>  <span class="fu">pure</span> [ <span class="dt">NS</span> <span class="st">&quot;Mail&quot;</span> mailSession (appName <span class="op">=?</span> mailInst) quake ]</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a> <span class="kw">where</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>  mailInst <span class="ot">=</span> <span class="st">&quot;notmuch-scratch&quot;</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>  quake    <span class="ot">=</span> customFloating <span class="op">$</span> <span class="dt">RationalRect</span> <span class="dv">0</span> <span class="dv">0</span> <span class="dv">1</span> (<span class="dv">4</span> <span class="op">/</span> <span class="dv">5</span>)</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a><span class="co">-- The call to @namedScratchpadManageHook@ in the manageHook also</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a><span class="co">-- needs to be slightly adjusted.</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="ot">myManageHook ::</span> <span class="dt">ManageHook</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>myManageHook <span class="ot">=</span> <span class="fu">mconcat</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>  [ …</span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>  , namedScratchpadManageHook <span class="op">=&lt;&lt;</span> liftX myScratchpads</span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>  ]</span></code></pre></div>
<p>Normally you would also add your <code>myScratchpads</code> list to all calls of
<code>namedScratchpadAction</code>; e.g., when you define the keys to call your
scratchpads. However, since the former lives in <code>X</code> now, this doesn’t
work anymore! Thankfully,
<a href="https://github.com/xmonad/xmonad-contrib/commit/3fc830aa09368dca04df24bf7ec4ac817f2de479">nowadays</a>
the first argument to <code>namedScratchpadAction</code> is actually unused and
only there for backwards compatibility. This means that it’s not
necessary to enter your scratchpads there at all if they are added to
your <code>manageHook</code>. For example, in the following I just provide the empty list:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>  (<span class="st">&quot;M-C-t&quot;</span>, namedScratchpadAction [] <span class="st">&quot;Mail&quot;</span>)</span></code></pre></div>
<p>This works all the same with the above definition of <code>myScratchpads</code>.</p>
<p>A full example of how a scratchpad setup would look using this machinery
can be found in <a href="https://gitlab.com/slotThe/dotfiles/-/blob/master/xmonad/.config/xmonad/src/xmonad.hs#L414">my config</a>.</p>
<h3 id="calling-emacs-in-scripts">Calling Emacs in scripts</h3>
<p>Spawning frames is nice and all, but how about something more
complicated, like Emacs’s batch mode so that we can use it properly in
scripts? No problem at all!</p>
<p>For example, I have the following snippet in my config to get the
currently selected text and call <a href="https://github.com/slotthe/arxiv-citation">arxiv-citation</a> with it to <a href="/posts/phd-workflow/2022-05-01-my-phd-workflow.html#citations">produce a
citation entry in my bibliography
files</a>:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ot">callArXiv ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">X</span> ()</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>callArXiv fun <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  url <span class="ot">&lt;-</span> getSelection  <span class="co">-- from X.U.XSelection</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>  proc <span class="op">$</span> inEmacs</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>     <span class="op">&gt;-&gt;</span> withEmacsLibs [ <span class="dt">ElpaLib</span> <span class="st">&quot;dash&quot;</span>, <span class="dt">ElpaLib</span> <span class="st">&quot;s&quot;</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>                       , <span class="dt">ElpaLib</span> <span class="st">&quot;arxiv-citation&quot;</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>                       , <span class="dt">Special</span> <span class="st">&quot;~/.config/emacs/private-stuff.el&quot;</span> ]</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>     <span class="op">&gt;-&gt;</span> asBatch</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>     <span class="op">&gt;-&gt;</span> eval (progn [require <span class="st">&quot;arxiv-citation&quot;</span>, fun <span class="op">&lt;&gt;</span> asString url])</span></code></pre></div>
<p>When executed, this translates to something like</p>
<pre><code>emacs -L /home/slot/.config/emacs/elpa/dash-20220417.2250
      -L /home/slot/.config/emacs/elpa/s-20210616.619
      -L /home/slot/.config/emacs/elpa/arxiv-citation-20220510.1137/
      --batch
      --eval '(progn
                (require (quote arxiv-citation))
                (arXiv-citation &quot;&lt;url-in-the-primary-selection&gt;&quot;))'</code></pre>
<p>I certainly know which one I’d rather type—especially with ELPA
directory names changing quite frequently! On that note,
<a href="https://github.com/slotthe/arxiv-citation">arxiv-citation</a> is on MELPA now; yay!</p>
<h3 id="other-programs">Other programs</h3>
<p>As this is my main use case for it, the new features of
<code>XMonad.Util.Run</code> are quite specialised for Emacs. However, even for
other programs they may well come in handy. Drawing from the point
about scratchpads again, here is a hypothetical one that spawns a ghci
session:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>  ghci <span class="ot">&lt;-</span> proc <span class="op">$</span> inTerm <span class="op">&gt;-&gt;</span> setXClass calcInstName <span class="op">&gt;-&gt;</span> execute <span class="st">&quot;ghci&quot;</span></span></code></pre></div>
<p>Further, something that’s useful when dealing with <a href="/posts/phd-workflow/2022-05-01-my-phd-workflow.html#topics">topic-based
workspaces</a>
is spawning a terminal or an editor already in the current topic
directory:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">XMonad.Actions.TopicSpace</span>  <span class="co">-- for currentTopicDir and more</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>topicConfig <span class="ot">=</span> …</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="ot">spawnTermInTopic ::</span> <span class="dt">X</span> ()</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>spawnTermInTopic <span class="ot">=</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>  proc <span class="op">$</span> termInDir <span class="op">&gt;-$</span> currentTopicDir topicConfig</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a><span class="co">-- Optionally, modify the path to the editor with a function.</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="ot">spawnEditorInTopic ::</span> (<span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span>) <span class="ot">-&gt;</span> <span class="dt">X</span> ()</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>spawnEditorInTopic with <span class="ot">=</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>  proc <span class="op">$</span> inEditor <span class="op">&gt;-$</span> with <span class="op">&lt;$&gt;</span> currentTopicDir topicConfig</span></code></pre></div>
<p>Quite convenient if you ask me.</p>
<p>If you have or know of a use case you would like to support but which is
awkward with the current set of functions and combinators do not
hesitate to open a pull request or an issue!</p>
<h2 id="implementation-considerations">Implementation considerations</h2>
<p>The implementation is actually very straightforward—no really, check out
the
<a href="https://github.com/xmonad/xmonad-contrib/blob/master/XMonad/Util/Run.hs#L303">source</a>
if you don’t believe me!</p>
<p>One concept that’s still worth touching upon is the internal use of
<a href="https://github.com/spl/dlist#references">difference list</a>s. The basic idea of these things is that, instead of
concatenating strings one by one, we create functions <code>String -&gt; String</code>
and then use function composition to do the work for us:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Ordinary string concatenation</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;string1&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string2&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string3&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string4&quot;</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Using difference lists:</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>  string1, string2, string3,<span class="ot"> string4 ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>  string1 s <span class="ot">=</span> <span class="st">&quot;string1&quot;</span> <span class="op">&lt;&gt;</span> s</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>  string2 s <span class="ot">=</span> …</span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>  string1 <span class="op">.</span> string2 <span class="op">.</span> string3 <span class="op">.</span> string4 <span class="op">$</span> <span class="st">&quot;&quot;</span></span></code></pre></div>
<p>Note how we have to apply the entire thing to <code>""</code> at the end in order
to actually get a string back. As a concrete example, assuming we have
set <code>"Emacs"</code> as our editor, the <code>inEditor</code> function would essentially
be</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="ot">inEditor ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>inEditor s <span class="ot">=</span> <span class="st">&quot; Emacs &quot;</span> <span class="op">&lt;&gt;</span> s</span></code></pre></div>
<p>There are some further considerations to be made, since we are in the
<code>X</code> monad and thus the type is actually <code>X (String -&gt; String)</code> instead
of just <code>String -&gt; String</code>, but that isn’t too important for us here.</p>
<p>Difference lists have some performance advantages over the traditional
concatenation of strings. The concatenation <code>(&lt;&gt;)</code> on strings is left
associative by default and so</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;string1&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string2&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string3&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string4&quot;</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>  ≡ ((<span class="st">&quot;string1&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string2&quot;</span>) <span class="op">&lt;&gt;</span> <span class="st">&quot;string3&quot;</span>) <span class="op">&lt;&gt;</span> <span class="st">&quot;string4&quot;</span></span></code></pre></div>
<p>However, the complexity characteristics of this operation are working
against us here; the definition of <code>(&lt;&gt;)</code> on <code>String</code><a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> is</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="ot">(&lt;&gt;) ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>[]       <span class="op">&lt;&gt;</span> ys <span class="ot">=</span>           ys</span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>(x <span class="op">:</span> xs) <span class="op">&lt;&gt;</span> ys <span class="ot">=</span> x <span class="op">:</span> xs <span class="op">&lt;&gt;</span> ys</span></code></pre></div>
<p>We are merely traversing the first string, leaving the second one
completely untouched (and unevaluated!). All in all, this means that
<code>s₁ &lt;&gt; s₂</code> is in <code>𝓞(|s₁|)</code>; given an expression of the form</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>  ((<span class="st">&quot;string1&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string2&quot;</span>) <span class="op">&lt;&gt;</span> <span class="st">&quot;string3&quot;</span>) <span class="op">&lt;&gt;</span> <span class="st">&quot;string4&quot;</span></span></code></pre></div>
<p>we will have to walk over <code>"string1"</code> three times! What we actually
want is a right-associative ordering—exactly what function compositions
gives us. Spelled out,</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>    string1 <span class="op">.</span> string2 <span class="op">.</span> string3 <span class="op">.</span> string4 <span class="op">$</span> <span class="st">&quot;&quot;</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>  ≡ string1 (string2 (string3 (string4 <span class="st">&quot;&quot;</span>)))</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>  ≡ <span class="st">&quot;string1&quot;</span> <span class="op">&lt;&gt;</span> (<span class="st">&quot;string2&quot;</span> <span class="op">&lt;&gt;</span> (<span class="st">&quot;string3&quot;</span> <span class="op">&lt;&gt;</span> (<span class="st">&quot;string4&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;&quot;</span>)))</span></code></pre></div>
<p>which yields the desired behaviour. In fact, this is so canonical that
instead of using <code>(.)</code>, we could have also—perhaps a bit
confusingly—used <code>(&lt;&gt;)</code> directly:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a>    string1  <span class="op">.</span> string2  <span class="op">.</span> string3  <span class="op">.</span> string4</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>  ≡ string1 <span class="op">&lt;&gt;</span> string2 <span class="op">&lt;&gt;</span> string3 <span class="op">&lt;&gt;</span> string4</span></code></pre></div>
<p>This is the fact that the <em>endomorphisms</em> for any type <code>a</code>—the functions
<code>a -&gt; a</code>—form a <em>monoid</em>. That is to say that they come equipped with
an associative an unital operation: function composition. In Haskell,
<code>(&lt;&gt;)</code> is, in some sense,
<a href="https://www.haskell.org/tutorial/classes.html">overloaded</a> so that it
can be used with any monoidal composition one can think of!<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a></p>
<p>The attentive reader may have concluded that the pipe operator that we
called <code>(&gt;-&gt;)</code> above is really just <code>(&lt;&gt;)</code> in disguise, and that’s
exactly right! I, however, thought that for people not familiar with
Haskell, giving it a pipe-like appearance would be more conceptually
amenable to the threading idea.</p>
<p>I haven’t benchmarked this, so it’s not entirely clear to me whether
performance is actually relevant in this situation<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a>, but using
difference lists just feels right here, and so I did.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I have to say that I’m quite satisfied with this API. In fact, if I
compare it with the old code that only resided within my personal
config, this new version is even a bit more ergonomic in a few places,
despite having essentially no user-specific strings hardcoded anywhere!
As I said before, if you try this and find something missing, do let me
know and we’ll probably find a solution! If you try this and find it
useful, also let me know :)</p>
<p>Of course, technically none of this needs to live only inside your
XMonad config at all. In combination with the excellent <a href="https://hackage.haskell.org/package/turtle">turtle</a>
library, I reckon it would be quite easy to produce Haskell versions of
cool tools like magit.sh.<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a> Go nuts!</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>Alternatively, one could use the git versions of <code>xmonad</code> and
<code>xmonad-contrib</code>; refer to
<a href="https://xmonad.org/INSTALL.html">INSTALL</a> for more information.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>Really, this is the definition of <code>(++)</code> for arbitrary lists <code>[a]</code>
and <code>(&lt;&gt;) = (++)</code> for <code>String = [Char]</code>, but let’s not get into
that here.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>Really, for any <em>semigroup</em>, which is a slightly weaker notion of
an operation that is merely associative, but doesn’t necessarily
have a unit.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>I suspect that the answer is “probably not”—that didn’t stop me,
however!<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>Available <a href="https://github.com/alphapapa/magit.sh">here</a>. I also
maintain a slightly modified and POSIX shell compatible version
<a href="https://gitlab.com/slotThe/dotfiles/-/blob/master/scripts/.scripts/magit.sh">here</a>.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>
<entry>
    <title>My PhD Research Workflow</title>
    <link href="https://tony-zorman.com/posts/my-phd-workflow.html" />
    <id>https://tony-zorman.com/posts/my-phd-workflow.html</id>
    <published>2022-05-01T00:00:00Z</published>
    <updated>2022-05-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <p class="header">
      
        Posted on 2022-05-01
      
      
        &thinsp;·&thinsp; last modified: 2022-05-23
      
      
        &thinsp;·&thinsp; <span title="2284 words">10 min read</span> &thinsp;·&nbsp;
      
      
        <a title="All pages tagged 'emacs'." href="/tags/emacs.html" rel="tag">emacs</a>, <a title="All pages tagged 'maths'." href="/tags/maths.html" rel="tag">maths</a>, <a title="All pages tagged 'xmonad'." href="/tags/xmonad.html" rel="tag">xmonad</a>
      
    </p>
    <section>
      <!-- A table of contents inline in the text, in case the screen is
           too small for the one in the `default.html' template -->
      <!-- A table of contents inline in the text, in case the screen is too
     small for the one in the `default.html' template -->

  

<div>
  <p>After reading <a href="https://castel.dev/post/research-workflow/">Gilles Castel</a>’s excellent blog post about his research
workflow, I decided that it was as good a time as any to write about
mine—deeming it novel enough to hopefully contribute something to the
discussion.</p>
<p>Just like Castel, I’m a new PhD student in mathematics, which means no
lab work and—in my case—no code. Just you and your inability to
understand basic concepts. As such, I often scribble things down on
paper or a blackboard first and, when sufficiently convinced that the
information is worth keeping around, type it up. Typesetting something
is a surprisingly effective way to catch errors in handwritten
manuscripts!</p>
<p>As basically my entire digital life happens in either <a href="https://www.gnu.org/software/emacs/">Emacs</a> or
<a href="https://xmonad.org/">XMonad</a>, my setup is heavily skewed in that direction; I will make use
of these tools almost every step of the way.
<!--more-->
As such, there is a lot of tangential almost relevant bits that I could
cover here. However, since these aren’t directly related to my
<em>research</em> workflow—and there is a lot of great resources out there
already—I decided to not do this here.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></p>
<h2 id="high-level-structure">High level structure</h2>
<h3 id="topics">Topics</h3>
<p>XMonad has a module called <a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Actions-TopicSpace.html">TopicSpace</a>, which upgrades the X11
workspace—virtual desktop—concept to so-called topics. These are
workspaces with a “theme” associated to them; for example, I have a
topic for every project that I’m currently working on. This results in
a clean separation of concerns. Plus, I always know where my windows
are!</p>
<p>Every topic has a directory and a “startup hook”, firing when the topic
is switched to and empty, associated to it. While most convenient for
programming related tasks—e.g., spawn <code>ghcid</code> in the relevant directory
or automatically build and open this website—it’s also quite convenient
for mathematical projects.</p>
<p>I have set up special keybindings to bring up an Emacs session in the
topic directory, or spawn a terminal there. Switching to topics is done
fuzzily via the XMonad prompt, which means I only have to type a few
characters to get to my destination. This makes it feasible to have 30
topics, instead of the usual 9 or so, in the first place. As a result,
it’s rather fast to go from thinking about a certain problem to working
on it. When I’m already inside a project, I leverage Emacs’s built-in
<code>project.el</code> library to search through files and the like.</p>
<p><img class="pure-img" src="../images/phd-workflow/topics.gif" alt="Navigation example"></p>
<h3 id="files">Files</h3>
<p>Here I keep things relatively simple; I have a big “library” directory
in which essentially all books or papers that I’ve ever read reside.
This may sound a bit chaotic, but since I never interact with this
as-a-directory it is actually the easiest and cleanest solution for me.</p>
<p>To keep a bit of order, all files are named in a consistent and
descriptive way: <code>authors_title.pdf</code>, where <code>authors</code> is a list of last
names of all authors separated by hyphens and <code>title</code> is the title of
the work, also separated by hyphens. For example:</p>
<pre><code>    pastro-street_double-of-a-monoidal-category.pdf</code></pre>
<p>Also in this directory are <code>.xopp</code> files, when I scribble on the
relevant PDFs in <a href="https://xournalpp.github.io/">xournalpp</a>; more on that later.</p>
<p>Instead of navigating to it, all interaction with the library is done
via <a href="https://github.com/slotthe/hmenu">hmenu</a>, a small wrapper around <a href="https://tools.suckless.org/dmenu/">dmenu</a> to facilitate this kind of
behaviour. I merely have to press <code>M-y</code><a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> and can then fuzzy search
through the directory. Once I’ve made a choice, PDFs are automatically
opened in <a href="https://pwmt.org/projects/zathura/">zathura</a> and <code>.xopp</code> files are opened in xournalpp.</p>
<p><img class="pure-img" src="../images/phd-workflow/hmenu.gif" alt="example hmenu usage"></p>
<p>My bibliography is organised in a similar spirit; see
<a href="#citations">Citations</a>.</p>
<h2 id="note-taking">Note taking</h2>
<h3 id="handwritten-notes">Handwritten notes</h3>
<p>For handwritten notes I… use real paper! A little elaboration is
probably in order, having talked about <code>.xopp</code> files and xournalpp
above. I do have a Wacom tablet lying around and I’m quite happy
annotating PDFs with it. In lieu of printing everything out, this
alleviates a little bit of the usual pain with reading papers, like
coming back to one three weeks later and getting stuck on the same
calculation as last time. I do love those annotations!</p>
<p>However, there is just something deeply psychologically pleasing about
ordinary pen and paper—nothing beats drawing up the first version of
many ideas there. It’s a very “pure” experience: there’s no noise or
distractions, nothing that could break, no additional layer of
abstraction between you and the maths. Chalkboards—but not whiteboards,
with their ever empty markers—fall into this category as well,
especially when collaborating with others.</p>
<p>Not without my quirks (as I’m sure you’ve noticed), I’m a bit picky
about the particular writing setup. It’s either completely white A5<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>
paper, paired with a good (mechanical) pencil/a fine pen, or thick
dotted paper, paired with a fountain pen.</p>
<p>Quite enjoying the experience, I tend to write quite a lot of
manuscripts by hand first. Of course, anything that’s supposed to be
permanent should be typed up properly!</p>
<h3 id="digital-notes">Digital notes</h3>
<p>Not wanting to go insane, I use LaTeX for all of my digital note taking.
My writing setup for <code>.tex</code> files is pretty similar to <a href="https://karthinks.com/software/latex-input-for-impatient-scholars/">Karthik
Chikmagalur</a>’s—whose excellent post you should definitely check out—so I
will not belabour the point too much here. The tl;dr is <a href="https://www.gnu.org/software/auctex/">AUCTeX</a>,
<a href="https://github.com/cdominik/cdlatex">CDLaTeX</a>, and <a href="https://github.com/ymarco/auto-activating-snippets">aas</a>.</p>
<p><img class="pure-img" src="../images/phd-workflow/input.gif" alt="LaTeX input example"></p>
<p>In case you’re not used to <code>prettify-symbols-mode</code>: the inserted LaTeX
code was</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">\begin</span>{<span class="ex">definition</span>} <span class="kw">\label</span>{<span class="ex">def:day-convolution</span>}</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  The <span class="fu">\emph</span>{Day convolution} of two functors <span class="ss">$F$</span> and <span class="ss">$G$</span> is</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  <span class="ss">\[</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="ss">    F * G </span><span class="sc">\defeq</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="ss">      </span><span class="sc">\int</span><span class="ss">^{C,D </span><span class="sc">\in</span><span class="ss"> </span><span class="sc">\cc</span><span class="ss">} </span><span class="sc">\cc</span><span class="ss">(C </span><span class="sc">\otimes</span><span class="ss"> D, </span><span class="sc">\blank</span><span class="ss">) </span><span class="sc">\otimes</span><span class="ss"> FC </span><span class="sc">\otimes</span><span class="ss"> GD.</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="ss">  \]</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="kw">\end</span>{<span class="ex">definition</span>}</span></code></pre></div>
<p>I do use some smaller packages not mentioned in Chikmagalur’s article,
like <a href="https://github.com/oantolin/math-delimiters">math-delimiters</a> and <a href="https://github.com/slotthe/change-env">latex-change-env</a>. The former is for
quickly changing between inline and display math, complete with slurping
punctuation symbols into display math and barfing them out of inline
math. For example, “<code>$1 + 1$.</code>” becomes “<code>\[1 + 1.\]</code>” (with line
breaks) and back.</p>
<p>The <code>latex-change-env</code> package is for changing between different kinds
of environments, including display math, while offering to rename labels
across the project if necessary. When deleting a label from an
environment, it also remembers this for the session!<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a></p>
<p><img class="pure-img" src="../images/phd-workflow/label-renaming.gif" alt="latex-change-env showcase"></p>
<p>One neat feature of AUCTeX that I find myself using more and more often
lately is the in-buffer preview.<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a> Usually when writing a draft I’m
not that interested in how exactly something looks in the PDF—that part
comes later, believe me. In cases like these, just calling
<code>preview-buffer</code> is quite convenient and lets me use the screen real
estate that a PDF viewer would have taken up for something else.</p>
<p><img class="pure-img" src="../images/phd-workflow/preview.gif" alt="latex-preview showcase"></p>
<p>I always use pure LaTeX for writing papers, drafts, or presentations.
However, I also take lots of notes in <a href="https://orgmode.org/">org-mode</a>, which, as a crude
first approximation, is something like a markup language that’s <em>very</em>
well integrated into Emacs.</p>
<p>For the actual note-taking, I use the venerable <a href="https://www.orgroam.com/">org-roam</a>—a free
software alternative to the proprietary Roam Research program—to jot
down things that I’d like to remember for more than three days.
Org-roam describes itself as a “plain-text personal knowledge management
system”, which fits the bill pretty well. In short, it’s a note taking
system in the spirit of the <a href="https://en.wikipedia.org/wiki/zettelkasten">Zettelkasten</a> method, which is essentially
about having lots of notes with lots of backlinks to related concepts:</p>
<p><img class="pure-img" src="../images/phd-workflow/backlinks.png" alt="org-roam showcase"></p>
<p>In fact, using <a href="https://github.com/org-roam/org-roam-ui">org-roam-ui</a>, one can even visualise the entire
Zettelkasten as an interactive and pretty graph in which notes become
nodes and backlinks become edges!</p>
<div class="pure-g">
<div class="pure-u-1-2">
<img class="pure-img" src="../images/phd-workflow/org-roam-ui-close.png" alt="org-roam-ui example zoomed-in">
</div>
<div class="pure-u-1-2">
<img class="pure-img" src="../images/phd-workflow/org-roam-ui-far.png" alt="org-roam-ui example zoomed-out">
</div>
</div>
<p>Org-roam <a href="https://github.com/org-roam/org-roam#configuration">suggests
keybindings</a> for all
of the most important concepts: creating notes, inserting them, showing
all of the backlinks of a file, etc. An important extra that I’ve added
is having two “types” of notes: <code>reference</code>s, where things that I
learned but are otherwise known reside, and <code>novel</code>s, where I put my own
ideas.</p>
<p>As I’m predisposed to quite easily forget details, I regularly engage
with my Zettelkasten, so as to keep things fresh in my mind. Reading
through all of the notes that are relevant to what I’m currently working
on, creating new backlinks, filling in gaps, even deleting old
information and re-organising some local region of the graph. Indeed, I
tag every new entry as a <code>draft</code> until further notice, forcing me to go
back there especially. This results in pretty good recollection of the
most important facts, even with my brain.</p>
<h2 id="staying-up-to-date">Staying up to date</h2>
<p>I use <a href="https://github.com/skeeto/elfeed">elfeed</a> to query the <a href="https://arxiv.org/">arXiv</a> for new preprints that are of
interest to me. Thankfully, the fields I’m subscribed to tend to be
moving slow-ish and so I can manage to at least read the abstract of
every paper that pops up in my feed. There is also <a href="https://gitlab.com/slotThe/dotfiles/-/blob/afa8fd39cea2647152038e3f4dd42f1dbd66c413/emacs/.config/emacs/lisp/rss.el#L61">a little bit of
elisp</a>
involved to print arXiv entries in a more readable way than the default
formatting.</p>
<p>When the abstract interests me, I usually directly download the paper
into my library and open it with zathura. This is fully automated via
<a href="https://github.com/slotthe/arxiv-citation">arxiv-citation</a>—more on that later. I merely have to press <code>C-c d</code>
while looking at a paper and magic happens!</p>
<p><img class="pure-img" src="../images/phd-workflow/elfeed.gif" alt="elfeed showcase"></p>
<p>In the above gif, on the right-hand side you can see a score associated
to each entry. While reading every abstract has worked quite well for
me thus far, it’s nice to get the papers that are “probably interesting”
high up, so that I’m more likely to notice them sooner rather than
later. I use <a href="https://github.com/sp1ff/elfeed-score">elfeed-score</a> for this, which integrates seamlessly into
the rest of the machinery. It compares certain features of the entry
(like the title and abstract) with a list of regular expressions,
increasing the total score of the entry every time it matches something.</p>
<p>Speaking of the arXiv, in XMonad I have bound <code>M-s a</code> to look up the
given string there. Likewise, <a href="https://zbmath.org/">zbmath</a> is searched with <code>M-s z</code>. When
these commands get a “universal argument”—an Emacs concept that XMonad
borrowed—they automatically start a search with the current selection
instead. Briefly, pressing <code>M-u</code> before a command can modify it in
different ways. All of my search commands act on the <a href="https://www.jwz.org/doc/x-cut-and-paste.html">primary
selection</a> when given such an argument; <code>M-u M-s &lt;letter&gt;</code> will look up
the currently selected text on the relevant “search engine”. One
instance where this is useful is for quickly switching between the arXiv
and zbmath:</p>
<p><img class="pure-img" src="../images/phd-workflow/selected-search.gif" alt="XMonad.Actions.Search showcase"></p>
<h3 id="citations">Citations</h3>
<p>For citation management, I use a very simple system—no Zotero, JabRef,
or similar technology. Concretely, this means that I have a blessed
bibliography file somewhere within my home directory and I either
symlink (when I’m writing something alone) or copy (when working with at
least one coauthor) the file into the relevant project directory. In
case of a copy operation, I only have to update a single variable in
Emacs (<code>arxiv-citation-bibtex-files</code>), which is good enough for me and
doesn’t seem to warrant a slightly more automated, yet probably much
more complicated solution.</p>
<p>Adding new citations is done via the now aptly named Emacs package
<a href="https://github.com/slotthe/arxiv-citation">arxiv-citation</a><a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a> with <a href="https://gitlab.com/slotThe/dotfiles/-/blob/afa8fd39cea2647152038e3f4dd42f1dbd66c413/xmonad/.config/xmonad/src/xmonad.hs#L576">a bit of
plumbing</a>
on the XMonad side to get Emacs going. The basic idea is that—given an
arXiv or zbmath link—we first look up the paper on zbmath to see if it
was published and, if not, just use the arXiv data to construct our own
bibliography entry instead. By default, my keybinding for this acts on
the primary selection, so I merely have to highlight the link, press
<code>M-o a</code>, sit back, and enjoy the show. The following gif should help
drive home the point, also showcasing the format of a not yet published
paper and a published one.</p>
<p><img class="pure-img" src="../images/phd-workflow/arXiv-citation.gif" alt="arXiv-citation showcase"></p>
<h2 id="final-thoughts">Final thoughts</h2>
<p>And that’s it! If nothing else, this post helped me to nail down some
ideas that I had lying around and got me to finally clean up and publish
many of the extensions talked about here—that’s already a win in my
book.</p>
<p>I’m sure that some details will change over the course of the next three
years as I mature mathematically and my needs change, but overall I feel
pretty comfortable with this setup.</p>
<h5 id="addendum">Addendum</h5>
<p>Thanks to everyone who reached out! I received some inquiries as to my
configurations, so here are the most important bits again, for your
convenience:
<a href="https://gitlab.com/slotThe/dotfiles/-/tree/master/emacs">my Emacs config</a>,
<a href="https://gitlab.com/slotThe/dotfiles/-/tree/master/xmonad">my XMonad config</a>,
<a href="https://www.orgroam.com/">org-roam</a>, <a href="https://github.com/oantolin/math-delimiters">math-delimiters</a>, <a href="https://github.com/slotthe/arxiv-citation">arxiv-citation</a>, <a href="https://github.com/slotthe/change-env">latex-change-env</a>,
<a href="https://github.com/slotthe/hmenu">hmenu</a>.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>If you’d like some examples: being employed at a university also
means I have to worry a bit about efficiently dealing with
bureaucracy (<a href="https://notmuchmail.org/">notmuch.el</a>), keeping some sort of up-to-date
calendar and readable todo-notes (<a href="https://orgmode.org/">org-mode</a> and goodies, as well
as integration via <a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Prompt-OrgMode.html">XMonad’s OrgMode prompt</a>), accessing the
universities internal nextcloud server (<a href="https://gitlab.com/hperrey/khalel">khalel</a> and <code>davfs2</code> or
<code>TRAMP</code>), … You get the idea.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>I will be using Emacs style notation throughout the article. This
means that, for example, <code>C-x a</code> should be read as “hold down
control and press x, then release both and press a”. You can of
course safely ignore this, since the keys just serve illustrative
purposes. An important note for Emacs users, lest anyone be
confused: in XMonad, <code>M-</code> usually does <strong>not</strong> refer to the Meta
key, but to the <code>modMask</code> that the user specified. This is indeed
<code>&lt;Alt&gt;</code> by default, but many people understandably rebind this
straight away to something that’s less likely to interfere with
other programs. In my case, that’s the Super key, so <code>M-s</code> means
<code>&lt;Super&gt;-s</code> and not <code>&lt;Alt&gt;-s</code>.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>Although, admittedly, when drawing up large diagrams I’m sometimes
forced to switch to A4 paper in landscape mode.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>This is based on the hash of the contents of the environment—if
that changes, the label is “lost”; though it can of course still
be retrieved manually from the relevant hash map.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>This is, in part, due to the new <code>pixel-scroll-precision-mode</code> in
Emacs 29, making use of XInput 2.4 functionality. It makes
scrolling through buffers that are quite dense with pictures
rather smooth.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6"><p>Ostensibly, this should be an XMonad module, as it does not
necessarily have anything to do with Emacs itself. However, I had
already written the elfeed integration and so the most annoying
part (scraping the arXiv xml for certain bits) was already done.
On the other hand, there are more Emacs than XMonad users, so
perhaps doing it like this will help more people anyways.<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</div>

      <!-- Body is included in the above file -->
    </section>
    
</article>
]]></summary>
</entry>

</feed>
